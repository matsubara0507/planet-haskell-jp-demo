<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title type="text">Planet Haskell (JP)</title><id>https://matsubara0507.github.io/planet-haskell-jp-demo/feed.xml</id><updated>2020-02-08T14:12:33+09:00</updated><link href="https://matsubara0507.github.io/planet-haskell-jp-demo"/><entry><id>http://hiratara.hatenadiary.jp/entry/2020/02/08/141129</id><title type="text">標準入力の一行の上限は4,096バイト</title><updated>2020-02-08T14:12:33+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2020/02/08/141129"/><summary type="html">標準入力の一行に大量の文字を食わせると、4,096バイトしか有効にならない。 $ perl -e 'print "x" x 5000, "\n" for 1 .. 2' | clip.exe $ perl -e 'print length &lt;&gt;, "\n" for 1 .. 3' xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2020/02/05/231811</id><title type="text">rustでdiscordのbotを作ってみたくて下調べ(3)</title><updated>2020-02-05T23:19:13+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2020/02/05/231811"/><summary type="html">前回からだいぶ時間が空いたが、下調べの続き。 discord-rs というのを最初に見つけて古いと嘆いていたのだが、現在使われているクレートは serenity の方だったようだ。これを検索で見つけるのは至難の業。 discord で検索すると、他の関係ないクレートがガンガン引っかかってしまうので（恐らく、いろいろなクレートでサポート用の discord チャネルがあるため）。 serenity は非常に重厚なクレートで、 discord.py に設計思想が近い。 #[command] マクロを使うことで、簡単に bot コマンドを作ることができる。これは framework feature …</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/11/20/GHC_%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89_%E6%A6%82%E8%A6%B3_%E3%81%A8_PowerShell</id><title type="text">GHC 環境構築 概観 と PowerShell</title><updated>2020-01-27T09:06:24+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/11/20/GHC_%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89_%E6%A6%82%E8%A6%B3_%E3%81%A8_PowerShell"/><summary type="html">Haskell の開発環境を構築する方法は何通りかあり、新しいツールが出ると「今はこれだ」とほめるブログも公開されますがそれが初学者を混乱させることがよくあります。 本記事ではビルドツールのインストールにしぼり、開発支援、例えば ghc-mod・haskell-ide-engine・hhp には言及しません。 いくつか典型的な構築方法を確認した後、新たに私が作成したツールを紹介しより初学者を混乱に落とし入れます。 重鎮 Haskell Platform www.haskell.org Haskell 解説書史1の第1波から第3波までのデファクトスタンダードであった重鎮 Haskell Plat…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2018/04/10/100000</id><title type="text">バイナリエディタを作りました！</title><updated>2020-01-25T19:17:58+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2018/04/10/100000"/><summary type="html">バイナリエディタを作りました。 インストールはHomebrew brew install itchyny/tap/bed または以下のコマンドでできます。 go get github.com/itchyny/bed/cmd/bed なぜ作ったのか 私は昔からファイルフォーマットに興味があり、画像ファイルやPDFファイルのフォーマットを調べるのが好きでした。 最近も圧縮ファイルのフォーマットを趣味で調べたりしています。 コンパイラ技術にも興味があり、ゆくゆくは実行ファイルを生成したりしたいなという思いもあります。 バイナリファイルをエディットするにはバイナリエディタが必要となるわけですが、自分の…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/01/cygwin-cygwin.html</id><title type="text">[cygwin] cygwinセットアップ・環境構築手順メモ</title><updated>2020-01-20T11:46:31.459+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/01/cygwin-cygwin.html"/><summary type="text">

主に自分向けの防備録です。windows10上で確認。インストーラーはここからDLする。





&lt;&lt;設定&gt;&gt;

ssh-agentの重複起動を防ぐ


ユーザーのアカウント名、ホームディレクトリの変更



/etc/passwdを編集する（最新バージョンでは自動生成されない？）
Cygwinを移動したら/etc/passwdの再生成を
巨大ドメインに参加している PC での /etc/passwd, /etc/group ファイルのつくりかた 

ssh-agentのために秘密鍵セットアップ



~/.ssh/


※group/otherの権限を削除する必要がある

% chmod 700 ~/.ssh 


less, lv, manコマンド終了時に画面をクリアしない

[linux][cygwin] less, manの終了直前の画面をクリアしないで端末上に残す方法 
</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2020/01/10/100000</id><title type="text">ファイルをエディターで一括リネームするツールをGo言語で作った！ ― 機能を増やさない信念と、OSSとの付き合い方</title><updated>2020-01-10T10:00:09+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2020/01/10/100000"/><summary type="html">ファイルを一括でリネームしたいことはありませんか。私はあります。ということで作りました。 インストールはHomebrew brew install itchyny/tap/mmv または以下のコマンドでできます。 go get github.com/itchyny/mmv/cmd/mmv スクリーンショットではvimが起動していますが、 $EDITOR が設定されていればそれを使って編集することができます。 エディターでファイル名を編集して一括でリネームするというのは、新しい発想ではありません。 実際、多くのソフトウェア (特にファイラー) がこの機能を実装しています。 massren vim…</summary></entry><entry><id>https://matsubara0507.github.io/posts/2020-01-08-calc-ssh-pubkey-fingerprint-with-haskell.html</id><title type="text">Haskell で SSH Public Key の FingerPrint を計算する</title><updated>2020-01-08T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2020-01-08-calc-ssh-pubkey-fingerprint-with-haskell.html"/><summary type="html">&lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;GitHub に登録している Public Key から &lt;code&gt;~/.ssh/authorized_key&lt;/code&gt; を生成する簡易的な CLI ツールを作ろうと考えた． そして，Public Key をフィルタリングするために &lt;code&gt;https://github.com/settings/keys&lt;/code&gt; で参照できる FingerPrint を使おうと考えたが，その場合は GitHub API で取得した Public Key から FingerPrint をプログラム側で計算しないといけない．&lt;/p&gt;
&lt;p&gt;もちろん，&lt;code&gt;ssh-keygen -l -E md5 -f ssh_host_ecdsa_key.pub&lt;/code&gt; なんかで生成できるのだが可能なら素の Haskell プログラムでやりたいなと考えた． ということで，本記事はタイトルの通り Haskell で SSH Public Key の FingerPrint を計算することになったので，そのために色々調べたメモ書き．&lt;/p&gt;
&lt;h2 id="fingerprint"&gt;FingerPrint&lt;/h2&gt;
&lt;p&gt;そもそもどういうアルゴリズムで出しているのか． ちょうど良い記事があった，ありがたい:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/hotpepsi/items/128f3a660cee8b5467c6"&gt;RSA公開鍵のファイル形式とfingerprint - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要するに Base64 デコードして MD5 ハッシュをかければ良いようだ（本来は SHA256 の方が良いっぽいけど）． 上記記事では Base64 デコードしてできた &lt;a href="https://www.ietf.org/rfc/rfc4253.txt"&gt;RFC4253&lt;/a&gt; の中身まで説明してくれており，最後の Ruby プログラムではバイナリをちゃんと読んだ上で FingerPrint を計算している．&lt;/p&gt;
&lt;p&gt;単純に RSA 形式の Public Key の FingerPrint を計算するだけならそこまでしなくて良さそうだ．&lt;/p&gt;
&lt;h2 id="haskell-で計算する"&gt;Haskell で計算する&lt;/h2&gt;
&lt;p&gt;上述の通りやることは2つ&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Base64 デコード&lt;/li&gt;
&lt;li&gt;MD5 ハッシュ化&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;あとその前に header と body を切り分ける．&lt;/p&gt;
&lt;p&gt;ちなみに，最終的なコードは &lt;a href="https://github.com/haskell-jp/playground/pull/1"&gt;haskell-jp/playground&lt;/a&gt; においた．&lt;/p&gt;
&lt;h3 id="header-と-body-を切り分ける"&gt;header と body を切り分ける&lt;/h3&gt;
&lt;p&gt;RSA の Public Key は &lt;code&gt;ssh-rsa AAAAXXX...&lt;/code&gt; となっている（&lt;code&gt;X&lt;/code&gt; 以降は適当）． 欲しいのは空白よりあとだけなので，まずはそこを切り出す（ついでにバリデーションする）． 後々楽なので全部 &lt;code&gt;ByteString&lt;/code&gt; を使うことにする:&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb1-1"&gt;&lt;a href="#cb1-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Data.ByteString&lt;/span&gt; (&lt;span class="dt"&gt;ByteString&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb1-2"&gt;&lt;a href="#cb1-2"&gt;&lt;/a&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="kw"&gt;qualified&lt;/span&gt; &lt;span class="dt"&gt;Data.ByteString&lt;/span&gt; &lt;span class="kw"&gt;as&lt;/span&gt; &lt;span class="dt"&gt;B&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-3"&gt;&lt;a href="#cb1-3"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb1-4"&gt;&lt;a href="#cb1-4"&gt;&lt;/a&gt;&lt;span class="ot"&gt;pubkeyBody ::&lt;/span&gt; &lt;span class="dt"&gt;ByteString&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;ByteString&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-5"&gt;&lt;a href="#cb1-5"&gt;&lt;/a&gt;pubkeyBody content &lt;span class="ot"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-6"&gt;&lt;a href="#cb1-6"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;case&lt;/span&gt; B.split &lt;span class="dv"&gt;32&lt;/span&gt; content &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-7"&gt;&lt;a href="#cb1-7"&gt;&lt;/a&gt;    [header, body] &lt;span class="op"&gt;|&lt;/span&gt; header &lt;span class="op"&gt;==&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;ssh-rsa&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;AAAA&amp;quot;&lt;/span&gt; &lt;span class="ot"&gt;`B.isPrefixOf`&lt;/span&gt; body &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-8"&gt;&lt;a href="#cb1-8"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;Just&lt;/span&gt; body&lt;/span&gt;
&lt;span id="cb1-9"&gt;&lt;a href="#cb1-9"&gt;&lt;/a&gt;    _ &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-10"&gt;&lt;a href="#cb1-10"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Word8&lt;/code&gt; 型の &lt;code&gt;32&lt;/code&gt; は空白．&lt;/p&gt;
&lt;h3 id="base64-デコード"&gt;Base64 デコード&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://hackage.haskell.org/package/memory"&gt;memory&lt;/a&gt; というパッケージを使う． なぜかというと，この後で使うあらゆる暗号アルゴリズムを詰め込んだ &lt;a href="http://hackage.haskell.org/package/cryptonite"&gt;cryptonite&lt;/a&gt; というパッケージがこれに依存していたからだ． cryptonite に習って Base64 デコードするとこんな感じだ（ついでにバリデーションする）:&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb2-1"&gt;&lt;a href="#cb2-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- これが memory パッケージのモジュール&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-2"&gt;&lt;a href="#cb2-2"&gt;&lt;/a&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Data.ByteArray.Encoding&lt;/span&gt; (&lt;span class="dt"&gt;Base&lt;/span&gt; (&lt;span class="dt"&gt;Base64&lt;/span&gt;), convertFromBase)&lt;/span&gt;
&lt;span id="cb2-3"&gt;&lt;a href="#cb2-3"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-4"&gt;&lt;a href="#cb2-4"&gt;&lt;/a&gt;&lt;span class="ot"&gt;decode ::&lt;/span&gt; &lt;span class="dt"&gt;ByteString&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;ByteString&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-5"&gt;&lt;a href="#cb2-5"&gt;&lt;/a&gt;decode body &lt;span class="ot"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-6"&gt;&lt;a href="#cb2-6"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;case&lt;/span&gt; convertFromBase &lt;span class="dt"&gt;Base64&lt;/span&gt; body &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-7"&gt;&lt;a href="#cb2-7"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Right&lt;/span&gt; bin &lt;span class="op"&gt;|&lt;/span&gt; prefix &lt;span class="ot"&gt;`B.isPrefixOf`&lt;/span&gt; bin &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-8"&gt;&lt;a href="#cb2-8"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;Just&lt;/span&gt; bin&lt;/span&gt;
&lt;span id="cb2-9"&gt;&lt;a href="#cb2-9"&gt;&lt;/a&gt;    _ &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-10"&gt;&lt;a href="#cb2-10"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-11"&gt;&lt;a href="#cb2-11"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-12"&gt;&lt;a href="#cb2-12"&gt;&lt;/a&gt;    &lt;span class="co"&gt;-- \x00 \x00 \x00 \x07 ssh-rsa (00000007 というのは ssh-rsa の長さ)&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-13"&gt;&lt;a href="#cb2-13"&gt;&lt;/a&gt;    prefix &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;\NUL\NUL\NUL\assh-rsa&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="md5-ハッシュ化"&gt;MD5 ハッシュ化&lt;/h3&gt;
&lt;p&gt;上述の通り，cryptonite というのを用いる． ちなみにこれらのパッケージについては &lt;a href="https://www.fpcomplete.com/blog/2017/09/cryptographic-hashing-haskell"&gt;Cryptographic Hashing in Haskell - FPComplete&lt;/a&gt; で紹介されてる(&lt;a href="https://haskell.e-bigmoon.com/posts/2017/09-18-cryptographic-hashing-haskell.html"&gt;邦訳記事&lt;/a&gt;)． 2017年と少し古い記事だが，このパッケージは今でも精力的にメンテナンスがされており，また個人ではなくチーム(&lt;a href="https://github.com/haskell-crypto"&gt;Haskell Crypto&lt;/a&gt;)で管理している点から信頼できるかなと考えた（暗号系のパッケージは結構シビアだから）．&lt;/p&gt;
&lt;p&gt;このパッケージで何らかのハッシュ関数を利用するには &lt;code&gt;Crypto.Hash.hash&lt;/code&gt; 関数を利用すれば良い． アルゴリズム（MD5 か SHA256 かなど）は返り値の型を明示することで指定できる． 今回の場合は &lt;code&gt;Digest MD5&lt;/code&gt; 型とすれば良い:&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb3-1"&gt;&lt;a href="#cb3-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Crypto.Hash&lt;/span&gt; (&lt;span class="dt"&gt;Digest&lt;/span&gt;, &lt;span class="dt"&gt;MD5&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb3-2"&gt;&lt;a href="#cb3-2"&gt;&lt;/a&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="kw"&gt;qualified&lt;/span&gt; &lt;span class="dt"&gt;Crypto.Hash&lt;/span&gt; &lt;span class="kw"&gt;as&lt;/span&gt; &lt;span class="dt"&gt;Crypto&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-3"&gt;&lt;a href="#cb3-3"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-4"&gt;&lt;a href="#cb3-4"&gt;&lt;/a&gt;&lt;span class="ot"&gt;fingerprint ::&lt;/span&gt; &lt;span class="dt"&gt;ByteString&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; (&lt;span class="dt"&gt;Digest&lt;/span&gt; &lt;span class="dt"&gt;MD5&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb3-5"&gt;&lt;a href="#cb3-5"&gt;&lt;/a&gt;fingerprint content &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-6"&gt;&lt;a href="#cb3-6"&gt;&lt;/a&gt;  body &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; pubkeyBody content&lt;/span&gt;
&lt;span id="cb3-7"&gt;&lt;a href="#cb3-7"&gt;&lt;/a&gt;  bin  &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; decode body&lt;/span&gt;
&lt;span id="cb3-8"&gt;&lt;a href="#cb3-8"&gt;&lt;/a&gt;  &lt;span class="fu"&gt;pure&lt;/span&gt; &lt;span class="op"&gt;$&lt;/span&gt; Crypto.hash bin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="試す"&gt;試す&lt;/h2&gt;
&lt;p&gt;GHCi で適当に:&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb4-1"&gt;&lt;a href="#cb4-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="op"&gt;:&lt;/span&gt;set &lt;span class="op"&gt;-&lt;/span&gt;&lt;span class="dt"&gt;XOverloadedString&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-2"&gt;&lt;a href="#cb4-2"&gt;&lt;/a&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Crypto.SSH.PubKey&lt;/span&gt;      &lt;span class="co"&gt;-- 今まで定義してた関数のモジュール&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-3"&gt;&lt;a href="#cb4-3"&gt;&lt;/a&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&lt;/span&gt; fingerprint &lt;span class="st"&gt;&amp;quot;ssh-rsa AAAA...&amp;quot;&lt;/span&gt; &lt;span class="co"&gt;-- 適当に public key の中身を貼り付ける&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-4"&gt;&lt;a href="#cb4-4"&gt;&lt;/a&gt;&lt;span class="dt"&gt;Just&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;f3b17672020e4e8ad25516034facc12d&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;GitHub では8ビットごとに &lt;code&gt;:&lt;/code&gt; で区切られてるが，まぁそれはいいでしょ．&lt;/p&gt;
&lt;h2 id="おしまい"&gt;おしまい&lt;/h2&gt;
&lt;p&gt;意外とこういう Crypto 系のテーマの Haskell コードの例って少ないよね． 全部コード読んで試したよ．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2020/01/05/215614</id><title type="text">rustでdiscordのbotを作ってみたくて下調べ(2)</title><updated>2020-01-05T21:56:14+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2020/01/05/215614"/><summary type="html">discord の bot を作るのなら websocket が必須なので下調べ。 というか、調べなくても discord-rs が使っていた websocket がそのまま使えるはずと思っていたのだが、開発が sluggish なので tokio-tungstenite を勧めている。良い名前空間を使っているだけに悲しい。 tokio-tungstenite の方は、 async/await への対応がまだであり、 鋭意作業中 のようだ。近日中にリリースされそうな勢い。 一方で、 crates.io で改めて検索すると、 ws なんてやつがいる。利用数は多いようだが、こいつは async/a…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2020/01/04/225431</id><title type="text">rustでdiscordのbotを作ってみたくて下調べ</title><updated>2020-01-04T22:54:31+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2020/01/04/225431"/><summary type="html">結論から書くとまだ何もしてない。 discord-rs というのがあるのだけど、だいぶ古い。特に嫌なのが issue にも上がっている通り openssl 1.0 系への依存。 昨年末にEOLを迎えている ので避けておきたい。 という事で手元でバージョンを上げようと試みたのだが、これがかなり厳しい。特に hyper 周りがバージョンが上がって大きくインタフェースが変わっており、変更量が多すぎて諦めた。ついでに edition も Rust 2018 にしようと試みたのだが、 try! の廃止があまりにもきつかったので断念。 cargo fix --edition を使えと書いてあったが、 tr…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2020/01/01/083723</id><title type="text">2019 年のスライド一挙公開、あるいは 2020 年の方針</title><updated>2020-01-01T08:54:55+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2020/01/01/083723"/><summary type="html">あけましておめでとうございます。2019 年は大変お世話になりました。2020 年も張り切っていきましょう。 さて、2019 年には結構な回数の外部発表を行いました。これらの発表内容のうち一部は単独のブログ記事としてまとめてありますが、機を逸してしまって記事化されていないものも相当数あります。そこで本記事では、2019 年中に行った発表を一覧としてまとめてみました。 2019 年の活動実績 2019 年の登壇は全部で 19 件でした。うち（先着や抽選ではなく）CFP に応募して採択されたものは 4 件です。 チェシャ猫が普段活動している領域は、Twitter の Bio にも書いてある通り、大…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2019/12/31/210000</id><title type="text">2019年を振り返って</title><updated>2019-12-31T21:51:33+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2019/12/31/210000"/><summary type="html">今年は仕事の部署異動があり気分一新したわけですが、思うようにパフォーマンスを出せず悩んでいたような気がします。前半もチームのために頑張っていた気がするんですがすべて忘れました。 今日は実家でgoreのGo modules対応をやってました。いい加減modules対応していないのやばいよなと思って一所懸命packagesパッケージのコードを読んでいます。まだ確認しないといけないパターンは沢山ありそうですが、年始にはマージする予定です (と書いて追い込んでおく)。goreは本当に便利なのでmodulesごときで死なせたくないですね… 今年はgojqを作れたのは大きいですね。これは本当にいいプロダク…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/12/30/231113</id><title type="text">2019年のまとめ</title><updated>2019-12-30T23:11:13+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/12/30/231113"/><summary type="html">今年を箇条書きでまとめておく。歳のせいか意識の高い話は何もなく、ああ、良くないなあとは思うのだが、まあそれとは別の話として、将来の自分用にメモを残して置くことはいいことだろう。 高脂血症の薬を飲み始め、肉食を再開する 禁酒、COMPは継続 副業を打ち切られる 息子が幼稚園に入る Rustを覚えて、書き始める Haskellを数行しか書かなかった 大学生の家庭教師を始める rarejob を始めるが体調不良により断念 atcoder を始めるが体調不良により断念 とにかくずっと風邪をひいている 親と苫小牧でキャンプ よく遊んだゲーム ディヴィニティオリジナル・シン２ Sekiro Disco E…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/12/25/224329</id><title type="text">barbies-thで気軽にHKDを堪能しよう [Haskell AdC 14]</title><updated>2019-12-25T23:31:48+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/12/25/224329"/><summary type="html">ミーハーな読者なら、barbiesというライブラリをご存知の方も多いと思う。そう、HKDを扱う定番ライブラリだ。HKDは、同アドベントカレンダーにも寄稿されている他、Haskell Dayでも紹介された(https://assets.adobe.com/public/b93f214d-58c2-482f-5528-a939d3e83660)注目の技法だ。Higher-Kinded Data (HKD) について - Qiita HKDは、一番簡単な場合であるはずのIdentityを使うと着脱が面倒になるという問題がよく知られている。Data.Barbie.BareモジュールのWearという型族…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2019/12/25/100000</id><title type="text">GitHub Enterprise から GitHub への移行ツールをGoで作りました！</title><updated>2019-12-25T10:00:00+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2019/12/25/100000"/><summary type="html">弊社ではGitHub Enterprise (以下GHE) からGitHubへの移行が進んでいます。今年頭のプラン改変やGitHub Connect、ActionsやAppsの充実などGitHubの機能強化が後押しとなりました。GHEのメンテナンスコストも徐々に重荷になってきていました。 リポジトリを移行するにあたって問題となるのが、これまでの歴史をどこまで新リポジトリに移行するかということです。もちろんgitのログはそのまま移行できますが、以下のようなものも移行したいと言われると色々と考えることが出てきます。 issueやpull requestのコメントやレビュー、ラベル コードコメントか…</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-12-22-json-parser-using-elixir.html</id><title type="text">Elixir による JSON Parser</title><updated>2019-12-22T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-12-22-json-parser-using-elixir.html"/><summary type="html">&lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;「&lt;a href="https://matsubara0507.github.io/posts/2019-12-08-re-create-thank-you-stars-ver-elixir.html"&gt;久しぶりに thank_you_stars をビルドする&lt;/a&gt;」の続きというかおまけというかって感じの記事です． この記事の最後で poison を抜いてお手製 JSON パーサーを組み込みました． 綺麗に整えたので記事にまとめる．&lt;/p&gt;
&lt;h2 id="実装する"&gt;実装する&lt;/h2&gt;
&lt;p&gt;外部パッケージを使えない縛りなので，完全な Pure Elixir で実装していく．&lt;/p&gt;
&lt;h3 id="result-型"&gt;Result 型&lt;/h3&gt;
&lt;p&gt;その前に便利モジュールを作っておく． いわゆる &lt;code&gt;Either&lt;/code&gt; 型だ．&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode elixir"&gt;&lt;code class="sourceCode elixir"&gt;&lt;span id="cb1-1"&gt;&lt;a href="#cb1-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;# Result e a = {:error, e} | {:ok, a} のような型を扱う&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-2"&gt;&lt;a href="#cb1-2"&gt;&lt;/a&gt;&lt;span class="kw"&gt;defmodule&lt;/span&gt; &lt;span class="cn"&gt;ThankYouStars&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="cn"&gt;Result&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-3"&gt;&lt;a href="#cb1-3"&gt;&lt;/a&gt;  &lt;span class="co"&gt;# {:ok, a}, {:error, e} をそのまま返す&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-4"&gt;&lt;a href="#cb1-4"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;def&lt;/span&gt; success(v), &lt;span class="kw"&gt;do&lt;/span&gt;: {&lt;span class="va"&gt;:ok&lt;/span&gt;, v}&lt;/span&gt;
&lt;span id="cb1-5"&gt;&lt;a href="#cb1-5"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;def&lt;/span&gt; failure(v), &lt;span class="kw"&gt;do&lt;/span&gt;: {&lt;span class="va"&gt;:error&lt;/span&gt;, v}&lt;/span&gt;
&lt;span id="cb1-6"&gt;&lt;a href="#cb1-6"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb1-7"&gt;&lt;a href="#cb1-7"&gt;&lt;/a&gt;  &lt;span class="co"&gt;# {:ok, a} だった場合に {:ok, f(a)} を返す (f は a -&amp;gt; b)&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-8"&gt;&lt;a href="#cb1-8"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;def&lt;/span&gt; map({&lt;span class="va"&gt;:ok&lt;/span&gt;, v}, f), &lt;span class="kw"&gt;do&lt;/span&gt;: success(f&lt;span class="op"&gt;.&lt;/span&gt;(v))&lt;/span&gt;
&lt;span id="cb1-9"&gt;&lt;a href="#cb1-9"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;def&lt;/span&gt; map(err &lt;span class="op"&gt;=&lt;/span&gt; {&lt;span class="va"&gt;:error&lt;/span&gt;, _}, _), &lt;span class="kw"&gt;do&lt;/span&gt;: err&lt;/span&gt;
&lt;span id="cb1-10"&gt;&lt;a href="#cb1-10"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb1-11"&gt;&lt;a href="#cb1-11"&gt;&lt;/a&gt;  &lt;span class="co"&gt;# {:ok, a} だった場合に f(a) を返す (f は a -&amp;gt; Result e b)&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-12"&gt;&lt;a href="#cb1-12"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;def&lt;/span&gt; and_then({&lt;span class="va"&gt;:ok&lt;/span&gt;, v}, f), &lt;span class="kw"&gt;do&lt;/span&gt;: f&lt;span class="op"&gt;.&lt;/span&gt;(v)&lt;/span&gt;
&lt;span id="cb1-13"&gt;&lt;a href="#cb1-13"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;def&lt;/span&gt; and_then(err &lt;span class="op"&gt;=&lt;/span&gt; {&lt;span class="va"&gt;:error&lt;/span&gt;, _}, _), &lt;span class="kw"&gt;do&lt;/span&gt;: err&lt;/span&gt;
&lt;span id="cb1-14"&gt;&lt;a href="#cb1-14"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb1-15"&gt;&lt;a href="#cb1-15"&gt;&lt;/a&gt;  &lt;span class="co"&gt;# {:error, e} だった場合に {:error, f(e)} を返す (f は e -&amp;gt; b)&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-16"&gt;&lt;a href="#cb1-16"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;def&lt;/span&gt; map_error({&lt;span class="va"&gt;:error&lt;/span&gt;, e}, f), &lt;span class="kw"&gt;do&lt;/span&gt;: failure(f&lt;span class="op"&gt;.&lt;/span&gt;(e))&lt;/span&gt;
&lt;span id="cb1-17"&gt;&lt;a href="#cb1-17"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;def&lt;/span&gt; map_error(r &lt;span class="op"&gt;=&lt;/span&gt; {&lt;span class="va"&gt;:ok&lt;/span&gt;, _}, _), &lt;span class="kw"&gt;do&lt;/span&gt;: r&lt;/span&gt;
&lt;span id="cb1-18"&gt;&lt;a href="#cb1-18"&gt;&lt;/a&gt;&lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これを作っておくと &lt;code&gt;{:ok, a} | {:error, e}&lt;/code&gt; なデータ型をパイプラインと組み合わせて利用できるようになる(実はプリミティブあったりしないよね？)．&lt;/p&gt;
&lt;h3 id="状態のデータ構造"&gt;状態のデータ構造&lt;/h3&gt;
&lt;p&gt;シンプルにパース結果と残りの文字列を保存する連想配列を持ち回ることにする:&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode elixir"&gt;&lt;code class="sourceCode elixir"&gt;&lt;span id="cb2-1"&gt;&lt;a href="#cb2-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;defmodule&lt;/span&gt; &lt;span class="cn"&gt;ThankYouStars&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="cn"&gt;JSON&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-2"&gt;&lt;a href="#cb2-2"&gt;&lt;/a&gt;  &lt;span class="im"&gt;alias&lt;/span&gt; &lt;span class="cn"&gt;ThankYouStars&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="cn"&gt;Result&lt;/span&gt;, &lt;span class="va"&gt;as:&lt;/span&gt; &lt;span class="cn"&gt;Result&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-3"&gt;&lt;a href="#cb2-3"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-4"&gt;&lt;a href="#cb2-4"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;def&lt;/span&gt; decode(str) &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-5"&gt;&lt;a href="#cb2-5"&gt;&lt;/a&gt;    init_stat(str)&lt;/span&gt;
&lt;span id="cb2-6"&gt;&lt;a href="#cb2-6"&gt;&lt;/a&gt;    &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; match_element() &lt;span class="co"&gt;# これがパーサー&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-7"&gt;&lt;a href="#cb2-7"&gt;&lt;/a&gt;    &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="kw"&gt;case&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-8"&gt;&lt;a href="#cb2-8"&gt;&lt;/a&gt;      &lt;span class="co"&gt;# パースが成功した場合 {:ok} かつ残り文字列が空になる想定&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-9"&gt;&lt;a href="#cb2-9"&gt;&lt;/a&gt;      {&lt;span class="va"&gt;:ok&lt;/span&gt;, %{&lt;span class="va"&gt;rest:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span class="va"&gt;result:&lt;/span&gt; result}} &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="cn"&gt;Result&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;success(result)&lt;/span&gt;
&lt;span id="cb2-10"&gt;&lt;a href="#cb2-10"&gt;&lt;/a&gt;      {_, %{&lt;span class="va"&gt;rest:&lt;/span&gt; rest}} &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="cn"&gt;Result&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;failure(rest)&lt;/span&gt;
&lt;span id="cb2-11"&gt;&lt;a href="#cb2-11"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-12"&gt;&lt;a href="#cb2-12"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-13"&gt;&lt;a href="#cb2-13"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-14"&gt;&lt;a href="#cb2-14"&gt;&lt;/a&gt;  &lt;span class="co"&gt;# rest が残り文字列で result がパース結果&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-15"&gt;&lt;a href="#cb2-15"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;defp&lt;/span&gt; init_stat(str), &lt;span class="kw"&gt;do&lt;/span&gt;: %{&lt;span class="va"&gt;rest:&lt;/span&gt; str, &lt;span class="va"&gt;result:&lt;/span&gt; %{}}&lt;/span&gt;
&lt;span id="cb2-16"&gt;&lt;a href="#cb2-16"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-17"&gt;&lt;a href="#cb2-17"&gt;&lt;/a&gt;  &lt;span class="op"&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-18"&gt;&lt;a href="#cb2-18"&gt;&lt;/a&gt;&lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;今回実装する JSON パーサーは最終的に Elixir の連想配列や配列，真偽値や文字列などのプリミティブなデータ型へ変換することとする． なので，初期値として空の連想配列 &lt;code&gt;%{}&lt;/code&gt; を渡している．&lt;/p&gt;
&lt;h3 id="json.org"&gt;JSON.org&lt;/h3&gt;
&lt;p&gt;JSON の(基本的な)構文定義は &lt;a href="https://json.org"&gt;JSON.org&lt;/a&gt; に書いてある． ご丁寧に BNF が書いてあるので，これに沿って実装するだけだ． 例えば，こんな感じの BNF が記述されている:&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode txt"&gt;&lt;code class="sourceCode default"&gt;&lt;span id="cb3-1"&gt;&lt;a href="#cb3-1"&gt;&lt;/a&gt;json&lt;/span&gt;
&lt;span id="cb3-2"&gt;&lt;a href="#cb3-2"&gt;&lt;/a&gt;  := element&lt;/span&gt;
&lt;span id="cb3-3"&gt;&lt;a href="#cb3-3"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-4"&gt;&lt;a href="#cb3-4"&gt;&lt;/a&gt;element&lt;/span&gt;
&lt;span id="cb3-5"&gt;&lt;a href="#cb3-5"&gt;&lt;/a&gt;  := ws value ws&lt;/span&gt;
&lt;span id="cb3-6"&gt;&lt;a href="#cb3-6"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-7"&gt;&lt;a href="#cb3-7"&gt;&lt;/a&gt;value&lt;/span&gt;
&lt;span id="cb3-8"&gt;&lt;a href="#cb3-8"&gt;&lt;/a&gt;  := object&lt;/span&gt;
&lt;span id="cb3-9"&gt;&lt;a href="#cb3-9"&gt;&lt;/a&gt;   | array&lt;/span&gt;
&lt;span id="cb3-10"&gt;&lt;a href="#cb3-10"&gt;&lt;/a&gt;   | string&lt;/span&gt;
&lt;span id="cb3-11"&gt;&lt;a href="#cb3-11"&gt;&lt;/a&gt;   | number&lt;/span&gt;
&lt;span id="cb3-12"&gt;&lt;a href="#cb3-12"&gt;&lt;/a&gt;   | &amp;quot;true&amp;quot;&lt;/span&gt;
&lt;span id="cb3-13"&gt;&lt;a href="#cb3-13"&gt;&lt;/a&gt;   | &amp;quot;false&amp;quot;&lt;/span&gt;
&lt;span id="cb3-14"&gt;&lt;a href="#cb3-14"&gt;&lt;/a&gt;   | &amp;quot;null&amp;quot;&lt;/span&gt;
&lt;span id="cb3-15"&gt;&lt;a href="#cb3-15"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-16"&gt;&lt;a href="#cb3-16"&gt;&lt;/a&gt;ws&lt;/span&gt;
&lt;span id="cb3-17"&gt;&lt;a href="#cb3-17"&gt;&lt;/a&gt;  := ... // 空白除去&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これをパターンマッチを駆使して実装するとこんな感じ:&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode elixir"&gt;&lt;code class="sourceCode elixir"&gt;&lt;span id="cb4-1"&gt;&lt;a href="#cb4-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;defp&lt;/span&gt; match_element(stat) &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-2"&gt;&lt;a href="#cb4-2"&gt;&lt;/a&gt;  trim_leading(stat) &lt;span class="co"&gt;# rest の前方の空白を除去します&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-3"&gt;&lt;a href="#cb4-3"&gt;&lt;/a&gt;  &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; match_value()&lt;/span&gt;
&lt;span id="cb4-4"&gt;&lt;a href="#cb4-4"&gt;&lt;/a&gt;  &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="cn"&gt;Result&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;map(&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;trim_leading(&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;))&lt;/span&gt;
&lt;span id="cb4-5"&gt;&lt;a href="#cb4-5"&gt;&lt;/a&gt;&lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-6"&gt;&lt;a href="#cb4-6"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-7"&gt;&lt;a href="#cb4-7"&gt;&lt;/a&gt;&lt;span class="co"&gt;# match_string や match_array はあとで&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-8"&gt;&lt;a href="#cb4-8"&gt;&lt;/a&gt;&lt;span class="kw"&gt;defp&lt;/span&gt; match_value(%{&lt;span class="va"&gt;rest:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest}), &lt;span class="kw"&gt;do&lt;/span&gt;: &lt;span class="cn"&gt;Result&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;success(%{&lt;span class="va"&gt;result:&lt;/span&gt; &lt;span class="cn"&gt;true&lt;/span&gt;, &lt;span class="va"&gt;rest:&lt;/span&gt; rest})&lt;/span&gt;
&lt;span id="cb4-9"&gt;&lt;a href="#cb4-9"&gt;&lt;/a&gt;&lt;span class="kw"&gt;defp&lt;/span&gt; match_value(%{&lt;span class="va"&gt;rest:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest}), &lt;span class="kw"&gt;do&lt;/span&gt;: &lt;span class="cn"&gt;Result&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;success(%{&lt;span class="va"&gt;result:&lt;/span&gt; &lt;span class="cn"&gt;false&lt;/span&gt;, &lt;span class="va"&gt;rest:&lt;/span&gt; rest})&lt;/span&gt;
&lt;span id="cb4-10"&gt;&lt;a href="#cb4-10"&gt;&lt;/a&gt;&lt;span class="kw"&gt;defp&lt;/span&gt; match_value(%{&lt;span class="va"&gt;rest:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;null&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest}), &lt;span class="kw"&gt;do&lt;/span&gt;: &lt;span class="cn"&gt;Result&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;success(%{&lt;span class="va"&gt;result:&lt;/span&gt; &lt;span class="cn"&gt;nil&lt;/span&gt;, &lt;span class="va"&gt;rest:&lt;/span&gt; rest})&lt;/span&gt;
&lt;span id="cb4-11"&gt;&lt;a href="#cb4-11"&gt;&lt;/a&gt;&lt;span class="kw"&gt;defp&lt;/span&gt; match_value(stat &lt;span class="op"&gt;=&lt;/span&gt; %{&lt;span class="va"&gt;rest:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;\&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; _}), &lt;span class="kw"&gt;do&lt;/span&gt;: match_string(stat)&lt;/span&gt;
&lt;span id="cb4-12"&gt;&lt;a href="#cb4-12"&gt;&lt;/a&gt;&lt;span class="kw"&gt;defp&lt;/span&gt; match_value(stat &lt;span class="op"&gt;=&lt;/span&gt; %{&lt;span class="va"&gt;rest:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;[&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; _}), &lt;span class="kw"&gt;do&lt;/span&gt;: match_array(stat)&lt;/span&gt;
&lt;span id="cb4-13"&gt;&lt;a href="#cb4-13"&gt;&lt;/a&gt;&lt;span class="kw"&gt;defp&lt;/span&gt; match_value(stat &lt;span class="op"&gt;=&lt;/span&gt; %{&lt;span class="va"&gt;rest:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;{&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; _}), &lt;span class="kw"&gt;do&lt;/span&gt;: match_object(stat)&lt;/span&gt;
&lt;span id="cb4-14"&gt;&lt;a href="#cb4-14"&gt;&lt;/a&gt;&lt;span class="kw"&gt;defp&lt;/span&gt; match_value(stat), &lt;span class="kw"&gt;do&lt;/span&gt;: match_number(stat)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;match_xxx&lt;/code&gt; 系の関数は全て前述した &lt;code&gt;Result e a&lt;/code&gt; 型を返すイメージ(&lt;code&gt;e&lt;/code&gt; も &lt;code&gt;a&lt;/code&gt; も前述した状態の連想配列だが)．&lt;/p&gt;
&lt;h3 id="オブジェクトのパース"&gt;オブジェクトのパース&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;{}&lt;/code&gt; で囲まれた連想配列のようなもの，例えば &lt;code&gt;{ &amp;quot;key&amp;quot; : true }&lt;/code&gt; がオブジェクトだ:&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode txt"&gt;&lt;code class="sourceCode default"&gt;&lt;span id="cb5-1"&gt;&lt;a href="#cb5-1"&gt;&lt;/a&gt;object&lt;/span&gt;
&lt;span id="cb5-2"&gt;&lt;a href="#cb5-2"&gt;&lt;/a&gt;  := &amp;#39;{&amp;#39; ws &amp;#39;}&amp;#39;&lt;/span&gt;
&lt;span id="cb5-3"&gt;&lt;a href="#cb5-3"&gt;&lt;/a&gt;   | &amp;#39;{&amp;#39; members &amp;#39;}&amp;#39;&lt;/span&gt;
&lt;span id="cb5-4"&gt;&lt;a href="#cb5-4"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb5-5"&gt;&lt;a href="#cb5-5"&gt;&lt;/a&gt;members&lt;/span&gt;
&lt;span id="cb5-6"&gt;&lt;a href="#cb5-6"&gt;&lt;/a&gt;  := member&lt;/span&gt;
&lt;span id="cb5-7"&gt;&lt;a href="#cb5-7"&gt;&lt;/a&gt;   | member &amp;#39;,&amp;#39; members&lt;/span&gt;
&lt;span id="cb5-8"&gt;&lt;a href="#cb5-8"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb5-9"&gt;&lt;a href="#cb5-9"&gt;&lt;/a&gt;member&lt;/span&gt;
&lt;span id="cb5-10"&gt;&lt;a href="#cb5-10"&gt;&lt;/a&gt;  := ws string ws &amp;#39;:&amp;#39; element&lt;/span&gt;
&lt;span id="cb5-11"&gt;&lt;a href="#cb5-11"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb5-12"&gt;&lt;a href="#cb5-12"&gt;&lt;/a&gt;string&lt;/span&gt;
&lt;span id="cb5-13"&gt;&lt;a href="#cb5-13"&gt;&lt;/a&gt;  := ... // 文字列&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;文字列の部分はあとで実装するとして，他の部分だけをパターンマッチとパイプを利用して実装するとこんな感じ:&lt;/p&gt;
&lt;div class="sourceCode" id="cb6"&gt;&lt;pre class="sourceCode elixir"&gt;&lt;code class="sourceCode elixir"&gt;&lt;span id="cb6-1"&gt;&lt;a href="#cb6-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;# parse_when_unmatch_by(stat, char, parser) は&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-2"&gt;&lt;a href="#cb6-2"&gt;&lt;/a&gt;&lt;span class="co"&gt;# char の文字列にマッチしなければ parser を実行し&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-3"&gt;&lt;a href="#cb6-3"&gt;&lt;/a&gt;&lt;span class="co"&gt;# マッチした場合は parser を実行せずに stat をそのまま返す&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-4"&gt;&lt;a href="#cb6-4"&gt;&lt;/a&gt;&lt;span class="kw"&gt;defp&lt;/span&gt; match_object(stat) &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-5"&gt;&lt;a href="#cb6-5"&gt;&lt;/a&gt;  match_left_par(stat)                               &lt;span class="co"&gt;# `{` にマッチ&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-6"&gt;&lt;a href="#cb6-6"&gt;&lt;/a&gt;  &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="cn"&gt;Result&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;map(&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;trim_leading(&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;))                   &lt;span class="co"&gt;# 空白除去&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-7"&gt;&lt;a href="#cb6-7"&gt;&lt;/a&gt;  &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="cn"&gt;Result&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;and_then(&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;update_stat(&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;, &lt;span class="va"&gt;:result&lt;/span&gt;, %{})) &lt;span class="co"&gt;# 状態の result を空オブジェクト %{} に更新&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-8"&gt;&lt;a href="#cb6-8"&gt;&lt;/a&gt;  &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="cn"&gt;Result&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;and_then(&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;parse_when_unmatch_by(&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;}&amp;quot;&lt;/span&gt;, &lt;span class="kw"&gt;fn&lt;/span&gt; s &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; match_members(s) &lt;span class="kw"&gt;end&lt;/span&gt;))&lt;/span&gt;
&lt;span id="cb6-9"&gt;&lt;a href="#cb6-9"&gt;&lt;/a&gt;  &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="cn"&gt;Result&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;and_then(&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;match_right_par(&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;))           &lt;span class="co"&gt;# `}` にマッチ&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-10"&gt;&lt;a href="#cb6-10"&gt;&lt;/a&gt;&lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-11"&gt;&lt;a href="#cb6-11"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb6-12"&gt;&lt;a href="#cb6-12"&gt;&lt;/a&gt;&lt;span class="kw"&gt;defp&lt;/span&gt; match_members(stat) &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-13"&gt;&lt;a href="#cb6-13"&gt;&lt;/a&gt;  match_member(stat)&lt;/span&gt;
&lt;span id="cb6-14"&gt;&lt;a href="#cb6-14"&gt;&lt;/a&gt;  &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="cn"&gt;Result&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;and_then(&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;match_members_tail(&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;))&lt;/span&gt;
&lt;span id="cb6-15"&gt;&lt;a href="#cb6-15"&gt;&lt;/a&gt;&lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-16"&gt;&lt;a href="#cb6-16"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb6-17"&gt;&lt;a href="#cb6-17"&gt;&lt;/a&gt;&lt;span class="co"&gt;# match_members_tail は members の再帰処理をする&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-18"&gt;&lt;a href="#cb6-18"&gt;&lt;/a&gt;&lt;span class="co"&gt;# 先頭が `,` にマッチした時には再帰処理を行い&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-19"&gt;&lt;a href="#cb6-19"&gt;&lt;/a&gt;&lt;span class="co"&gt;# マッチしない場合は stat をそのまま返す&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-20"&gt;&lt;a href="#cb6-20"&gt;&lt;/a&gt;&lt;span class="kw"&gt;defp&lt;/span&gt; match_members_tail(stat &lt;span class="op"&gt;=&lt;/span&gt; %{&lt;span class="va"&gt;rest:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;,&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest}) &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-21"&gt;&lt;a href="#cb6-21"&gt;&lt;/a&gt;  update_stat(stat, &lt;span class="va"&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id="cb6-22"&gt;&lt;a href="#cb6-22"&gt;&lt;/a&gt;  &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="cn"&gt;Result&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;and_then(&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;match_members(&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;))&lt;/span&gt;
&lt;span id="cb6-23"&gt;&lt;a href="#cb6-23"&gt;&lt;/a&gt;&lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-24"&gt;&lt;a href="#cb6-24"&gt;&lt;/a&gt;&lt;span class="kw"&gt;defp&lt;/span&gt; match_members_tail(stat), &lt;span class="kw"&gt;do&lt;/span&gt;: &lt;span class="cn"&gt;Result&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;success(stat)&lt;/span&gt;
&lt;span id="cb6-25"&gt;&lt;a href="#cb6-25"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb6-26"&gt;&lt;a href="#cb6-26"&gt;&lt;/a&gt;&lt;span class="kw"&gt;defp&lt;/span&gt; match_member(stat &lt;span class="op"&gt;=&lt;/span&gt; %{&lt;span class="va"&gt;result:&lt;/span&gt; prev}) &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-27"&gt;&lt;a href="#cb6-27"&gt;&lt;/a&gt;  &lt;span class="co"&gt;# 空白を除去してから文字列にマッチさせてみる&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-28"&gt;&lt;a href="#cb6-28"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;case&lt;/span&gt; match_string(trim_leading(stat)) &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-29"&gt;&lt;a href="#cb6-29"&gt;&lt;/a&gt;    {&lt;span class="va"&gt;:error&lt;/span&gt;, stat} &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-30"&gt;&lt;a href="#cb6-30"&gt;&lt;/a&gt;      &lt;span class="cn"&gt;Result&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;failure(stat)&lt;/span&gt;
&lt;span id="cb6-31"&gt;&lt;a href="#cb6-31"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb6-32"&gt;&lt;a href="#cb6-32"&gt;&lt;/a&gt;    &lt;span class="co"&gt;# string のパースに成功した場合にのみ，そのパース結果を `key` として残りをパースする&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-33"&gt;&lt;a href="#cb6-33"&gt;&lt;/a&gt;    {&lt;span class="va"&gt;:ok&lt;/span&gt;, stat &lt;span class="op"&gt;=&lt;/span&gt; %{&lt;span class="va"&gt;result:&lt;/span&gt; key}} &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-34"&gt;&lt;a href="#cb6-34"&gt;&lt;/a&gt;      trim_leading(stat)&lt;/span&gt;
&lt;span id="cb6-35"&gt;&lt;a href="#cb6-35"&gt;&lt;/a&gt;      &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; match_colon() &lt;span class="co"&gt;# &amp;#39;:&amp;#39; にマッチ&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-36"&gt;&lt;a href="#cb6-36"&gt;&lt;/a&gt;      &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="cn"&gt;Result&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;and_then(&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;match_element(&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;)) &lt;span class="co"&gt;#match_element は前のと同じ&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-37"&gt;&lt;a href="#cb6-37"&gt;&lt;/a&gt;      &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="cn"&gt;Result&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;and_then(&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;modify_stat(&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;, &lt;span class="va"&gt;:result&lt;/span&gt;, &lt;span class="kw"&gt;fn&lt;/span&gt; v &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="cn"&gt;Map&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;put(prev, key, v) &lt;span class="kw"&gt;end&lt;/span&gt;))&lt;/span&gt;
&lt;span id="cb6-38"&gt;&lt;a href="#cb6-38"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-39"&gt;&lt;a href="#cb6-39"&gt;&lt;/a&gt;&lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;update_stat(stat, key, value)&lt;/code&gt; は &lt;code&gt;stat&lt;/code&gt; の &lt;code&gt;key&lt;/code&gt; を &lt;code&gt;value&lt;/code&gt; で置き換える関数で，&lt;code&gt;modify_stat(stat, key, func)&lt;/code&gt; は &lt;code&gt;stat&lt;/code&gt; の &lt;code&gt;key&lt;/code&gt; を &lt;code&gt;func&lt;/code&gt; で更新する関数だ．&lt;/p&gt;
&lt;p&gt;余談だが，Elixir は(僕が思うに)普通の関数それ自体は第一級では無いが，無名関数 &lt;code&gt;fn args -&amp;gt; ... end&lt;/code&gt; は第一級のようだ． &lt;code&gt;&amp;amp;any_function(&amp;amp;1, &amp;amp;2)&lt;/code&gt; などとすることで &lt;code&gt;fn arg1 arg2 -&amp;gt; any_function(arg1, arg2) end&lt;/code&gt; の糖衣構文になるっぽく，関数を関数の引数に渡す場合はこうするらしい． ただし，この記法は入れ子にできないので，&lt;code&gt;modify_stat&lt;/code&gt; や &lt;code&gt;parse_when_unmatch_by&lt;/code&gt; では内部の方の関数を &lt;code&gt;fn args -&amp;gt; ... end&lt;/code&gt; で直接囲っている(&lt;a href="https://stackoverflow.com/questions/38217426/can-i-nest-anonymous-functions-in-elixir"&gt;参照&lt;/a&gt;)．&lt;/p&gt;
&lt;h3 id="配列のパース"&gt;配列のパース&lt;/h3&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre class="sourceCode txt"&gt;&lt;code class="sourceCode default"&gt;&lt;span id="cb7-1"&gt;&lt;a href="#cb7-1"&gt;&lt;/a&gt;array&lt;/span&gt;
&lt;span id="cb7-2"&gt;&lt;a href="#cb7-2"&gt;&lt;/a&gt;  := &amp;#39;[&amp;#39; ws &amp;#39;]&amp;#39;&lt;/span&gt;
&lt;span id="cb7-3"&gt;&lt;a href="#cb7-3"&gt;&lt;/a&gt;   | &amp;#39;[&amp;#39; elements &amp;#39;]&amp;#39;&lt;/span&gt;
&lt;span id="cb7-4"&gt;&lt;a href="#cb7-4"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb7-5"&gt;&lt;a href="#cb7-5"&gt;&lt;/a&gt;elements&lt;/span&gt;
&lt;span id="cb7-6"&gt;&lt;a href="#cb7-6"&gt;&lt;/a&gt;  := element&lt;/span&gt;
&lt;span id="cb7-7"&gt;&lt;a href="#cb7-7"&gt;&lt;/a&gt;   | element &amp;#39;,&amp;#39; elements&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実は &lt;code&gt;{}&lt;/code&gt; が &lt;code&gt;[]&lt;/code&gt; になっただけで，だいたいオブジェクトと同じだ:&lt;/p&gt;
&lt;div class="sourceCode" id="cb8"&gt;&lt;pre class="sourceCode elixir"&gt;&lt;code class="sourceCode elixir"&gt;&lt;span id="cb8-1"&gt;&lt;a href="#cb8-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;defp&lt;/span&gt; match_array(stat) &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-2"&gt;&lt;a href="#cb8-2"&gt;&lt;/a&gt;  match_left_square(stat)                           &lt;span class="co"&gt;# &amp;#39;[&amp;#39; にマッチ&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-3"&gt;&lt;a href="#cb8-3"&gt;&lt;/a&gt;  &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="cn"&gt;Result&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;map(&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;trim_leading(&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;))                  &lt;span class="co"&gt;# 空白除去&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-4"&gt;&lt;a href="#cb8-4"&gt;&lt;/a&gt;  &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="cn"&gt;Result&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;and_then(&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;update_stat(&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;, &lt;span class="va"&gt;:result&lt;/span&gt;, [])) &lt;span class="co"&gt;# 状態の result を空配列 [] に更新&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-5"&gt;&lt;a href="#cb8-5"&gt;&lt;/a&gt;  &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="cn"&gt;Result&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;and_then(&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;parse_when_unmatch_by(&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;]&amp;quot;&lt;/span&gt;, &lt;span class="kw"&gt;fn&lt;/span&gt; s &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; match_elements(s) &lt;span class="kw"&gt;end&lt;/span&gt;))&lt;/span&gt;
&lt;span id="cb8-6"&gt;&lt;a href="#cb8-6"&gt;&lt;/a&gt;  &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="cn"&gt;Result&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;and_then(&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;match_right_square(&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;))       &lt;span class="co"&gt;# &amp;#39;]&amp;#39; にマッチ&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-7"&gt;&lt;a href="#cb8-7"&gt;&lt;/a&gt;&lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-8"&gt;&lt;a href="#cb8-8"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb8-9"&gt;&lt;a href="#cb8-9"&gt;&lt;/a&gt;&lt;span class="kw"&gt;defp&lt;/span&gt; match_elements(stat &lt;span class="op"&gt;=&lt;/span&gt; %{&lt;span class="va"&gt;result:&lt;/span&gt; prev}) &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-10"&gt;&lt;a href="#cb8-10"&gt;&lt;/a&gt;  match_element(stat)&lt;/span&gt;
&lt;span id="cb8-11"&gt;&lt;a href="#cb8-11"&gt;&lt;/a&gt;  &lt;span class="co"&gt;# ここで状態(配列)の更新をしてる点だけが違う&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-12"&gt;&lt;a href="#cb8-12"&gt;&lt;/a&gt;  &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="cn"&gt;Result&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;and_then(&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;modify_stat(&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;, &lt;span class="va"&gt;:result&lt;/span&gt;, &lt;span class="kw"&gt;fn&lt;/span&gt; v &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; prev &lt;span class="op"&gt;++&lt;/span&gt; [v] &lt;span class="kw"&gt;end&lt;/span&gt;))&lt;/span&gt;
&lt;span id="cb8-13"&gt;&lt;a href="#cb8-13"&gt;&lt;/a&gt;  &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="cn"&gt;Result&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;and_then(&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;match_elements_tail(&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;))&lt;/span&gt;
&lt;span id="cb8-14"&gt;&lt;a href="#cb8-14"&gt;&lt;/a&gt;&lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-15"&gt;&lt;a href="#cb8-15"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb8-16"&gt;&lt;a href="#cb8-16"&gt;&lt;/a&gt;&lt;span class="kw"&gt;defp&lt;/span&gt; match_elements_tail(stat &lt;span class="op"&gt;=&lt;/span&gt; %{&lt;span class="va"&gt;rest:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;,&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest}) &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-17"&gt;&lt;a href="#cb8-17"&gt;&lt;/a&gt;  update_stat(stat, &lt;span class="va"&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id="cb8-18"&gt;&lt;a href="#cb8-18"&gt;&lt;/a&gt;  &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="cn"&gt;Result&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;and_then(&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;match_elements(&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;))&lt;/span&gt;
&lt;span id="cb8-19"&gt;&lt;a href="#cb8-19"&gt;&lt;/a&gt;&lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-20"&gt;&lt;a href="#cb8-20"&gt;&lt;/a&gt;&lt;span class="kw"&gt;defp&lt;/span&gt; match_elements_tail(stat), &lt;span class="kw"&gt;do&lt;/span&gt;: &lt;span class="cn"&gt;Result&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;success(stat)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="文字列のパース"&gt;文字列のパース&lt;/h3&gt;
&lt;p&gt;さぁこっからが大変． 文字列内でのエスケープをそれっぽく処理する必要がある:&lt;/p&gt;
&lt;div class="sourceCode" id="cb9"&gt;&lt;pre class="sourceCode elixir"&gt;&lt;code class="sourceCode elixir"&gt;&lt;span id="cb9-1"&gt;&lt;a href="#cb9-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;defp&lt;/span&gt; match_string(stat) &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-2"&gt;&lt;a href="#cb9-2"&gt;&lt;/a&gt;  match_double_quote(stat)                          &lt;span class="co"&gt;# &amp;#39;&amp;quot;&amp;#39; にマッチ&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-3"&gt;&lt;a href="#cb9-3"&gt;&lt;/a&gt;  &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="cn"&gt;Result&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;and_then(&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;update_stat(&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;, &lt;span class="va"&gt;:result&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt;)) &lt;span class="co"&gt;# 状態の result を空文字列 &amp;quot;&amp;quot; に更新&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-4"&gt;&lt;a href="#cb9-4"&gt;&lt;/a&gt;  &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="cn"&gt;Result&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;and_then(&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;match_characters(&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;))&lt;/span&gt;
&lt;span id="cb9-5"&gt;&lt;a href="#cb9-5"&gt;&lt;/a&gt;  &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="cn"&gt;Result&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;and_then(&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;match_double_quote(&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;))       &lt;span class="co"&gt;# &amp;#39;&amp;quot;&amp;#39; にマッチ&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-6"&gt;&lt;a href="#cb9-6"&gt;&lt;/a&gt;&lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-7"&gt;&lt;a href="#cb9-7"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb9-8"&gt;&lt;a href="#cb9-8"&gt;&lt;/a&gt;&lt;span class="co"&gt;# どう見ても成功じゃ無いがどーせ後々エラーになるので...&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-9"&gt;&lt;a href="#cb9-9"&gt;&lt;/a&gt;&lt;span class="kw"&gt;defp&lt;/span&gt; match_characters(stat &lt;span class="op"&gt;=&lt;/span&gt; %{&lt;span class="va"&gt;rest:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt;}), &lt;span class="kw"&gt;do&lt;/span&gt;: &lt;span class="cn"&gt;Result&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;success(stat)&lt;/span&gt;
&lt;span id="cb9-10"&gt;&lt;a href="#cb9-10"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb9-11"&gt;&lt;a href="#cb9-11"&gt;&lt;/a&gt;&lt;span class="co"&gt;# &amp;#39;&amp;quot;&amp;#39; にマッチしたら終わり&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-12"&gt;&lt;a href="#cb9-12"&gt;&lt;/a&gt;&lt;span class="kw"&gt;defp&lt;/span&gt; match_characters(stat &lt;span class="op"&gt;=&lt;/span&gt; %{&lt;span class="va"&gt;rest:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;\&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; _}), &lt;span class="kw"&gt;do&lt;/span&gt;: &lt;span class="cn"&gt;Result&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;success(stat)&lt;/span&gt;
&lt;span id="cb9-13"&gt;&lt;a href="#cb9-13"&gt;&lt;/a&gt;&lt;span class="kw"&gt;defp&lt;/span&gt; match_characters(stat) &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-14"&gt;&lt;a href="#cb9-14"&gt;&lt;/a&gt;  &lt;span class="co"&gt;# &amp;quot;\&amp;quot; はエスケープ文字として処理する必要があるのでまずはそれ以外&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-15"&gt;&lt;a href="#cb9-15"&gt;&lt;/a&gt;  parse_when_unmatch_by(stat, &lt;span class="st"&gt;&amp;quot;\\&amp;quot;&lt;/span&gt;, &lt;span class="op"&gt;&amp;amp;&lt;/span&gt;match_noescape_characters(&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;))&lt;/span&gt;
&lt;span id="cb9-16"&gt;&lt;a href="#cb9-16"&gt;&lt;/a&gt;  &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="cn"&gt;Result&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;and_then(&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;match_escape(&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;))     &lt;span class="co"&gt;# 次にエスケープ文字の処理&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-17"&gt;&lt;a href="#cb9-17"&gt;&lt;/a&gt;  &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="cn"&gt;Result&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;and_then(&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;match_characters(&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;)) &lt;span class="co"&gt;# 再帰する&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-18"&gt;&lt;a href="#cb9-18"&gt;&lt;/a&gt;&lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;関数名の通り，&lt;code&gt;match_noescape_characters&lt;/code&gt; がエスケープ文字以外のパーサーで，&lt;code&gt;match_escape&lt;/code&gt; がエスケープ文字のパーサーだ． &lt;code&gt;match_noescape_characters&lt;/code&gt; ではまず &lt;code&gt;\&lt;/code&gt; や &lt;code&gt;&amp;quot;&lt;/code&gt; を含まない文字列をマッチさせたい． しかし，パターンマッチは exclude なマッチはできないので，あんまり良く無いが正規表現でサボることにする:&lt;/p&gt;
&lt;div class="sourceCode" id="cb10"&gt;&lt;pre class="sourceCode elixir"&gt;&lt;code class="sourceCode elixir"&gt;&lt;span id="cb10-1"&gt;&lt;a href="#cb10-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;# エスケープされてない文字はダメっぽい&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-2"&gt;&lt;a href="#cb10-2"&gt;&lt;/a&gt;&lt;span class="kw"&gt;defp&lt;/span&gt; match_noescape_characters(stat &lt;span class="op"&gt;=&lt;/span&gt; %{&lt;span class="va"&gt;rest:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; _}), &lt;span class="kw"&gt;do&lt;/span&gt;: &lt;span class="cn"&gt;Result&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;failure(stat)&lt;/span&gt;
&lt;span id="cb10-3"&gt;&lt;a href="#cb10-3"&gt;&lt;/a&gt;&lt;span class="kw"&gt;defp&lt;/span&gt; match_noescape_characters(stat &lt;span class="op"&gt;=&lt;/span&gt; %{&lt;span class="va"&gt;rest:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;\t&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; _}), &lt;span class="kw"&gt;do&lt;/span&gt;: &lt;span class="cn"&gt;Result&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;failure(stat)&lt;/span&gt;
&lt;span id="cb10-4"&gt;&lt;a href="#cb10-4"&gt;&lt;/a&gt;&lt;span class="kw"&gt;defp&lt;/span&gt; match_noescape_characters(stat &lt;span class="op"&gt;=&lt;/span&gt; %{&lt;span class="va"&gt;rest:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;\u0000&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; _}), &lt;span class="kw"&gt;do&lt;/span&gt;: &lt;span class="cn"&gt;Result&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;failure(stat)&lt;/span&gt;
&lt;span id="cb10-5"&gt;&lt;a href="#cb10-5"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb10-6"&gt;&lt;a href="#cb10-6"&gt;&lt;/a&gt;&lt;span class="kw"&gt;defp&lt;/span&gt; match_noescape_characters(stat &lt;span class="op"&gt;=&lt;/span&gt; %{&lt;span class="va"&gt;result:&lt;/span&gt; prev}) &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-7"&gt;&lt;a href="#cb10-7"&gt;&lt;/a&gt;  &lt;span class="co"&gt;# 名前付きキャプチャ，便利&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-8"&gt;&lt;a href="#cb10-8"&gt;&lt;/a&gt;  %{&lt;span class="st"&gt;&amp;quot;body&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;=&amp;gt;&lt;/span&gt; body, &lt;span class="st"&gt;&amp;quot;rest&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;=&amp;gt;&lt;/span&gt; rest} &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-9"&gt;&lt;a href="#cb10-9"&gt;&lt;/a&gt;    &lt;span class="cn"&gt;Regex&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;named_captures(&lt;span class="op"&gt;~&lt;/span&gt;r&lt;span class="op"&gt;/&lt;/span&gt;(?&lt;span class="op"&gt;&amp;lt;&lt;/span&gt;body&lt;span class="op"&gt;&amp;gt;&lt;/span&gt;[&lt;span class="op"&gt;^&lt;/span&gt;\\\&lt;span class="st"&gt;&amp;quot;\n\x00\t]*)(?&amp;lt;rest&amp;gt;.*)/s, stat[:rest])&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-10"&gt;&lt;a href="#cb10-10"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb10-11"&gt;&lt;a href="#cb10-11"&gt;&lt;/a&gt;&lt;span class="st"&gt;  update_stat(%{result: prev &amp;lt;&amp;gt; body}, :rest, rest)&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-12"&gt;&lt;a href="#cb10-12"&gt;&lt;/a&gt;&lt;span class="st"&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;エスケープ文字は，もうパターンマッチで頑張る:&lt;/p&gt;
&lt;div class="sourceCode" id="cb11"&gt;&lt;pre class="sourceCode elixir"&gt;&lt;code class="sourceCode elixir"&gt;&lt;span id="cb11-1"&gt;&lt;a href="#cb11-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;defp&lt;/span&gt; match_escape(%{&lt;span class="va"&gt;rest:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;\\\&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest, &lt;span class="va"&gt;result:&lt;/span&gt; prev}),&lt;/span&gt;
&lt;span id="cb11-2"&gt;&lt;a href="#cb11-2"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;do&lt;/span&gt;: update_stat(%{&lt;span class="va"&gt;result:&lt;/span&gt; prev &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;\&amp;quot;&amp;quot;&lt;/span&gt;}, &lt;span class="va"&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id="cb11-3"&gt;&lt;a href="#cb11-3"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb11-4"&gt;&lt;a href="#cb11-4"&gt;&lt;/a&gt;&lt;span class="kw"&gt;defp&lt;/span&gt; match_escape(%{&lt;span class="va"&gt;rest:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;\\\\&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest, &lt;span class="va"&gt;result:&lt;/span&gt; prev}),&lt;/span&gt;
&lt;span id="cb11-5"&gt;&lt;a href="#cb11-5"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;do&lt;/span&gt;: update_stat(%{&lt;span class="va"&gt;result:&lt;/span&gt; prev &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;\\&amp;quot;&lt;/span&gt;}, &lt;span class="va"&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id="cb11-6"&gt;&lt;a href="#cb11-6"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb11-7"&gt;&lt;a href="#cb11-7"&gt;&lt;/a&gt;&lt;span class="kw"&gt;defp&lt;/span&gt; match_escape(%{&lt;span class="va"&gt;rest:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;\\\/&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest, &lt;span class="va"&gt;result:&lt;/span&gt; prev}),&lt;/span&gt;
&lt;span id="cb11-8"&gt;&lt;a href="#cb11-8"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;do&lt;/span&gt;: update_stat(%{&lt;span class="va"&gt;result:&lt;/span&gt; prev &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;\/&amp;quot;&lt;/span&gt;}, &lt;span class="va"&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id="cb11-9"&gt;&lt;a href="#cb11-9"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb11-10"&gt;&lt;a href="#cb11-10"&gt;&lt;/a&gt;&lt;span class="kw"&gt;defp&lt;/span&gt; match_escape(%{&lt;span class="va"&gt;rest:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;\\b&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest, &lt;span class="va"&gt;result:&lt;/span&gt; prev}),&lt;/span&gt;
&lt;span id="cb11-11"&gt;&lt;a href="#cb11-11"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;do&lt;/span&gt;: update_stat(%{&lt;span class="va"&gt;result:&lt;/span&gt; prev &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;\b&amp;quot;&lt;/span&gt;}, &lt;span class="va"&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id="cb11-12"&gt;&lt;a href="#cb11-12"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb11-13"&gt;&lt;a href="#cb11-13"&gt;&lt;/a&gt;&lt;span class="kw"&gt;defp&lt;/span&gt; match_escape(%{&lt;span class="va"&gt;rest:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;\\f&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest, &lt;span class="va"&gt;result:&lt;/span&gt; prev}),&lt;/span&gt;
&lt;span id="cb11-14"&gt;&lt;a href="#cb11-14"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;do&lt;/span&gt;: update_stat(%{&lt;span class="va"&gt;result:&lt;/span&gt; prev &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;\f&amp;quot;&lt;/span&gt;}, &lt;span class="va"&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id="cb11-15"&gt;&lt;a href="#cb11-15"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb11-16"&gt;&lt;a href="#cb11-16"&gt;&lt;/a&gt;&lt;span class="kw"&gt;defp&lt;/span&gt; match_escape(%{&lt;span class="va"&gt;rest:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;\\n&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest, &lt;span class="va"&gt;result:&lt;/span&gt; prev}),&lt;/span&gt;
&lt;span id="cb11-17"&gt;&lt;a href="#cb11-17"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;do&lt;/span&gt;: update_stat(%{&lt;span class="va"&gt;result:&lt;/span&gt; prev &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;}, &lt;span class="va"&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id="cb11-18"&gt;&lt;a href="#cb11-18"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb11-19"&gt;&lt;a href="#cb11-19"&gt;&lt;/a&gt;&lt;span class="kw"&gt;defp&lt;/span&gt; match_escape(%{&lt;span class="va"&gt;rest:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;\\r&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest, &lt;span class="va"&gt;result:&lt;/span&gt; prev}),&lt;/span&gt;
&lt;span id="cb11-20"&gt;&lt;a href="#cb11-20"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;do&lt;/span&gt;: update_stat(%{&lt;span class="va"&gt;result:&lt;/span&gt; prev &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;\r&amp;quot;&lt;/span&gt;}, &lt;span class="va"&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id="cb11-21"&gt;&lt;a href="#cb11-21"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb11-22"&gt;&lt;a href="#cb11-22"&gt;&lt;/a&gt;&lt;span class="kw"&gt;defp&lt;/span&gt; match_escape(%{&lt;span class="va"&gt;rest:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;\\t&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest, &lt;span class="va"&gt;result:&lt;/span&gt; prev}),&lt;/span&gt;
&lt;span id="cb11-23"&gt;&lt;a href="#cb11-23"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;do&lt;/span&gt;: update_stat(%{&lt;span class="va"&gt;result:&lt;/span&gt; prev &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;\t&amp;quot;&lt;/span&gt;}, &lt;span class="va"&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id="cb11-24"&gt;&lt;a href="#cb11-24"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb11-25"&gt;&lt;a href="#cb11-25"&gt;&lt;/a&gt;&lt;span class="co"&gt;# \u1234 とかいうやつ&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-26"&gt;&lt;a href="#cb11-26"&gt;&lt;/a&gt;&lt;span class="kw"&gt;defp&lt;/span&gt; match_escape(stat &lt;span class="op"&gt;=&lt;/span&gt; %{&lt;span class="va"&gt;rest:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;\\u&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest, &lt;span class="va"&gt;result:&lt;/span&gt; prev}) &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-27"&gt;&lt;a href="#cb11-27"&gt;&lt;/a&gt;  &lt;span class="co"&gt;# /.{n,m}/ で n 個以上 m 個以下にマッチする&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-28"&gt;&lt;a href="#cb11-28"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;case&lt;/span&gt; &lt;span class="cn"&gt;Regex&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;named_captures(&lt;span class="op"&gt;~&lt;/span&gt;r&lt;span class="op"&gt;/&lt;/span&gt;(?&lt;span class="op"&gt;&amp;lt;&lt;/span&gt;body&lt;span class="op"&gt;&amp;gt;&lt;/span&gt;[\dA&lt;span class="op"&gt;-&lt;/span&gt;&lt;span class="cn"&gt;Fa&lt;/span&gt;&lt;span class="op"&gt;-&lt;/span&gt;f]{&lt;span class="dv"&gt;4&lt;/span&gt;,&lt;span class="dv"&gt;4&lt;/span&gt;})(?&lt;span class="op"&gt;&amp;lt;&lt;/span&gt;rest&lt;span class="op"&gt;&amp;gt;.*&lt;/span&gt;)&lt;span class="op"&gt;/&lt;/span&gt;s, rest) &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-29"&gt;&lt;a href="#cb11-29"&gt;&lt;/a&gt;    %{&lt;span class="st"&gt;&amp;quot;body&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;=&amp;gt;&lt;/span&gt; body, &lt;span class="st"&gt;&amp;quot;rest&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;=&amp;gt;&lt;/span&gt; rest} &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-30"&gt;&lt;a href="#cb11-30"&gt;&lt;/a&gt;      &lt;span class="co"&gt;# 4桁の16進数をエスケープされた文字列として変換する&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-31"&gt;&lt;a href="#cb11-31"&gt;&lt;/a&gt;      &lt;span class="co"&gt;# 変換できなかった場合は nil が返ってくる&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-32"&gt;&lt;a href="#cb11-32"&gt;&lt;/a&gt;      &lt;span class="kw"&gt;case&lt;/span&gt; hex_to_string(body) &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-33"&gt;&lt;a href="#cb11-33"&gt;&lt;/a&gt;        &lt;span class="cn"&gt;nil&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="cn"&gt;Result&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;failure(stat)&lt;/span&gt;
&lt;span id="cb11-34"&gt;&lt;a href="#cb11-34"&gt;&lt;/a&gt;        hex &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; update_stat(%{&lt;span class="va"&gt;result:&lt;/span&gt; prev &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; hex}, &lt;span class="va"&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id="cb11-35"&gt;&lt;a href="#cb11-35"&gt;&lt;/a&gt;      &lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-36"&gt;&lt;a href="#cb11-36"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb11-37"&gt;&lt;a href="#cb11-37"&gt;&lt;/a&gt;    _ &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-38"&gt;&lt;a href="#cb11-38"&gt;&lt;/a&gt;      &lt;span class="cn"&gt;Result&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;failure(stat)&lt;/span&gt;
&lt;span id="cb11-39"&gt;&lt;a href="#cb11-39"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-40"&gt;&lt;a href="#cb11-40"&gt;&lt;/a&gt;&lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-41"&gt;&lt;a href="#cb11-41"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb11-42"&gt;&lt;a href="#cb11-42"&gt;&lt;/a&gt;&lt;span class="kw"&gt;defp&lt;/span&gt; hex_to_string(str) &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-43"&gt;&lt;a href="#cb11-43"&gt;&lt;/a&gt;  &lt;span class="cf"&gt;try&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-44"&gt;&lt;a href="#cb11-44"&gt;&lt;/a&gt;    &lt;span class="co"&gt;# 文字列を16進数として int 型に変換&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-45"&gt;&lt;a href="#cb11-45"&gt;&lt;/a&gt;    {hex, _} &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="cn"&gt;Integer&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;parse(str, &lt;span class="dv"&gt;16&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb11-46"&gt;&lt;a href="#cb11-46"&gt;&lt;/a&gt;    &lt;span class="op"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="va"&gt;hex::utf8&lt;/span&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="co"&gt;# こういう記法で int を16進数でエスケープされた文字列に変換できる&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-47"&gt;&lt;a href="#cb11-47"&gt;&lt;/a&gt;  &lt;span class="cf"&gt;rescue&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-48"&gt;&lt;a href="#cb11-48"&gt;&lt;/a&gt;    _ &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="cn"&gt;nil&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-49"&gt;&lt;a href="#cb11-49"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-50"&gt;&lt;a href="#cb11-50"&gt;&lt;/a&gt;&lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;まぁ正直，色々と雑で漏れてるケースもきっとあるのだが，そんな変な JSON をパースしたいわけでは無いのでこれでいいかな．&lt;/p&gt;
&lt;h3 id="数値のパース"&gt;数値のパース&lt;/h3&gt;
&lt;p&gt;数値は，マイナス符号・整数・浮動小数点数・&lt;code&gt;e&lt;/code&gt;記法を網羅する必要がある． これも，めんどくさいので正規表現に頼っちゃう:&lt;/p&gt;
&lt;div class="sourceCode" id="cb12"&gt;&lt;pre class="sourceCode elixir"&gt;&lt;code class="sourceCode elixir"&gt;&lt;span id="cb12-1"&gt;&lt;a href="#cb12-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;defp&lt;/span&gt; match_number(stat) &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-2"&gt;&lt;a href="#cb12-2"&gt;&lt;/a&gt;  {value, rest} &lt;span class="op"&gt;=&lt;/span&gt; compile_number(stat[&lt;span class="va"&gt;:rest&lt;/span&gt;])&lt;/span&gt;
&lt;span id="cb12-3"&gt;&lt;a href="#cb12-3"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb12-4"&gt;&lt;a href="#cb12-4"&gt;&lt;/a&gt;  &lt;span class="co"&gt;# 文字列から数値を取得できなかった場合は nil が返ってくる&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-5"&gt;&lt;a href="#cb12-5"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;case&lt;/span&gt; value &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-6"&gt;&lt;a href="#cb12-6"&gt;&lt;/a&gt;    &lt;span class="cn"&gt;nil&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-7"&gt;&lt;a href="#cb12-7"&gt;&lt;/a&gt;      &lt;span class="cn"&gt;Result&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;failure(stat)&lt;/span&gt;
&lt;span id="cb12-8"&gt;&lt;a href="#cb12-8"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb12-9"&gt;&lt;a href="#cb12-9"&gt;&lt;/a&gt;    _ &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-10"&gt;&lt;a href="#cb12-10"&gt;&lt;/a&gt;      &lt;span class="cn"&gt;Map&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;put(stat, &lt;span class="va"&gt;:result&lt;/span&gt;, value)&lt;/span&gt;
&lt;span id="cb12-11"&gt;&lt;a href="#cb12-11"&gt;&lt;/a&gt;      &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="cn"&gt;Map&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;put(&lt;span class="va"&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id="cb12-12"&gt;&lt;a href="#cb12-12"&gt;&lt;/a&gt;      &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="cn"&gt;Result&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;success()&lt;/span&gt;
&lt;span id="cb12-13"&gt;&lt;a href="#cb12-13"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-14"&gt;&lt;a href="#cb12-14"&gt;&lt;/a&gt;&lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-15"&gt;&lt;a href="#cb12-15"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb12-16"&gt;&lt;a href="#cb12-16"&gt;&lt;/a&gt;&lt;span class="kw"&gt;def&lt;/span&gt; compile_number(str) &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-17"&gt;&lt;a href="#cb12-17"&gt;&lt;/a&gt;  &lt;span class="co"&gt;# 名前付きキャプチャ，超便利&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-18"&gt;&lt;a href="#cb12-18"&gt;&lt;/a&gt;  &lt;span class="co"&gt;# minus は `-`，digit は整数部，frac は小数点以下，exp は `e`記法 (`10e-2`とか)&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-19"&gt;&lt;a href="#cb12-19"&gt;&lt;/a&gt;  %{&lt;span class="st"&gt;&amp;quot;minus&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;=&amp;gt;&lt;/span&gt; minus, &lt;span class="st"&gt;&amp;quot;digit&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;=&amp;gt;&lt;/span&gt; digit, &lt;span class="st"&gt;&amp;quot;frac&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;=&amp;gt;&lt;/span&gt; frac, &lt;span class="st"&gt;&amp;quot;exp&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;=&amp;gt;&lt;/span&gt; exp, &lt;span class="st"&gt;&amp;quot;rest&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;=&amp;gt;&lt;/span&gt; rest} &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-20"&gt;&lt;a href="#cb12-20"&gt;&lt;/a&gt;    &lt;span class="cn"&gt;Regex&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;named_captures(&lt;/span&gt;
&lt;span id="cb12-21"&gt;&lt;a href="#cb12-21"&gt;&lt;/a&gt;      &lt;span class="op"&gt;~&lt;/span&gt;r&lt;span class="op"&gt;/&lt;/span&gt;(?&lt;span class="op"&gt;&amp;lt;&lt;/span&gt;minus&lt;span class="op"&gt;&amp;gt;-&lt;/span&gt;?)(?&lt;span class="op"&gt;&amp;lt;&lt;/span&gt;digit&lt;span class="op"&gt;&amp;gt;&lt;/span&gt;[[&lt;span class="va"&gt;:digit&lt;/span&gt;:]]&lt;span class="op"&gt;*&lt;/span&gt;)(?&lt;span class="op"&gt;&amp;lt;&lt;/span&gt;frac&lt;span class="op"&gt;&amp;gt;&lt;/span&gt;\&lt;span class="op"&gt;.&lt;/span&gt;?[[&lt;span class="va"&gt;:digit&lt;/span&gt;:]]&lt;span class="op"&gt;*&lt;/span&gt;)(?&lt;span class="op"&gt;&amp;lt;&lt;/span&gt;exp&lt;span class="op"&gt;&amp;gt;&lt;/span&gt;[eE]?[&lt;span class="op"&gt;-+&lt;/span&gt;]?[[&lt;span class="va"&gt;:digit&lt;/span&gt;:]]&lt;span class="op"&gt;*&lt;/span&gt;)(?&lt;span class="op"&gt;&amp;lt;&lt;/span&gt;rest&lt;span class="op"&gt;&amp;gt;.*&lt;/span&gt;)&lt;span class="op"&gt;/&lt;/span&gt;s,&lt;/span&gt;
&lt;span id="cb12-22"&gt;&lt;a href="#cb12-22"&gt;&lt;/a&gt;      str&lt;/span&gt;
&lt;span id="cb12-23"&gt;&lt;a href="#cb12-23"&gt;&lt;/a&gt;    )&lt;/span&gt;
&lt;span id="cb12-24"&gt;&lt;a href="#cb12-24"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb12-25"&gt;&lt;a href="#cb12-25"&gt;&lt;/a&gt;  value &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-26"&gt;&lt;a href="#cb12-26"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;case&lt;/span&gt; {digit, frac, exp} &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-27"&gt;&lt;a href="#cb12-27"&gt;&lt;/a&gt;      {&lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt;, _, _} &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-28"&gt;&lt;a href="#cb12-28"&gt;&lt;/a&gt;        &lt;span class="cn"&gt;nil&lt;/span&gt; &lt;span class="co"&gt;# 整数部が無い場合はダメ&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-29"&gt;&lt;a href="#cb12-29"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb12-30"&gt;&lt;a href="#cb12-30"&gt;&lt;/a&gt;      {&lt;span class="st"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; num, &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt;} &lt;span class="kw"&gt;when&lt;/span&gt; num&lt;span class="op"&gt; !=&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-31"&gt;&lt;a href="#cb12-31"&gt;&lt;/a&gt;        &lt;span class="cn"&gt;nil&lt;/span&gt; &lt;span class="co"&gt;# 0 から始まる整数もダメ(小数はOK)&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-32"&gt;&lt;a href="#cb12-32"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb12-33"&gt;&lt;a href="#cb12-33"&gt;&lt;/a&gt;      {_, &lt;span class="st"&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; num, _} &lt;span class="kw"&gt;when&lt;/span&gt; num &lt;span class="op"&gt;==&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-34"&gt;&lt;a href="#cb12-34"&gt;&lt;/a&gt;        &lt;span class="cn"&gt;nil&lt;/span&gt; &lt;span class="co"&gt;# 小数点だけはダメ&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-35"&gt;&lt;a href="#cb12-35"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb12-36"&gt;&lt;a href="#cb12-36"&gt;&lt;/a&gt;      {_, _, &lt;span class="st"&gt;&amp;quot;e&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; num} &lt;span class="kw"&gt;when&lt;/span&gt; num &lt;span class="op"&gt;==&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-37"&gt;&lt;a href="#cb12-37"&gt;&lt;/a&gt;        &lt;span class="cn"&gt;nil&lt;/span&gt; &lt;span class="co"&gt;# e だけはダメ&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-38"&gt;&lt;a href="#cb12-38"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb12-39"&gt;&lt;a href="#cb12-39"&gt;&lt;/a&gt;      {_, _, &lt;span class="st"&gt;&amp;quot;E&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; num} &lt;span class="kw"&gt;when&lt;/span&gt; num &lt;span class="op"&gt;==&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-40"&gt;&lt;a href="#cb12-40"&gt;&lt;/a&gt;        &lt;span class="cn"&gt;nil&lt;/span&gt; &lt;span class="co"&gt;# E だけはダメ&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-41"&gt;&lt;a href="#cb12-41"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb12-42"&gt;&lt;a href="#cb12-42"&gt;&lt;/a&gt;      {_, &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt;} &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="co"&gt;# これは整数の場合&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-43"&gt;&lt;a href="#cb12-43"&gt;&lt;/a&gt;        &lt;span class="kw"&gt;case&lt;/span&gt; &lt;span class="cn"&gt;Integer&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;parse(minus &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; digit) &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-44"&gt;&lt;a href="#cb12-44"&gt;&lt;/a&gt;          {num, &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt;} &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; num&lt;/span&gt;
&lt;span id="cb12-45"&gt;&lt;a href="#cb12-45"&gt;&lt;/a&gt;          _ &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="cn"&gt;nil&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-46"&gt;&lt;a href="#cb12-46"&gt;&lt;/a&gt;        &lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-47"&gt;&lt;a href="#cb12-47"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb12-48"&gt;&lt;a href="#cb12-48"&gt;&lt;/a&gt;      _ &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="co"&gt;# これは浮動小数点数の場合&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-49"&gt;&lt;a href="#cb12-49"&gt;&lt;/a&gt;        &lt;span class="kw"&gt;case&lt;/span&gt; &lt;span class="cn"&gt;Float&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;parse(minus &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; digit &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; frac &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; exp) &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-50"&gt;&lt;a href="#cb12-50"&gt;&lt;/a&gt;          {num, &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt;} &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; num&lt;/span&gt;
&lt;span id="cb12-51"&gt;&lt;a href="#cb12-51"&gt;&lt;/a&gt;          _ &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="cn"&gt;nil&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-52"&gt;&lt;a href="#cb12-52"&gt;&lt;/a&gt;        &lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-53"&gt;&lt;a href="#cb12-53"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-54"&gt;&lt;a href="#cb12-54"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb12-55"&gt;&lt;a href="#cb12-55"&gt;&lt;/a&gt;  {value, rest}&lt;/span&gt;
&lt;span id="cb12-56"&gt;&lt;a href="#cb12-56"&gt;&lt;/a&gt;&lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これでとりあえず完成．&lt;/p&gt;
&lt;h2 id="テストする"&gt;テストする&lt;/h2&gt;
&lt;p&gt;JSON のテストスイートとして &lt;a href="https://github.com/nst/JSONTestSuite"&gt;nst/JSONTestSuite&lt;/a&gt; と言うのがあるので使わせてもらう． こんな感じに配置する:&lt;/p&gt;
&lt;div class="sourceCode" id="cb13"&gt;&lt;pre class="sourceCode txt"&gt;&lt;code class="sourceCode default"&gt;&lt;span id="cb13-1"&gt;&lt;a href="#cb13-1"&gt;&lt;/a&gt;\&lt;/span&gt;
&lt;span id="cb13-2"&gt;&lt;a href="#cb13-2"&gt;&lt;/a&gt;|- lib // elixir のコード置き場&lt;/span&gt;
&lt;span id="cb13-3"&gt;&lt;a href="#cb13-3"&gt;&lt;/a&gt;|- test&lt;/span&gt;
&lt;span id="cb13-4"&gt;&lt;a href="#cb13-4"&gt;&lt;/a&gt;|  |- fixture&lt;/span&gt;
&lt;span id="cb13-5"&gt;&lt;a href="#cb13-5"&gt;&lt;/a&gt;|  |  \- test_parsing // JSONTestSuite のテスト用 JSON ファイル群&lt;/span&gt;
&lt;span id="cb13-6"&gt;&lt;a href="#cb13-6"&gt;&lt;/a&gt;|  \- json_spec.exs&lt;/span&gt;
&lt;span id="cb13-7"&gt;&lt;a href="#cb13-7"&gt;&lt;/a&gt;\- mix.exs&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;テストには espec を使ってこんな感じに記述した:&lt;/p&gt;
&lt;div class="sourceCode" id="cb14"&gt;&lt;pre class="sourceCode elixir"&gt;&lt;code class="sourceCode elixir"&gt;&lt;span id="cb14-1"&gt;&lt;a href="#cb14-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;# json_spec.exs&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-2"&gt;&lt;a href="#cb14-2"&gt;&lt;/a&gt;&lt;span class="kw"&gt;defmodule&lt;/span&gt; &lt;span class="cn"&gt;JSONSuite&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-3"&gt;&lt;a href="#cb14-3"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;def&lt;/span&gt; test_suite &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-4"&gt;&lt;a href="#cb14-4"&gt;&lt;/a&gt;    [&lt;/span&gt;
&lt;span id="cb14-5"&gt;&lt;a href="#cb14-5"&gt;&lt;/a&gt;      &lt;span class="co"&gt;# エラーケース&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-6"&gt;&lt;a href="#cb14-6"&gt;&lt;/a&gt;      {&lt;span class="st"&gt;&amp;quot;n_array_1_true_without_comma.json&amp;quot;&lt;/span&gt;, {&lt;span class="va"&gt;:error&lt;/span&gt;, &lt;span class="cn"&gt;nil&lt;/span&gt;}},&lt;/span&gt;
&lt;span id="cb14-7"&gt;&lt;a href="#cb14-7"&gt;&lt;/a&gt;      {&lt;span class="st"&gt;&amp;quot;n_array_a_invalid_utf8.json&amp;quot;&lt;/span&gt;, {&lt;span class="va"&gt;:error&lt;/span&gt;, &lt;span class="cn"&gt;nil&lt;/span&gt;}},&lt;/span&gt;
&lt;span id="cb14-8"&gt;&lt;a href="#cb14-8"&gt;&lt;/a&gt;      &lt;span class="op"&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-9"&gt;&lt;a href="#cb14-9"&gt;&lt;/a&gt;      &lt;span class="co"&gt;# 成功ケース&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-10"&gt;&lt;a href="#cb14-10"&gt;&lt;/a&gt;      {&lt;span class="st"&gt;&amp;quot;y_array_arraysWithSpaces.json&amp;quot;&lt;/span&gt;, {&lt;span class="va"&gt;:ok&lt;/span&gt;, [[]]}},&lt;/span&gt;
&lt;span id="cb14-11"&gt;&lt;a href="#cb14-11"&gt;&lt;/a&gt;      {&lt;span class="st"&gt;&amp;quot;y_array_empty-string.json&amp;quot;&lt;/span&gt;, {&lt;span class="va"&gt;:ok&lt;/span&gt;, [&lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt;]}},&lt;/span&gt;
&lt;span id="cb14-12"&gt;&lt;a href="#cb14-12"&gt;&lt;/a&gt;      &lt;span class="op"&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-13"&gt;&lt;a href="#cb14-13"&gt;&lt;/a&gt;    ]&lt;/span&gt;
&lt;span id="cb14-14"&gt;&lt;a href="#cb14-14"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-15"&gt;&lt;a href="#cb14-15"&gt;&lt;/a&gt;&lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-16"&gt;&lt;a href="#cb14-16"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb14-17"&gt;&lt;a href="#cb14-17"&gt;&lt;/a&gt;&lt;span class="co"&gt;# JSONSuite を先に宣言しないと使えなかった&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-18"&gt;&lt;a href="#cb14-18"&gt;&lt;/a&gt;&lt;span class="kw"&gt;defmodule&lt;/span&gt; &lt;span class="cn"&gt;JSONSpec&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-19"&gt;&lt;a href="#cb14-19"&gt;&lt;/a&gt;  &lt;span class="im"&gt;use&lt;/span&gt; &lt;span class="cn"&gt;ESpec&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-20"&gt;&lt;a href="#cb14-20"&gt;&lt;/a&gt;  &lt;span class="im"&gt;alias&lt;/span&gt; &lt;span class="cn"&gt;ThankYouStars&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="cn"&gt;JSON&lt;/span&gt;, &lt;span class="va"&gt;as:&lt;/span&gt; &lt;span class="cn"&gt;JSON&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-21"&gt;&lt;a href="#cb14-21"&gt;&lt;/a&gt;  &lt;span class="im"&gt;alias&lt;/span&gt; &lt;span class="cn"&gt;ThankYouStars&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="cn"&gt;Result&lt;/span&gt;, &lt;span class="va"&gt;as:&lt;/span&gt; &lt;span class="cn"&gt;Result&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-22"&gt;&lt;a href="#cb14-22"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb14-23"&gt;&lt;a href="#cb14-23"&gt;&lt;/a&gt;  describe &lt;span class="st"&gt;&amp;quot;JSON.decode&amp;quot;&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-24"&gt;&lt;a href="#cb14-24"&gt;&lt;/a&gt;    &lt;span class="cn"&gt;Enum&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;map(&lt;span class="cn"&gt;JSONSuite&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;test_suite(), &lt;span class="kw"&gt;fn&lt;/span&gt; {path, result} &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-25"&gt;&lt;a href="#cb14-25"&gt;&lt;/a&gt;      context path &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-26"&gt;&lt;a href="#cb14-26"&gt;&lt;/a&gt;        &lt;span class="co"&gt;# 変数を利用するには unquote する必要がある(マクロのせい？)&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-27"&gt;&lt;a href="#cb14-27"&gt;&lt;/a&gt;        let(&lt;span class="va"&gt;:json&lt;/span&gt;, &lt;span class="kw"&gt;do&lt;/span&gt;: &lt;span class="cn"&gt;File&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;read!(&lt;span class="st"&gt;&amp;quot;test/fixture/test_parsing/&lt;/span&gt;&lt;span class="ot"&gt;#{&lt;/span&gt;&lt;span class="kw"&gt;unquote&lt;/span&gt;(path)&lt;span class="ot"&gt;}&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;&lt;/span&gt;))&lt;/span&gt;
&lt;span id="cb14-28"&gt;&lt;a href="#cb14-28"&gt;&lt;/a&gt;        it(&lt;/span&gt;
&lt;span id="cb14-29"&gt;&lt;a href="#cb14-29"&gt;&lt;/a&gt;          &lt;span class="kw"&gt;do&lt;/span&gt;:&lt;/span&gt;
&lt;span id="cb14-30"&gt;&lt;a href="#cb14-30"&gt;&lt;/a&gt;            &lt;span class="cn"&gt;Result&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;map_error(&lt;span class="cn"&gt;JSON&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;decode(json()), &lt;span class="kw"&gt;fn&lt;/span&gt; _ &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="cn"&gt;nil&lt;/span&gt; &lt;span class="kw"&gt;end&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb14-31"&gt;&lt;a href="#cb14-31"&gt;&lt;/a&gt;            &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; to(eq(&lt;span class="kw"&gt;unquote&lt;/span&gt;(&lt;span class="cn"&gt;Macro&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;escape(result))))&lt;/span&gt;
&lt;span id="cb14-32"&gt;&lt;a href="#cb14-32"&gt;&lt;/a&gt;        )&lt;/span&gt;
&lt;span id="cb14-33"&gt;&lt;a href="#cb14-33"&gt;&lt;/a&gt;      &lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-34"&gt;&lt;a href="#cb14-34"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;end&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb14-35"&gt;&lt;a href="#cb14-35"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-36"&gt;&lt;a href="#cb14-36"&gt;&lt;/a&gt;&lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;unquote&lt;/code&gt; やらモジュールの順序周りやら結構苦労した． なお，いくつかテストの通らない JSONTestSuite のケースがあるので，そう言うのはとりあえずコメントアウトしてる．&lt;/p&gt;
&lt;h2 id="おしまい"&gt;おしまい&lt;/h2&gt;
&lt;p&gt;意外と綺麗にかけて満足． なお，パフォーマンスは無視してる笑．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/12/21/212423</id><title type="text">OpenShift.run 2019 で Kubernetes のスケジューリングについて話してきました</title><updated>2019-12-21T21:24:23+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/12/21/212423"/><summary type="html">先日行われた OpenShift コミュニティのイベント OpenShift.run 2019 にて、Kubernetes Scheduler とその関連ツールについて講演してきました。公募 CFP 枠です。 OpenShift のイベントでありながら、OpenShift についてはまったく触れずひたすら Kubernetes の内部実装を解説する異色の登壇でした。実際、40 分枠の講演の中で（RedHat 社以外も含め）ベンダニュートラルな立場で登壇したのは自分だけだったようです。これは私見ですが、逆に言えばそういう内容でも CFP 採択されているというのは、運営側も「単なるマーケティングイ…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/12/19/135125</id><title type="text">plain-old jarで JUnit5 を試す</title><updated>2019-12-19T13:51:25+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/12/19/135125"/><summary type="html">https://junit.org/junit5/docs/current/user-guide/#running-tests-console-launcher に書いてあるんだけど、分かりにく過ぎたので。 $ curl -O https://repo1.maven.org/maven2/org/junit/platform/junit-platform-console-standalone/1.5.2/junit-platform-console-standalone-1.5.2.jar $ cat SampleTest.java import static org.junit.jupite…</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-12-10-tapl-with-elm-part3.html</id><title type="text">Elm で作る TaPL のラムダ計算（その３）</title><updated>2019-12-10T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-12-10-tapl-with-elm-part3.html"/><summary type="html">&lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;本記事は「&lt;a href="https://adventar.org/calendars/4212"&gt;IGGG Advent Calendar 2019&lt;/a&gt;」の10日目の記事です．&lt;/p&gt;
&lt;h1 id="section"&gt;&lt;/h1&gt;
&lt;p&gt;表題の通り，TaPL という書籍で紹介されているプログラミング言語の実装例を Elm でやってみたという話です（その３）． &lt;a href="https://matsubara0507.github.io/posts/2019-12-06-tapl-with-elm-part1.html"&gt;その１&lt;/a&gt;と&lt;a href="https://matsubara0507.github.io/posts/2019-12-07-tapl-with-elm-part2.html"&gt;その２&lt;/a&gt;はこちら．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第4章 算術式のML実装&lt;/li&gt;
&lt;li&gt;第7章 ラムダ計算の ML 実装&lt;/li&gt;
&lt;li&gt;第10章 単純型のML実装 (本記事はココ)
&lt;ul&gt;
&lt;li&gt;7章のを型付きラムダ計算にする&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;第17章 部分型付けの ML 実装&lt;/li&gt;
&lt;li&gt;第25章 System F の ML 実装
&lt;ul&gt;
&lt;li&gt;最後に型の多相性を追加&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;実装は全て下記のリポジトリにあげています:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matsubara0507/ELaMbda"&gt;matsubara0507/ELaMbda - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また，今まで同様に&lt;a href="https://matsubara0507.github.io/ELaMbda/?chap=chap10"&gt;Web ブラウザから遊べるようになってます&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;&lt;a href="http://localhost:8000/docs/index.html?chap=chap10&amp;amp;exp=(\x%20:%20Bool%20.%20if%20x%20then%20x%20else%20(\f%20:%20Bool%20-%3E%20Bool%20-%3E%20Bool%20.%20f%20x%20x)%20(\x%20:%20Bool%20.%20\y%20:%20Bool%20.%20y))%20(if%20true%20then%20false%20else%20true)"&gt;&lt;img src="/assets/tapl-with-elm/chap10.jpg"&gt;&lt;/img&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="第10章-単純型の-ml-実装"&gt;第10章 単純型の ML 実装&lt;/h2&gt;
&lt;p&gt;さて，いよいよみんな大好き「型」の登場だ． 10章は少し面白くて，4章で実装した算術式の真偽値に関する部分と7章の型なしラムダ計算を組み合わせて，更にそれに型をのせるプログラミング言語を実装する． つまり，今までの実装をちゃんとやっていれば割とサクッとできています．&lt;/p&gt;
&lt;h1 id="section-1"&gt;&lt;/h1&gt;
&lt;p&gt;なお，同期各位は全然やらなかったせいか10章を5週ぐらいやっている笑．&lt;/p&gt;
&lt;h3 id="構文規則"&gt;構文規則&lt;/h3&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode txt"&gt;&lt;code class="sourceCode default"&gt;&lt;span id="cb1-1"&gt;&lt;a href="#cb1-1"&gt;&lt;/a&gt;t := x       [変数]&lt;/span&gt;
&lt;span id="cb1-2"&gt;&lt;a href="#cb1-2"&gt;&lt;/a&gt;   | \x:T.t  [ラムダ抽象]&lt;/span&gt;
&lt;span id="cb1-3"&gt;&lt;a href="#cb1-3"&gt;&lt;/a&gt;   | t t     [関数適用]&lt;/span&gt;
&lt;span id="cb1-4"&gt;&lt;a href="#cb1-4"&gt;&lt;/a&gt;   | true&lt;/span&gt;
&lt;span id="cb1-5"&gt;&lt;a href="#cb1-5"&gt;&lt;/a&gt;   | false&lt;/span&gt;
&lt;span id="cb1-6"&gt;&lt;a href="#cb1-6"&gt;&lt;/a&gt;   | if t then t else t&lt;/span&gt;
&lt;span id="cb1-7"&gt;&lt;a href="#cb1-7"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb1-8"&gt;&lt;a href="#cb1-8"&gt;&lt;/a&gt;v := \x:T.t&lt;/span&gt;
&lt;span id="cb1-9"&gt;&lt;a href="#cb1-9"&gt;&lt;/a&gt;   | true&lt;/span&gt;
&lt;span id="cb1-10"&gt;&lt;a href="#cb1-10"&gt;&lt;/a&gt;   | false&lt;/span&gt;
&lt;span id="cb1-11"&gt;&lt;a href="#cb1-11"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb1-12"&gt;&lt;a href="#cb1-12"&gt;&lt;/a&gt;T := Bool    [真偽値型]&lt;/span&gt;
&lt;span id="cb1-13"&gt;&lt;a href="#cb1-13"&gt;&lt;/a&gt;   | T -&amp;gt; T  [関数型]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ラムダ抽象には型注釈(&lt;code&gt;:T&lt;/code&gt; の部分)がある． なんで付けるのかとかは9章に書いてあるのでぜひ TaPL を買って読んでください(おい)． これを Elm の型として実装する:&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb2-1"&gt;&lt;a href="#cb2-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-2"&gt;&lt;a href="#cb2-2"&gt;&lt;/a&gt;    &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;TmVar&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-3"&gt;&lt;a href="#cb2-3"&gt;&lt;/a&gt;    &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;TmAbs&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="dt"&gt;Ty&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-4"&gt;&lt;a href="#cb2-4"&gt;&lt;/a&gt;    &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;TmApp&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-5"&gt;&lt;a href="#cb2-5"&gt;&lt;/a&gt;    &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;TmTrue&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-6"&gt;&lt;a href="#cb2-6"&gt;&lt;/a&gt;    &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;TmFalse&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-7"&gt;&lt;a href="#cb2-7"&gt;&lt;/a&gt;    &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;TmIf&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-8"&gt;&lt;a href="#cb2-8"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-9"&gt;&lt;a href="#cb2-9"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Ty&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-10"&gt;&lt;a href="#cb2-10"&gt;&lt;/a&gt;    &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;TyArr&lt;/span&gt; &lt;span class="dt"&gt;Ty&lt;/span&gt; &lt;span class="dt"&gt;Ty&lt;/span&gt; &lt;span class="co"&gt;-- Arrow の Arr ね&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-11"&gt;&lt;a href="#cb2-11"&gt;&lt;/a&gt;    &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;TyBool&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-12"&gt;&lt;a href="#cb2-12"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-13"&gt;&lt;a href="#cb2-13"&gt;&lt;/a&gt;&lt;span class="fu"&gt;isval&lt;/span&gt; : &lt;span class="dt"&gt;Context&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Bool&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-14"&gt;&lt;a href="#cb2-14"&gt;&lt;/a&gt;&lt;span class="fu"&gt;isval&lt;/span&gt; &lt;span class="fu"&gt;_&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-15"&gt;&lt;a href="#cb2-15"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;case&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="cf"&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-16"&gt;&lt;a href="#cb2-16"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;TmAbs&lt;/span&gt; &lt;span class="fu"&gt;_&lt;/span&gt; &lt;span class="fu"&gt;_&lt;/span&gt; &lt;span class="fu"&gt;_&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-17"&gt;&lt;a href="#cb2-17"&gt;&lt;/a&gt;            &lt;span class="dt"&gt;True&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-18"&gt;&lt;a href="#cb2-18"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-19"&gt;&lt;a href="#cb2-19"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;TmTrue&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-20"&gt;&lt;a href="#cb2-20"&gt;&lt;/a&gt;            &lt;span class="dt"&gt;True&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-21"&gt;&lt;a href="#cb2-21"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-22"&gt;&lt;a href="#cb2-22"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;TmFalse&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-23"&gt;&lt;a href="#cb2-23"&gt;&lt;/a&gt;            &lt;span class="dt"&gt;True&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-24"&gt;&lt;a href="#cb2-24"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-25"&gt;&lt;a href="#cb2-25"&gt;&lt;/a&gt;        &lt;span class="fu"&gt;_&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-26"&gt;&lt;a href="#cb2-26"&gt;&lt;/a&gt;            &lt;span class="dt"&gt;False&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-27"&gt;&lt;a href="#cb2-27"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-28"&gt;&lt;a href="#cb2-28"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="kw"&gt;alias&lt;/span&gt; &lt;span class="dt"&gt;Context&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt; ( &lt;span class="dt"&gt;String&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;Binding&lt;/span&gt; )&lt;/span&gt;
&lt;span id="cb2-29"&gt;&lt;a href="#cb2-29"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Binding&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;NameBind&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;型の型 &lt;code&gt;Ty&lt;/code&gt; 以外は，4章と7章の &lt;code&gt;Term&lt;/code&gt; や &lt;code&gt;isval&lt;/code&gt; を合体させているだけだ．&lt;/p&gt;
&lt;h3 id="評価規則"&gt;評価規則&lt;/h3&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode txt"&gt;&lt;code class="sourceCode default"&gt;&lt;span id="cb3-1"&gt;&lt;a href="#cb3-1"&gt;&lt;/a&gt;// 7章の評価規則&lt;/span&gt;
&lt;span id="cb3-2"&gt;&lt;a href="#cb3-2"&gt;&lt;/a&gt; t1 =&amp;gt; t1&amp;#39;&lt;/span&gt;
&lt;span id="cb3-3"&gt;&lt;a href="#cb3-3"&gt;&lt;/a&gt;---------------&lt;/span&gt;
&lt;span id="cb3-4"&gt;&lt;a href="#cb3-4"&gt;&lt;/a&gt; t1 t2 =&amp;gt; t1&amp;#39; t2&lt;/span&gt;
&lt;span id="cb3-5"&gt;&lt;a href="#cb3-5"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-6"&gt;&lt;a href="#cb3-6"&gt;&lt;/a&gt; t2 =&amp;gt; t2&amp;#39;&lt;/span&gt;
&lt;span id="cb3-7"&gt;&lt;a href="#cb3-7"&gt;&lt;/a&gt;---------------&lt;/span&gt;
&lt;span id="cb3-8"&gt;&lt;a href="#cb3-8"&gt;&lt;/a&gt; v1 t2 =&amp;gt; v1 t2&amp;#39;&lt;/span&gt;
&lt;span id="cb3-9"&gt;&lt;a href="#cb3-9"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-10"&gt;&lt;a href="#cb3-10"&gt;&lt;/a&gt; (\x:T.t12) v2 -&amp;gt; [x|-&amp;gt; v2]t12&lt;/span&gt;
&lt;span id="cb3-11"&gt;&lt;a href="#cb3-11"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-12"&gt;&lt;a href="#cb3-12"&gt;&lt;/a&gt;// 4章の評価規則&lt;/span&gt;
&lt;span id="cb3-13"&gt;&lt;a href="#cb3-13"&gt;&lt;/a&gt; if true then t2 else t3 =&amp;gt; t2&lt;/span&gt;
&lt;span id="cb3-14"&gt;&lt;a href="#cb3-14"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-15"&gt;&lt;a href="#cb3-15"&gt;&lt;/a&gt; if false then t2 else t3 =&amp;gt; t3&lt;/span&gt;
&lt;span id="cb3-16"&gt;&lt;a href="#cb3-16"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-17"&gt;&lt;a href="#cb3-17"&gt;&lt;/a&gt; t1 -&amp;gt; t1&amp;#39;&lt;/span&gt;
&lt;span id="cb3-18"&gt;&lt;a href="#cb3-18"&gt;&lt;/a&gt;-------------------------------------------------&lt;/span&gt;
&lt;span id="cb3-19"&gt;&lt;a href="#cb3-19"&gt;&lt;/a&gt; if t1 then t2 else t3 =&amp;gt; if t1&amp;#39; then t2 else t3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;評価規則も同様に型注釈の構文が追加されただけでほとんど変わらない． 変わらないということはすなわち，実行時(評価)には型の有無は影響しないということだ． 構文規則同様，4章と7章の実装を組み合わせることで実装が終わる:&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb4-1"&gt;&lt;a href="#cb4-1"&gt;&lt;/a&gt;&lt;span class="fu"&gt;eval&lt;/span&gt; : &lt;span class="dt"&gt;Context&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-2"&gt;&lt;a href="#cb4-2"&gt;&lt;/a&gt;&lt;span class="fu"&gt;eval&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-3"&gt;&lt;a href="#cb4-3"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;if&lt;/span&gt; &lt;span class="fu"&gt;isval&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="cf"&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-4"&gt;&lt;a href="#cb4-4"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;Just&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-5"&gt;&lt;a href="#cb4-5"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-6"&gt;&lt;a href="#cb4-6"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;andThen&lt;/span&gt; (&lt;span class="fu"&gt;eval&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt;) (&lt;span class="fu"&gt;eval1&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb4-7"&gt;&lt;a href="#cb4-7"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-8"&gt;&lt;a href="#cb4-8"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- あらゆる TmAbs のパターンマッチに Ty のパラメーターを追加する必要はある&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-9"&gt;&lt;a href="#cb4-9"&gt;&lt;/a&gt;&lt;span class="fu"&gt;eval1&lt;/span&gt; : &lt;span class="dt"&gt;Context&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-10"&gt;&lt;a href="#cb4-10"&gt;&lt;/a&gt;&lt;span class="fu"&gt;eval1&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-11"&gt;&lt;a href="#cb4-11"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;case&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="cf"&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-12"&gt;&lt;a href="#cb4-12"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;TmApp&lt;/span&gt; (&lt;span class="dt"&gt;TmAbs&lt;/span&gt; &lt;span class="fu"&gt;x&lt;/span&gt; &lt;span class="fu"&gt;ty&lt;/span&gt; &lt;span class="fu"&gt;t12&lt;/span&gt;) &lt;span class="fu"&gt;t2&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-13"&gt;&lt;a href="#cb4-13"&gt;&lt;/a&gt;            &lt;span class="cf"&gt;if&lt;/span&gt; &lt;span class="fu"&gt;isval&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;t2&lt;/span&gt; &lt;span class="cf"&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-14"&gt;&lt;a href="#cb4-14"&gt;&lt;/a&gt;                &lt;span class="dt"&gt;Just&lt;/span&gt; (&lt;span class="fu"&gt;termSubstTop&lt;/span&gt; &lt;span class="fu"&gt;t2&lt;/span&gt; &lt;span class="fu"&gt;t12&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb4-15"&gt;&lt;a href="#cb4-15"&gt;&lt;/a&gt;            &lt;span class="cf"&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-16"&gt;&lt;a href="#cb4-16"&gt;&lt;/a&gt;                &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;map&lt;/span&gt; (&lt;span class="dt"&gt;TmApp&lt;/span&gt; (&lt;span class="dt"&gt;TmAbs&lt;/span&gt; &lt;span class="fu"&gt;x&lt;/span&gt; &lt;span class="fu"&gt;ty&lt;/span&gt; &lt;span class="fu"&gt;t12&lt;/span&gt;)) (&lt;span class="fu"&gt;eval1&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;t2&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb4-17"&gt;&lt;a href="#cb4-17"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-18"&gt;&lt;a href="#cb4-18"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;TmApp&lt;/span&gt; &lt;span class="fu"&gt;t1&lt;/span&gt; &lt;span class="fu"&gt;t2&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-19"&gt;&lt;a href="#cb4-19"&gt;&lt;/a&gt;            &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;map&lt;/span&gt; (&lt;span class="fu"&gt;flip&lt;/span&gt; &lt;span class="dt"&gt;TmApp&lt;/span&gt; &lt;span class="fu"&gt;t2&lt;/span&gt;) (&lt;span class="fu"&gt;eval1&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;t1&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb4-20"&gt;&lt;a href="#cb4-20"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-21"&gt;&lt;a href="#cb4-21"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;TmIf&lt;/span&gt; &lt;span class="dt"&gt;TmTrue&lt;/span&gt; &lt;span class="fu"&gt;t2&lt;/span&gt; &lt;span class="fu"&gt;_&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-22"&gt;&lt;a href="#cb4-22"&gt;&lt;/a&gt;            &lt;span class="dt"&gt;Just&lt;/span&gt; &lt;span class="fu"&gt;t2&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-23"&gt;&lt;a href="#cb4-23"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-24"&gt;&lt;a href="#cb4-24"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;TmIf&lt;/span&gt; &lt;span class="dt"&gt;TmFalse&lt;/span&gt; &lt;span class="fu"&gt;_&lt;/span&gt; &lt;span class="fu"&gt;t3&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-25"&gt;&lt;a href="#cb4-25"&gt;&lt;/a&gt;            &lt;span class="dt"&gt;Just&lt;/span&gt; &lt;span class="fu"&gt;t3&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-26"&gt;&lt;a href="#cb4-26"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-27"&gt;&lt;a href="#cb4-27"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;TmIf&lt;/span&gt; &lt;span class="fu"&gt;t1&lt;/span&gt; &lt;span class="fu"&gt;t2&lt;/span&gt; &lt;span class="fu"&gt;t3&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-28"&gt;&lt;a href="#cb4-28"&gt;&lt;/a&gt;            &lt;span class="fu"&gt;eval1&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;t1&lt;/span&gt; &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;map&lt;/span&gt; (\&lt;span class="fu"&gt;t1_&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;TmIf&lt;/span&gt; &lt;span class="fu"&gt;t1_&lt;/span&gt; &lt;span class="fu"&gt;t2&lt;/span&gt; &lt;span class="fu"&gt;t3&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb4-29"&gt;&lt;a href="#cb4-29"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-30"&gt;&lt;a href="#cb4-30"&gt;&lt;/a&gt;        &lt;span class="fu"&gt;_&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-31"&gt;&lt;a href="#cb4-31"&gt;&lt;/a&gt;            &lt;span class="dt"&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-32"&gt;&lt;a href="#cb4-32"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-33"&gt;&lt;a href="#cb4-33"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- t に s を代入する&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-34"&gt;&lt;a href="#cb4-34"&gt;&lt;/a&gt;&lt;span class="fu"&gt;termSubstTop&lt;/span&gt; : &lt;span class="dt"&gt;Term&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-35"&gt;&lt;a href="#cb4-35"&gt;&lt;/a&gt;&lt;span class="fu"&gt;termSubstTop&lt;/span&gt; &lt;span class="fu"&gt;s&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="op"&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="型付け規則"&gt;型付け規則&lt;/h3&gt;
&lt;p&gt;ここからが新しい． いわゆる型検査のことだ． TaPL では「正しく型付けされた項はおかしくならない」という性質(安全性・健全性ともいう)について議論されている(8章で)． 例えば，これから定義する型検査が通った項(&lt;code&gt;Term&lt;/code&gt;)は &lt;code&gt;eval&lt;/code&gt; 関数を適用しても無限ループなどにはならない． さて，そのための型付け規則は次のようになっている:&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode txt"&gt;&lt;code class="sourceCode default"&gt;&lt;span id="cb5-1"&gt;&lt;a href="#cb5-1"&gt;&lt;/a&gt;// 真偽値の型付け規則&lt;/span&gt;
&lt;span id="cb5-2"&gt;&lt;a href="#cb5-2"&gt;&lt;/a&gt; true : Bool&lt;/span&gt;
&lt;span id="cb5-3"&gt;&lt;a href="#cb5-3"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb5-4"&gt;&lt;a href="#cb5-4"&gt;&lt;/a&gt; false : Bool&lt;/span&gt;
&lt;span id="cb5-5"&gt;&lt;a href="#cb5-5"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb5-6"&gt;&lt;a href="#cb5-6"&gt;&lt;/a&gt; t1 : Bool    t2 : T    t3 : T&lt;/span&gt;
&lt;span id="cb5-7"&gt;&lt;a href="#cb5-7"&gt;&lt;/a&gt;-------------------------------&lt;/span&gt;
&lt;span id="cb5-8"&gt;&lt;a href="#cb5-8"&gt;&lt;/a&gt; if t1 then t2 else t3 : T&lt;/span&gt;
&lt;span id="cb5-9"&gt;&lt;a href="#cb5-9"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb5-10"&gt;&lt;a href="#cb5-10"&gt;&lt;/a&gt;// 単純ラムダ計算の型付け規則&lt;/span&gt;
&lt;span id="cb5-11"&gt;&lt;a href="#cb5-11"&gt;&lt;/a&gt; x : T ∈ Γ&lt;/span&gt;
&lt;span id="cb5-12"&gt;&lt;a href="#cb5-12"&gt;&lt;/a&gt;-----------&lt;/span&gt;
&lt;span id="cb5-13"&gt;&lt;a href="#cb5-13"&gt;&lt;/a&gt; Γ ⊢ x : T&lt;/span&gt;
&lt;span id="cb5-14"&gt;&lt;a href="#cb5-14"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb5-15"&gt;&lt;a href="#cb5-15"&gt;&lt;/a&gt; Γ, x : T1 ⊢ t2 : T2&lt;/span&gt;
&lt;span id="cb5-16"&gt;&lt;a href="#cb5-16"&gt;&lt;/a&gt;-----------------------------&lt;/span&gt;
&lt;span id="cb5-17"&gt;&lt;a href="#cb5-17"&gt;&lt;/a&gt; Γ ⊢ \x : T1 . t2 : T1 -&amp;gt; T2&lt;/span&gt;
&lt;span id="cb5-18"&gt;&lt;a href="#cb5-18"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb5-19"&gt;&lt;a href="#cb5-19"&gt;&lt;/a&gt; Γ ⊢ t1 : T11 -&amp;gt; T12    Γ ⊢ t2 : T11&lt;/span&gt;
&lt;span id="cb5-20"&gt;&lt;a href="#cb5-20"&gt;&lt;/a&gt;-------------------------------------&lt;/span&gt;
&lt;span id="cb5-21"&gt;&lt;a href="#cb5-21"&gt;&lt;/a&gt; Γ ⊢ t1 t2 : T12&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここで新しく出てくる &lt;code&gt;Γ&lt;/code&gt; は型環境と言い，変数と型の対応関係を線形リストのような感じに保持している． &lt;code&gt;Γ ⊢ t : T&lt;/code&gt; というのは「型環境 &lt;code&gt;Γ&lt;/code&gt; のもと項 &lt;code&gt;t&lt;/code&gt; は型 &lt;code&gt;T&lt;/code&gt; に型付け可能」という風に読める(たぶん)． まぁ実装してみればわかる(ほんとか？):&lt;/p&gt;
&lt;div class="sourceCode" id="cb6"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb6-1"&gt;&lt;a href="#cb6-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- 型環境には Context を再利用する&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-2"&gt;&lt;a href="#cb6-2"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="kw"&gt;alias&lt;/span&gt; &lt;span class="dt"&gt;Context&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt; ( &lt;span class="dt"&gt;String&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;Binding&lt;/span&gt; )&lt;/span&gt;
&lt;span id="cb6-3"&gt;&lt;a href="#cb6-3"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Binding&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-4"&gt;&lt;a href="#cb6-4"&gt;&lt;/a&gt;    &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;NameBind&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-5"&gt;&lt;a href="#cb6-5"&gt;&lt;/a&gt;    &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;VarBind&lt;/span&gt; &lt;span class="dt"&gt;Ty&lt;/span&gt; &lt;span class="co"&gt;-- 変数の型を保持&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-6"&gt;&lt;a href="#cb6-6"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb6-7"&gt;&lt;a href="#cb6-7"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- 項 t の型が最終的に導出できれば型付け可能ということになる&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-8"&gt;&lt;a href="#cb6-8"&gt;&lt;/a&gt;&lt;span class="fu"&gt;typeof&lt;/span&gt; : &lt;span class="dt"&gt;Context&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;Ty&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-9"&gt;&lt;a href="#cb6-9"&gt;&lt;/a&gt;&lt;span class="fu"&gt;typeof&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-10"&gt;&lt;a href="#cb6-10"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;case&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="cf"&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-11"&gt;&lt;a href="#cb6-11"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;TmVar&lt;/span&gt; &lt;span class="fu"&gt;x&lt;/span&gt; &lt;span class="fu"&gt;_&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-12"&gt;&lt;a href="#cb6-12"&gt;&lt;/a&gt;            &lt;span class="co"&gt;-- Context から型情報を引っ張ってくる&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-13"&gt;&lt;a href="#cb6-13"&gt;&lt;/a&gt;            &lt;span class="fu"&gt;getTypeFromContext&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;x&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-14"&gt;&lt;a href="#cb6-14"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb6-15"&gt;&lt;a href="#cb6-15"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;TmAbs&lt;/span&gt; &lt;span class="fu"&gt;x&lt;/span&gt; &lt;span class="fu"&gt;ty1&lt;/span&gt; &lt;span class="fu"&gt;t2&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-16"&gt;&lt;a href="#cb6-16"&gt;&lt;/a&gt;            &lt;span class="kw"&gt;let&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-17"&gt;&lt;a href="#cb6-17"&gt;&lt;/a&gt;                &lt;span class="co"&gt;-- Context に 変数と型の対応を追加する&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-18"&gt;&lt;a href="#cb6-18"&gt;&lt;/a&gt;                &lt;span class="fu"&gt;ctx1&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;addbinding&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;x&lt;/span&gt; (&lt;span class="dt"&gt;VarBind&lt;/span&gt; &lt;span class="fu"&gt;ty1&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb6-19"&gt;&lt;a href="#cb6-19"&gt;&lt;/a&gt;            &lt;span class="kw"&gt;in&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-20"&gt;&lt;a href="#cb6-20"&gt;&lt;/a&gt;            &lt;span class="co"&gt;-- ラムダ抽象は中の項 t2 が型付け可能である必要がある&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-21"&gt;&lt;a href="#cb6-21"&gt;&lt;/a&gt;            &lt;span class="fu"&gt;typeof&lt;/span&gt; &lt;span class="fu"&gt;ctx1&lt;/span&gt; &lt;span class="fu"&gt;t2&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-22"&gt;&lt;a href="#cb6-22"&gt;&lt;/a&gt;                &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;map&lt;/span&gt; (\&lt;span class="fu"&gt;ty2&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;TyArr&lt;/span&gt; &lt;span class="fu"&gt;ty1&lt;/span&gt; &lt;span class="fu"&gt;ty2&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb6-23"&gt;&lt;a href="#cb6-23"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb6-24"&gt;&lt;a href="#cb6-24"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;TmApp&lt;/span&gt; &lt;span class="fu"&gt;t1&lt;/span&gt; &lt;span class="fu"&gt;t2&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-25"&gt;&lt;a href="#cb6-25"&gt;&lt;/a&gt;            &lt;span class="cf"&gt;case&lt;/span&gt; ( &lt;span class="fu"&gt;typeof&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;t1&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;typeof&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;t2&lt;/span&gt; ) &lt;span class="cf"&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-26"&gt;&lt;a href="#cb6-26"&gt;&lt;/a&gt;                ( &lt;span class="dt"&gt;Just&lt;/span&gt; (&lt;span class="dt"&gt;TyArr&lt;/span&gt; &lt;span class="fu"&gt;ty11&lt;/span&gt; &lt;span class="fu"&gt;ty12&lt;/span&gt;)&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;Just&lt;/span&gt; &lt;span class="fu"&gt;ty2&lt;/span&gt; ) &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-27"&gt;&lt;a href="#cb6-27"&gt;&lt;/a&gt;                    &lt;span class="co"&gt;-- 関数適用の場合は引数の型 ty11 と適用する項の型 ty2 が同じである必要がある&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-28"&gt;&lt;a href="#cb6-28"&gt;&lt;/a&gt;                    &lt;span class="cf"&gt;if&lt;/span&gt; &lt;span class="fu"&gt;ty11&lt;/span&gt; &lt;span class="op"&gt;==&lt;/span&gt; &lt;span class="fu"&gt;ty2&lt;/span&gt; &lt;span class="cf"&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-29"&gt;&lt;a href="#cb6-29"&gt;&lt;/a&gt;                        &lt;span class="dt"&gt;Just&lt;/span&gt; &lt;span class="fu"&gt;ty12&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-30"&gt;&lt;a href="#cb6-30"&gt;&lt;/a&gt;                    &lt;span class="cf"&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-31"&gt;&lt;a href="#cb6-31"&gt;&lt;/a&gt;                        &lt;span class="dt"&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-32"&gt;&lt;a href="#cb6-32"&gt;&lt;/a&gt;                &lt;span class="fu"&gt;_&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-33"&gt;&lt;a href="#cb6-33"&gt;&lt;/a&gt;                    &lt;span class="dt"&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-34"&gt;&lt;a href="#cb6-34"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb6-35"&gt;&lt;a href="#cb6-35"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;TmTrue&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-36"&gt;&lt;a href="#cb6-36"&gt;&lt;/a&gt;            &lt;span class="dt"&gt;Just&lt;/span&gt; &lt;span class="dt"&gt;TyBool&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-37"&gt;&lt;a href="#cb6-37"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb6-38"&gt;&lt;a href="#cb6-38"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;TmFalse&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-39"&gt;&lt;a href="#cb6-39"&gt;&lt;/a&gt;            &lt;span class="dt"&gt;Just&lt;/span&gt; &lt;span class="dt"&gt;TyBool&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-40"&gt;&lt;a href="#cb6-40"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb6-41"&gt;&lt;a href="#cb6-41"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;TmIf&lt;/span&gt; &lt;span class="fu"&gt;t1&lt;/span&gt; &lt;span class="fu"&gt;t2&lt;/span&gt; &lt;span class="fu"&gt;t3&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-42"&gt;&lt;a href="#cb6-42"&gt;&lt;/a&gt;            &lt;span class="cf"&gt;case&lt;/span&gt; ( &lt;span class="fu"&gt;typeof&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;t1&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;typeof&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;t2&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;typeof&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;t3&lt;/span&gt; ) &lt;span class="cf"&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-43"&gt;&lt;a href="#cb6-43"&gt;&lt;/a&gt;                ( &lt;span class="dt"&gt;Just&lt;/span&gt; &lt;span class="dt"&gt;TyBool&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;Just&lt;/span&gt; &lt;span class="fu"&gt;ty2&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;Just&lt;/span&gt; &lt;span class="fu"&gt;ty3&lt;/span&gt; ) &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-44"&gt;&lt;a href="#cb6-44"&gt;&lt;/a&gt;                    &lt;span class="co"&gt;-- if-then-else の場合は t2 と t3 の型が同じである必要がある&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-45"&gt;&lt;a href="#cb6-45"&gt;&lt;/a&gt;                    &lt;span class="cf"&gt;if&lt;/span&gt; &lt;span class="fu"&gt;ty2&lt;/span&gt; &lt;span class="op"&gt;==&lt;/span&gt; &lt;span class="fu"&gt;ty3&lt;/span&gt; &lt;span class="cf"&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-46"&gt;&lt;a href="#cb6-46"&gt;&lt;/a&gt;                        &lt;span class="dt"&gt;Just&lt;/span&gt; &lt;span class="fu"&gt;ty2&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-47"&gt;&lt;a href="#cb6-47"&gt;&lt;/a&gt;                    &lt;span class="cf"&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-48"&gt;&lt;a href="#cb6-48"&gt;&lt;/a&gt;                        &lt;span class="dt"&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-49"&gt;&lt;a href="#cb6-49"&gt;&lt;/a&gt;                &lt;span class="fu"&gt;_&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-50"&gt;&lt;a href="#cb6-50"&gt;&lt;/a&gt;                    &lt;span class="dt"&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-51"&gt;&lt;a href="#cb6-51"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb6-52"&gt;&lt;a href="#cb6-52"&gt;&lt;/a&gt;&lt;span class="fu"&gt;getTypeFromContext&lt;/span&gt; : &lt;span class="dt"&gt;Context&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;Ty&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-53"&gt;&lt;a href="#cb6-53"&gt;&lt;/a&gt;&lt;span class="fu"&gt;getTypeFromContext&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;idx&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-54"&gt;&lt;a href="#cb6-54"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;case&lt;/span&gt; &lt;span class="fu"&gt;getbinding&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;idx&lt;/span&gt; &lt;span class="cf"&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-55"&gt;&lt;a href="#cb6-55"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;Just&lt;/span&gt; (&lt;span class="dt"&gt;VarBind&lt;/span&gt; &lt;span class="fu"&gt;ty&lt;/span&gt;) &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-56"&gt;&lt;a href="#cb6-56"&gt;&lt;/a&gt;            &lt;span class="dt"&gt;Just&lt;/span&gt; &lt;span class="fu"&gt;ty&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-57"&gt;&lt;a href="#cb6-57"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb6-58"&gt;&lt;a href="#cb6-58"&gt;&lt;/a&gt;        &lt;span class="fu"&gt;_&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-59"&gt;&lt;a href="#cb6-59"&gt;&lt;/a&gt;            &lt;span class="dt"&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-60"&gt;&lt;a href="#cb6-60"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb6-61"&gt;&lt;a href="#cb6-61"&gt;&lt;/a&gt;&lt;span class="fu"&gt;getbinding&lt;/span&gt; : &lt;span class="dt"&gt;Context&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;Binding&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-62"&gt;&lt;a href="#cb6-62"&gt;&lt;/a&gt;&lt;span class="fu"&gt;getbinding&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;n&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-63"&gt;&lt;a href="#cb6-63"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;case&lt;/span&gt; ( &lt;span class="fu"&gt;ctx&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;n&lt;/span&gt; ) &lt;span class="cf"&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-64"&gt;&lt;a href="#cb6-64"&gt;&lt;/a&gt;        ( []&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;_&lt;/span&gt; ) &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-65"&gt;&lt;a href="#cb6-65"&gt;&lt;/a&gt;            &lt;span class="dt"&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-66"&gt;&lt;a href="#cb6-66"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb6-67"&gt;&lt;a href="#cb6-67"&gt;&lt;/a&gt;        ( ( &lt;span class="fu"&gt;_&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;bind&lt;/span&gt; ) &lt;span class="op"&gt;::&lt;/span&gt; &lt;span class="fu"&gt;_&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt; ) &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-68"&gt;&lt;a href="#cb6-68"&gt;&lt;/a&gt;            &lt;span class="dt"&gt;Just&lt;/span&gt; &lt;span class="fu"&gt;bind&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-69"&gt;&lt;a href="#cb6-69"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb6-70"&gt;&lt;a href="#cb6-70"&gt;&lt;/a&gt;        ( &lt;span class="fu"&gt;_&lt;/span&gt; &lt;span class="op"&gt;::&lt;/span&gt; &lt;span class="fu"&gt;next&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;_&lt;/span&gt; ) &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-71"&gt;&lt;a href="#cb6-71"&gt;&lt;/a&gt;            &lt;span class="fu"&gt;getbinding&lt;/span&gt; &lt;span class="fu"&gt;next&lt;/span&gt; (&lt;span class="fu"&gt;n&lt;/span&gt; &lt;span class="op"&gt;-&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb6-72"&gt;&lt;a href="#cb6-72"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb6-73"&gt;&lt;a href="#cb6-73"&gt;&lt;/a&gt;&lt;span class="fu"&gt;addbinding&lt;/span&gt; : &lt;span class="dt"&gt;Context&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Binding&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Context&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-74"&gt;&lt;a href="#cb6-74"&gt;&lt;/a&gt;&lt;span class="fu"&gt;addbinding&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;x&lt;/span&gt; &lt;span class="fu"&gt;bind&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-75"&gt;&lt;a href="#cb6-75"&gt;&lt;/a&gt;    ( &lt;span class="fu"&gt;x&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;bind&lt;/span&gt; ) &lt;span class="op"&gt;::&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;REPL で試してみる:&lt;/p&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb7-1"&gt;&lt;a href="#cb7-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;TaPL&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Chap10&lt;/span&gt; &lt;span class="kw"&gt;as&lt;/span&gt; &lt;span class="dt"&gt;Chap10&lt;/span&gt; &lt;span class="kw"&gt;exposing&lt;/span&gt; (&lt;span class="dt"&gt;Term&lt;/span&gt;(&lt;span class="op"&gt;..&lt;/span&gt;)&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;Ty&lt;/span&gt;(&lt;span class="op"&gt;..&lt;/span&gt;)&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;Binding&lt;/span&gt;(&lt;span class="op"&gt;..&lt;/span&gt;))&lt;/span&gt;
&lt;span id="cb7-2"&gt;&lt;a href="#cb7-2"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- (\x : (Bool -&amp;gt; Bool) . (\f : (Bool -&amp;gt; Bool -&amp;gt; Bool) . f x)) (\x : Bool . x)&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-3"&gt;&lt;a href="#cb7-3"&gt;&lt;/a&gt;&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Chap10&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;typeof&lt;/span&gt; [] (&lt;span class="dt"&gt;TmApp&lt;/span&gt; (&lt;span class="dt"&gt;TmAbs&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class="dt"&gt;TyArr&lt;/span&gt; &lt;span class="dt"&gt;TyBool&lt;/span&gt; &lt;span class="dt"&gt;TyBool&lt;/span&gt;) (&lt;span class="dt"&gt;TmAbs&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;f&amp;quot;&lt;/span&gt; (&lt;span class="dt"&gt;TyArr&lt;/span&gt; (&lt;span class="dt"&gt;TyArr&lt;/span&gt; &lt;span class="dt"&gt;TyBool&lt;/span&gt; &lt;span class="dt"&gt;TyBool&lt;/span&gt;) &lt;span class="dt"&gt;TyBool&lt;/span&gt;) (&lt;span class="dt"&gt;TmApp&lt;/span&gt; (&lt;span class="dt"&gt;TmVar&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt; &lt;span class="dv"&gt;2&lt;/span&gt;) (&lt;span class="dt"&gt;TmVar&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt; &lt;span class="dv"&gt;2&lt;/span&gt;)))) (&lt;span class="dt"&gt;TmAbs&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class="dt"&gt;TyBool&lt;/span&gt; (&lt;span class="dt"&gt;TmVar&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;)))&lt;/span&gt;
&lt;span id="cb7-4"&gt;&lt;a href="#cb7-4"&gt;&lt;/a&gt;&lt;span class="dt"&gt;Just&lt;/span&gt; (&lt;span class="dt"&gt;TyArr&lt;/span&gt; (&lt;span class="dt"&gt;TyArr&lt;/span&gt; (&lt;span class="dt"&gt;TyArr&lt;/span&gt; &lt;span class="dt"&gt;TyBool&lt;/span&gt; &lt;span class="dt"&gt;TyBool&lt;/span&gt;) &lt;span class="dt"&gt;TyBool&lt;/span&gt;) &lt;span class="dt"&gt;TyBool&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb7-5"&gt;&lt;a href="#cb7-5"&gt;&lt;/a&gt;    : &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;Ty&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-6"&gt;&lt;a href="#cb7-6"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- (\x . x x) (\x . x x) はうまく型付けできない&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-7"&gt;&lt;a href="#cb7-7"&gt;&lt;/a&gt;&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Chap10&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;typeof&lt;/span&gt; [] (&lt;span class="dt"&gt;TmApp&lt;/span&gt; (&lt;span class="dt"&gt;TmAbs&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class="dt"&gt;TyArr&lt;/span&gt; &lt;span class="dt"&gt;TyBool&lt;/span&gt; &lt;span class="dt"&gt;TyBool&lt;/span&gt;) (&lt;span class="dt"&gt;TmApp&lt;/span&gt; (&lt;span class="dt"&gt;TmVar&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;) (&lt;span class="dt"&gt;TmVar&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;))) (&lt;span class="dt"&gt;TmAbs&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class="dt"&gt;TyArr&lt;/span&gt; &lt;span class="dt"&gt;TyBool&lt;/span&gt; &lt;span class="dt"&gt;TyBool&lt;/span&gt;) (&lt;span class="dt"&gt;TmApp&lt;/span&gt; (&lt;span class="dt"&gt;TmVar&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;) (&lt;span class="dt"&gt;TmVar&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;))))&lt;/span&gt;
&lt;span id="cb7-8"&gt;&lt;a href="#cb7-8"&gt;&lt;/a&gt;&lt;span class="dt"&gt;Nothing&lt;/span&gt; : &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;Ty&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="文字列に変換"&gt;文字列に変換&lt;/h3&gt;
&lt;p&gt;基本的に4・7章の定義を利用すれば良いのだが，型注釈ができるようになったので型も変換できるようにする:&lt;/p&gt;
&lt;div class="sourceCode" id="cb8"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb8-1"&gt;&lt;a href="#cb8-1"&gt;&lt;/a&gt;&lt;span class="fu"&gt;display&lt;/span&gt; : &lt;span class="dt"&gt;Term&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-2"&gt;&lt;a href="#cb8-2"&gt;&lt;/a&gt;&lt;span class="fu"&gt;display&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-3"&gt;&lt;a href="#cb8-3"&gt;&lt;/a&gt;    &lt;span class="fu"&gt;printtm&lt;/span&gt; [] &lt;span class="fu"&gt;t&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-4"&gt;&lt;a href="#cb8-4"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;map&lt;/span&gt; (&lt;span class="fu"&gt;dropIfStartsWith&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;(&amp;quot;&lt;/span&gt;) &lt;span class="co"&gt;-- 最初と最後のカッコを消している&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-5"&gt;&lt;a href="#cb8-5"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;map&lt;/span&gt; (&lt;span class="fu"&gt;dropIfEndsWith&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;)&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb8-6"&gt;&lt;a href="#cb8-6"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;withDefault&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-7"&gt;&lt;a href="#cb8-7"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb8-8"&gt;&lt;a href="#cb8-8"&gt;&lt;/a&gt;&lt;span class="fu"&gt;printtm&lt;/span&gt; : &lt;span class="dt"&gt;Context&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-9"&gt;&lt;a href="#cb8-9"&gt;&lt;/a&gt;&lt;span class="fu"&gt;printtm&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-10"&gt;&lt;a href="#cb8-10"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;case&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="cf"&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-11"&gt;&lt;a href="#cb8-11"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;TmAbs&lt;/span&gt; &lt;span class="fu"&gt;x&lt;/span&gt; &lt;span class="fu"&gt;ty&lt;/span&gt; &lt;span class="fu"&gt;t1&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-12"&gt;&lt;a href="#cb8-12"&gt;&lt;/a&gt;            &lt;span class="kw"&gt;let&lt;/span&gt; &lt;span class="co"&gt;-- 重複しない変数名を生成して Context に積む&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-13"&gt;&lt;a href="#cb8-13"&gt;&lt;/a&gt;                ( &lt;span class="fu"&gt;ctx1&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;x1&lt;/span&gt; ) &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;pickfreshname&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;x&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-14"&gt;&lt;a href="#cb8-14"&gt;&lt;/a&gt;            &lt;span class="kw"&gt;in&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-15"&gt;&lt;a href="#cb8-15"&gt;&lt;/a&gt;            &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;map&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-16"&gt;&lt;a href="#cb8-16"&gt;&lt;/a&gt;                (\&lt;span class="fu"&gt;s1&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;concat&lt;/span&gt; [ &lt;span class="st"&gt;&amp;quot;(\\&amp;quot;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;x1&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="st"&gt;&amp;quot; : &amp;quot;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;printty&lt;/span&gt; &lt;span class="fu"&gt;ty&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;. &amp;quot;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;s1&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;)&amp;quot;&lt;/span&gt; ])&lt;/span&gt;
&lt;span id="cb8-17"&gt;&lt;a href="#cb8-17"&gt;&lt;/a&gt;                (&lt;span class="fu"&gt;printtm&lt;/span&gt; &lt;span class="fu"&gt;ctx1&lt;/span&gt; &lt;span class="fu"&gt;t1&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb8-18"&gt;&lt;a href="#cb8-18"&gt;&lt;/a&gt;        &lt;span class="op"&gt;...&lt;/span&gt; &lt;span class="co"&gt;-- あとは同じ&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-19"&gt;&lt;a href="#cb8-19"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb8-20"&gt;&lt;a href="#cb8-20"&gt;&lt;/a&gt;&lt;span class="fu"&gt;printty&lt;/span&gt; : &lt;span class="dt"&gt;Ty&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-21"&gt;&lt;a href="#cb8-21"&gt;&lt;/a&gt;&lt;span class="fu"&gt;printty&lt;/span&gt; &lt;span class="fu"&gt;ty&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-22"&gt;&lt;a href="#cb8-22"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;case&lt;/span&gt; &lt;span class="fu"&gt;ty&lt;/span&gt; &lt;span class="cf"&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-23"&gt;&lt;a href="#cb8-23"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;TyArr&lt;/span&gt; &lt;span class="fu"&gt;ty1&lt;/span&gt; &lt;span class="fu"&gt;ty2&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-24"&gt;&lt;a href="#cb8-24"&gt;&lt;/a&gt;            &lt;span class="dt"&gt;String&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;concat&lt;/span&gt; [ &lt;span class="st"&gt;&amp;quot;(&amp;quot;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;printty&lt;/span&gt; &lt;span class="fu"&gt;ty1&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="st"&gt;&amp;quot; -&amp;gt; &amp;quot;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;printty&lt;/span&gt; &lt;span class="fu"&gt;ty2&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;)&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id="cb8-25"&gt;&lt;a href="#cb8-25"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb8-26"&gt;&lt;a href="#cb8-26"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;TyBool&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-27"&gt;&lt;a href="#cb8-27"&gt;&lt;/a&gt;            &lt;span class="st"&gt;&amp;quot;Bool&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-28"&gt;&lt;a href="#cb8-28"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb8-29"&gt;&lt;a href="#cb8-29"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- Context から重複する変数名を探し &amp;#39; を追加する&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-30"&gt;&lt;a href="#cb8-30"&gt;&lt;/a&gt;&lt;span class="fu"&gt;pickfreshname&lt;/span&gt; : &lt;span class="dt"&gt;Context&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; ( &lt;span class="dt"&gt;Context&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; )&lt;/span&gt;
&lt;span id="cb8-31"&gt;&lt;a href="#cb8-31"&gt;&lt;/a&gt;&lt;span class="fu"&gt;pickfreshname&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;x&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="op"&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;REPL で試す:&lt;/p&gt;
&lt;div class="sourceCode" id="cb9"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb9-1"&gt;&lt;a href="#cb9-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Chap10&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;display&lt;/span&gt; (&lt;span class="dt"&gt;TmApp&lt;/span&gt; (&lt;span class="dt"&gt;TmAbs&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class="dt"&gt;TyArr&lt;/span&gt; &lt;span class="dt"&gt;TyBool&lt;/span&gt; &lt;span class="dt"&gt;TyBool&lt;/span&gt;) (&lt;span class="dt"&gt;TmAbs&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;f&amp;quot;&lt;/span&gt; (&lt;span class="dt"&gt;TyArr&lt;/span&gt; (&lt;span class="dt"&gt;TyArr&lt;/span&gt; &lt;span class="dt"&gt;TyBool&lt;/span&gt; &lt;span class="dt"&gt;TyBool&lt;/span&gt;) &lt;span class="dt"&gt;TyBool&lt;/span&gt;) (&lt;span class="dt"&gt;TmApp&lt;/span&gt; (&lt;span class="dt"&gt;TmVar&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt; &lt;span class="dv"&gt;2&lt;/span&gt;) (&lt;span class="dt"&gt;TmVar&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt; &lt;span class="dv"&gt;2&lt;/span&gt;)))) (&lt;span class="dt"&gt;TmAbs&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class="dt"&gt;TyBool&lt;/span&gt; (&lt;span class="dt"&gt;TmVar&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;)))&lt;/span&gt;
&lt;span id="cb9-2"&gt;&lt;a href="#cb9-2"&gt;&lt;/a&gt;&lt;span class="st"&gt;&amp;quot;(\\x : (Bool -&amp;gt; Bool). (\\f : ((Bool -&amp;gt; Bool) -&amp;gt; Bool). (f x))) (\\x : Bool. x)&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-3"&gt;&lt;a href="#cb9-3"&gt;&lt;/a&gt;    : &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="パーサー"&gt;パーサー&lt;/h3&gt;
&lt;p&gt;これも同様に4・7章の実装を合わせるだけ:&lt;/p&gt;
&lt;div class="sourceCode" id="cb10"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb10-1"&gt;&lt;a href="#cb10-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;module&lt;/span&gt; &lt;span class="dt"&gt;TaPL&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Chap10&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="kw"&gt;exposing&lt;/span&gt; (&lt;span class="fu"&gt;parse&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb10-2"&gt;&lt;a href="#cb10-2"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb10-3"&gt;&lt;a href="#cb10-3"&gt;&lt;/a&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="kw"&gt;exposing&lt;/span&gt; ((&lt;span class="op"&gt;|.&lt;/span&gt;)&lt;span class="op"&gt;,&lt;/span&gt; (&lt;span class="op"&gt;|=&lt;/span&gt;)&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb10-4"&gt;&lt;a href="#cb10-4"&gt;&lt;/a&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;TaPL&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Chap10&lt;/span&gt; &lt;span class="kw"&gt;exposing&lt;/span&gt; (&lt;span class="dt"&gt;Term&lt;/span&gt;(&lt;span class="op"&gt;..&lt;/span&gt;)&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;Ty&lt;/span&gt;(&lt;span class="op"&gt;..&lt;/span&gt;))&lt;/span&gt;
&lt;span id="cb10-5"&gt;&lt;a href="#cb10-5"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb10-6"&gt;&lt;a href="#cb10-6"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="kw"&gt;alias&lt;/span&gt; &lt;span class="dt"&gt;Context&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-7"&gt;&lt;a href="#cb10-7"&gt;&lt;/a&gt;    { &lt;span class="fu"&gt;env&lt;/span&gt; : &lt;span class="dt"&gt;Dict&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-8"&gt;&lt;a href="#cb10-8"&gt;&lt;/a&gt;    &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;depth&lt;/span&gt; : &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-9"&gt;&lt;a href="#cb10-9"&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id="cb10-10"&gt;&lt;a href="#cb10-10"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb10-11"&gt;&lt;a href="#cb10-11"&gt;&lt;/a&gt;&lt;span class="fu"&gt;iniCtx&lt;/span&gt; : &lt;span class="dt"&gt;Context&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-12"&gt;&lt;a href="#cb10-12"&gt;&lt;/a&gt;&lt;span class="fu"&gt;iniCtx&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-13"&gt;&lt;a href="#cb10-13"&gt;&lt;/a&gt;    { &lt;span class="fu"&gt;env&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Dict&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;empty&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;depth&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt; }&lt;/span&gt;
&lt;span id="cb10-14"&gt;&lt;a href="#cb10-14"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb10-15"&gt;&lt;a href="#cb10-15"&gt;&lt;/a&gt;&lt;span class="fu"&gt;parse&lt;/span&gt; : &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Result&lt;/span&gt; (&lt;span class="dt"&gt;List&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;DeadEnd&lt;/span&gt;) &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-16"&gt;&lt;a href="#cb10-16"&gt;&lt;/a&gt;&lt;span class="fu"&gt;parse&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-17"&gt;&lt;a href="#cb10-17"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;run&lt;/span&gt; &lt;span class="fu"&gt;parser&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-18"&gt;&lt;a href="#cb10-18"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb10-19"&gt;&lt;a href="#cb10-19"&gt;&lt;/a&gt;&lt;span class="fu"&gt;parser&lt;/span&gt; : &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-20"&gt;&lt;a href="#cb10-20"&gt;&lt;/a&gt;&lt;span class="fu"&gt;parser&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-21"&gt;&lt;a href="#cb10-21"&gt;&lt;/a&gt;    &lt;span class="fu"&gt;termParser&lt;/span&gt; &lt;span class="fu"&gt;iniCtx&lt;/span&gt; &lt;span class="op"&gt;|.&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-22"&gt;&lt;a href="#cb10-22"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb10-23"&gt;&lt;a href="#cb10-23"&gt;&lt;/a&gt;&lt;span class="fu"&gt;termParser&lt;/span&gt; : &lt;span class="dt"&gt;Context&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-24"&gt;&lt;a href="#cb10-24"&gt;&lt;/a&gt;&lt;span class="fu"&gt;termParser&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-25"&gt;&lt;a href="#cb10-25"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;oneOf&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-26"&gt;&lt;a href="#cb10-26"&gt;&lt;/a&gt;        [ &lt;span class="fu"&gt;parParser&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="co"&gt;-- 括弧のパーサー&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-27"&gt;&lt;a href="#cb10-27"&gt;&lt;/a&gt;        &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;absParser&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="co"&gt;-- ラムダ抽象のパーサー&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-28"&gt;&lt;a href="#cb10-28"&gt;&lt;/a&gt;        &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;valParser&lt;/span&gt;     &lt;span class="co"&gt;-- ture/false のパーサー&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-29"&gt;&lt;a href="#cb10-29"&gt;&lt;/a&gt;        &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;ifParser&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt;  &lt;span class="co"&gt;-- if-then-else のパーサー&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-30"&gt;&lt;a href="#cb10-30"&gt;&lt;/a&gt;        &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;varParser&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="co"&gt;-- 変数のパーサー&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-31"&gt;&lt;a href="#cb10-31"&gt;&lt;/a&gt;        ] &lt;span class="co"&gt;-- 関数適用のパーサーだけ分けてるのは左再帰対策(その２参照)&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-32"&gt;&lt;a href="#cb10-32"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;andThen&lt;/span&gt; (&lt;span class="fu"&gt;appParser&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;言わずもがな，型注釈のパースをする必要があるので，&lt;code&gt;absParser&lt;/code&gt; はその２のと若干異なる:&lt;/p&gt;
&lt;div class="sourceCode" id="cb11"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb11-1"&gt;&lt;a href="#cb11-1"&gt;&lt;/a&gt;&lt;span class="fu"&gt;absParser&lt;/span&gt; : &lt;span class="dt"&gt;Context&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-2"&gt;&lt;a href="#cb11-2"&gt;&lt;/a&gt;&lt;span class="fu"&gt;absParser&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-3"&gt;&lt;a href="#cb11-3"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;succeed&lt;/span&gt; &lt;span class="dt"&gt;Tuple&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;pair&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-4"&gt;&lt;a href="#cb11-4"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|.&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;symbol&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;\\&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-5"&gt;&lt;a href="#cb11-5"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|.&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;spaces&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-6"&gt;&lt;a href="#cb11-6"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|=&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;lazy&lt;/span&gt; (\&lt;span class="fu"&gt;_&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;varStrParser&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb11-7"&gt;&lt;a href="#cb11-7"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|.&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;spaces&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-8"&gt;&lt;a href="#cb11-8"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|.&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;symbol&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;:&amp;quot;&lt;/span&gt;            &lt;span class="co"&gt;-- ここから&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-9"&gt;&lt;a href="#cb11-9"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|.&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;spaces&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-10"&gt;&lt;a href="#cb11-10"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|=&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;lazy&lt;/span&gt; (\&lt;span class="fu"&gt;_&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;tyParser&lt;/span&gt;) &lt;span class="co"&gt;-- ここまでが追加&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-11"&gt;&lt;a href="#cb11-11"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|.&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;spaces&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-12"&gt;&lt;a href="#cb11-12"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|.&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;symbol&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-13"&gt;&lt;a href="#cb11-13"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|.&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;spaces&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-14"&gt;&lt;a href="#cb11-14"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;andThen&lt;/span&gt; (&lt;span class="fu"&gt;absParserN&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb11-15"&gt;&lt;a href="#cb11-15"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb11-16"&gt;&lt;a href="#cb11-16"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- 型のパーサー&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-17"&gt;&lt;a href="#cb11-17"&gt;&lt;/a&gt;&lt;span class="fu"&gt;tyParser&lt;/span&gt; : &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="dt"&gt;Ty&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-18"&gt;&lt;a href="#cb11-18"&gt;&lt;/a&gt;&lt;span class="fu"&gt;tyParser&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-19"&gt;&lt;a href="#cb11-19"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;oneOf&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-20"&gt;&lt;a href="#cb11-20"&gt;&lt;/a&gt;        [ &lt;span class="fu"&gt;value&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;Bool&amp;quot;&lt;/span&gt; &lt;span class="dt"&gt;TyBool&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-21"&gt;&lt;a href="#cb11-21"&gt;&lt;/a&gt;        ]&lt;/span&gt;
&lt;span id="cb11-22"&gt;&lt;a href="#cb11-22"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|.&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;spaces&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-23"&gt;&lt;a href="#cb11-23"&gt;&lt;/a&gt;        &lt;span class="co"&gt;-- これも左再帰対策(その２参照)&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-24"&gt;&lt;a href="#cb11-24"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;andThen&lt;/span&gt; &lt;span class="fu"&gt;tyArrParser&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-25"&gt;&lt;a href="#cb11-25"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb11-26"&gt;&lt;a href="#cb11-26"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- 関数型のパーサー&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-27"&gt;&lt;a href="#cb11-27"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- 関数型 T-&amp;gt;T は右結合(T-&amp;gt;T-&amp;gt;T は T-&amp;gt;(T-&amp;gt;T) となる)&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-28"&gt;&lt;a href="#cb11-28"&gt;&lt;/a&gt;&lt;span class="fu"&gt;tyArrParser&lt;/span&gt; : &lt;span class="dt"&gt;Ty&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="dt"&gt;Ty&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-29"&gt;&lt;a href="#cb11-29"&gt;&lt;/a&gt;&lt;span class="fu"&gt;tyArrParser&lt;/span&gt; &lt;span class="fu"&gt;ty&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-30"&gt;&lt;a href="#cb11-30"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;oneOf&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-31"&gt;&lt;a href="#cb11-31"&gt;&lt;/a&gt;        [ &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;succeed&lt;/span&gt; (&lt;span class="dt"&gt;TyArr&lt;/span&gt; &lt;span class="fu"&gt;ty&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb11-32"&gt;&lt;a href="#cb11-32"&gt;&lt;/a&gt;            &lt;span class="op"&gt;|.&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;keyword&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;-&amp;gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-33"&gt;&lt;a href="#cb11-33"&gt;&lt;/a&gt;            &lt;span class="op"&gt;|.&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;spaces&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-34"&gt;&lt;a href="#cb11-34"&gt;&lt;/a&gt;            &lt;span class="op"&gt;|=&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;lazy&lt;/span&gt; (\&lt;span class="fu"&gt;_&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;tyParser&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb11-35"&gt;&lt;a href="#cb11-35"&gt;&lt;/a&gt;        &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;succeed&lt;/span&gt; &lt;span class="fu"&gt;ty&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-36"&gt;&lt;a href="#cb11-36"&gt;&lt;/a&gt;        ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;REPL で試してみる:&lt;/p&gt;
&lt;div class="sourceCode" id="cb12"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb12-1"&gt;&lt;a href="#cb12-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="st"&gt;&amp;quot;(\\x : Bool . if x then x else (\\f : Bool -&amp;gt; Bool -&amp;gt; Bool . f x x) (\\x : Bool . \\y : Bool . y)) (if true then false else true)&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-2"&gt;&lt;a href="#cb12-2"&gt;&lt;/a&gt;&lt;span class="op"&gt;|&lt;/span&gt;   &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;parse&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-3"&gt;&lt;a href="#cb12-3"&gt;&lt;/a&gt;&lt;span class="op"&gt;|&lt;/span&gt;   &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Result&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;toMaybe&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-4"&gt;&lt;a href="#cb12-4"&gt;&lt;/a&gt;&lt;span class="op"&gt;|&lt;/span&gt;   &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;andThen&lt;/span&gt; (\&lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Chap10&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;typeof&lt;/span&gt; [] &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;map&lt;/span&gt; (&lt;span class="fu"&gt;always&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt;)) &lt;span class="co"&gt;-- 型検査&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-5"&gt;&lt;a href="#cb12-5"&gt;&lt;/a&gt;&lt;span class="op"&gt;|&lt;/span&gt;   &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;andThen&lt;/span&gt; (&lt;span class="dt"&gt;Chap10&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;eval&lt;/span&gt; [])&lt;/span&gt;
&lt;span id="cb12-6"&gt;&lt;a href="#cb12-6"&gt;&lt;/a&gt;&lt;span class="op"&gt;|&lt;/span&gt;   &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;map&lt;/span&gt; &lt;span class="dt"&gt;Chap10&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;display&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-7"&gt;&lt;a href="#cb12-7"&gt;&lt;/a&gt;&lt;span class="op"&gt;|&lt;/span&gt;   &lt;/span&gt;
&lt;span id="cb12-8"&gt;&lt;a href="#cb12-8"&gt;&lt;/a&gt;&lt;span class="dt"&gt;Just&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;false&amp;quot;&lt;/span&gt; : &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;完璧だ．&lt;/p&gt;
&lt;h2 id="おまけ-spa"&gt;おまけ: SPA&lt;/h2&gt;
&lt;p&gt;前回整理したので基本的に足していくだけだ． ただし，型検査を &lt;code&gt;Calculus&lt;/code&gt; に加える必要がある:&lt;/p&gt;
&lt;div class="sourceCode" id="cb13"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb13-1"&gt;&lt;a href="#cb13-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;module&lt;/span&gt; &lt;span class="dt"&gt;TaPL&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Calculus&lt;/span&gt; &lt;span class="kw"&gt;exposing&lt;/span&gt; (&lt;span class="op"&gt;..&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb13-2"&gt;&lt;a href="#cb13-2"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb13-3"&gt;&lt;a href="#cb13-3"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="kw"&gt;alias&lt;/span&gt; &lt;span class="dt"&gt;Calculus&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="fu"&gt;ty&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-4"&gt;&lt;a href="#cb13-4"&gt;&lt;/a&gt;    { &lt;span class="fu"&gt;parse&lt;/span&gt; : &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Result&lt;/span&gt; (&lt;span class="dt"&gt;List&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;DeadEnd&lt;/span&gt;) &lt;span class="fu"&gt;t&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-5"&gt;&lt;a href="#cb13-5"&gt;&lt;/a&gt;    &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;typeof&lt;/span&gt; : &lt;span class="dt"&gt;Maybe&lt;/span&gt; (&lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="fu"&gt;ty&lt;/span&gt;) &lt;span class="co"&gt;-- 追加&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-6"&gt;&lt;a href="#cb13-6"&gt;&lt;/a&gt;    &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;eval1&lt;/span&gt; : &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-7"&gt;&lt;a href="#cb13-7"&gt;&lt;/a&gt;    &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;display&lt;/span&gt; : &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-8"&gt;&lt;a href="#cb13-8"&gt;&lt;/a&gt;    &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;init&lt;/span&gt; : &lt;span class="fu"&gt;ctx&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-9"&gt;&lt;a href="#cb13-9"&gt;&lt;/a&gt;    &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;logs&lt;/span&gt; : &lt;span class="dt"&gt;List&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-10"&gt;&lt;a href="#cb13-10"&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id="cb13-11"&gt;&lt;a href="#cb13-11"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb13-12"&gt;&lt;a href="#cb13-12"&gt;&lt;/a&gt;&lt;span class="fu"&gt;eval1&lt;/span&gt; : &lt;span class="dt"&gt;Calculus&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="fu"&gt;ty&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; (&lt;span class="dt"&gt;Calculus&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="fu"&gt;ty&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb13-13"&gt;&lt;a href="#cb13-13"&gt;&lt;/a&gt;&lt;span class="fu"&gt;typecheck&lt;/span&gt; : &lt;span class="dt"&gt;Calculus&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="fu"&gt;ty&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Bool&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-14"&gt;&lt;a href="#cb13-14"&gt;&lt;/a&gt;&lt;span class="fu"&gt;parse&lt;/span&gt; : &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Calculus&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="fu"&gt;ty&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Result&lt;/span&gt; (&lt;span class="dt"&gt;List&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;DeadEnd&lt;/span&gt;) (&lt;span class="dt"&gt;Calculus&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="fu"&gt;ty&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb13-15"&gt;&lt;a href="#cb13-15"&gt;&lt;/a&gt;&lt;span class="fu"&gt;display&lt;/span&gt; : &lt;span class="dt"&gt;Calculus&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="fu"&gt;ty&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あとは &lt;code&gt;chap10&lt;/code&gt; の定義も追加するだけ:&lt;/p&gt;
&lt;div class="sourceCode" id="cb14"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb14-1"&gt;&lt;a href="#cb14-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;module&lt;/span&gt; &lt;span class="dt"&gt;TaPL&lt;/span&gt; &lt;span class="kw"&gt;exposing&lt;/span&gt; (&lt;span class="op"&gt;..&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb14-2"&gt;&lt;a href="#cb14-2"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb14-3"&gt;&lt;a href="#cb14-3"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Chapter&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-4"&gt;&lt;a href="#cb14-4"&gt;&lt;/a&gt;    &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Chap0&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-5"&gt;&lt;a href="#cb14-5"&gt;&lt;/a&gt;    &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Chap4&lt;/span&gt; (&lt;span class="dt"&gt;Calculus&lt;/span&gt; () &lt;span class="dt"&gt;Chap4&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Term&lt;/span&gt; &lt;span class="dt"&gt;Never&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb14-6"&gt;&lt;a href="#cb14-6"&gt;&lt;/a&gt;    &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Chap7&lt;/span&gt; (&lt;span class="dt"&gt;Calculus&lt;/span&gt; &lt;span class="dt"&gt;Chap7&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Context&lt;/span&gt; &lt;span class="dt"&gt;Chap7&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Term&lt;/span&gt; &lt;span class="dt"&gt;Never&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb14-7"&gt;&lt;a href="#cb14-7"&gt;&lt;/a&gt;    &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Chap10&lt;/span&gt; (&lt;span class="dt"&gt;Calculus&lt;/span&gt; &lt;span class="dt"&gt;Chap10&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Context&lt;/span&gt; &lt;span class="dt"&gt;Chap10&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Term&lt;/span&gt; &lt;span class="dt"&gt;Chap10&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Ty&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb14-8"&gt;&lt;a href="#cb14-8"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb14-9"&gt;&lt;a href="#cb14-9"&gt;&lt;/a&gt;&lt;span class="fu"&gt;init&lt;/span&gt; : &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Chapter&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-10"&gt;&lt;a href="#cb14-10"&gt;&lt;/a&gt;&lt;span class="fu"&gt;init&lt;/span&gt; &lt;span class="fu"&gt;s&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-11"&gt;&lt;a href="#cb14-11"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;case&lt;/span&gt; &lt;span class="fu"&gt;s&lt;/span&gt; &lt;span class="cf"&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-12"&gt;&lt;a href="#cb14-12"&gt;&lt;/a&gt;        &lt;span class="st"&gt;&amp;quot;chap4&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="op"&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-13"&gt;&lt;a href="#cb14-13"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb14-14"&gt;&lt;a href="#cb14-14"&gt;&lt;/a&gt;        &lt;span class="st"&gt;&amp;quot;chap7&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="op"&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-15"&gt;&lt;a href="#cb14-15"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb14-16"&gt;&lt;a href="#cb14-16"&gt;&lt;/a&gt;        &lt;span class="co"&gt;-- 追加&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-17"&gt;&lt;a href="#cb14-17"&gt;&lt;/a&gt;        &lt;span class="st"&gt;&amp;quot;chap10&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-18"&gt;&lt;a href="#cb14-18"&gt;&lt;/a&gt;            &lt;span class="dt"&gt;Chap10&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-19"&gt;&lt;a href="#cb14-19"&gt;&lt;/a&gt;                { &lt;span class="fu"&gt;eval1&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Chap10&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;eval1&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-20"&gt;&lt;a href="#cb14-20"&gt;&lt;/a&gt;                &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;display&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Chap10&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;display&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-21"&gt;&lt;a href="#cb14-21"&gt;&lt;/a&gt;                &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;parse&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Chap10&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;parse&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-22"&gt;&lt;a href="#cb14-22"&gt;&lt;/a&gt;                &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;init&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; []&lt;/span&gt;
&lt;span id="cb14-23"&gt;&lt;a href="#cb14-23"&gt;&lt;/a&gt;                &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;logs&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; []&lt;/span&gt;
&lt;span id="cb14-24"&gt;&lt;a href="#cb14-24"&gt;&lt;/a&gt;                &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;syntax&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Chap10&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;syntax&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-25"&gt;&lt;a href="#cb14-25"&gt;&lt;/a&gt;                &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;typeof&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Just&lt;/span&gt; &lt;span class="dt"&gt;Chap10&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;typeof&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-26"&gt;&lt;a href="#cb14-26"&gt;&lt;/a&gt;                }&lt;/span&gt;
&lt;span id="cb14-27"&gt;&lt;a href="#cb14-27"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb14-28"&gt;&lt;a href="#cb14-28"&gt;&lt;/a&gt;        &lt;span class="fu"&gt;_&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-29"&gt;&lt;a href="#cb14-29"&gt;&lt;/a&gt;            &lt;span class="dt"&gt;Chap0&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-30"&gt;&lt;a href="#cb14-30"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb14-31"&gt;&lt;a href="#cb14-31"&gt;&lt;/a&gt;&lt;span class="fu"&gt;parse&lt;/span&gt; : &lt;span class="dt"&gt;Chapter&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Result&lt;/span&gt; (&lt;span class="dt"&gt;List&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;DeadEnd&lt;/span&gt;) &lt;span class="dt"&gt;Chapter&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-32"&gt;&lt;a href="#cb14-32"&gt;&lt;/a&gt;&lt;span class="fu"&gt;eval1&lt;/span&gt; : &lt;span class="dt"&gt;Chapter&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;Chapter&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-33"&gt;&lt;a href="#cb14-33"&gt;&lt;/a&gt;&lt;span class="fu"&gt;typecheck&lt;/span&gt; : &lt;span class="dt"&gt;Chapter&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Bool&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-34"&gt;&lt;a href="#cb14-34"&gt;&lt;/a&gt;&lt;span class="fu"&gt;display&lt;/span&gt; : &lt;span class="dt"&gt;Chapter&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あとはこれらを &lt;code&gt;Main&lt;/code&gt; でいい感じに呼び出すだけ．&lt;/p&gt;
&lt;h2 id="おしまい"&gt;おしまい&lt;/h2&gt;
&lt;p&gt;次回はいつになることやら．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-12-08-re-create-thank-you-stars-ver-elixir.html</id><title type="text">久しぶりに thank_you_stars をビルドする</title><updated>2019-12-08T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-12-08-re-create-thank-you-stars-ver-elixir.html"/><summary type="html">&lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;本記事は「&lt;a href="https://qiita.com/advent-calendar/2019/elixir"&gt;Elixir Advent Calendar 2019&lt;/a&gt;」の8日目の記事です．&lt;/p&gt;
&lt;h1 id="section"&gt;&lt;/h1&gt;
&lt;p&gt;学生の頃アルバイトした時(2年前)に初めて Elixir を触って，その集大成として作った(嘘) OSS をヒッサビッサにビルドチャレンジしてみたという話です．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OSS: &lt;a href="https://github.com/matsubara0507/thank-you-stars"&gt;matsubara0507/thank-you-stars&lt;/a&gt; (elixir バージョン)&lt;/li&gt;
&lt;li&gt;当時書いたブログ記事: &lt;a href="https://matsubara0507.github.io/posts/2017-10-01-create-thank-you-stars-ver-elixir.html"&gt;Elixir ライブラリにスターを送るツール thank-you-stars を作ってみました - ひげメモ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="思い出す"&gt;思い出す&lt;/h2&gt;
&lt;p&gt;そもそもどういうプログラムだったかってのは覚えてる． 当時何故か流行ってた，自身のプロジェクトの依存ライブラリに GitHub Star を送る CLI ツールの Elixir 版だ．&lt;/p&gt;
&lt;p&gt;で，こいつはどの環境でビルドしていたのか:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Elixir のバージョンは多分 1.4 (ref. &lt;a href="https://github.com/matsubara0507/thank-you-stars/blob/v0.1.0/mix.exs"&gt;mix.ex&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Erlang/OTP のバージョン: 多分 19.x？ (手元にあったのがそれ)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;依存パッケージのバージョンを見比べてみてもめっちゃ古いのがわかる． 2年ってすごいんだなぁ．&lt;/p&gt;
&lt;h2 id="最新バージョンに対応する"&gt;最新バージョンに対応する&lt;/h2&gt;
&lt;p&gt;まずはここから．&lt;/p&gt;
&lt;h3 id="最新-elixir-erlangotp-のインストール"&gt;最新 Elixir &amp;amp; Erlang/OTP のインストール&lt;/h3&gt;
&lt;p&gt;Elixir は長いこと触ってないので，そもそも手元に最新の環境がない． 昔はどうやってたかな，と遠い記憶を辿って見たがおそらく &lt;code&gt;exenv&lt;/code&gt; と &lt;code&gt;erlenv&lt;/code&gt; を使っていたはず:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/exenv/exenv"&gt;exenv/exenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/talentdeficit/erlenv"&gt;talentdeficit/erlenv&lt;/a&gt; (いつのまにかアーカイブになってるのね)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;それぞれ別の Elixir や Erlang/OTP を取ってくるには &lt;a href="https://github.com/mururu/elixir-build"&gt;elixir-build&lt;/a&gt; や &lt;a href="https://github.com/matsubara0507/erlang-build"&gt;erlang-build&lt;/a&gt; を使う． 試しに手元でやってみたら，どうやら v20.x 以降の Erlang/OTP をビルドするには OpenSSL 1.1 を使わないといけないのだが，手元の OS が古くてできない（このためだけに更新したくない）． そして，最新の Elixir を使うには Erlang/OTP の v20.x 以降が必要っぽい． 詰んだ（？）．&lt;/p&gt;
&lt;p&gt;もちろん，今ならもっと他の方法でいろんなバージョンの Elixir や Erlang/OTP をイストールする方法はあるだろう． しかし，できれば手元の環境を汚したくない． ということで Docker に甘えた（ぇ&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker run --rm -v `pwd`:/work -it elixir:1.9.4 /bin/bash -c &amp;quot;cd /work &amp;amp;&amp;amp; mix test&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="依存パケッケージの更新"&gt;依存パケッケージの更新&lt;/h3&gt;
&lt;p&gt;とりあえず，Hex で最新のバージョンを取ってきて &lt;code&gt;mix.exs&lt;/code&gt; を書き換えた． もちろん，すんなりビルドはできない． しかし，珍しくちゃんとテストを書いていたので，テストしつつ最新のバージョンに&lt;a href="https://github.com/matsubara0507/thank-you-stars/commit/1574a16dec5ea5c7e8a4e39dbae4bf4729e8cfb6"&gt;合わせていく&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/CrowdHailer/OK/pull/57"&gt;&lt;code&gt;OK.with&lt;/code&gt; は使えなくなっているので利用しない書き方に変更&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/edgurgel/tentacat/pull/132"&gt;&lt;code&gt;Tentacat.put&lt;/code&gt; の返り値のタプルサイズが変わっていた&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/devinus/poison/commit/a4208a6252f4e58fbcc8d9fd2f4f64c99e974cc8"&gt;&lt;code&gt;Poison.decode&lt;/code&gt; のエラーの返り値のタプルサイズが変わった&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/elixir-lang/elixir/pull/7838"&gt;&lt;code&gt;[ &amp;quot;hoge&amp;quot;: 123 ]&lt;/code&gt; こういう形式のキーワードハッシュは警告が出るようになった&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;パターンマッチしてたタプルのサイズが変わるのはきつい．&lt;/p&gt;
&lt;h3 id="mix-format"&gt;mix format&lt;/h3&gt;
&lt;p&gt;Elixir 1.6 からフォーマッターがエコシステムに入った． なので &lt;code&gt;mix format&lt;/code&gt; をかけてみる．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mix format&lt;/code&gt; をかけるには設定ファイル &lt;code&gt;.formatter.exs&lt;/code&gt; を置かないと動作しないようだ（珍しい）． なので，公式ドキュメントにあったものをそのまま&lt;a href="https://github.com/matsubara0507/thank-you-stars/commit/700910b927ff1abbd5701a177c83e0671ddffe29"&gt;コピペして &lt;code&gt;mix format&lt;/code&gt; をかけた&lt;/a&gt;．&lt;/p&gt;
&lt;h2 id="github-actions"&gt;GitHub Actions&lt;/h2&gt;
&lt;p&gt;最近流行りだからね．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matsubara0507/thank-you-stars/pull/1"&gt;Add GitHub Actions config by matsubara0507 · Pull Request #1 · matsubara0507/thank-you-stars&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Elixir や Erlang/OTP のセットアップには &lt;a href="https://github.com/actions/setup-elixir"&gt;&lt;code&gt;actions/setup-elixir&lt;/code&gt;&lt;/a&gt; を使う． 色々と試して，最終的なジョブの設定はこんな感じ:&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;span id="cb2-1"&gt;&lt;a href="#cb2-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;# ほんとんど actions/elixir-setup の例のまんま&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-2"&gt;&lt;a href="#cb2-2"&gt;&lt;/a&gt;&lt;span class="fu"&gt;jobs&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-3"&gt;&lt;a href="#cb2-3"&gt;&lt;/a&gt;&lt;span class="at"&gt;  &lt;/span&gt;&lt;span class="fu"&gt;build&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-4"&gt;&lt;a href="#cb2-4"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;runs-on&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; ubuntu-16.04&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-5"&gt;&lt;a href="#cb2-5"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;name&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; OTP ${{matrix.otp}} / Elixir ${{matrix.elixir}}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-6"&gt;&lt;a href="#cb2-6"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-7"&gt;&lt;a href="#cb2-7"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;strategy&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-8"&gt;&lt;a href="#cb2-8"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;matrix&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-9"&gt;&lt;a href="#cb2-9"&gt;&lt;/a&gt;&lt;span class="at"&gt;        &lt;/span&gt;&lt;span class="fu"&gt;otp&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="kw"&gt;[&lt;/span&gt;&lt;span class="at"&gt;21.x&lt;/span&gt;&lt;span class="kw"&gt;,&lt;/span&gt;&lt;span class="at"&gt; 22.x&lt;/span&gt;&lt;span class="kw"&gt;]&lt;/span&gt;&lt;span class="co"&gt;      # 20.x は ubuntu 16,18 には無い様子&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-10"&gt;&lt;a href="#cb2-10"&gt;&lt;/a&gt;&lt;span class="at"&gt;        &lt;/span&gt;&lt;span class="fu"&gt;elixir&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="kw"&gt;[&lt;/span&gt;&lt;span class="at"&gt;1.8.x&lt;/span&gt;&lt;span class="kw"&gt;,&lt;/span&gt;&lt;span class="at"&gt; 1.9.x&lt;/span&gt;&lt;span class="kw"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-11"&gt;&lt;a href="#cb2-11"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;fail-fast&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="ch"&gt;false&lt;/span&gt;&lt;span class="co"&gt;         # マトリックスのどれかのジョブが落ちても他のジョブは実行をやめない&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-12"&gt;&lt;a href="#cb2-12"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-13"&gt;&lt;a href="#cb2-13"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;steps&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-14"&gt;&lt;a href="#cb2-14"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="fu"&gt;uses&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; actions/checkout@v1.0.0&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-15"&gt;&lt;a href="#cb2-15"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;with&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-16"&gt;&lt;a href="#cb2-16"&gt;&lt;/a&gt;&lt;span class="at"&gt;        &lt;/span&gt;&lt;span class="fu"&gt;fetch-depth&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-17"&gt;&lt;a href="#cb2-17"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="fu"&gt;uses&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; actions/setup-elixir@v1.0.0&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-18"&gt;&lt;a href="#cb2-18"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;with&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-19"&gt;&lt;a href="#cb2-19"&gt;&lt;/a&gt;&lt;span class="at"&gt;        &lt;/span&gt;&lt;span class="fu"&gt;otp-version&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; ${{matrix.otp}}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-20"&gt;&lt;a href="#cb2-20"&gt;&lt;/a&gt;&lt;span class="at"&gt;        &lt;/span&gt;&lt;span class="fu"&gt;elixir-version&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; ${{matrix.elixir}}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-21"&gt;&lt;a href="#cb2-21"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="fu"&gt;run&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; mix deps.get&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-22"&gt;&lt;a href="#cb2-22"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="fu"&gt;run&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; mix test&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;mix.exs&lt;/code&gt; でどうやって複数の Elixir のバージョンを許容するんだ？と結構調べたけど，単純にボトムのバージョンを &lt;code&gt;elixir: ~&amp;gt; ...&lt;/code&gt; で指定すればいいだけだった（普通 &lt;code&gt;&amp;gt;=&lt;/code&gt; じゃ無いの．．．）．&lt;/p&gt;
&lt;p&gt;キャッシュの導入も考えたが，たかが数分に入れてもしょうがないなってなってやめた．&lt;/p&gt;
&lt;h2 id="おまけ-依存パケージを減らす大作戦"&gt;おまけ: 依存パケージを減らす大作戦&lt;/h2&gt;
&lt;p&gt;依存パッケージがなくなると &lt;code&gt;mix archive.install&lt;/code&gt; で入れることができるはず． なので，もともと依存パッケージを無くしてみたかった． 今回，バージョンアップを追うのも大変だったし，せっかくのなので可能な限り減らしてみた:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matsubara0507/thank-you-stars/pull/2"&gt;Remove OK library by matsubara0507 · Pull Request #2 · matsubara0507/thank-you-stars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matsubara0507/thank-you-stars/pull/3"&gt;Remove tentacat library by matsubara0507 · Pull Request #3 · matsubara0507/thank-you-stars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matsubara0507/thank-you-stars/pull/4"&gt;Remove poison library by matsubara0507 · Pull Request #4 · matsubara0507/thank-you-stars&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3/4 減らせました． 残るは鬼門 &lt;code&gt;httpoison&lt;/code&gt; だけ． 果たしてできるのか．&lt;/p&gt;
&lt;h3 id="vs.-ok"&gt;vs. &lt;code&gt;ok&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ok&lt;/code&gt; パッケージはいわゆる &lt;code&gt;Either&lt;/code&gt; モナドだ． &lt;code&gt;{:ok, hoge} | {:error, fuga}&lt;/code&gt; のような型を簡単に扱うためのマクロを提供している．&lt;/p&gt;
&lt;p&gt;これらの型の場合，Elixir の特徴であるパイプ演算子をうまく連結できない． なので，Elm 流に &lt;code&gt;and_then&lt;/code&gt; 関数を用意して，それで賄うようにした:&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode elixir"&gt;&lt;code class="sourceCode elixir"&gt;&lt;span id="cb3-1"&gt;&lt;a href="#cb3-1"&gt;&lt;/a&gt;  &lt;span class="co"&gt;# Result a -&amp;gt; (a -&amp;gt; Result b) -&amp;gt; Result b&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-2"&gt;&lt;a href="#cb3-2"&gt;&lt;/a&gt;  &lt;span class="co"&gt;# ただし Result a = {:ok, a} | {:error, e}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-3"&gt;&lt;a href="#cb3-3"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;defp&lt;/span&gt; and_then({&lt;span class="va"&gt;:ok&lt;/span&gt;, v}, f), &lt;span class="kw"&gt;do&lt;/span&gt;: f&lt;span class="op"&gt;.&lt;/span&gt;(v)&lt;/span&gt;
&lt;span id="cb3-4"&gt;&lt;a href="#cb3-4"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;defp&lt;/span&gt; and_then(err &lt;span class="op"&gt;=&lt;/span&gt; {&lt;span class="va"&gt;:error&lt;/span&gt;, _}, _), &lt;span class="kw"&gt;do&lt;/span&gt;: err&lt;/span&gt;
&lt;span id="cb3-5"&gt;&lt;a href="#cb3-5"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-6"&gt;&lt;a href="#cb3-6"&gt;&lt;/a&gt;  &lt;span class="co"&gt;# 使用例&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-7"&gt;&lt;a href="#cb3-7"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;def&lt;/span&gt; star_package(package_name, client) &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-8"&gt;&lt;a href="#cb3-8"&gt;&lt;/a&gt;    fetch_package_github_url(package_name)&lt;/span&gt;
&lt;span id="cb3-9"&gt;&lt;a href="#cb3-9"&gt;&lt;/a&gt;    &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; and_then(&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;star_github_package(&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;, client)) &lt;span class="co"&gt;# ココ&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-10"&gt;&lt;a href="#cb3-10"&gt;&lt;/a&gt;    &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="kw"&gt;case&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-11"&gt;&lt;a href="#cb3-11"&gt;&lt;/a&gt;      {&lt;span class="va"&gt;:ok&lt;/span&gt;, url} &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;Starred! &lt;/span&gt;&lt;span class="ot"&gt;#{&lt;/span&gt;url&lt;span class="ot"&gt;}&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-12"&gt;&lt;a href="#cb3-12"&gt;&lt;/a&gt;      {&lt;span class="va"&gt;:error&lt;/span&gt;, url} &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;Error    &lt;/span&gt;&lt;span class="ot"&gt;#{&lt;/span&gt;url&lt;span class="ot"&gt;}&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-13"&gt;&lt;a href="#cb3-13"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-14"&gt;&lt;a href="#cb3-14"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="vs.-tentacat"&gt;vs. &lt;code&gt;tentacat&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;単純に HTTP リクエストの PUT を認証付きでしているだけなので，&lt;code&gt;httpoison&lt;/code&gt; に書き直した． まぁ面倒を後に丸投げてるだけだが笑&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode elixir"&gt;&lt;code class="sourceCode elixir"&gt;&lt;span id="cb4-1"&gt;&lt;a href="#cb4-1"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;def&lt;/span&gt; star_github_package(url, token) &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-2"&gt;&lt;a href="#cb4-2"&gt;&lt;/a&gt;    &lt;span class="cn"&gt;URI&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;parse(url)&lt;/span&gt;
&lt;span id="cb4-3"&gt;&lt;a href="#cb4-3"&gt;&lt;/a&gt;    &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="cn"&gt;Map&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;get(&lt;span class="va"&gt;:path&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb4-4"&gt;&lt;a href="#cb4-4"&gt;&lt;/a&gt;    &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; (&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;put_github_api(&lt;span class="st"&gt;&amp;quot;user/starred&lt;/span&gt;&lt;span class="ot"&gt;#{&lt;/span&gt;&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;&lt;span class="ot"&gt;}&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;&lt;/span&gt;, token))&lt;span class="op"&gt;.&lt;/span&gt;()&lt;/span&gt;
&lt;span id="cb4-5"&gt;&lt;a href="#cb4-5"&gt;&lt;/a&gt;    &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; and_then(&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;map_get_with_ok(&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;, &lt;span class="va"&gt;:status_code&lt;/span&gt;))&lt;/span&gt;
&lt;span id="cb4-6"&gt;&lt;a href="#cb4-6"&gt;&lt;/a&gt;    &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="kw"&gt;case&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-7"&gt;&lt;a href="#cb4-7"&gt;&lt;/a&gt;      {&lt;span class="va"&gt;:ok&lt;/span&gt;, &lt;span class="dv"&gt;204&lt;/span&gt;} &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; {&lt;span class="va"&gt;:ok&lt;/span&gt;, url} &lt;span class="co"&gt;# もちろん返り値も変わる&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-8"&gt;&lt;a href="#cb4-8"&gt;&lt;/a&gt;      _ &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; {&lt;span class="va"&gt;:error&lt;/span&gt;, url}&lt;/span&gt;
&lt;span id="cb4-9"&gt;&lt;a href="#cb4-9"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-10"&gt;&lt;a href="#cb4-10"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-11"&gt;&lt;a href="#cb4-11"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-12"&gt;&lt;a href="#cb4-12"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;defp&lt;/span&gt; put_github_api(path, token) &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-13"&gt;&lt;a href="#cb4-13"&gt;&lt;/a&gt;    headers &lt;span class="op"&gt;=&lt;/span&gt; [{&lt;span class="st"&gt;&amp;quot;Authorization&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;token &lt;/span&gt;&lt;span class="ot"&gt;#{&lt;/span&gt;token&lt;span class="ot"&gt;}&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;&lt;/span&gt;}]&lt;/span&gt;
&lt;span id="cb4-14"&gt;&lt;a href="#cb4-14"&gt;&lt;/a&gt;    &lt;span class="cn"&gt;HTTPoison&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;put(&lt;span class="st"&gt;&amp;quot;https://api.github.com/&lt;/span&gt;&lt;span class="ot"&gt;#{&lt;/span&gt;path&lt;span class="ot"&gt;}&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt;, headers)&lt;/span&gt;
&lt;span id="cb4-15"&gt;&lt;a href="#cb4-15"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="vs.-poison"&gt;vs. &lt;code&gt;poison&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;poison&lt;/code&gt; は JSON デコーダー・エンコーダーだ． GitHub トークンを設定(JSON)から取得したり，Hex から取得したライブラリの設定(JSON)をパースするのに使う．&lt;/p&gt;
&lt;p&gt;これを無くすにはどうするか．簡単ですね． &lt;strong&gt;JSON パーサーを自作すればいいのです&lt;/strong&gt;．&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode elixir"&gt;&lt;code class="sourceCode elixir"&gt;&lt;span id="cb5-1"&gt;&lt;a href="#cb5-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;defmodule&lt;/span&gt; &lt;span class="cn"&gt;ThankYouStars&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="cn"&gt;JSON&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-2"&gt;&lt;a href="#cb5-2"&gt;&lt;/a&gt;  &lt;span class="im"&gt;alias&lt;/span&gt; &lt;span class="cn"&gt;ThankYouStars&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="cn"&gt;Result&lt;/span&gt;, &lt;span class="va"&gt;as:&lt;/span&gt; &lt;span class="cn"&gt;Result&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-3"&gt;&lt;a href="#cb5-3"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb5-4"&gt;&lt;a href="#cb5-4"&gt;&lt;/a&gt;  &lt;span class="co"&gt;# String をもらって JSON として Map や Bool，List などを返す&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-5"&gt;&lt;a href="#cb5-5"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;def&lt;/span&gt; decode(str) &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-6"&gt;&lt;a href="#cb5-6"&gt;&lt;/a&gt;    match_value(%{&lt;span class="va"&gt;rest:&lt;/span&gt; &lt;span class="cn"&gt;String&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;trim(str), &lt;span class="va"&gt;result:&lt;/span&gt; %{}})&lt;/span&gt;
&lt;span id="cb5-7"&gt;&lt;a href="#cb5-7"&gt;&lt;/a&gt;    &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="kw"&gt;case&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-8"&gt;&lt;a href="#cb5-8"&gt;&lt;/a&gt;      {&lt;span class="va"&gt;:ok&lt;/span&gt;, %{&lt;span class="va"&gt;rest:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt;, &lt;span class="va"&gt;result:&lt;/span&gt; result}} &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="cn"&gt;Result&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;success(result)&lt;/span&gt;
&lt;span id="cb5-9"&gt;&lt;a href="#cb5-9"&gt;&lt;/a&gt;      {_, %{&lt;span class="va"&gt;rest:&lt;/span&gt; rest}} &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="cn"&gt;Result&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;failure(rest)&lt;/span&gt;
&lt;span id="cb5-10"&gt;&lt;a href="#cb5-10"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-11"&gt;&lt;a href="#cb5-11"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-12"&gt;&lt;a href="#cb5-12"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb5-13"&gt;&lt;a href="#cb5-13"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;defp&lt;/span&gt; match_value(stat) &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-14"&gt;&lt;a href="#cb5-14"&gt;&lt;/a&gt;    trim_leading(stat)&lt;/span&gt;
&lt;span id="cb5-15"&gt;&lt;a href="#cb5-15"&gt;&lt;/a&gt;    &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; match_value_body()&lt;/span&gt;
&lt;span id="cb5-16"&gt;&lt;a href="#cb5-16"&gt;&lt;/a&gt;    &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="cn"&gt;Result&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;map(&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;trim_leading(&lt;span class="op"&gt;&amp;amp;&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;))&lt;/span&gt;
&lt;span id="cb5-17"&gt;&lt;a href="#cb5-17"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-18"&gt;&lt;a href="#cb5-18"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb5-19"&gt;&lt;a href="#cb5-19"&gt;&lt;/a&gt;  &lt;span class="co"&gt;# 無駄にパターンマッチとパイプを使ってみることにした(Elixir っぽい？)&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-20"&gt;&lt;a href="#cb5-20"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;defp&lt;/span&gt; match_value_body(stat &lt;span class="op"&gt;=&lt;/span&gt; %{&lt;span class="va"&gt;rest:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; rest}) &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-21"&gt;&lt;a href="#cb5-21"&gt;&lt;/a&gt;    &lt;span class="cn"&gt;Map&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;put(stat, &lt;span class="va"&gt;:result&lt;/span&gt;, &lt;span class="cn"&gt;true&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb5-22"&gt;&lt;a href="#cb5-22"&gt;&lt;/a&gt;    &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="cn"&gt;Map&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;put(&lt;span class="va"&gt;:rest&lt;/span&gt;, rest)&lt;/span&gt;
&lt;span id="cb5-23"&gt;&lt;a href="#cb5-23"&gt;&lt;/a&gt;    &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="cn"&gt;Result&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;success()&lt;/span&gt;
&lt;span id="cb5-24"&gt;&lt;a href="#cb5-24"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-25"&gt;&lt;a href="#cb5-25"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb5-26"&gt;&lt;a href="#cb5-26"&gt;&lt;/a&gt;  &lt;span class="op"&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;JSON パーサーは比較的簡単だ(細かいところに目をつぶれば)． なんせ構文の定義が &lt;a href="https://www.json.org/json-en.html"&gt;json.org&lt;/a&gt; というサイトに書いてあるから． また，テストスイートも &lt;a href="https://github.com/nst/JSONTestSuite"&gt;nst/JSONTestSuite&lt;/a&gt; というところに置いてある．&lt;/p&gt;
&lt;h1 id="section-1"&gt;&lt;/h1&gt;
&lt;p&gt;今回はガッっと一晩で雑に作ったので浮動小数点の &lt;code&gt;e&lt;/code&gt; 記法やユニコードのエスケープ記法 &lt;code&gt;\u&lt;/code&gt; なんかの実装は無視した（まぁ多分すぐできるけど）． また，Elixir ということで積極的にパターンマッチングとパイプを利用して実装している． 興味がある人は PR を見てください（汚いのでリファクタリングしたい）．&lt;/p&gt;
&lt;p&gt;もう少し細かい紹介は気が向いたらするやもしれない．&lt;/p&gt;
&lt;h2 id="おしまい"&gt;おしまい&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;httpoison&lt;/code&gt; も無くしたいなぁ．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-12-07-tapl-with-elm-part2.html</id><title type="text">Elm で作る TaPL のラムダ計算（その２）</title><updated>2019-12-07T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-12-07-tapl-with-elm-part2.html"/><summary type="html">&lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;本記事は「&lt;a href="https://qiita.com/advent-calendar/2019/lang_dev"&gt;言語実装 Advent Calendar 2019&lt;/a&gt;」の7日目の記事です．&lt;/p&gt;
&lt;h1 id="section"&gt;&lt;/h1&gt;
&lt;p&gt;表題の通り，TaPL という書籍で紹介されているプログラミング言語の実装例を Elm でやってみたという話です（その２）． &lt;a href="https://matsubara0507.github.io/posts/2019-12-06-tapl-with-elm-part1.html"&gt;その１&lt;/a&gt;はこちら．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第4章 算術式のML実装&lt;/li&gt;
&lt;li&gt;第7章 ラムダ計算の ML 実装 (本記事はココ)
&lt;ul&gt;
&lt;li&gt;型無しラムダ計算を実装&lt;/li&gt;
&lt;li&gt;以降はこれを拡張していく(たしか)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;第10章 単純型のML実装
&lt;ul&gt;
&lt;li&gt;7章のを型付きラムダ計算にする&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;第17章 部分型付けの ML 実装&lt;/li&gt;
&lt;li&gt;第25章 System F の ML 実装
&lt;ul&gt;
&lt;li&gt;最後に型の多相性を追加&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;実装は全て下記のリポジトリにあげています:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matsubara0507/ELaMbda"&gt;matsubara0507/ELaMbda - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また，前回同様に&lt;a href="https://matsubara0507.github.io/ELaMbda/?chap=chap7"&gt;Web ブラウザから遊べるようになってます&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;&lt;a href="https://matsubara0507.github.io/ELaMbda/?chap=chap7&amp;amp;exp=(\x%20.%20x%20x)%20(\x%20.%20x%20x)"&gt;&lt;img src="/assets/tapl-with-elm/chap7.jpg"&gt;&lt;/img&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="第7章-ラムダ計算の-ml-実装"&gt;第7章 ラムダ計算の ML 実装&lt;/h2&gt;
&lt;p&gt;さぁいよいよみんな大好き(型なし)ラムダ計算です． ちなみに，ラムダ計算の数理論理学的な議論は5章でしている．&lt;/p&gt;
&lt;h3 id="構文規則"&gt;構文規則&lt;/h3&gt;
&lt;p&gt;構文規則はこんな感じ:&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode txt"&gt;&lt;code class="sourceCode default"&gt;&lt;span id="cb1-1"&gt;&lt;a href="#cb1-1"&gt;&lt;/a&gt;t := x       [変数]&lt;/span&gt;
&lt;span id="cb1-2"&gt;&lt;a href="#cb1-2"&gt;&lt;/a&gt;   | \x . t  [ラムダ抽象]&lt;/span&gt;
&lt;span id="cb1-3"&gt;&lt;a href="#cb1-3"&gt;&lt;/a&gt;   | t t     [関数適用]&lt;/span&gt;
&lt;span id="cb1-4"&gt;&lt;a href="#cb1-4"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb1-5"&gt;&lt;a href="#cb1-5"&gt;&lt;/a&gt;v := \x . t&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なんと前回の算術式より構文規則がシンプル． ラムダ計算というのは「関数」しかないプログラミング言語で，ラムダ抽象というのが最近の多くの言語で導入されている無名関数や関数オブジェクトと言われるものだ（たぶん）．&lt;/p&gt;
&lt;p&gt;まずはこれを Elm 上の型として定義する:&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb2-1"&gt;&lt;a href="#cb2-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-2"&gt;&lt;a href="#cb2-2"&gt;&lt;/a&gt;    &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;TmVar&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-3"&gt;&lt;a href="#cb2-3"&gt;&lt;/a&gt;    &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;TmAbs&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-4"&gt;&lt;a href="#cb2-4"&gt;&lt;/a&gt;    &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;TmApp&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-5"&gt;&lt;a href="#cb2-5"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-6"&gt;&lt;a href="#cb2-6"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- 値はラムダ抽象だけ&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-7"&gt;&lt;a href="#cb2-7"&gt;&lt;/a&gt;&lt;span class="fu"&gt;isval&lt;/span&gt; : &lt;span class="dt"&gt;Context&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Bool&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-8"&gt;&lt;a href="#cb2-8"&gt;&lt;/a&gt;&lt;span class="fu"&gt;isval&lt;/span&gt; &lt;span class="fu"&gt;_&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-9"&gt;&lt;a href="#cb2-9"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;case&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="cf"&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-10"&gt;&lt;a href="#cb2-10"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;TmAbs&lt;/span&gt; &lt;span class="fu"&gt;_&lt;/span&gt; &lt;span class="fu"&gt;_&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-11"&gt;&lt;a href="#cb2-11"&gt;&lt;/a&gt;            &lt;span class="dt"&gt;True&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-12"&gt;&lt;a href="#cb2-12"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-13"&gt;&lt;a href="#cb2-13"&gt;&lt;/a&gt;        &lt;span class="fu"&gt;_&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-14"&gt;&lt;a href="#cb2-14"&gt;&lt;/a&gt;            &lt;span class="dt"&gt;False&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-15"&gt;&lt;a href="#cb2-15"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-16"&gt;&lt;a href="#cb2-16"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- 変数名を保持している（表示用）&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-17"&gt;&lt;a href="#cb2-17"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- Binding の意味は現状まだない（次回以降ちゃんと使う）&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-18"&gt;&lt;a href="#cb2-18"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="kw"&gt;alias&lt;/span&gt; &lt;span class="dt"&gt;Context&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;　&lt;span class="dt"&gt;List&lt;/span&gt; ( &lt;span class="dt"&gt;String&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;Binding&lt;/span&gt; )&lt;/span&gt;
&lt;span id="cb2-19"&gt;&lt;a href="#cb2-19"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Binding&lt;/span&gt;　&lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;NameBind&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;TmVar&lt;/code&gt; が少しキモ． 2つの &lt;code&gt;Int&lt;/code&gt; は変数が関数全体の中でどの位置にいるかを表している:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1つ目の Int は&lt;a href="https://en.wikipedia.org/wiki/De_Bruijn_index"&gt;ドブラウン・インデックス&lt;/a&gt; (束縛されたラムダ抽象までの距離)&lt;/li&gt;
&lt;li&gt;2つ目の Int は一番外のラムダ抽象までの距離(深さ)&lt;/li&gt;
&lt;li&gt;e.g. &lt;code&gt;(\x. \f. f x) (\x. x)&lt;/code&gt; の場合は &lt;code&gt;TmApp (TmAbs &amp;quot;x&amp;quot; (TmAbs &amp;quot;f&amp;quot; (TmApp (TmVar 0 2) (TmVar 1 2)))) (TmAbs &amp;quot;x&amp;quot; (TmVar 0 1))&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ちなみに，&lt;code&gt;TmAbs String Term&lt;/code&gt; の文字列型は変数名で基本的に表示用．&lt;/p&gt;
&lt;h3 id="評価規則"&gt;評価規則&lt;/h3&gt;
&lt;p&gt;評価規則も同様にシンプル:&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode txt"&gt;&lt;code class="sourceCode default"&gt;&lt;span id="cb3-1"&gt;&lt;a href="#cb3-1"&gt;&lt;/a&gt; t1 =&amp;gt; t1&amp;#39;&lt;/span&gt;
&lt;span id="cb3-2"&gt;&lt;a href="#cb3-2"&gt;&lt;/a&gt;---------------&lt;/span&gt;
&lt;span id="cb3-3"&gt;&lt;a href="#cb3-3"&gt;&lt;/a&gt; t1 t2 =&amp;gt; t1&amp;#39; t2&lt;/span&gt;
&lt;span id="cb3-4"&gt;&lt;a href="#cb3-4"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-5"&gt;&lt;a href="#cb3-5"&gt;&lt;/a&gt; t2 =&amp;gt; t2&amp;#39;&lt;/span&gt;
&lt;span id="cb3-6"&gt;&lt;a href="#cb3-6"&gt;&lt;/a&gt;---------------&lt;/span&gt;
&lt;span id="cb3-7"&gt;&lt;a href="#cb3-7"&gt;&lt;/a&gt; v1 t2 =&amp;gt; v1 t2&amp;#39;&lt;/span&gt;
&lt;span id="cb3-8"&gt;&lt;a href="#cb3-8"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-9"&gt;&lt;a href="#cb3-9"&gt;&lt;/a&gt;(\x.t12) v2 -&amp;gt; [x|-&amp;gt; v2]t12&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3つ目のが関数適用で，&lt;code&gt;[x|-&amp;gt; v2]t12&lt;/code&gt; 記法は &lt;code&gt;t12&lt;/code&gt; 内の変数 &lt;code&gt;x&lt;/code&gt; を全て &lt;code&gt;v2&lt;/code&gt; に置き換えるという意味である． ここで，&lt;code&gt;v2&lt;/code&gt; が値というのがキモだ． すなわち正格評価される．&lt;/p&gt;
&lt;p&gt;これをパターンマッチを使って実装すると次の通り:&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb4-1"&gt;&lt;a href="#cb4-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- 止まらない可能性があるから注意&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-2"&gt;&lt;a href="#cb4-2"&gt;&lt;/a&gt;&lt;span class="fu"&gt;eval&lt;/span&gt; : &lt;span class="dt"&gt;Context&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-3"&gt;&lt;a href="#cb4-3"&gt;&lt;/a&gt;&lt;span class="fu"&gt;eval&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-4"&gt;&lt;a href="#cb4-4"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;if&lt;/span&gt; &lt;span class="fu"&gt;isval&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="cf"&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-5"&gt;&lt;a href="#cb4-5"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;Just&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-6"&gt;&lt;a href="#cb4-6"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-7"&gt;&lt;a href="#cb4-7"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-8"&gt;&lt;a href="#cb4-8"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;andThen&lt;/span&gt; (&lt;span class="fu"&gt;eval&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt;) (&lt;span class="fu"&gt;eval1&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb4-9"&gt;&lt;a href="#cb4-9"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-10"&gt;&lt;a href="#cb4-10"&gt;&lt;/a&gt;&lt;span class="fu"&gt;eval1&lt;/span&gt; : &lt;span class="dt"&gt;Context&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-11"&gt;&lt;a href="#cb4-11"&gt;&lt;/a&gt;&lt;span class="fu"&gt;eval1&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-12"&gt;&lt;a href="#cb4-12"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;case&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="cf"&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-13"&gt;&lt;a href="#cb4-13"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;TmApp&lt;/span&gt; (&lt;span class="dt"&gt;TmAbs&lt;/span&gt; &lt;span class="fu"&gt;x&lt;/span&gt; &lt;span class="fu"&gt;t12&lt;/span&gt;) &lt;span class="fu"&gt;t2&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-14"&gt;&lt;a href="#cb4-14"&gt;&lt;/a&gt;            &lt;span class="cf"&gt;if&lt;/span&gt; &lt;span class="fu"&gt;isval&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;t2&lt;/span&gt; &lt;span class="cf"&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-15"&gt;&lt;a href="#cb4-15"&gt;&lt;/a&gt;                &lt;span class="dt"&gt;Just&lt;/span&gt; (&lt;span class="fu"&gt;termSubstTop&lt;/span&gt; &lt;span class="fu"&gt;t2&lt;/span&gt; &lt;span class="fu"&gt;t12&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb4-16"&gt;&lt;a href="#cb4-16"&gt;&lt;/a&gt;            &lt;span class="cf"&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-17"&gt;&lt;a href="#cb4-17"&gt;&lt;/a&gt;                &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;map&lt;/span&gt; (&lt;span class="dt"&gt;TmApp&lt;/span&gt; (&lt;span class="dt"&gt;TmAbs&lt;/span&gt; &lt;span class="fu"&gt;x&lt;/span&gt; &lt;span class="fu"&gt;t12&lt;/span&gt;)) (&lt;span class="fu"&gt;eval1&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;t2&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb4-18"&gt;&lt;a href="#cb4-18"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-19"&gt;&lt;a href="#cb4-19"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;TmApp&lt;/span&gt; &lt;span class="fu"&gt;t1&lt;/span&gt; &lt;span class="fu"&gt;t2&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-20"&gt;&lt;a href="#cb4-20"&gt;&lt;/a&gt;            &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;map&lt;/span&gt; (&lt;span class="fu"&gt;flip&lt;/span&gt; &lt;span class="dt"&gt;TmApp&lt;/span&gt; &lt;span class="fu"&gt;t2&lt;/span&gt;) (&lt;span class="fu"&gt;eval1&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;t1&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb4-21"&gt;&lt;a href="#cb4-21"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-22"&gt;&lt;a href="#cb4-22"&gt;&lt;/a&gt;        &lt;span class="fu"&gt;_&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-23"&gt;&lt;a href="#cb4-23"&gt;&lt;/a&gt;            &lt;span class="dt"&gt;Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-24"&gt;&lt;a href="#cb4-24"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-25"&gt;&lt;a href="#cb4-25"&gt;&lt;/a&gt;&lt;span class="fu"&gt;termSubstTop&lt;/span&gt; : &lt;span class="dt"&gt;Term&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-26"&gt;&lt;a href="#cb4-26"&gt;&lt;/a&gt;&lt;span class="fu"&gt;termSubstTop&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="op"&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;termSubstTop&lt;/code&gt; という新しい関数が出てきた． 変数を置き換える(代入する)上で重要なのは同じ変数名の変数が出てきたときに，それらを区別して〜〜ってのがあり，それをいい感じにやるための工夫が &lt;code&gt;TmVar&lt;/code&gt; の2つの &lt;code&gt;Int&lt;/code&gt; だ． この実装上の工夫は第6章で説明されているので，買って読んでください(おい)．&lt;/p&gt;
&lt;h1 id="section-1"&gt;&lt;/h1&gt;
&lt;p&gt;で，&lt;code&gt;termSubstTop&lt;/code&gt; の実装はこんな感じ(本書にも全部書いてある):&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb5-1"&gt;&lt;a href="#cb5-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- v2 と t12 を渡して [x|-&amp;gt;v2]t12 が返ってくる&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-2"&gt;&lt;a href="#cb5-2"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- termSubst 0 なので一番外の変数を置き換える&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-3"&gt;&lt;a href="#cb5-3"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- 置き換えた後 -1 シフトしないといけない(一番外のラムダ抽象が剥がれるので)&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-4"&gt;&lt;a href="#cb5-4"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- 先に 1 だけシフトしてるのは代入後の s は -1 シフトして欲しくないから&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-5"&gt;&lt;a href="#cb5-5"&gt;&lt;/a&gt;&lt;span class="fu"&gt;termSubstTop&lt;/span&gt; : &lt;span class="dt"&gt;Term&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-6"&gt;&lt;a href="#cb5-6"&gt;&lt;/a&gt;&lt;span class="fu"&gt;termSubstTop&lt;/span&gt; &lt;span class="fu"&gt;s&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-7"&gt;&lt;a href="#cb5-7"&gt;&lt;/a&gt;    &lt;span class="fu"&gt;termShift&lt;/span&gt; &lt;span class="op"&gt;-&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt; (&lt;span class="fu"&gt;termSubst&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt; (&lt;span class="fu"&gt;termShift&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt; &lt;span class="fu"&gt;s&lt;/span&gt;) &lt;span class="fu"&gt;t&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb5-8"&gt;&lt;a href="#cb5-8"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb5-9"&gt;&lt;a href="#cb5-9"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- 項 tt 中の j 番の変数へ項 s を代入 [j|-&amp;gt;s]t する&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-10"&gt;&lt;a href="#cb5-10"&gt;&lt;/a&gt;&lt;span class="fu"&gt;termSubst&lt;/span&gt; : &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-11"&gt;&lt;a href="#cb5-11"&gt;&lt;/a&gt;&lt;span class="fu"&gt;termSubst&lt;/span&gt; &lt;span class="fu"&gt;j&lt;/span&gt; &lt;span class="fu"&gt;s&lt;/span&gt; &lt;span class="fu"&gt;tt&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-12"&gt;&lt;a href="#cb5-12"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;let&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-13"&gt;&lt;a href="#cb5-13"&gt;&lt;/a&gt;        &lt;span class="fu"&gt;walk&lt;/span&gt; &lt;span class="fu"&gt;c&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-14"&gt;&lt;a href="#cb5-14"&gt;&lt;/a&gt;            &lt;span class="cf"&gt;case&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="cf"&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-15"&gt;&lt;a href="#cb5-15"&gt;&lt;/a&gt;                &lt;span class="dt"&gt;TmVar&lt;/span&gt; &lt;span class="fu"&gt;x&lt;/span&gt; &lt;span class="fu"&gt;n&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-16"&gt;&lt;a href="#cb5-16"&gt;&lt;/a&gt;                    &lt;span class="cf"&gt;if&lt;/span&gt; &lt;span class="fu"&gt;x&lt;/span&gt; &lt;span class="op"&gt;==&lt;/span&gt; &lt;span class="fu"&gt;j&lt;/span&gt; &lt;span class="op"&gt;+&lt;/span&gt; &lt;span class="fu"&gt;c&lt;/span&gt; &lt;span class="cf"&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-17"&gt;&lt;a href="#cb5-17"&gt;&lt;/a&gt;                        &lt;span class="co"&gt;-- 潜ったぶんだけドブラウン・インデックスをシフト&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-18"&gt;&lt;a href="#cb5-18"&gt;&lt;/a&gt;                        &lt;span class="fu"&gt;termShift&lt;/span&gt; &lt;span class="fu"&gt;c&lt;/span&gt; &lt;span class="fu"&gt;s&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-19"&gt;&lt;a href="#cb5-19"&gt;&lt;/a&gt;                    &lt;span class="cf"&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-20"&gt;&lt;a href="#cb5-20"&gt;&lt;/a&gt;                        &lt;span class="dt"&gt;TmVar&lt;/span&gt; &lt;span class="fu"&gt;x&lt;/span&gt; &lt;span class="fu"&gt;n&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-21"&gt;&lt;a href="#cb5-21"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb5-22"&gt;&lt;a href="#cb5-22"&gt;&lt;/a&gt;                &lt;span class="dt"&gt;TmAbs&lt;/span&gt; &lt;span class="fu"&gt;x&lt;/span&gt; &lt;span class="fu"&gt;t1&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-23"&gt;&lt;a href="#cb5-23"&gt;&lt;/a&gt;                    &lt;span class="dt"&gt;TmAbs&lt;/span&gt; &lt;span class="fu"&gt;x&lt;/span&gt; (&lt;span class="fu"&gt;walk&lt;/span&gt; (&lt;span class="fu"&gt;c&lt;/span&gt; &lt;span class="op"&gt;+&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;) &lt;span class="fu"&gt;t1&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb5-24"&gt;&lt;a href="#cb5-24"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb5-25"&gt;&lt;a href="#cb5-25"&gt;&lt;/a&gt;                &lt;span class="dt"&gt;TmApp&lt;/span&gt; &lt;span class="fu"&gt;t1&lt;/span&gt; &lt;span class="fu"&gt;t2&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-26"&gt;&lt;a href="#cb5-26"&gt;&lt;/a&gt;                    &lt;span class="dt"&gt;TmApp&lt;/span&gt; (&lt;span class="fu"&gt;walk&lt;/span&gt; &lt;span class="fu"&gt;c&lt;/span&gt; &lt;span class="fu"&gt;t1&lt;/span&gt;) (&lt;span class="fu"&gt;walk&lt;/span&gt; &lt;span class="fu"&gt;c&lt;/span&gt; &lt;span class="fu"&gt;t2&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb5-27"&gt;&lt;a href="#cb5-27"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;in&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-28"&gt;&lt;a href="#cb5-28"&gt;&lt;/a&gt;    &lt;span class="fu"&gt;walk&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt; &lt;span class="fu"&gt;tt&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-29"&gt;&lt;a href="#cb5-29"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb5-30"&gt;&lt;a href="#cb5-30"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- 項 tt の自由変数のドブラウン・インデックスを d だけシフト&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-31"&gt;&lt;a href="#cb5-31"&gt;&lt;/a&gt;&lt;span class="fu"&gt;termShift&lt;/span&gt; : &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-32"&gt;&lt;a href="#cb5-32"&gt;&lt;/a&gt;&lt;span class="fu"&gt;termShift&lt;/span&gt; &lt;span class="fu"&gt;d&lt;/span&gt; &lt;span class="fu"&gt;tt&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-33"&gt;&lt;a href="#cb5-33"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;let&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-34"&gt;&lt;a href="#cb5-34"&gt;&lt;/a&gt;        &lt;span class="fu"&gt;walk&lt;/span&gt; &lt;span class="fu"&gt;c&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-35"&gt;&lt;a href="#cb5-35"&gt;&lt;/a&gt;            &lt;span class="cf"&gt;case&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="cf"&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-36"&gt;&lt;a href="#cb5-36"&gt;&lt;/a&gt;                &lt;span class="dt"&gt;TmVar&lt;/span&gt; &lt;span class="fu"&gt;x&lt;/span&gt; &lt;span class="fu"&gt;n&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-37"&gt;&lt;a href="#cb5-37"&gt;&lt;/a&gt;                    &lt;span class="co"&gt;-- c はラムダ抽象の深さ&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-38"&gt;&lt;a href="#cb5-38"&gt;&lt;/a&gt;                    &lt;span class="co"&gt;-- x は変数が束縛されたのラムダ抽象までの距離&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-39"&gt;&lt;a href="#cb5-39"&gt;&lt;/a&gt;                    &lt;span class="co"&gt;-- したがって x &amp;gt;= c は自由変数&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-40"&gt;&lt;a href="#cb5-40"&gt;&lt;/a&gt;                    &lt;span class="cf"&gt;if&lt;/span&gt; &lt;span class="fu"&gt;x&lt;/span&gt; &lt;span class="op"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="fu"&gt;c&lt;/span&gt; &lt;span class="cf"&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-41"&gt;&lt;a href="#cb5-41"&gt;&lt;/a&gt;                        &lt;span class="dt"&gt;TmVar&lt;/span&gt; (&lt;span class="fu"&gt;x&lt;/span&gt; &lt;span class="op"&gt;+&lt;/span&gt; &lt;span class="fu"&gt;d&lt;/span&gt;) (&lt;span class="fu"&gt;n&lt;/span&gt; &lt;span class="op"&gt;+&lt;/span&gt; &lt;span class="fu"&gt;d&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb5-42"&gt;&lt;a href="#cb5-42"&gt;&lt;/a&gt;                    &lt;span class="cf"&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-43"&gt;&lt;a href="#cb5-43"&gt;&lt;/a&gt;                        &lt;span class="dt"&gt;TmVar&lt;/span&gt; &lt;span class="fu"&gt;x&lt;/span&gt; (&lt;span class="fu"&gt;n&lt;/span&gt; &lt;span class="op"&gt;+&lt;/span&gt; &lt;span class="fu"&gt;d&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb5-44"&gt;&lt;a href="#cb5-44"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb5-45"&gt;&lt;a href="#cb5-45"&gt;&lt;/a&gt;                &lt;span class="dt"&gt;TmAbs&lt;/span&gt; &lt;span class="fu"&gt;x&lt;/span&gt; &lt;span class="fu"&gt;t1&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-46"&gt;&lt;a href="#cb5-46"&gt;&lt;/a&gt;                    &lt;span class="dt"&gt;TmAbs&lt;/span&gt; &lt;span class="fu"&gt;x&lt;/span&gt; (&lt;span class="fu"&gt;walk&lt;/span&gt; (&lt;span class="fu"&gt;c&lt;/span&gt; &lt;span class="op"&gt;+&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;) &lt;span class="fu"&gt;t1&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb5-47"&gt;&lt;a href="#cb5-47"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb5-48"&gt;&lt;a href="#cb5-48"&gt;&lt;/a&gt;                &lt;span class="dt"&gt;TmApp&lt;/span&gt; &lt;span class="fu"&gt;t1&lt;/span&gt; &lt;span class="fu"&gt;t2&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-49"&gt;&lt;a href="#cb5-49"&gt;&lt;/a&gt;                    &lt;span class="dt"&gt;TmApp&lt;/span&gt; (&lt;span class="fu"&gt;walk&lt;/span&gt; &lt;span class="fu"&gt;c&lt;/span&gt; &lt;span class="fu"&gt;t1&lt;/span&gt;) (&lt;span class="fu"&gt;walk&lt;/span&gt; &lt;span class="fu"&gt;c&lt;/span&gt; &lt;span class="fu"&gt;t2&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb5-50"&gt;&lt;a href="#cb5-50"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;in&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-51"&gt;&lt;a href="#cb5-51"&gt;&lt;/a&gt;    &lt;span class="fu"&gt;walk&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt; &lt;span class="fu"&gt;tt&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;REPL で確かめてみる:&lt;/p&gt;
&lt;div class="sourceCode" id="cb6"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb6-1"&gt;&lt;a href="#cb6-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;$&lt;/span&gt; &lt;span class="fu"&gt;elm&lt;/span&gt; &lt;span class="fu"&gt;repl&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-2"&gt;&lt;a href="#cb6-2"&gt;&lt;/a&gt;&lt;span class="co"&gt;---- Elm 0.19.1 ----------------------------------------------------------------&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-3"&gt;&lt;a href="#cb6-3"&gt;&lt;/a&gt;&lt;span class="dt"&gt;Say&lt;/span&gt; :&lt;span class="fu"&gt;help&lt;/span&gt; &lt;span class="fu"&gt;for&lt;/span&gt; &lt;span class="fu"&gt;help&lt;/span&gt; &lt;span class="fu"&gt;and&lt;/span&gt; :&lt;span class="fu"&gt;exit&lt;/span&gt; &lt;span class="fu"&gt;to&lt;/span&gt; &lt;span class="fu"&gt;exit&lt;/span&gt;&lt;span class="op"&gt;!&lt;/span&gt; &lt;span class="dt"&gt;More&lt;/span&gt; &lt;span class="fu"&gt;at&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&lt;/span&gt;&lt;span class="fu"&gt;https&lt;/span&gt;:&lt;span class="op"&gt;//&lt;/span&gt;&lt;span class="fu"&gt;elm&lt;/span&gt;&lt;span class="op"&gt;-&lt;/span&gt;&lt;span class="fu"&gt;lang&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;org&lt;/span&gt;&lt;span class="op"&gt;/&lt;/span&gt;&lt;span class="dv"&gt;0&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dv"&gt;19&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;&lt;span class="op"&gt;/&lt;/span&gt;&lt;span class="fu"&gt;repl&lt;/span&gt;&lt;span class="op"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-4"&gt;&lt;a href="#cb6-4"&gt;&lt;/a&gt;&lt;span class="co"&gt;--------------------------------------------------------------------------------&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-5"&gt;&lt;a href="#cb6-5"&gt;&lt;/a&gt;&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;TaPL&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Chap7&lt;/span&gt; &lt;span class="kw"&gt;as&lt;/span&gt; &lt;span class="dt"&gt;Chap7&lt;/span&gt; &lt;span class="kw"&gt;exposing&lt;/span&gt; (&lt;span class="dt"&gt;Term&lt;/span&gt; (&lt;span class="op"&gt;..&lt;/span&gt;))&lt;/span&gt;
&lt;span id="cb6-6"&gt;&lt;a href="#cb6-6"&gt;&lt;/a&gt;&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Chap7&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;eval&lt;/span&gt; [] (&lt;span class="dt"&gt;TmApp&lt;/span&gt; (&lt;span class="dt"&gt;TmAbs&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class="dt"&gt;TmAbs&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;f&amp;quot;&lt;/span&gt; (&lt;span class="dt"&gt;TmApp&lt;/span&gt; (&lt;span class="dt"&gt;TmVar&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt; &lt;span class="dv"&gt;2&lt;/span&gt;) (&lt;span class="dt"&gt;TmVar&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt; &lt;span class="dv"&gt;2&lt;/span&gt;)))) (&lt;span class="dt"&gt;TmAbs&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class="dt"&gt;TmVar&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;)))&lt;/span&gt;
&lt;span id="cb6-7"&gt;&lt;a href="#cb6-7"&gt;&lt;/a&gt;&lt;span class="dt"&gt;Just&lt;/span&gt; (&lt;span class="dt"&gt;TmAbs&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;f&amp;quot;&lt;/span&gt; (&lt;span class="dt"&gt;TmApp&lt;/span&gt; (&lt;span class="dt"&gt;TmVar&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;) (&lt;span class="dt"&gt;TmAbs&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class="dt"&gt;TmVar&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt; &lt;span class="dv"&gt;2&lt;/span&gt;))))&lt;/span&gt;
&lt;span id="cb6-8"&gt;&lt;a href="#cb6-8"&gt;&lt;/a&gt;    : &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;(\x . (\f . f x)) (\x . x)&lt;/code&gt; を評価して &lt;code&gt;\f . f (\x . x)&lt;/code&gt; という結果を得た．&lt;/p&gt;
&lt;h3 id="文字列へ変換"&gt;文字列へ変換&lt;/h3&gt;
&lt;p&gt;変数がインデックス表記になっているため読みにくい． なので文字列への変換関数とパーサーを記述しよう．&lt;/p&gt;
&lt;p&gt;まずは文字列の変換から． こっちは TaPL にも(ほとんど)書いてある:&lt;/p&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb7-1"&gt;&lt;a href="#cb7-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- これは TaPL にはない&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-2"&gt;&lt;a href="#cb7-2"&gt;&lt;/a&gt;&lt;span class="fu"&gt;display&lt;/span&gt; : &lt;span class="dt"&gt;Term&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-3"&gt;&lt;a href="#cb7-3"&gt;&lt;/a&gt;&lt;span class="fu"&gt;display&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-4"&gt;&lt;a href="#cb7-4"&gt;&lt;/a&gt;    &lt;span class="fu"&gt;printtm&lt;/span&gt; [] &lt;span class="fu"&gt;t&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-5"&gt;&lt;a href="#cb7-5"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;map&lt;/span&gt; (&lt;span class="fu"&gt;dropIfStartsWith&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;(&amp;quot;&lt;/span&gt;) &lt;span class="co"&gt;-- 最初と最後のカッコを消している&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-6"&gt;&lt;a href="#cb7-6"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;map&lt;/span&gt; (&lt;span class="fu"&gt;dropIfEndsWith&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;)&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb7-7"&gt;&lt;a href="#cb7-7"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;withDefault&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-8"&gt;&lt;a href="#cb7-8"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb7-9"&gt;&lt;a href="#cb7-9"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- インデックスが間違っている場合は Nothing になる&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-10"&gt;&lt;a href="#cb7-10"&gt;&lt;/a&gt;&lt;span class="fu"&gt;printtm&lt;/span&gt; : &lt;span class="dt"&gt;Context&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-11"&gt;&lt;a href="#cb7-11"&gt;&lt;/a&gt;&lt;span class="fu"&gt;printtm&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;　&lt;span class="op"&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;前回と異なり，今回は文字列に変換できない場合がある． インデックスが間違っている場合だ． その場合は &lt;code&gt;Notihng&lt;/code&gt; が返るようにしている(TaPL の場合は例外)． &lt;code&gt;printtm&lt;/code&gt; は &lt;code&gt;Term&lt;/code&gt; 型に対するパターンマッチで記述する:&lt;/p&gt;
&lt;div class="sourceCode" id="cb8"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb8-1"&gt;&lt;a href="#cb8-1"&gt;&lt;/a&gt;&lt;span class="fu"&gt;printtm&lt;/span&gt; : &lt;span class="dt"&gt;Context&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-2"&gt;&lt;a href="#cb8-2"&gt;&lt;/a&gt;&lt;span class="fu"&gt;printtm&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-3"&gt;&lt;a href="#cb8-3"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;case&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="cf"&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-4"&gt;&lt;a href="#cb8-4"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;TmAbs&lt;/span&gt; &lt;span class="fu"&gt;x&lt;/span&gt; &lt;span class="fu"&gt;t1&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-5"&gt;&lt;a href="#cb8-5"&gt;&lt;/a&gt;            &lt;span class="kw"&gt;let&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-6"&gt;&lt;a href="#cb8-6"&gt;&lt;/a&gt;                ( &lt;span class="fu"&gt;ctx1&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;x1&lt;/span&gt; ) &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-7"&gt;&lt;a href="#cb8-7"&gt;&lt;/a&gt;                    &lt;span class="co"&gt;-- 被らない変数名を生成&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-8"&gt;&lt;a href="#cb8-8"&gt;&lt;/a&gt;                    &lt;span class="fu"&gt;pickfreshname&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;x&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-9"&gt;&lt;a href="#cb8-9"&gt;&lt;/a&gt;            &lt;span class="kw"&gt;in&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-10"&gt;&lt;a href="#cb8-10"&gt;&lt;/a&gt;            &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;map&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-11"&gt;&lt;a href="#cb8-11"&gt;&lt;/a&gt;                (\&lt;span class="fu"&gt;s1&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;concat&lt;/span&gt; [ &lt;span class="st"&gt;&amp;quot;(\\&amp;quot;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;x1&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;. &amp;quot;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;s1&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;)&amp;quot;&lt;/span&gt; ])&lt;/span&gt;
&lt;span id="cb8-12"&gt;&lt;a href="#cb8-12"&gt;&lt;/a&gt;                (&lt;span class="fu"&gt;printtm&lt;/span&gt; &lt;span class="fu"&gt;ctx1&lt;/span&gt; &lt;span class="fu"&gt;t1&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb8-13"&gt;&lt;a href="#cb8-13"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb8-14"&gt;&lt;a href="#cb8-14"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;TmApp&lt;/span&gt; &lt;span class="fu"&gt;t1&lt;/span&gt; &lt;span class="fu"&gt;t2&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-15"&gt;&lt;a href="#cb8-15"&gt;&lt;/a&gt;            &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;map2&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-16"&gt;&lt;a href="#cb8-16"&gt;&lt;/a&gt;                (\&lt;span class="fu"&gt;s1&lt;/span&gt; &lt;span class="fu"&gt;s2&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;concat&lt;/span&gt; [ &lt;span class="st"&gt;&amp;quot;(&amp;quot;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;s1&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="st"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;s2&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;)&amp;quot;&lt;/span&gt; ])&lt;/span&gt;
&lt;span id="cb8-17"&gt;&lt;a href="#cb8-17"&gt;&lt;/a&gt;                (&lt;span class="fu"&gt;printtm&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;t1&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb8-18"&gt;&lt;a href="#cb8-18"&gt;&lt;/a&gt;                (&lt;span class="fu"&gt;printtm&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;t2&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb8-19"&gt;&lt;a href="#cb8-19"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb8-20"&gt;&lt;a href="#cb8-20"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;TmVar&lt;/span&gt; &lt;span class="fu"&gt;x&lt;/span&gt; &lt;span class="fu"&gt;n&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-21"&gt;&lt;a href="#cb8-21"&gt;&lt;/a&gt;            &lt;span class="co"&gt;-- ctx には変数がどんどん保存される&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-22"&gt;&lt;a href="#cb8-22"&gt;&lt;/a&gt;            &lt;span class="co"&gt;-- そのため ctx の長さと n の長さが等しくないといけない&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-23"&gt;&lt;a href="#cb8-23"&gt;&lt;/a&gt;            &lt;span class="cf"&gt;if&lt;/span&gt; &lt;span class="fu"&gt;ctxlength&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="op"&gt;==&lt;/span&gt; &lt;span class="fu"&gt;n&lt;/span&gt; &lt;span class="cf"&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-24"&gt;&lt;a href="#cb8-24"&gt;&lt;/a&gt;                &lt;span class="co"&gt;-- ctx から変数名をドブラウン・インデックスで引いてくる&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-25"&gt;&lt;a href="#cb8-25"&gt;&lt;/a&gt;                &lt;span class="fu"&gt;index2name&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;x&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-26"&gt;&lt;a href="#cb8-26"&gt;&lt;/a&gt;            &lt;span class="cf"&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-27"&gt;&lt;a href="#cb8-27"&gt;&lt;/a&gt;                &lt;span class="dt"&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;pickfreshname&lt;/code&gt; や &lt;code&gt;ctxlength&lt;/code&gt; や &lt;code&gt;index2name&lt;/code&gt; の実装は本書にはない． 振る舞いの説明が書いてあるので，それを読んで実装する必要がある． なので，僕は次のように実装したがもう少しエレガントな実装があるかもしれない:&lt;/p&gt;
&lt;div class="sourceCode" id="cb9"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb9-1"&gt;&lt;a href="#cb9-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- 変数名が重複しないように後ろに &amp;#39; を足して Context の先頭に追加&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-2"&gt;&lt;a href="#cb9-2"&gt;&lt;/a&gt;&lt;span class="fu"&gt;pickfreshname&lt;/span&gt; : &lt;span class="dt"&gt;Context&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; ( &lt;span class="dt"&gt;Context&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; )&lt;/span&gt;
&lt;span id="cb9-3"&gt;&lt;a href="#cb9-3"&gt;&lt;/a&gt;&lt;span class="fu"&gt;pickfreshname&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;x&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-4"&gt;&lt;a href="#cb9-4"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;let&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-5"&gt;&lt;a href="#cb9-5"&gt;&lt;/a&gt;        &lt;span class="fu"&gt;x1&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-6"&gt;&lt;a href="#cb9-6"&gt;&lt;/a&gt;            &lt;span class="fu"&gt;ctx&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-7"&gt;&lt;a href="#cb9-7"&gt;&lt;/a&gt;                &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;map&lt;/span&gt; &lt;span class="dt"&gt;Tuple&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;first&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-8"&gt;&lt;a href="#cb9-8"&gt;&lt;/a&gt;                &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;filter&lt;/span&gt; (&lt;span class="dt"&gt;String&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;startsWith&lt;/span&gt; &lt;span class="fu"&gt;x&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb9-9"&gt;&lt;a href="#cb9-9"&gt;&lt;/a&gt;                &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;maximum&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-10"&gt;&lt;a href="#cb9-10"&gt;&lt;/a&gt;                &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;map&lt;/span&gt; (\&lt;span class="fu"&gt;a&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;a&lt;/span&gt; &lt;span class="op"&gt;++&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;&amp;#39;&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb9-11"&gt;&lt;a href="#cb9-11"&gt;&lt;/a&gt;                &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;withDefault&lt;/span&gt; &lt;span class="fu"&gt;x&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-12"&gt;&lt;a href="#cb9-12"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;in&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-13"&gt;&lt;a href="#cb9-13"&gt;&lt;/a&gt;    ( ( &lt;span class="fu"&gt;x1&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;NameBind&lt;/span&gt; ) &lt;span class="op"&gt;::&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;x1&lt;/span&gt; )&lt;/span&gt;
&lt;span id="cb9-14"&gt;&lt;a href="#cb9-14"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb9-15"&gt;&lt;a href="#cb9-15"&gt;&lt;/a&gt;&lt;span class="fu"&gt;ctxlength&lt;/span&gt; : &lt;span class="dt"&gt;Context&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-16"&gt;&lt;a href="#cb9-16"&gt;&lt;/a&gt;&lt;span class="fu"&gt;ctxlength&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-17"&gt;&lt;a href="#cb9-17"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;List&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;length&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-18"&gt;&lt;a href="#cb9-18"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb9-19"&gt;&lt;a href="#cb9-19"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- ドブラウン・インデックスは束縛されたラムダ抽象への距離&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-20"&gt;&lt;a href="#cb9-20"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- Context はラムダ抽象のたびに先頭に対応する変数を追加する&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-21"&gt;&lt;a href="#cb9-21"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- なので，そのままリストへのインデックスアクセスで良い&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-22"&gt;&lt;a href="#cb9-22"&gt;&lt;/a&gt;&lt;span class="fu"&gt;index2name&lt;/span&gt; : &lt;span class="dt"&gt;Context&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-23"&gt;&lt;a href="#cb9-23"&gt;&lt;/a&gt;&lt;span class="fu"&gt;index2name&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;x&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-24"&gt;&lt;a href="#cb9-24"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;case&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;getAt&lt;/span&gt; &lt;span class="fu"&gt;x&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="cf"&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-25"&gt;&lt;a href="#cb9-25"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;Just&lt;/span&gt; ( &lt;span class="fu"&gt;str&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;_&lt;/span&gt; ) &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-26"&gt;&lt;a href="#cb9-26"&gt;&lt;/a&gt;            &lt;span class="dt"&gt;Just&lt;/span&gt; &lt;span class="fu"&gt;str&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-27"&gt;&lt;a href="#cb9-27"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb9-28"&gt;&lt;a href="#cb9-28"&gt;&lt;/a&gt;        &lt;span class="fu"&gt;_&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-29"&gt;&lt;a href="#cb9-29"&gt;&lt;/a&gt;            &lt;span class="dt"&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;REPL で試してみよう:&lt;/p&gt;
&lt;div class="sourceCode" id="cb10"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb10-1"&gt;&lt;a href="#cb10-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Chap7&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;display&lt;/span&gt; (&lt;span class="dt"&gt;TmApp&lt;/span&gt; (&lt;span class="dt"&gt;TmAbs&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class="dt"&gt;TmAbs&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;f&amp;quot;&lt;/span&gt; (&lt;span class="dt"&gt;TmApp&lt;/span&gt; (&lt;span class="dt"&gt;TmVar&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt; &lt;span class="dv"&gt;2&lt;/span&gt;) (&lt;span class="dt"&gt;TmVar&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt; &lt;span class="dv"&gt;2&lt;/span&gt;)))) (&lt;span class="dt"&gt;TmAbs&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class="dt"&gt;TmVar&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;)))&lt;/span&gt;
&lt;span id="cb10-2"&gt;&lt;a href="#cb10-2"&gt;&lt;/a&gt;&lt;span class="st"&gt;&amp;quot;(\\x. (\\f. (f x))) (\\x. x)&amp;quot;&lt;/span&gt; : &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-3"&gt;&lt;a href="#cb10-3"&gt;&lt;/a&gt;&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Chap7&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;eval&lt;/span&gt; [] (&lt;span class="dt"&gt;TmApp&lt;/span&gt; (&lt;span class="dt"&gt;TmAbs&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class="dt"&gt;TmAbs&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;f&amp;quot;&lt;/span&gt; (&lt;span class="dt"&gt;TmApp&lt;/span&gt; (&lt;span class="dt"&gt;TmVar&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt; &lt;span class="dv"&gt;2&lt;/span&gt;) (&lt;span class="dt"&gt;TmVar&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt; &lt;span class="dv"&gt;2&lt;/span&gt;)))) (&lt;span class="dt"&gt;TmAbs&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class="dt"&gt;TmVar&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;))) &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;map&lt;/span&gt; &lt;span class="dt"&gt;Chap7&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;display&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-4"&gt;&lt;a href="#cb10-4"&gt;&lt;/a&gt;&lt;span class="dt"&gt;Just&lt;/span&gt; (&lt;span class="st"&gt;&amp;quot;\\f. (f (\\x. x))&amp;quot;&lt;/span&gt;) : &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;いい感じ．&lt;/p&gt;
&lt;h3 id="パーサー"&gt;パーサー&lt;/h3&gt;
&lt;p&gt;前回同様 &lt;a href="https://package.elm-lang.org/packages/elm/parser"&gt;elm/parser&lt;/a&gt; を使う． ドブラウン・インデックスなどを構築していく必要があるので，それらを保持した &lt;code&gt;Context&lt;/code&gt; という型を用意する(紛らわしいが，モジュールが違い外に出さない型なので大丈夫):&lt;/p&gt;
&lt;div class="sourceCode" id="cb11"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb11-1"&gt;&lt;a href="#cb11-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;module&lt;/span&gt; &lt;span class="dt"&gt;TaPL&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Chap7&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="kw"&gt;exposing&lt;/span&gt; (&lt;span class="fu"&gt;parse&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb11-2"&gt;&lt;a href="#cb11-2"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb11-3"&gt;&lt;a href="#cb11-3"&gt;&lt;/a&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="kw"&gt;exposing&lt;/span&gt; ((&lt;span class="op"&gt;|.&lt;/span&gt;)&lt;span class="op"&gt;,&lt;/span&gt; (&lt;span class="op"&gt;|=&lt;/span&gt;)&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb11-4"&gt;&lt;a href="#cb11-4"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb11-5"&gt;&lt;a href="#cb11-5"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="kw"&gt;alias&lt;/span&gt; &lt;span class="dt"&gt;Context&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-6"&gt;&lt;a href="#cb11-6"&gt;&lt;/a&gt;    { &lt;span class="fu"&gt;env&lt;/span&gt; : &lt;span class="dt"&gt;Dict&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="co"&gt;-- 変数名とドブラウンインデックスの対応&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-7"&gt;&lt;a href="#cb11-7"&gt;&lt;/a&gt;    &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;depth&lt;/span&gt; : &lt;span class="dt"&gt;Int&lt;/span&gt;           &lt;span class="co"&gt;-- ラムダ抽象の深さ&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-8"&gt;&lt;a href="#cb11-8"&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id="cb11-9"&gt;&lt;a href="#cb11-9"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb11-10"&gt;&lt;a href="#cb11-10"&gt;&lt;/a&gt;&lt;span class="fu"&gt;iniCtx&lt;/span&gt; : &lt;span class="dt"&gt;Context&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-11"&gt;&lt;a href="#cb11-11"&gt;&lt;/a&gt;&lt;span class="fu"&gt;iniCtx&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-12"&gt;&lt;a href="#cb11-12"&gt;&lt;/a&gt;    { &lt;span class="fu"&gt;env&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Dict&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;empty&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;depth&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt; }&lt;/span&gt;
&lt;span id="cb11-13"&gt;&lt;a href="#cb11-13"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb11-14"&gt;&lt;a href="#cb11-14"&gt;&lt;/a&gt;&lt;span class="fu"&gt;parse&lt;/span&gt; : &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Result&lt;/span&gt; (&lt;span class="dt"&gt;List&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;DeadEnd&lt;/span&gt;) &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-15"&gt;&lt;a href="#cb11-15"&gt;&lt;/a&gt;&lt;span class="fu"&gt;parse&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-16"&gt;&lt;a href="#cb11-16"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;run&lt;/span&gt; &lt;span class="fu"&gt;parser&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-17"&gt;&lt;a href="#cb11-17"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb11-18"&gt;&lt;a href="#cb11-18"&gt;&lt;/a&gt;&lt;span class="fu"&gt;parser&lt;/span&gt; : &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-19"&gt;&lt;a href="#cb11-19"&gt;&lt;/a&gt;&lt;span class="fu"&gt;parser&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-20"&gt;&lt;a href="#cb11-20"&gt;&lt;/a&gt;    &lt;span class="fu"&gt;termParser&lt;/span&gt; &lt;span class="fu"&gt;iniCtx&lt;/span&gt; &lt;span class="op"&gt;|.&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-21"&gt;&lt;a href="#cb11-21"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb11-22"&gt;&lt;a href="#cb11-22"&gt;&lt;/a&gt;&lt;span class="fu"&gt;termParser&lt;/span&gt; : &lt;span class="dt"&gt;Context&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-23"&gt;&lt;a href="#cb11-23"&gt;&lt;/a&gt;&lt;span class="fu"&gt;termParser&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="op"&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;まずは関数適用を無視してパーサーを定義する(難しいので):&lt;/p&gt;
&lt;div class="sourceCode" id="cb12"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb12-1"&gt;&lt;a href="#cb12-1"&gt;&lt;/a&gt;&lt;span class="fu"&gt;termParser&lt;/span&gt; : &lt;span class="dt"&gt;Context&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-2"&gt;&lt;a href="#cb12-2"&gt;&lt;/a&gt;&lt;span class="fu"&gt;termParser&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-3"&gt;&lt;a href="#cb12-3"&gt;&lt;/a&gt;    &lt;span class="co"&gt;-- oneOf は最初にマッチしたパース結果を採用する&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-4"&gt;&lt;a href="#cb12-4"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;oneOf&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-5"&gt;&lt;a href="#cb12-5"&gt;&lt;/a&gt;        [ &lt;span class="fu"&gt;parParser&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="co"&gt;-- カッコのパーサー(割愛)&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-6"&gt;&lt;a href="#cb12-6"&gt;&lt;/a&gt;        &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;absParser&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-7"&gt;&lt;a href="#cb12-7"&gt;&lt;/a&gt;        &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;varParser&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-8"&gt;&lt;a href="#cb12-8"&gt;&lt;/a&gt;        ]&lt;/span&gt;
&lt;span id="cb12-9"&gt;&lt;a href="#cb12-9"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb12-10"&gt;&lt;a href="#cb12-10"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- ラムダ抽象(`\x. t`)のパーサー&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-11"&gt;&lt;a href="#cb12-11"&gt;&lt;/a&gt;&lt;span class="fu"&gt;absParser&lt;/span&gt; : &lt;span class="dt"&gt;Context&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-12"&gt;&lt;a href="#cb12-12"&gt;&lt;/a&gt;&lt;span class="fu"&gt;absParser&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-13"&gt;&lt;a href="#cb12-13"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;succeed&lt;/span&gt; &lt;span class="fu"&gt;identity&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-14"&gt;&lt;a href="#cb12-14"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|.&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;symbol&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;\\&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-15"&gt;&lt;a href="#cb12-15"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|.&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;spaces&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-16"&gt;&lt;a href="#cb12-16"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|=&lt;/span&gt; &lt;span class="fu"&gt;varStrParser&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-17"&gt;&lt;a href="#cb12-17"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|.&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;spaces&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-18"&gt;&lt;a href="#cb12-18"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|.&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;symbol&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-19"&gt;&lt;a href="#cb12-19"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|.&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;spaces&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-20"&gt;&lt;a href="#cb12-20"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;andThen&lt;/span&gt; (&lt;span class="fu"&gt;absParserN&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb12-21"&gt;&lt;a href="#cb12-21"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb12-22"&gt;&lt;a href="#cb12-22"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- 変数名のパーサー (小文字始まりで [A-z0-9_&amp;#39;] だけ許容する)&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-23"&gt;&lt;a href="#cb12-23"&gt;&lt;/a&gt;&lt;span class="fu"&gt;varStrParser&lt;/span&gt; : &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-24"&gt;&lt;a href="#cb12-24"&gt;&lt;/a&gt;&lt;span class="fu"&gt;varStrParser&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-25"&gt;&lt;a href="#cb12-25"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;variable&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-26"&gt;&lt;a href="#cb12-26"&gt;&lt;/a&gt;        { &lt;span class="fu"&gt;start&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Char&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;isLower&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-27"&gt;&lt;a href="#cb12-27"&gt;&lt;/a&gt;        &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;inner&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; \&lt;span class="fu"&gt;c&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Char&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;isAlphaNum&lt;/span&gt; &lt;span class="fu"&gt;c&lt;/span&gt; &lt;span class="op"&gt;||&lt;/span&gt; &lt;span class="fu"&gt;c&lt;/span&gt; &lt;span class="op"&gt;==&lt;/span&gt; &lt;span class="ch"&gt;&amp;#39;_&amp;#39;&lt;/span&gt; &lt;span class="op"&gt;||&lt;/span&gt; &lt;span class="fu"&gt;c&lt;/span&gt; &lt;span class="op"&gt;==&lt;/span&gt; &lt;span class="ch"&gt;&amp;#39;\&amp;#39;&lt;/span&gt;&amp;#39;&lt;/span&gt;
&lt;span id="cb12-28"&gt;&lt;a href="#cb12-28"&gt;&lt;/a&gt;        &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;reserved&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Set&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;fromList&lt;/span&gt; []&lt;/span&gt;
&lt;span id="cb12-29"&gt;&lt;a href="#cb12-29"&gt;&lt;/a&gt;        }&lt;/span&gt;
&lt;span id="cb12-30"&gt;&lt;a href="#cb12-30"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb12-31"&gt;&lt;a href="#cb12-31"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- ラムダ抽象が深くなるのでコンテキストを更新して再度 Term をパースする&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-32"&gt;&lt;a href="#cb12-32"&gt;&lt;/a&gt;&lt;span class="fu"&gt;absParserN&lt;/span&gt; : &lt;span class="dt"&gt;Context&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-33"&gt;&lt;a href="#cb12-33"&gt;&lt;/a&gt;&lt;span class="fu"&gt;absParserN&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;v&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-34"&gt;&lt;a href="#cb12-34"&gt;&lt;/a&gt;  &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;succeed&lt;/span&gt; (&lt;span class="dt"&gt;TmAbs&lt;/span&gt; &lt;span class="fu"&gt;v&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb12-35"&gt;&lt;a href="#cb12-35"&gt;&lt;/a&gt;      &lt;span class="op"&gt;|=&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;lazy&lt;/span&gt; (\&lt;span class="fu"&gt;_&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;termParser&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;|&lt;/span&gt; &lt;span class="fu"&gt;pushVar&lt;/span&gt; &lt;span class="fu"&gt;v&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;|&lt;/span&gt; &lt;span class="fu"&gt;incrCtx&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb12-36"&gt;&lt;a href="#cb12-36"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb12-37"&gt;&lt;a href="#cb12-37"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- ラムダ抽象が1つ深くなる&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-38"&gt;&lt;a href="#cb12-38"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- なので深さと全てのドブラウン・インデックスを +1 する&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-39"&gt;&lt;a href="#cb12-39"&gt;&lt;/a&gt;&lt;span class="fu"&gt;incrCtx&lt;/span&gt; : &lt;span class="dt"&gt;Context&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Context&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-40"&gt;&lt;a href="#cb12-40"&gt;&lt;/a&gt;&lt;span class="fu"&gt;incrCtx&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-41"&gt;&lt;a href="#cb12-41"&gt;&lt;/a&gt;    { &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="fu"&gt;depth&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;depth&lt;/span&gt; &lt;span class="op"&gt;+&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;env&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Dict&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;map&lt;/span&gt; (\&lt;span class="fu"&gt;_&lt;/span&gt; &lt;span class="fu"&gt;v&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;v&lt;/span&gt; &lt;span class="op"&gt;+&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;) &lt;span class="fu"&gt;ctx&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;env&lt;/span&gt; }&lt;/span&gt;
&lt;span id="cb12-42"&gt;&lt;a href="#cb12-42"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb12-43"&gt;&lt;a href="#cb12-43"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- 新しい変数名を追加する&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-44"&gt;&lt;a href="#cb12-44"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- 同じ変数名は上書きしてしまって良い&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-45"&gt;&lt;a href="#cb12-45"&gt;&lt;/a&gt;&lt;span class="fu"&gt;pushVar&lt;/span&gt; : &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Context&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Context&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-46"&gt;&lt;a href="#cb12-46"&gt;&lt;/a&gt;&lt;span class="fu"&gt;pushVar&lt;/span&gt; &lt;span class="fu"&gt;v&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-47"&gt;&lt;a href="#cb12-47"&gt;&lt;/a&gt;    { &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="fu"&gt;env&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Dict&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;insert&lt;/span&gt; &lt;span class="fu"&gt;v&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;env&lt;/span&gt; }&lt;/span&gt;
&lt;span id="cb12-48"&gt;&lt;a href="#cb12-48"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb12-49"&gt;&lt;a href="#cb12-49"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- 変数のパーサー&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-50"&gt;&lt;a href="#cb12-50"&gt;&lt;/a&gt;&lt;span class="fu"&gt;varParser&lt;/span&gt; : &lt;span class="dt"&gt;Context&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-51"&gt;&lt;a href="#cb12-51"&gt;&lt;/a&gt;&lt;span class="fu"&gt;varParser&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-52"&gt;&lt;a href="#cb12-52"&gt;&lt;/a&gt;    &lt;span class="fu"&gt;varStrParser&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-53"&gt;&lt;a href="#cb12-53"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;andThen&lt;/span&gt; (&lt;span class="fu"&gt;lookupVar&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb12-54"&gt;&lt;a href="#cb12-54"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;map&lt;/span&gt; (&lt;span class="fu"&gt;flip&lt;/span&gt; &lt;span class="dt"&gt;TmVar&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;depth&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb12-55"&gt;&lt;a href="#cb12-55"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb12-56"&gt;&lt;a href="#cb12-56"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- コンテキストには変数名とドブラウン・インデックスの連想配列がある&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-57"&gt;&lt;a href="#cb12-57"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- なので，変数名で引っ張ってくるだけ&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-58"&gt;&lt;a href="#cb12-58"&gt;&lt;/a&gt;&lt;span class="fu"&gt;lookupVar&lt;/span&gt; : &lt;span class="dt"&gt;Context&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-59"&gt;&lt;a href="#cb12-59"&gt;&lt;/a&gt;&lt;span class="fu"&gt;lookupVar&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;s&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-60"&gt;&lt;a href="#cb12-60"&gt;&lt;/a&gt;  &lt;span class="dt"&gt;Dict&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;get&lt;/span&gt; &lt;span class="fu"&gt;s&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;env&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-61"&gt;&lt;a href="#cb12-61"&gt;&lt;/a&gt;      &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;map&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;succeed&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-62"&gt;&lt;a href="#cb12-62"&gt;&lt;/a&gt;      &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;withDefault&lt;/span&gt; (&lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;problem&lt;/span&gt; (&lt;span class="st"&gt;&amp;quot;undefined variable: &amp;quot;&lt;/span&gt; &lt;span class="op"&gt;++&lt;/span&gt; &lt;span class="fu"&gt;s&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;REPL で試してみる:&lt;/p&gt;
&lt;div class="sourceCode" id="cb13"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb13-1"&gt;&lt;a href="#cb13-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;TaPL&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Chap7&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="kw"&gt;as&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-2"&gt;&lt;a href="#cb13-2"&gt;&lt;/a&gt;&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;parse&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;\\x. x&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-3"&gt;&lt;a href="#cb13-3"&gt;&lt;/a&gt;&lt;span class="dt"&gt;Ok&lt;/span&gt; (&lt;span class="dt"&gt;TmAbs&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class="dt"&gt;TmVar&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;))&lt;/span&gt;
&lt;span id="cb13-4"&gt;&lt;a href="#cb13-4"&gt;&lt;/a&gt;    : &lt;span class="dt"&gt;Result&lt;/span&gt; (&lt;span class="dt"&gt;List&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;DeadEnd&lt;/span&gt;) &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-5"&gt;&lt;a href="#cb13-5"&gt;&lt;/a&gt;&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;parse&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;\\x. (\\y . x)&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-6"&gt;&lt;a href="#cb13-6"&gt;&lt;/a&gt;&lt;span class="dt"&gt;Ok&lt;/span&gt; (&lt;span class="dt"&gt;TmAbs&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;x&amp;quot;&lt;/span&gt; (&lt;span class="dt"&gt;TmAbs&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;y&amp;quot;&lt;/span&gt; (&lt;span class="dt"&gt;TmVar&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt; &lt;span class="dv"&gt;2&lt;/span&gt;)))&lt;/span&gt;
&lt;span id="cb13-7"&gt;&lt;a href="#cb13-7"&gt;&lt;/a&gt;    : &lt;span class="dt"&gt;Result&lt;/span&gt; (&lt;span class="dt"&gt;List&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;DeadEnd&lt;/span&gt;) &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-8"&gt;&lt;a href="#cb13-8"&gt;&lt;/a&gt;&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;parse&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;\\x. (\\y . z)&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-9"&gt;&lt;a href="#cb13-9"&gt;&lt;/a&gt;&lt;span class="dt"&gt;Err&lt;/span&gt; [{ &lt;span class="fu"&gt;col&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dv"&gt;12&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;problem&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Problem&lt;/span&gt; (&lt;span class="st"&gt;&amp;quot;undefined variable: z&amp;quot;&lt;/span&gt;)&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;row&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt; }]&lt;/span&gt;
&lt;span id="cb13-10"&gt;&lt;a href="#cb13-10"&gt;&lt;/a&gt;    : &lt;span class="dt"&gt;Result&lt;/span&gt; (&lt;span class="dt"&gt;List&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;DeadEnd&lt;/span&gt;) &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;自由変数が出てくるとちゃんとエラーになる．&lt;/p&gt;
&lt;p&gt;残るは関数適用だ． 実はこいつが難しい． というのも，雑に実装をするといわゆる左再帰が出てくるからだ．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kazu-yamamoto.hatenablog.jp/entry/20110127/1296098875"&gt;chainl と左再帰 - あどけない話&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なので，一工夫する必要がある:&lt;/p&gt;
&lt;div class="sourceCode" id="cb14"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb14-1"&gt;&lt;a href="#cb14-1"&gt;&lt;/a&gt;&lt;span class="fu"&gt;termParser&lt;/span&gt; : &lt;span class="dt"&gt;Context&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-2"&gt;&lt;a href="#cb14-2"&gt;&lt;/a&gt;&lt;span class="fu"&gt;termParser&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-3"&gt;&lt;a href="#cb14-3"&gt;&lt;/a&gt;    &lt;span class="co"&gt;-- 関数適用は t1 t2 なのでまずは t1 にマッチさせ&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-4"&gt;&lt;a href="#cb14-4"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;oneOf&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-5"&gt;&lt;a href="#cb14-5"&gt;&lt;/a&gt;        [ &lt;span class="fu"&gt;parParser&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-6"&gt;&lt;a href="#cb14-6"&gt;&lt;/a&gt;        &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;absParser&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-7"&gt;&lt;a href="#cb14-7"&gt;&lt;/a&gt;        &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;varParser&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-8"&gt;&lt;a href="#cb14-8"&gt;&lt;/a&gt;        ]  &lt;span class="co"&gt;-- 後から t2 を探す&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-9"&gt;&lt;a href="#cb14-9"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;andThen&lt;/span&gt; (&lt;span class="fu"&gt;appParser&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb14-10"&gt;&lt;a href="#cb14-10"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb14-11"&gt;&lt;a href="#cb14-11"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- 関数適用 t1 t2 のパーサー&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-12"&gt;&lt;a href="#cb14-12"&gt;&lt;/a&gt;&lt;span class="fu"&gt;appParser&lt;/span&gt; : &lt;span class="dt"&gt;Context&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-13"&gt;&lt;a href="#cb14-13"&gt;&lt;/a&gt;&lt;span class="fu"&gt;appParser&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-14"&gt;&lt;a href="#cb14-14"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;oneOf&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-15"&gt;&lt;a href="#cb14-15"&gt;&lt;/a&gt;        [ &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;succeed&lt;/span&gt; (&lt;span class="dt"&gt;TmApp&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb14-16"&gt;&lt;a href="#cb14-16"&gt;&lt;/a&gt;            &lt;span class="co"&gt;-- backtrackable や commit は一旦無視して良い&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-17"&gt;&lt;a href="#cb14-17"&gt;&lt;/a&gt;            &lt;span class="co"&gt;-- termWithoutAppParser が先に出てくるのは関数適用が左結合のため&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-18"&gt;&lt;a href="#cb14-18"&gt;&lt;/a&gt;            &lt;span class="co"&gt;-- 例: t1 t2 t3 は (t1 t2) t3 つまり (TmApp (TmApp t1 t2) t3)&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-19"&gt;&lt;a href="#cb14-19"&gt;&lt;/a&gt;            &lt;span class="op"&gt;|.&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;backtrackable&lt;/span&gt; (&lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;symbol&lt;/span&gt; &lt;span class="st"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="op"&gt;|.&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;spaces&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb14-20"&gt;&lt;a href="#cb14-20"&gt;&lt;/a&gt;            &lt;span class="op"&gt;|=&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;lazy&lt;/span&gt; (\&lt;span class="fu"&gt;_&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;termWithoutAppParser&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb14-21"&gt;&lt;a href="#cb14-21"&gt;&lt;/a&gt;            &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;andThen&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;commit&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-22"&gt;&lt;a href="#cb14-22"&gt;&lt;/a&gt;            &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;andThen&lt;/span&gt; (&lt;span class="fu"&gt;appParser&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb14-23"&gt;&lt;a href="#cb14-23"&gt;&lt;/a&gt;        &lt;span class="co"&gt;-- t2 がなければ t1 のまんま返す&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-24"&gt;&lt;a href="#cb14-24"&gt;&lt;/a&gt;        &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;succeed&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-25"&gt;&lt;a href="#cb14-25"&gt;&lt;/a&gt;        ]&lt;/span&gt;
&lt;span id="cb14-26"&gt;&lt;a href="#cb14-26"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb14-27"&gt;&lt;a href="#cb14-27"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- 関数適用を抜いた termParser&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-28"&gt;&lt;a href="#cb14-28"&gt;&lt;/a&gt;&lt;span class="fu"&gt;termWithoutAppParser&lt;/span&gt; : &lt;span class="dt"&gt;Context&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-29"&gt;&lt;a href="#cb14-29"&gt;&lt;/a&gt;&lt;span class="fu"&gt;termWithoutAppParser&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-30"&gt;&lt;a href="#cb14-30"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;oneOf&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-31"&gt;&lt;a href="#cb14-31"&gt;&lt;/a&gt;        [ &lt;span class="fu"&gt;parParser&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-32"&gt;&lt;a href="#cb14-32"&gt;&lt;/a&gt;        &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;absParser&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-33"&gt;&lt;a href="#cb14-33"&gt;&lt;/a&gt;        &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;varParser&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-34"&gt;&lt;a href="#cb14-34"&gt;&lt;/a&gt;        ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;backtrackable&lt;/code&gt; と &lt;code&gt;commit&lt;/code&gt; はパーサーが文字列を消費してしまう問題の解決方法だ． パーサーの処理が進むと対象の文字列をどんどん消費していく． &lt;code&gt;oneOf&lt;/code&gt; で複数のパーサーを許容するとき，1文字目の結果で分岐できることが保証されているなら問題ないが，途中まで進み文字列を消費して失敗すると，その文字列を消費した状態で &lt;code&gt;oneOf&lt;/code&gt; 内の次のパーサーへ進んでしまう． そこで，elm/parser の場合は消費を戻して欲しい場合はし &lt;code&gt;backtrackable&lt;/code&gt; を使い，もう戻らなくて良くなった時点で &lt;code&gt;commit&lt;/code&gt; を使う，という感じ（たぶん）． まぁ今回は必要ではない気がするが，後々必要になってくる．&lt;/p&gt;
&lt;h1 id="section-2"&gt;&lt;/h1&gt;
&lt;p&gt;さぁ REPL で確認してみよう:&lt;/p&gt;
&lt;div class="sourceCode" id="cb15"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb15-1"&gt;&lt;a href="#cb15-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;parse&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;(\\x . \\f . f x) (\\x . x) (\\x . (\\x . x))&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb15-2"&gt;&lt;a href="#cb15-2"&gt;&lt;/a&gt;&lt;span class="op"&gt;|&lt;/span&gt;   &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Result&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;toMaybe&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb15-3"&gt;&lt;a href="#cb15-3"&gt;&lt;/a&gt;&lt;span class="op"&gt;|&lt;/span&gt;   &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;andThen&lt;/span&gt; (&lt;span class="dt"&gt;Chap7&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;eval&lt;/span&gt; [])&lt;/span&gt;
&lt;span id="cb15-4"&gt;&lt;a href="#cb15-4"&gt;&lt;/a&gt;&lt;span class="op"&gt;|&lt;/span&gt;   &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;map&lt;/span&gt; &lt;span class="dt"&gt;Chap7&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;display&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb15-5"&gt;&lt;a href="#cb15-5"&gt;&lt;/a&gt;&lt;span class="op"&gt;|&lt;/span&gt;   &lt;/span&gt;
&lt;span id="cb15-6"&gt;&lt;a href="#cb15-6"&gt;&lt;/a&gt;&lt;span class="dt"&gt;Just&lt;/span&gt; (&lt;span class="st"&gt;&amp;quot;\\x. x&amp;quot;&lt;/span&gt;) : &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;完璧だ．&lt;/p&gt;
&lt;h2 id="おまけ-spa-にする"&gt;おまけ: SPA にする&lt;/h2&gt;
&lt;p&gt;今回も同様に SPA にする． 章ごとにページ分けても良かったが，試しに一つにまとめてみた． つまり，4章の言語と7章の言語を同じように扱う． どちらも:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文字列をパースする(&lt;code&gt;parse&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;項を1ステップ評価する(&lt;code&gt;eval1&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;項を文字列に変換する(&lt;code&gt;display&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;をしたい． こういった場合，多くの言語ではインターフェースや型クラスのようなアドホック多相を利用する． しかし，Elm にはアドホック多相はない． そのため，パラメトリック多相で模倣する:&lt;/p&gt;
&lt;div class="sourceCode" id="cb16"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb16-1"&gt;&lt;a href="#cb16-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- 各章の言語の Context と Term 型を受け取る&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-2"&gt;&lt;a href="#cb16-2"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="kw"&gt;alias&lt;/span&gt; &lt;span class="dt"&gt;Calculus&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-3"&gt;&lt;a href="#cb16-3"&gt;&lt;/a&gt;    { &lt;span class="fu"&gt;parse&lt;/span&gt; : &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Result&lt;/span&gt; (&lt;span class="dt"&gt;List&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;DeadEnd&lt;/span&gt;) &lt;span class="fu"&gt;t&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-4"&gt;&lt;a href="#cb16-4"&gt;&lt;/a&gt;    &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;eval1&lt;/span&gt; : &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-5"&gt;&lt;a href="#cb16-5"&gt;&lt;/a&gt;    &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;display&lt;/span&gt; : &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-6"&gt;&lt;a href="#cb16-6"&gt;&lt;/a&gt;    &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;init&lt;/span&gt; : &lt;span class="fu"&gt;ctx&lt;/span&gt;     &lt;span class="co"&gt;-- Context の初期値&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-7"&gt;&lt;a href="#cb16-7"&gt;&lt;/a&gt;    &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;logs&lt;/span&gt; : &lt;span class="dt"&gt;List&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt;  &lt;span class="co"&gt;-- Term の履歴(表示用)&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-8"&gt;&lt;a href="#cb16-8"&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id="cb16-9"&gt;&lt;a href="#cb16-9"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb16-10"&gt;&lt;a href="#cb16-10"&gt;&lt;/a&gt;&lt;span class="fu"&gt;parse&lt;/span&gt; : &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Calculus&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="fu"&gt;ty&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Result&lt;/span&gt; (&lt;span class="dt"&gt;List&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;DeadEnd&lt;/span&gt;) (&lt;span class="dt"&gt;Calculus&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="fu"&gt;ty&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb16-11"&gt;&lt;a href="#cb16-11"&gt;&lt;/a&gt;&lt;span class="fu"&gt;eval1&lt;/span&gt; : &lt;span class="dt"&gt;Calculus&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="fu"&gt;ty&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; (&lt;span class="dt"&gt;Calculus&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="fu"&gt;ty&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb16-12"&gt;&lt;a href="#cb16-12"&gt;&lt;/a&gt;&lt;span class="fu"&gt;display&lt;/span&gt; : &lt;span class="dt"&gt;Calculus&lt;/span&gt; &lt;span class="fu"&gt;ctx&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="fu"&gt;ty&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Calculus&lt;/code&gt; には章ごとに型が異なるものを全部突っ込む必要がある． そのため &lt;code&gt;logs&lt;/code&gt; のようなフィールドもある(前回 &lt;code&gt;Model&lt;/code&gt; 型の &lt;code&gt;exps&lt;/code&gt; にあったやつ)． この型の値を各章ごとに定義しよう:&lt;/p&gt;
&lt;div class="sourceCode" id="cb17"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb17-1"&gt;&lt;a href="#cb17-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Chapter&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb17-2"&gt;&lt;a href="#cb17-2"&gt;&lt;/a&gt;    &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Chap0&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb17-3"&gt;&lt;a href="#cb17-3"&gt;&lt;/a&gt;    &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Chap4&lt;/span&gt; (&lt;span class="dt"&gt;Calculus&lt;/span&gt; () &lt;span class="dt"&gt;Chap4&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Term&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb17-4"&gt;&lt;a href="#cb17-4"&gt;&lt;/a&gt;    &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Chap7&lt;/span&gt; (&lt;span class="dt"&gt;Calculus&lt;/span&gt; &lt;span class="dt"&gt;Chap7&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Context&lt;/span&gt; &lt;span class="dt"&gt;Chap7&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Term&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb17-5"&gt;&lt;a href="#cb17-5"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb17-6"&gt;&lt;a href="#cb17-6"&gt;&lt;/a&gt;&lt;span class="fu"&gt;init&lt;/span&gt; : &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Chapter&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb17-7"&gt;&lt;a href="#cb17-7"&gt;&lt;/a&gt;&lt;span class="fu"&gt;init&lt;/span&gt; &lt;span class="fu"&gt;s&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb17-8"&gt;&lt;a href="#cb17-8"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;case&lt;/span&gt; &lt;span class="fu"&gt;s&lt;/span&gt; &lt;span class="cf"&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb17-9"&gt;&lt;a href="#cb17-9"&gt;&lt;/a&gt;        &lt;span class="st"&gt;&amp;quot;chap4&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb17-10"&gt;&lt;a href="#cb17-10"&gt;&lt;/a&gt;            &lt;span class="dt"&gt;Chap4&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb17-11"&gt;&lt;a href="#cb17-11"&gt;&lt;/a&gt;                { &lt;span class="fu"&gt;parse&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Chap4&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;parse&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb17-12"&gt;&lt;a href="#cb17-12"&gt;&lt;/a&gt;                &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;eval1&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; \&lt;span class="fu"&gt;_&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Chap4&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;eval1&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb17-13"&gt;&lt;a href="#cb17-13"&gt;&lt;/a&gt;                &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;display&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Chap4&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;display&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb17-14"&gt;&lt;a href="#cb17-14"&gt;&lt;/a&gt;                &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;init&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; ()&lt;/span&gt;
&lt;span id="cb17-15"&gt;&lt;a href="#cb17-15"&gt;&lt;/a&gt;                &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;logs&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; []&lt;/span&gt;
&lt;span id="cb17-16"&gt;&lt;a href="#cb17-16"&gt;&lt;/a&gt;                }&lt;/span&gt;
&lt;span id="cb17-17"&gt;&lt;a href="#cb17-17"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb17-18"&gt;&lt;a href="#cb17-18"&gt;&lt;/a&gt;        &lt;span class="st"&gt;&amp;quot;chap7&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb17-19"&gt;&lt;a href="#cb17-19"&gt;&lt;/a&gt;            &lt;span class="dt"&gt;Chap7&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb17-20"&gt;&lt;a href="#cb17-20"&gt;&lt;/a&gt;                { &lt;span class="fu"&gt;parse&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Chap7&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;parse&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb17-21"&gt;&lt;a href="#cb17-21"&gt;&lt;/a&gt;                &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;eval1&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Chap7&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;eval1&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb17-22"&gt;&lt;a href="#cb17-22"&gt;&lt;/a&gt;                &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;display&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Chap7&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;display&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb17-23"&gt;&lt;a href="#cb17-23"&gt;&lt;/a&gt;                &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;init&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; []&lt;/span&gt;
&lt;span id="cb17-24"&gt;&lt;a href="#cb17-24"&gt;&lt;/a&gt;                &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;logs&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; []&lt;/span&gt;
&lt;span id="cb17-25"&gt;&lt;a href="#cb17-25"&gt;&lt;/a&gt;                }&lt;/span&gt;
&lt;span id="cb17-26"&gt;&lt;a href="#cb17-26"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb17-27"&gt;&lt;a href="#cb17-27"&gt;&lt;/a&gt;&lt;span class="fu"&gt;parse&lt;/span&gt; : &lt;span class="dt"&gt;Chapter&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Result&lt;/span&gt; (&lt;span class="dt"&gt;List&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;DeadEnd&lt;/span&gt;) &lt;span class="dt"&gt;Chapter&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb17-28"&gt;&lt;a href="#cb17-28"&gt;&lt;/a&gt;&lt;span class="fu"&gt;eval1&lt;/span&gt; : &lt;span class="dt"&gt;Chapter&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;Chapter&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb17-29"&gt;&lt;a href="#cb17-29"&gt;&lt;/a&gt;&lt;span class="fu"&gt;display&lt;/span&gt; : &lt;span class="dt"&gt;Chapter&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あとは &lt;code&gt;Chapter&lt;/code&gt; 型を &lt;code&gt;main&lt;/code&gt; の &lt;code&gt;Model&lt;/code&gt; に持たせて，それぞれの関数を &lt;code&gt;Chapter&lt;/code&gt; のものへと置き換えるだけ． これが良い方法かどうか，正直なんとも言えないが面白いモノができたの個人的には満足．&lt;/p&gt;
&lt;h2 id="おしまい"&gt;おしまい&lt;/h2&gt;
&lt;p&gt;ところで，型なしラムダ計算は停止しない場合がある(例えば &lt;code&gt;(\x . x x) (\x . x x)&lt;/code&gt; とか)． このような式を SPA に突っ込むと無限に eval ボタンを押せてしまう． そこで，同期からは「eval ボタンが下にずれていくから無限プチプチみたいなのができない」と言われた笑． 検討した結果，ボタン固定にすると式の結果を追うのに上下スクロールを何回もしないとなので却下した(ごめんね)．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/12/06/postgresql-pure_%E3%82%92%E9%96%8B%E7%99%BA%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F</id><title type="text">postgresql-pure を開発しました</title><updated>2019-12-06T00:03:21+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/12/06/postgresql-pure_%E3%82%92%E9%96%8B%E7%99%BA%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F"/><summary type="html">この記事は Haskell Advent Calendar 2019 の6日目の記事です。 hackage.haskell.org postgresql-pure は Haskell の PostgreSQL ドライバー（クライアントライブラリー）で次のような目標で開発しました。 マルチコア環境でのパフォーマンス向上 暗黙のロックを回避する マルチプラットフォーム対応 C ライブラリーの libpq への依存をなくして特に Windows でのビルドを容易にする 既存ライブラリーとしては postgres-wire が高速だがそれは Windows をサポートしていない pure Haskel…</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-12-06-tapl-with-elm-part1.html</id><title type="text">Elm で作る TaPL のラムダ計算（その１）</title><updated>2019-12-06T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-12-06-tapl-with-elm-part1.html"/><summary type="html">&lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;本記事は「&lt;a href="https://qiita.com/advent-calendar/2019/elm"&gt;Elm Advent Calendar 2019&lt;/a&gt;」の6日目の記事です．&lt;/p&gt;
&lt;h1 id="section"&gt;&lt;/h1&gt;
&lt;p&gt;表題の通り，TaPL という書籍で紹介されているプログラミング言語の実装例を Elm でやってみたという話です（その１）．&lt;/p&gt;
&lt;h2 id="tapl-とプログラミング言語の実装"&gt;TaPL とプログラミング言語の実装&lt;/h2&gt;
&lt;p&gt;「&lt;a href="https://www.cis.upenn.edu/~bcpierce/tapl/"&gt;Type and Programming Language&lt;/a&gt;」(翻訳本は「型システム入門 -プログラミング言語と型の理論-」というもの，以下 TaPL)という書籍を知ってますか？ この書籍はプログラミング言語の型システムの理論体系に関するとても有名な書籍だ（学術的なその分野における入門書）． TaPL の多くは数理論理学的な議論や証明で構成されているのだが，いくつかの章では簡易的なプログラミング言語の実装がある:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第4章 算術式のML実装 (本記事はココ)
&lt;ul&gt;
&lt;li&gt;自然数と真偽値と if-then-else&lt;/li&gt;
&lt;li&gt;変数などもない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;第7章 ラムダ計算のML実装
&lt;ul&gt;
&lt;li&gt;型無しラムダ計算を実装&lt;/li&gt;
&lt;li&gt;以降はこれを拡張していく(たしか)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;第10章 単純型のML実装
&lt;ul&gt;
&lt;li&gt;7章のを型付きラムダ計算にする&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;第17章 部分型付けのML実装&lt;/li&gt;
&lt;li&gt;第25章 System F のML実装
&lt;ul&gt;
&lt;li&gt;最後に型の多相性を追加&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本記事では4章の実装を行う．&lt;/p&gt;
&lt;h3 id="何で実装するか"&gt;何で実装するか&lt;/h3&gt;
&lt;p&gt;TaPL では実装にあたり，以下のようなプログラミング言語で行うことをオススメしている:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自動メモリ管理 (GC)&lt;/li&gt;
&lt;li&gt;代数的データ型 (を容易に記述できる)&lt;/li&gt;
&lt;li&gt;パターンマッチ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ML系や Haskell，Scala であれば上記の条件にマッチするだろう． タイトルの通り私は Elm でやってみることにした(きっと事例が少ない)．&lt;/p&gt;
&lt;p&gt;なお実装は全て下記のリポジトリにあげている:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matsubara0507/ELaMbda"&gt;matsubara0507/ELaMbda - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Elm は Web フロントに特化した DSL だ． ということで，最終的にはパーサーも実装し，&lt;a href="https://matsubara0507.github.io/ELaMbda/?chap=chap4"&gt;Web ブラウザから遊べるようにした&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;&lt;a href="https://matsubara0507.github.io/ELaMbda/?chap=chap4&amp;amp;exp=if%20if%20true%20then%20false%20else%20true%20then%200%20else%20if%20false%20then%202%20else%203"&gt;&lt;img src="/assets/tapl-with-elm/chap4.jpg"&gt;&lt;/img&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="第4章-算術式のml実装"&gt;第4章 算術式のML実装&lt;/h2&gt;
&lt;p&gt;4章で実装する言語の数理論理学的な議論は3章でやり，4章ではそれを ML で実装している． 以降の章では結構実装が省かれてたりするのだが，4章のは全部書いてあるので ML をお手元の言語に翻訳していくだけど簡単な作業です．&lt;/p&gt;
&lt;h3 id="構文規則"&gt;構文規則&lt;/h3&gt;
&lt;p&gt;プログラミング言語の基本的な構成要素は「構文」と「評価」だ(たぶん)． まずは構文から:&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode txt"&gt;&lt;code class="sourceCode default"&gt;&lt;span id="cb1-1"&gt;&lt;a href="#cb1-1"&gt;&lt;/a&gt;// 値&lt;/span&gt;
&lt;span id="cb1-2"&gt;&lt;a href="#cb1-2"&gt;&lt;/a&gt;v := true&lt;/span&gt;
&lt;span id="cb1-3"&gt;&lt;a href="#cb1-3"&gt;&lt;/a&gt;   | false&lt;/span&gt;
&lt;span id="cb1-4"&gt;&lt;a href="#cb1-4"&gt;&lt;/a&gt;   | nv&lt;/span&gt;
&lt;span id="cb1-5"&gt;&lt;a href="#cb1-5"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb1-6"&gt;&lt;a href="#cb1-6"&gt;&lt;/a&gt;// 自然数&lt;/span&gt;
&lt;span id="cb1-7"&gt;&lt;a href="#cb1-7"&gt;&lt;/a&gt;nv := 0 | succ nv&lt;/span&gt;
&lt;span id="cb1-8"&gt;&lt;a href="#cb1-8"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb1-9"&gt;&lt;a href="#cb1-9"&gt;&lt;/a&gt;// 項&lt;/span&gt;
&lt;span id="cb1-10"&gt;&lt;a href="#cb1-10"&gt;&lt;/a&gt;t := v&lt;/span&gt;
&lt;span id="cb1-11"&gt;&lt;a href="#cb1-11"&gt;&lt;/a&gt;   | if t then t else t&lt;/span&gt;
&lt;span id="cb1-12"&gt;&lt;a href="#cb1-12"&gt;&lt;/a&gt;   | succ t&lt;/span&gt;
&lt;span id="cb1-13"&gt;&lt;a href="#cb1-13"&gt;&lt;/a&gt;   | pred t&lt;/span&gt;
&lt;span id="cb1-14"&gt;&lt;a href="#cb1-14"&gt;&lt;/a&gt;   | iszero t&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;自然数と真偽値だけの極めてシンプルなものだ． 項は型で表現し，値や自然数かどうかの判定はそう言う関数を用意する:&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb2-1"&gt;&lt;a href="#cb2-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- 構文&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-2"&gt;&lt;a href="#cb2-2"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-3"&gt;&lt;a href="#cb2-3"&gt;&lt;/a&gt;    &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;TmTrue&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-4"&gt;&lt;a href="#cb2-4"&gt;&lt;/a&gt;    &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;TmFalse&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-5"&gt;&lt;a href="#cb2-5"&gt;&lt;/a&gt;    &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;TmIf&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-6"&gt;&lt;a href="#cb2-6"&gt;&lt;/a&gt;    &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;TmZero&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-7"&gt;&lt;a href="#cb2-7"&gt;&lt;/a&gt;    &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;TmSucc&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-8"&gt;&lt;a href="#cb2-8"&gt;&lt;/a&gt;    &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;TmPred&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-9"&gt;&lt;a href="#cb2-9"&gt;&lt;/a&gt;    &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;TmIsZero&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-10"&gt;&lt;a href="#cb2-10"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-11"&gt;&lt;a href="#cb2-11"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- 値かどうか&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-12"&gt;&lt;a href="#cb2-12"&gt;&lt;/a&gt;&lt;span class="fu"&gt;isval&lt;/span&gt; : &lt;span class="dt"&gt;Term&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Bool&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-13"&gt;&lt;a href="#cb2-13"&gt;&lt;/a&gt;&lt;span class="fu"&gt;isval&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-14"&gt;&lt;a href="#cb2-14"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;case&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="cf"&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-15"&gt;&lt;a href="#cb2-15"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;TmTrue&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-16"&gt;&lt;a href="#cb2-16"&gt;&lt;/a&gt;            &lt;span class="dt"&gt;True&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-17"&gt;&lt;a href="#cb2-17"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-18"&gt;&lt;a href="#cb2-18"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;TmFalse&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-19"&gt;&lt;a href="#cb2-19"&gt;&lt;/a&gt;            &lt;span class="dt"&gt;True&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-20"&gt;&lt;a href="#cb2-20"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-21"&gt;&lt;a href="#cb2-21"&gt;&lt;/a&gt;        &lt;span class="fu"&gt;_&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-22"&gt;&lt;a href="#cb2-22"&gt;&lt;/a&gt;            &lt;span class="fu"&gt;isnumericval&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-23"&gt;&lt;a href="#cb2-23"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-24"&gt;&lt;a href="#cb2-24"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- 数値かどうか&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-25"&gt;&lt;a href="#cb2-25"&gt;&lt;/a&gt;&lt;span class="fu"&gt;isnumericval&lt;/span&gt; : &lt;span class="dt"&gt;Term&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Bool&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-26"&gt;&lt;a href="#cb2-26"&gt;&lt;/a&gt;&lt;span class="fu"&gt;isnumericval&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-27"&gt;&lt;a href="#cb2-27"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;case&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="cf"&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-28"&gt;&lt;a href="#cb2-28"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;TmZero&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-29"&gt;&lt;a href="#cb2-29"&gt;&lt;/a&gt;            &lt;span class="dt"&gt;True&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-30"&gt;&lt;a href="#cb2-30"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-31"&gt;&lt;a href="#cb2-31"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;TmSucc&lt;/span&gt; &lt;span class="fu"&gt;t1&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-32"&gt;&lt;a href="#cb2-32"&gt;&lt;/a&gt;            &lt;span class="fu"&gt;isnumericval&lt;/span&gt; &lt;span class="fu"&gt;t1&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-33"&gt;&lt;a href="#cb2-33"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-34"&gt;&lt;a href="#cb2-34"&gt;&lt;/a&gt;        &lt;span class="fu"&gt;_&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-35"&gt;&lt;a href="#cb2-35"&gt;&lt;/a&gt;            &lt;span class="dt"&gt;False&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;TaPL では項に &lt;code&gt;Info&lt;/code&gt; と言う型を持たせて，もともと何行何列目だったかのような情報を持たせているが，今回はそこまでリッチにする予定はないし煩わしいので省いた．&lt;/p&gt;
&lt;h3 id="評価規則"&gt;評価規則&lt;/h3&gt;
&lt;p&gt;構文が定義できたので，次は評価規則を定義し実装する． 評価規則とは，プログラムコード(項)の実行の仕方そのもので，今回は次のように定義する:&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode txt"&gt;&lt;code class="sourceCode default"&gt;&lt;span id="cb3-1"&gt;&lt;a href="#cb3-1"&gt;&lt;/a&gt;// if-then-else の評価規則(3つ)&lt;/span&gt;
&lt;span id="cb3-2"&gt;&lt;a href="#cb3-2"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-3"&gt;&lt;a href="#cb3-3"&gt;&lt;/a&gt; if true then t2 else t3 =&amp;gt; t2&lt;/span&gt;
&lt;span id="cb3-4"&gt;&lt;a href="#cb3-4"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-5"&gt;&lt;a href="#cb3-5"&gt;&lt;/a&gt; if false then t2 else t3 =&amp;gt; t3&lt;/span&gt;
&lt;span id="cb3-6"&gt;&lt;a href="#cb3-6"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-7"&gt;&lt;a href="#cb3-7"&gt;&lt;/a&gt; t1 -&amp;gt; t1&amp;#39;&lt;/span&gt;
&lt;span id="cb3-8"&gt;&lt;a href="#cb3-8"&gt;&lt;/a&gt;-------------------------------------------------&lt;/span&gt;
&lt;span id="cb3-9"&gt;&lt;a href="#cb3-9"&gt;&lt;/a&gt; if t1 then t2 else t3 =&amp;gt; if t1&amp;#39; then t2 else t3&lt;/span&gt;
&lt;span id="cb3-10"&gt;&lt;a href="#cb3-10"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-11"&gt;&lt;a href="#cb3-11"&gt;&lt;/a&gt;// 自然数の評価規則&lt;/span&gt;
&lt;span id="cb3-12"&gt;&lt;a href="#cb3-12"&gt;&lt;/a&gt; t1 -&amp;gt; t1&amp;#39;&lt;/span&gt;
&lt;span id="cb3-13"&gt;&lt;a href="#cb3-13"&gt;&lt;/a&gt;---------------------&lt;/span&gt;
&lt;span id="cb3-14"&gt;&lt;a href="#cb3-14"&gt;&lt;/a&gt; succ t1 =&amp;gt; succ t1&amp;#39;&lt;/span&gt;
&lt;span id="cb3-15"&gt;&lt;a href="#cb3-15"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-16"&gt;&lt;a href="#cb3-16"&gt;&lt;/a&gt; pred 0 =&amp;gt; 0&lt;/span&gt;
&lt;span id="cb3-17"&gt;&lt;a href="#cb3-17"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-18"&gt;&lt;a href="#cb3-18"&gt;&lt;/a&gt; pred (succ nv1) =&amp;gt; nv1&lt;/span&gt;
&lt;span id="cb3-19"&gt;&lt;a href="#cb3-19"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-20"&gt;&lt;a href="#cb3-20"&gt;&lt;/a&gt; t1 -&amp;gt; t1&amp;#39;&lt;/span&gt;
&lt;span id="cb3-21"&gt;&lt;a href="#cb3-21"&gt;&lt;/a&gt;---------------------&lt;/span&gt;
&lt;span id="cb3-22"&gt;&lt;a href="#cb3-22"&gt;&lt;/a&gt; pred t1 =&amp;gt; pred t1&amp;#39;&lt;/span&gt;
&lt;span id="cb3-23"&gt;&lt;a href="#cb3-23"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-24"&gt;&lt;a href="#cb3-24"&gt;&lt;/a&gt; iszero 0 =&amp;gt; true&lt;/span&gt;
&lt;span id="cb3-25"&gt;&lt;a href="#cb3-25"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-26"&gt;&lt;a href="#cb3-26"&gt;&lt;/a&gt; iszero (succ nv1) =&amp;gt; false&lt;/span&gt;
&lt;span id="cb3-27"&gt;&lt;a href="#cb3-27"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-28"&gt;&lt;a href="#cb3-28"&gt;&lt;/a&gt; t1 -&amp;gt; t1&amp;#39;&lt;/span&gt;
&lt;span id="cb3-29"&gt;&lt;a href="#cb3-29"&gt;&lt;/a&gt;-------------------------&lt;/span&gt;
&lt;span id="cb3-30"&gt;&lt;a href="#cb3-30"&gt;&lt;/a&gt; iszero t1 =&amp;gt; iszero t1&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;分数のような記述は上が成り立つならば下も成り立つと言うニュアンス(雑)． 次の &lt;code&gt;eval1&lt;/code&gt; というのが評価規則を実装したものだ:&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb4-1"&gt;&lt;a href="#cb4-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- 値になるまで評価する (これは TaPL にはない)&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-2"&gt;&lt;a href="#cb4-2"&gt;&lt;/a&gt;&lt;span class="fu"&gt;eval&lt;/span&gt; : &lt;span class="dt"&gt;Term&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-3"&gt;&lt;a href="#cb4-3"&gt;&lt;/a&gt;&lt;span class="fu"&gt;eval&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-4"&gt;&lt;a href="#cb4-4"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;if&lt;/span&gt; &lt;span class="fu"&gt;isval&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="cf"&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-5"&gt;&lt;a href="#cb4-5"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;Just&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-6"&gt;&lt;a href="#cb4-6"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-7"&gt;&lt;a href="#cb4-7"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;andThen&lt;/span&gt; &lt;span class="fu"&gt;eval&lt;/span&gt; (&lt;span class="fu"&gt;eval1&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb4-8"&gt;&lt;a href="#cb4-8"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-9"&gt;&lt;a href="#cb4-9"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- 評価規則を関数にする&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-10"&gt;&lt;a href="#cb4-10"&gt;&lt;/a&gt;&lt;span class="fu"&gt;eval1&lt;/span&gt; : &lt;span class="dt"&gt;Term&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-11"&gt;&lt;a href="#cb4-11"&gt;&lt;/a&gt;&lt;span class="fu"&gt;eval1&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-12"&gt;&lt;a href="#cb4-12"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;case&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="cf"&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-13"&gt;&lt;a href="#cb4-13"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;TmIf&lt;/span&gt; &lt;span class="dt"&gt;TmTrue&lt;/span&gt; &lt;span class="fu"&gt;t2&lt;/span&gt; &lt;span class="fu"&gt;_&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-14"&gt;&lt;a href="#cb4-14"&gt;&lt;/a&gt;            &lt;span class="dt"&gt;Just&lt;/span&gt; &lt;span class="fu"&gt;t2&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-15"&gt;&lt;a href="#cb4-15"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-16"&gt;&lt;a href="#cb4-16"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;TmIf&lt;/span&gt; &lt;span class="dt"&gt;TmFalse&lt;/span&gt; &lt;span class="fu"&gt;_&lt;/span&gt; &lt;span class="fu"&gt;t3&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-17"&gt;&lt;a href="#cb4-17"&gt;&lt;/a&gt;            &lt;span class="dt"&gt;Just&lt;/span&gt; &lt;span class="fu"&gt;t3&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-18"&gt;&lt;a href="#cb4-18"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-19"&gt;&lt;a href="#cb4-19"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;TmIf&lt;/span&gt; &lt;span class="fu"&gt;t1&lt;/span&gt; &lt;span class="fu"&gt;t2&lt;/span&gt; &lt;span class="fu"&gt;t3&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-20"&gt;&lt;a href="#cb4-20"&gt;&lt;/a&gt;            &lt;span class="fu"&gt;eval1&lt;/span&gt; &lt;span class="fu"&gt;t1&lt;/span&gt; &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;map&lt;/span&gt; (\&lt;span class="fu"&gt;t1_&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;TmIf&lt;/span&gt; &lt;span class="fu"&gt;t1_&lt;/span&gt; &lt;span class="fu"&gt;t2&lt;/span&gt; &lt;span class="fu"&gt;t3&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb4-21"&gt;&lt;a href="#cb4-21"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-22"&gt;&lt;a href="#cb4-22"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;TmSucc&lt;/span&gt; &lt;span class="fu"&gt;t1&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-23"&gt;&lt;a href="#cb4-23"&gt;&lt;/a&gt;            &lt;span class="fu"&gt;eval1&lt;/span&gt; &lt;span class="fu"&gt;t1&lt;/span&gt; &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;map&lt;/span&gt; &lt;span class="dt"&gt;TmSucc&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-24"&gt;&lt;a href="#cb4-24"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-25"&gt;&lt;a href="#cb4-25"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;TmPred&lt;/span&gt; &lt;span class="dt"&gt;TmZero&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-26"&gt;&lt;a href="#cb4-26"&gt;&lt;/a&gt;            &lt;span class="dt"&gt;Just&lt;/span&gt; &lt;span class="dt"&gt;TmZero&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-27"&gt;&lt;a href="#cb4-27"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-28"&gt;&lt;a href="#cb4-28"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;TmPred&lt;/span&gt; (&lt;span class="dt"&gt;TmSucc&lt;/span&gt; &lt;span class="fu"&gt;nv1&lt;/span&gt;) &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-29"&gt;&lt;a href="#cb4-29"&gt;&lt;/a&gt;            &lt;span class="cf"&gt;if&lt;/span&gt; &lt;span class="fu"&gt;isnumericval&lt;/span&gt; &lt;span class="fu"&gt;nv1&lt;/span&gt; &lt;span class="cf"&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-30"&gt;&lt;a href="#cb4-30"&gt;&lt;/a&gt;                &lt;span class="dt"&gt;Just&lt;/span&gt; &lt;span class="fu"&gt;nv1&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-31"&gt;&lt;a href="#cb4-31"&gt;&lt;/a&gt;            &lt;span class="cf"&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-32"&gt;&lt;a href="#cb4-32"&gt;&lt;/a&gt;                &lt;span class="fu"&gt;eval1&lt;/span&gt; (&lt;span class="dt"&gt;TmSucc&lt;/span&gt; &lt;span class="fu"&gt;nv1&lt;/span&gt;) &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;map&lt;/span&gt; &lt;span class="dt"&gt;TmPred&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-33"&gt;&lt;a href="#cb4-33"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-34"&gt;&lt;a href="#cb4-34"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;TmPred&lt;/span&gt; &lt;span class="fu"&gt;t1&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-35"&gt;&lt;a href="#cb4-35"&gt;&lt;/a&gt;            &lt;span class="fu"&gt;eval1&lt;/span&gt; &lt;span class="fu"&gt;t1&lt;/span&gt; &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;map&lt;/span&gt; &lt;span class="dt"&gt;TmPred&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-36"&gt;&lt;a href="#cb4-36"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-37"&gt;&lt;a href="#cb4-37"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;TmIsZero&lt;/span&gt; &lt;span class="dt"&gt;TmZero&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-38"&gt;&lt;a href="#cb4-38"&gt;&lt;/a&gt;            &lt;span class="dt"&gt;Just&lt;/span&gt; &lt;span class="dt"&gt;TmTrue&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-39"&gt;&lt;a href="#cb4-39"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-40"&gt;&lt;a href="#cb4-40"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;TmIsZero&lt;/span&gt; (&lt;span class="dt"&gt;TmSucc&lt;/span&gt; &lt;span class="fu"&gt;nv1&lt;/span&gt;) &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-41"&gt;&lt;a href="#cb4-41"&gt;&lt;/a&gt;            &lt;span class="cf"&gt;if&lt;/span&gt; &lt;span class="fu"&gt;isnumericval&lt;/span&gt; &lt;span class="fu"&gt;nv1&lt;/span&gt; &lt;span class="cf"&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-42"&gt;&lt;a href="#cb4-42"&gt;&lt;/a&gt;                &lt;span class="dt"&gt;Just&lt;/span&gt; &lt;span class="dt"&gt;TmFalse&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-43"&gt;&lt;a href="#cb4-43"&gt;&lt;/a&gt;            &lt;span class="cf"&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-44"&gt;&lt;a href="#cb4-44"&gt;&lt;/a&gt;                &lt;span class="fu"&gt;eval1&lt;/span&gt; (&lt;span class="dt"&gt;TmSucc&lt;/span&gt; &lt;span class="fu"&gt;nv1&lt;/span&gt;) &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;map&lt;/span&gt; &lt;span class="dt"&gt;TmIsZero&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-45"&gt;&lt;a href="#cb4-45"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-46"&gt;&lt;a href="#cb4-46"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;TmIsZero&lt;/span&gt; &lt;span class="fu"&gt;t1&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-47"&gt;&lt;a href="#cb4-47"&gt;&lt;/a&gt;            &lt;span class="fu"&gt;eval1&lt;/span&gt; &lt;span class="fu"&gt;t1&lt;/span&gt; &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;map&lt;/span&gt; &lt;span class="dt"&gt;TmIsZero&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-48"&gt;&lt;a href="#cb4-48"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-49"&gt;&lt;a href="#cb4-49"&gt;&lt;/a&gt;        &lt;span class="fu"&gt;_&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-50"&gt;&lt;a href="#cb4-50"&gt;&lt;/a&gt;            &lt;span class="dt"&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;TaPL と違い，僕は返り値にいわゆる Optional 型を利用している(TaPL では例外を投げてる)． あと，TaPL で利用している ML やパターンマッチのある多くの言語ではパターンマッチの中に条件式を記述できるが Elm にはない:&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb5-1"&gt;&lt;a href="#cb5-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- こういうのが書きたい&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-2"&gt;&lt;a href="#cb5-2"&gt;&lt;/a&gt;&lt;span class="fu"&gt;eval1&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-3"&gt;&lt;a href="#cb5-3"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;case&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="cf"&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-4"&gt;&lt;a href="#cb5-4"&gt;&lt;/a&gt;        &lt;span class="op"&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-5"&gt;&lt;a href="#cb5-5"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb5-6"&gt;&lt;a href="#cb5-6"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;TmPred&lt;/span&gt; (&lt;span class="dt"&gt;TmSucc&lt;/span&gt; &lt;span class="fu"&gt;nv1&lt;/span&gt;) &lt;span class="cf"&gt;if&lt;/span&gt; &lt;span class="fu"&gt;isnumericval&lt;/span&gt; &lt;span class="fu"&gt;nv1&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-7"&gt;&lt;a href="#cb5-7"&gt;&lt;/a&gt;            &lt;span class="dt"&gt;Just&lt;/span&gt; &lt;span class="fu"&gt;nv1&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-8"&gt;&lt;a href="#cb5-8"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb5-9"&gt;&lt;a href="#cb5-9"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;TmPred&lt;/span&gt; &lt;span class="fu"&gt;t1&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-10"&gt;&lt;a href="#cb5-10"&gt;&lt;/a&gt;            &lt;span class="fu"&gt;eval1&lt;/span&gt; &lt;span class="fu"&gt;t1&lt;/span&gt; &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;map&lt;/span&gt; &lt;span class="dt"&gt;TmPred&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-11"&gt;&lt;a href="#cb5-11"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb5-12"&gt;&lt;a href="#cb5-12"&gt;&lt;/a&gt;        &lt;span class="op"&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これが出来ないため分岐が多くなって冗長になってしまう．辛い． そのうち実装されると良いなぁ．&lt;/p&gt;
&lt;h1 id="section-1"&gt;&lt;/h1&gt;
&lt;p&gt;実はこれで完成． Elm には REPL があるので試しに動かしてみる:&lt;/p&gt;
&lt;div class="sourceCode" id="cb6"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb6-1"&gt;&lt;a href="#cb6-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;$&lt;/span&gt; &lt;span class="fu"&gt;elm&lt;/span&gt; &lt;span class="fu"&gt;repl&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-2"&gt;&lt;a href="#cb6-2"&gt;&lt;/a&gt;&lt;span class="co"&gt;---- Elm 0.19.1 ----------------------------------------------------------------&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-3"&gt;&lt;a href="#cb6-3"&gt;&lt;/a&gt;&lt;span class="dt"&gt;Say&lt;/span&gt; :&lt;span class="fu"&gt;help&lt;/span&gt; &lt;span class="fu"&gt;for&lt;/span&gt; &lt;span class="fu"&gt;help&lt;/span&gt; &lt;span class="fu"&gt;and&lt;/span&gt; :&lt;span class="fu"&gt;exit&lt;/span&gt; &lt;span class="fu"&gt;to&lt;/span&gt; &lt;span class="fu"&gt;exit&lt;/span&gt;&lt;span class="op"&gt;!&lt;/span&gt; &lt;span class="dt"&gt;More&lt;/span&gt; &lt;span class="fu"&gt;at&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&lt;/span&gt;&lt;span class="fu"&gt;https&lt;/span&gt;:&lt;span class="op"&gt;//&lt;/span&gt;&lt;span class="fu"&gt;elm&lt;/span&gt;&lt;span class="op"&gt;-&lt;/span&gt;&lt;span class="fu"&gt;lang&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;org&lt;/span&gt;&lt;span class="op"&gt;/&lt;/span&gt;&lt;span class="dv"&gt;0&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dv"&gt;19&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;&lt;span class="op"&gt;/&lt;/span&gt;&lt;span class="fu"&gt;repl&lt;/span&gt;&lt;span class="op"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-4"&gt;&lt;a href="#cb6-4"&gt;&lt;/a&gt;&lt;span class="co"&gt;--------------------------------------------------------------------------------&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-5"&gt;&lt;a href="#cb6-5"&gt;&lt;/a&gt;&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;TaPL&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Chap4&lt;/span&gt; &lt;span class="kw"&gt;as&lt;/span&gt; &lt;span class="dt"&gt;Chap4&lt;/span&gt; &lt;span class="kw"&gt;exposing&lt;/span&gt; (&lt;span class="dt"&gt;Term&lt;/span&gt; (&lt;span class="op"&gt;..&lt;/span&gt;))&lt;/span&gt;
&lt;span id="cb6-6"&gt;&lt;a href="#cb6-6"&gt;&lt;/a&gt;&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Chap4&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;eval&lt;/span&gt; (&lt;span class="dt"&gt;TmIf&lt;/span&gt; (&lt;span class="dt"&gt;TmIsZero&lt;/span&gt; (&lt;span class="dt"&gt;TmPred&lt;/span&gt; (&lt;span class="dt"&gt;TmSucc&lt;/span&gt; &lt;span class="dt"&gt;TmZero&lt;/span&gt;))) &lt;span class="dt"&gt;TmZero&lt;/span&gt; (&lt;span class="dt"&gt;TmSucc&lt;/span&gt; &lt;span class="dt"&gt;TmZero&lt;/span&gt;))&lt;/span&gt;
&lt;span id="cb6-7"&gt;&lt;a href="#cb6-7"&gt;&lt;/a&gt;&lt;span class="dt"&gt;Just&lt;/span&gt; &lt;span class="dt"&gt;TmZero&lt;/span&gt; : &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;良さそう．&lt;/p&gt;
&lt;h3 id="パーサーを実装する"&gt;パーサーを実装する&lt;/h3&gt;
&lt;p&gt;ここからは TaPL にはない話． 毎回 &lt;code&gt;Term&lt;/code&gt; を手書きするのは大変なのでパーサーを実装しちゃおう．&lt;/p&gt;
&lt;p&gt;Elm には &lt;a href="https://package.elm-lang.org/packages/elm/parser"&gt;elm/parser&lt;/a&gt; という(なぜか)公式が提供しているパーサーコンビネーターライブラリがある． もちろんこれを使う． パーサーコンビネーターの極意はトップダウンに考えること(ほんまか？)． まずは頭のインターフェースから:&lt;/p&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb7-1"&gt;&lt;a href="#cb7-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;module&lt;/span&gt; &lt;span class="dt"&gt;TaPL&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Chap4&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="kw"&gt;exposing&lt;/span&gt; (&lt;span class="op"&gt;..&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb7-2"&gt;&lt;a href="#cb7-2"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb7-3"&gt;&lt;a href="#cb7-3"&gt;&lt;/a&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="kw"&gt;exposing&lt;/span&gt; ((&lt;span class="op"&gt;|.&lt;/span&gt;)&lt;span class="op"&gt;,&lt;/span&gt; (&lt;span class="op"&gt;|=&lt;/span&gt;)&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb7-4"&gt;&lt;a href="#cb7-4"&gt;&lt;/a&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;TaPL&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Chap4&lt;/span&gt; &lt;span class="kw"&gt;as&lt;/span&gt; &lt;span class="dt"&gt;Chap4&lt;/span&gt; &lt;span class="kw"&gt;exposing&lt;/span&gt; (&lt;span class="dt"&gt;Term&lt;/span&gt;(&lt;span class="op"&gt;..&lt;/span&gt;))&lt;/span&gt;
&lt;span id="cb7-5"&gt;&lt;a href="#cb7-5"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb7-6"&gt;&lt;a href="#cb7-6"&gt;&lt;/a&gt;&lt;span class="fu"&gt;parse&lt;/span&gt; : &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Result&lt;/span&gt; (&lt;span class="dt"&gt;List&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;DeadEnd&lt;/span&gt;) &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-7"&gt;&lt;a href="#cb7-7"&gt;&lt;/a&gt;&lt;span class="fu"&gt;parse&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-8"&gt;&lt;a href="#cb7-8"&gt;&lt;/a&gt;    &lt;span class="fu"&gt;termParser&lt;/span&gt; &lt;span class="op"&gt;|.&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-9"&gt;&lt;a href="#cb7-9"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb7-10"&gt;&lt;a href="#cb7-10"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb7-11"&gt;&lt;a href="#cb7-11"&gt;&lt;/a&gt;&lt;span class="fu"&gt;termParser&lt;/span&gt; : &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-12"&gt;&lt;a href="#cb7-12"&gt;&lt;/a&gt;&lt;span class="fu"&gt;termParser&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="op"&gt;...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Parser Term&lt;/code&gt; という型は「パースした結果が &lt;code&gt;Term&lt;/code&gt; 型になる」と言う意味(型なんてこう言うふわっとした理解で十分)． &lt;code&gt;parser&lt;/code&gt; の &lt;code&gt;|. Parser.end&lt;/code&gt; というのは，パースしきった文字列が空文字に達したという関数(達してないとエラーになる)．&lt;/p&gt;
&lt;p&gt;で，&lt;code&gt;termParser&lt;/code&gt; が項自体のパーサー． elm/parser には &lt;code&gt;oneOf&lt;/code&gt; という便利パーサーコンビネーターがあるのでこれを使う:&lt;/p&gt;
&lt;div class="sourceCode" id="cb8"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb8-1"&gt;&lt;a href="#cb8-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- 与えたパーサーのリストで最初に成功したものをパース結果にする&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-2"&gt;&lt;a href="#cb8-2"&gt;&lt;/a&gt;&lt;span class="fu"&gt;oneOf&lt;/span&gt; : &lt;span class="dt"&gt;List&lt;/span&gt; (&lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="fu"&gt;a&lt;/span&gt;) &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="fu"&gt;a&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここで重要なのは一つ一つ実装することができる点だ． まずは簡単な値から:&lt;/p&gt;
&lt;div class="sourceCode" id="cb9"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb9-1"&gt;&lt;a href="#cb9-1"&gt;&lt;/a&gt;&lt;span class="fu"&gt;termParser&lt;/span&gt; : &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-2"&gt;&lt;a href="#cb9-2"&gt;&lt;/a&gt;&lt;span class="fu"&gt;termParser&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-3"&gt;&lt;a href="#cb9-3"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;oneOf&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-4"&gt;&lt;a href="#cb9-4"&gt;&lt;/a&gt;      [ &lt;span class="fu"&gt;valParser&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-5"&gt;&lt;a href="#cb9-5"&gt;&lt;/a&gt;      ]&lt;/span&gt;
&lt;span id="cb9-6"&gt;&lt;a href="#cb9-6"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb9-7"&gt;&lt;a href="#cb9-7"&gt;&lt;/a&gt;&lt;span class="fu"&gt;valParser&lt;/span&gt; : &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-8"&gt;&lt;a href="#cb9-8"&gt;&lt;/a&gt;&lt;span class="fu"&gt;valParser&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-9"&gt;&lt;a href="#cb9-9"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;oneOf&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-10"&gt;&lt;a href="#cb9-10"&gt;&lt;/a&gt;        [ &lt;span class="fu"&gt;value&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class="dt"&gt;TmTrue&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-11"&gt;&lt;a href="#cb9-11"&gt;&lt;/a&gt;        &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;value&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class="dt"&gt;TmFalse&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-12"&gt;&lt;a href="#cb9-12"&gt;&lt;/a&gt;        &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;int&lt;/span&gt; &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;map&lt;/span&gt; &lt;span class="fu"&gt;fromInt&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-13"&gt;&lt;a href="#cb9-13"&gt;&lt;/a&gt;        ]&lt;/span&gt;
&lt;span id="cb9-14"&gt;&lt;a href="#cb9-14"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb9-15"&gt;&lt;a href="#cb9-15"&gt;&lt;/a&gt;&lt;span class="fu"&gt;value&lt;/span&gt; : &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-16"&gt;&lt;a href="#cb9-16"&gt;&lt;/a&gt;&lt;span class="fu"&gt;value&lt;/span&gt; &lt;span class="fu"&gt;kw&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-17"&gt;&lt;a href="#cb9-17"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;map&lt;/span&gt; (&lt;span class="fu"&gt;always&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt;) (&lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;keyword&lt;/span&gt; &lt;span class="fu"&gt;kw&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb9-18"&gt;&lt;a href="#cb9-18"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb9-19"&gt;&lt;a href="#cb9-19"&gt;&lt;/a&gt;&lt;span class="fu"&gt;fromInt&lt;/span&gt; : &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-20"&gt;&lt;a href="#cb9-20"&gt;&lt;/a&gt;&lt;span class="fu"&gt;fromInt&lt;/span&gt; &lt;span class="fu"&gt;n&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-21"&gt;&lt;a href="#cb9-21"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;if&lt;/span&gt; &lt;span class="fu"&gt;n&lt;/span&gt; &lt;span class="op"&gt;&amp;gt;&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt; &lt;span class="cf"&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-22"&gt;&lt;a href="#cb9-22"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;TmSucc&lt;/span&gt; (&lt;span class="fu"&gt;fromInt&lt;/span&gt; (&lt;span class="fu"&gt;n&lt;/span&gt; &lt;span class="op"&gt;-&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;))&lt;/span&gt;
&lt;span id="cb9-23"&gt;&lt;a href="#cb9-23"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-24"&gt;&lt;a href="#cb9-24"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;TmZero&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;REPL で確認:&lt;/p&gt;
&lt;div class="sourceCode" id="cb10"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb10-1"&gt;&lt;a href="#cb10-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;TaPL&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Chap4&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="kw"&gt;as&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-2"&gt;&lt;a href="#cb10-2"&gt;&lt;/a&gt;&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;parse&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-3"&gt;&lt;a href="#cb10-3"&gt;&lt;/a&gt;&lt;span class="dt"&gt;Ok&lt;/span&gt; &lt;span class="dt"&gt;TmTrue&lt;/span&gt; : &lt;span class="dt"&gt;Result&lt;/span&gt; (&lt;span class="dt"&gt;List&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;DeadEnd&lt;/span&gt;) &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-4"&gt;&lt;a href="#cb10-4"&gt;&lt;/a&gt;&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;parse&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;false&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-5"&gt;&lt;a href="#cb10-5"&gt;&lt;/a&gt;&lt;span class="dt"&gt;Ok&lt;/span&gt; &lt;span class="dt"&gt;TmFalse&lt;/span&gt; : &lt;span class="dt"&gt;Result&lt;/span&gt; (&lt;span class="dt"&gt;List&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;DeadEnd&lt;/span&gt;) &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-6"&gt;&lt;a href="#cb10-6"&gt;&lt;/a&gt;&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;parse&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;10&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-7"&gt;&lt;a href="#cb10-7"&gt;&lt;/a&gt;&lt;span class="dt"&gt;Ok&lt;/span&gt; (&lt;span class="dt"&gt;TmSucc&lt;/span&gt; (&lt;span class="dt"&gt;TmSucc&lt;/span&gt; (&lt;span class="dt"&gt;TmSucc&lt;/span&gt; (&lt;span class="dt"&gt;TmSucc&lt;/span&gt; (&lt;span class="dt"&gt;TmSucc&lt;/span&gt; (&lt;span class="dt"&gt;TmSucc&lt;/span&gt; (&lt;span class="dt"&gt;TmSucc&lt;/span&gt; (&lt;span class="dt"&gt;TmSucc&lt;/span&gt; (&lt;span class="dt"&gt;TmSucc&lt;/span&gt; (&lt;span class="dt"&gt;TmSucc&lt;/span&gt; &lt;span class="dt"&gt;TmZero&lt;/span&gt;))))))))))&lt;/span&gt;
&lt;span id="cb10-8"&gt;&lt;a href="#cb10-8"&gt;&lt;/a&gt;    : &lt;span class="dt"&gt;Result&lt;/span&gt; (&lt;span class="dt"&gt;List&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;DeadEnd&lt;/span&gt;) &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;良さそう． 次は if-then-else を書いてみる:&lt;/p&gt;
&lt;div class="sourceCode" id="cb11"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb11-1"&gt;&lt;a href="#cb11-1"&gt;&lt;/a&gt;&lt;span class="fu"&gt;termParser&lt;/span&gt; : &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-2"&gt;&lt;a href="#cb11-2"&gt;&lt;/a&gt;&lt;span class="fu"&gt;termParser&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-3"&gt;&lt;a href="#cb11-3"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;oneOf&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-4"&gt;&lt;a href="#cb11-4"&gt;&lt;/a&gt;      [ &lt;span class="fu"&gt;valParser&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-5"&gt;&lt;a href="#cb11-5"&gt;&lt;/a&gt;      &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;ifParser&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-6"&gt;&lt;a href="#cb11-6"&gt;&lt;/a&gt;      ]&lt;/span&gt;
&lt;span id="cb11-7"&gt;&lt;a href="#cb11-7"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb11-8"&gt;&lt;a href="#cb11-8"&gt;&lt;/a&gt;&lt;span class="fu"&gt;ifParser&lt;/span&gt; : &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-9"&gt;&lt;a href="#cb11-9"&gt;&lt;/a&gt;&lt;span class="fu"&gt;ifParser&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-10"&gt;&lt;a href="#cb11-10"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;succeed&lt;/span&gt; &lt;span class="dt"&gt;TmIf&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-11"&gt;&lt;a href="#cb11-11"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|.&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;keyword&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;if&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-12"&gt;&lt;a href="#cb11-12"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|.&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;spaces&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-13"&gt;&lt;a href="#cb11-13"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|=&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;lazy&lt;/span&gt; (\&lt;span class="fu"&gt;_&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;termParser&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb11-14"&gt;&lt;a href="#cb11-14"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|.&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;spaces&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-15"&gt;&lt;a href="#cb11-15"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|.&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;keyword&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;then&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-16"&gt;&lt;a href="#cb11-16"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|.&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;spaces&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-17"&gt;&lt;a href="#cb11-17"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|=&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;lazy&lt;/span&gt; (\&lt;span class="fu"&gt;_&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;termParser&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb11-18"&gt;&lt;a href="#cb11-18"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|.&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;spaces&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-19"&gt;&lt;a href="#cb11-19"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|.&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;keyword&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;else&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-20"&gt;&lt;a href="#cb11-20"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|.&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;spaces&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-21"&gt;&lt;a href="#cb11-21"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|=&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;lazy&lt;/span&gt; (\&lt;span class="fu"&gt;_&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;termParser&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Elm は普通に正格評価なので &lt;code&gt;Parser.lazy&lt;/code&gt; などで遅延させてあげないと先に &lt;code&gt;termParser&lt;/code&gt; を実行してしまう． REPL で確認:&lt;/p&gt;
&lt;div class="sourceCode" id="cb12"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb12-1"&gt;&lt;a href="#cb12-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;parse&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;if true then 1 else 0&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-2"&gt;&lt;a href="#cb12-2"&gt;&lt;/a&gt;&lt;span class="dt"&gt;Ok&lt;/span&gt; (&lt;span class="dt"&gt;TmIf&lt;/span&gt; &lt;span class="dt"&gt;TmTrue&lt;/span&gt; (&lt;span class="dt"&gt;TmSucc&lt;/span&gt; &lt;span class="dt"&gt;TmZero&lt;/span&gt;) &lt;span class="dt"&gt;TmZero&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb12-3"&gt;&lt;a href="#cb12-3"&gt;&lt;/a&gt;    : &lt;span class="dt"&gt;Result&lt;/span&gt; (&lt;span class="dt"&gt;List&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;DeadEnd&lt;/span&gt;) &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-4"&gt;&lt;a href="#cb12-4"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- どう見ても評価できないけどパースはできる&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-5"&gt;&lt;a href="#cb12-5"&gt;&lt;/a&gt;&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;parse&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;if 1 then true else false&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-6"&gt;&lt;a href="#cb12-6"&gt;&lt;/a&gt;&lt;span class="dt"&gt;Ok&lt;/span&gt; (&lt;span class="dt"&gt;TmIf&lt;/span&gt; (&lt;span class="dt"&gt;TmSucc&lt;/span&gt; &lt;span class="dt"&gt;TmZero&lt;/span&gt;) &lt;span class="dt"&gt;TmTrue&lt;/span&gt; &lt;span class="dt"&gt;TmFalse&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb12-7"&gt;&lt;a href="#cb12-7"&gt;&lt;/a&gt;    : &lt;span class="dt"&gt;Result&lt;/span&gt; (&lt;span class="dt"&gt;List&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;DeadEnd&lt;/span&gt;) &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-8"&gt;&lt;a href="#cb12-8"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- 入れ子もOK&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-9"&gt;&lt;a href="#cb12-9"&gt;&lt;/a&gt;&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;parse&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;if if true then 0 else 1 then true else if false then 2 else 3&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-10"&gt;&lt;a href="#cb12-10"&gt;&lt;/a&gt;&lt;span class="dt"&gt;Ok&lt;/span&gt; (&lt;span class="dt"&gt;TmIf&lt;/span&gt; (&lt;span class="dt"&gt;TmIf&lt;/span&gt; &lt;span class="dt"&gt;TmTrue&lt;/span&gt; &lt;span class="dt"&gt;TmZero&lt;/span&gt; (&lt;span class="dt"&gt;TmSucc&lt;/span&gt; &lt;span class="dt"&gt;TmZero&lt;/span&gt;)) &lt;span class="dt"&gt;TmTrue&lt;/span&gt; (&lt;span class="dt"&gt;TmIf&lt;/span&gt; &lt;span class="dt"&gt;TmFalse&lt;/span&gt; (&lt;span class="dt"&gt;TmSucc&lt;/span&gt; (&lt;span class="dt"&gt;TmSucc&lt;/span&gt; &lt;span class="dt"&gt;TmZero&lt;/span&gt;)) (&lt;span class="dt"&gt;TmSucc&lt;/span&gt; (&lt;span class="dt"&gt;TmSucc&lt;/span&gt; (&lt;span class="dt"&gt;TmSucc&lt;/span&gt; &lt;span class="dt"&gt;TmZero&lt;/span&gt;)))))&lt;/span&gt;
&lt;span id="cb12-11"&gt;&lt;a href="#cb12-11"&gt;&lt;/a&gt;    : &lt;span class="dt"&gt;Result&lt;/span&gt; (&lt;span class="dt"&gt;List&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;DeadEnd&lt;/span&gt;) &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;はい． あとは同じようーに書くだけなので割愛:&lt;/p&gt;
&lt;div class="sourceCode" id="cb13"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb13-1"&gt;&lt;a href="#cb13-1"&gt;&lt;/a&gt;&lt;span class="fu"&gt;termParser&lt;/span&gt; : &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-2"&gt;&lt;a href="#cb13-2"&gt;&lt;/a&gt;&lt;span class="fu"&gt;termParser&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-3"&gt;&lt;a href="#cb13-3"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;oneOf&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-4"&gt;&lt;a href="#cb13-4"&gt;&lt;/a&gt;        [ &lt;span class="fu"&gt;valParser&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-5"&gt;&lt;a href="#cb13-5"&gt;&lt;/a&gt;        &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;ifParser&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-6"&gt;&lt;a href="#cb13-6"&gt;&lt;/a&gt;        &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;succParser&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-7"&gt;&lt;a href="#cb13-7"&gt;&lt;/a&gt;        &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;predParser&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-8"&gt;&lt;a href="#cb13-8"&gt;&lt;/a&gt;        &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;isZeroParser&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-9"&gt;&lt;a href="#cb13-9"&gt;&lt;/a&gt;        &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;parParser&lt;/span&gt;    &lt;span class="co"&gt;-- カッコ&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb13-10"&gt;&lt;a href="#cb13-10"&gt;&lt;/a&gt;        ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ついでに &lt;code&gt;Term&lt;/code&gt; から文字列に変換する関数も書いておこう:&lt;/p&gt;
&lt;div class="sourceCode" id="cb14"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb14-1"&gt;&lt;a href="#cb14-1"&gt;&lt;/a&gt;&lt;span class="fu"&gt;display&lt;/span&gt; : &lt;span class="dt"&gt;Term&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-2"&gt;&lt;a href="#cb14-2"&gt;&lt;/a&gt;&lt;span class="fu"&gt;display&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-3"&gt;&lt;a href="#cb14-3"&gt;&lt;/a&gt;    &lt;span class="fu"&gt;displayR&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-4"&gt;&lt;a href="#cb14-4"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;dropIfStartsWith&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;(&amp;quot;&lt;/span&gt; &lt;span class="co"&gt;-- かっこ悪いので最後のカッコを消す&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-5"&gt;&lt;a href="#cb14-5"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;dropIfEndsWith&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;)&amp;quot;&lt;/span&gt;   &lt;span class="co"&gt;-- カッコだけに&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-6"&gt;&lt;a href="#cb14-6"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb14-7"&gt;&lt;a href="#cb14-7"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb14-8"&gt;&lt;a href="#cb14-8"&gt;&lt;/a&gt;&lt;span class="fu"&gt;displayR&lt;/span&gt; : &lt;span class="dt"&gt;Term&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-9"&gt;&lt;a href="#cb14-9"&gt;&lt;/a&gt;&lt;span class="fu"&gt;displayR&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-10"&gt;&lt;a href="#cb14-10"&gt;&lt;/a&gt;    &lt;span class="co"&gt;-- 分岐するのが面倒なので toInt も同時に&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-11"&gt;&lt;a href="#cb14-11"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;case&lt;/span&gt; ( &lt;span class="fu"&gt;toInt&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; ) &lt;span class="cf"&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-12"&gt;&lt;a href="#cb14-12"&gt;&lt;/a&gt;        ( &lt;span class="dt"&gt;Just&lt;/span&gt; &lt;span class="fu"&gt;n&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;_&lt;/span&gt; ) &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-13"&gt;&lt;a href="#cb14-13"&gt;&lt;/a&gt;            &lt;span class="dt"&gt;String&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;fromInt&lt;/span&gt; &lt;span class="fu"&gt;n&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-14"&gt;&lt;a href="#cb14-14"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb14-15"&gt;&lt;a href="#cb14-15"&gt;&lt;/a&gt;        ( &lt;span class="fu"&gt;_&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;TmTrue&lt;/span&gt; ) &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-16"&gt;&lt;a href="#cb14-16"&gt;&lt;/a&gt;            &lt;span class="st"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-17"&gt;&lt;a href="#cb14-17"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb14-18"&gt;&lt;a href="#cb14-18"&gt;&lt;/a&gt;        ( &lt;span class="fu"&gt;_&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;TmFalse&lt;/span&gt; ) &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-19"&gt;&lt;a href="#cb14-19"&gt;&lt;/a&gt;            &lt;span class="st"&gt;&amp;quot;false&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-20"&gt;&lt;a href="#cb14-20"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb14-21"&gt;&lt;a href="#cb14-21"&gt;&lt;/a&gt;        ( &lt;span class="fu"&gt;_&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;TmIf&lt;/span&gt; &lt;span class="fu"&gt;t1&lt;/span&gt; &lt;span class="fu"&gt;t2&lt;/span&gt; &lt;span class="fu"&gt;t3&lt;/span&gt; ) &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-22"&gt;&lt;a href="#cb14-22"&gt;&lt;/a&gt;            &lt;span class="dt"&gt;String&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;concat&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-23"&gt;&lt;a href="#cb14-23"&gt;&lt;/a&gt;                [ &lt;span class="st"&gt;&amp;quot;(if &amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-24"&gt;&lt;a href="#cb14-24"&gt;&lt;/a&gt;                &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;displayR&lt;/span&gt; &lt;span class="fu"&gt;t1&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-25"&gt;&lt;a href="#cb14-25"&gt;&lt;/a&gt;                &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="st"&gt;&amp;quot; then &amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-26"&gt;&lt;a href="#cb14-26"&gt;&lt;/a&gt;                &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;displayR&lt;/span&gt; &lt;span class="fu"&gt;t2&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-27"&gt;&lt;a href="#cb14-27"&gt;&lt;/a&gt;                &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="st"&gt;&amp;quot; else &amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-28"&gt;&lt;a href="#cb14-28"&gt;&lt;/a&gt;                &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;displayR&lt;/span&gt; &lt;span class="fu"&gt;t3&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-29"&gt;&lt;a href="#cb14-29"&gt;&lt;/a&gt;                &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;)&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-30"&gt;&lt;a href="#cb14-30"&gt;&lt;/a&gt;                ]&lt;/span&gt;
&lt;span id="cb14-31"&gt;&lt;a href="#cb14-31"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb14-32"&gt;&lt;a href="#cb14-32"&gt;&lt;/a&gt;        &lt;span class="co"&gt;-- あとは割愛&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-33"&gt;&lt;a href="#cb14-33"&gt;&lt;/a&gt;        &lt;span class="op"&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-34"&gt;&lt;a href="#cb14-34"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb14-35"&gt;&lt;a href="#cb14-35"&gt;&lt;/a&gt;&lt;span class="fu"&gt;toInt&lt;/span&gt; : &lt;span class="dt"&gt;Term&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-36"&gt;&lt;a href="#cb14-36"&gt;&lt;/a&gt;&lt;span class="fu"&gt;toInt&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-37"&gt;&lt;a href="#cb14-37"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;case&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="cf"&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-38"&gt;&lt;a href="#cb14-38"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;TmZero&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-39"&gt;&lt;a href="#cb14-39"&gt;&lt;/a&gt;            &lt;span class="dt"&gt;Just&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-40"&gt;&lt;a href="#cb14-40"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb14-41"&gt;&lt;a href="#cb14-41"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;TmSucc&lt;/span&gt; &lt;span class="fu"&gt;t1&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-42"&gt;&lt;a href="#cb14-42"&gt;&lt;/a&gt;            &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;map&lt;/span&gt; (\&lt;span class="fu"&gt;n&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt; &lt;span class="op"&gt;+&lt;/span&gt; &lt;span class="fu"&gt;n&lt;/span&gt;) (&lt;span class="fu"&gt;toInt&lt;/span&gt; &lt;span class="fu"&gt;t1&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb14-43"&gt;&lt;a href="#cb14-43"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb14-44"&gt;&lt;a href="#cb14-44"&gt;&lt;/a&gt;        &lt;span class="fu"&gt;_&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb14-45"&gt;&lt;a href="#cb14-45"&gt;&lt;/a&gt;            &lt;span class="dt"&gt;Nothing&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;REPL で確認:&lt;/p&gt;
&lt;div class="sourceCode" id="cb15"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb15-1"&gt;&lt;a href="#cb15-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;x&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb15-2"&gt;&lt;a href="#cb15-2"&gt;&lt;/a&gt;&lt;span class="op"&gt;|&lt;/span&gt;   &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;parse&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;if if true then false else true then 0 else if false then 2 else 3&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb15-3"&gt;&lt;a href="#cb15-3"&gt;&lt;/a&gt;&lt;span class="op"&gt;|&lt;/span&gt;   &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Result&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;toMaybe&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb15-4"&gt;&lt;a href="#cb15-4"&gt;&lt;/a&gt;&lt;span class="op"&gt;|&lt;/span&gt;   &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;andThen&lt;/span&gt; &lt;span class="dt"&gt;Chap4&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;eval&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb15-5"&gt;&lt;a href="#cb15-5"&gt;&lt;/a&gt;&lt;span class="op"&gt;|&lt;/span&gt;   &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;map&lt;/span&gt; &lt;span class="dt"&gt;Chap4&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;display&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb15-6"&gt;&lt;a href="#cb15-6"&gt;&lt;/a&gt;&lt;span class="op"&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb15-7"&gt;&lt;a href="#cb15-7"&gt;&lt;/a&gt;&lt;span class="dt"&gt;Just&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;3&amp;quot;&lt;/span&gt; : &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;完璧！&lt;/p&gt;
&lt;h2 id="おまけ-spa-にする"&gt;おまけ: SPA にする&lt;/h2&gt;
&lt;p&gt;せっかく Elm 使ってるので:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文字列を入力してもらって&lt;/li&gt;
&lt;li&gt;「パースボタン」を押したらパースして&lt;/li&gt;
&lt;li&gt;さらに「評価ボタン」を押したら１ステップだけ評価する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;という簡単なものを作る． まぁこれぐらいならググれば出てくるサンプルコードを組み合わせるだけでできますね:&lt;/p&gt;
&lt;div class="sourceCode" id="cb16"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb16-1"&gt;&lt;a href="#cb16-1"&gt;&lt;/a&gt;&lt;span class="fu"&gt;main&lt;/span&gt; : &lt;span class="dt"&gt;Program&lt;/span&gt; () &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-2"&gt;&lt;a href="#cb16-2"&gt;&lt;/a&gt;&lt;span class="fu"&gt;main&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-3"&gt;&lt;a href="#cb16-3"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Browser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;element&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-4"&gt;&lt;a href="#cb16-4"&gt;&lt;/a&gt;        { &lt;span class="fu"&gt;init&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; ( &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt; [] &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;Cmd&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;none&lt;/span&gt; )&lt;/span&gt;
&lt;span id="cb16-5"&gt;&lt;a href="#cb16-5"&gt;&lt;/a&gt;        &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;view&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;view&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-6"&gt;&lt;a href="#cb16-6"&gt;&lt;/a&gt;        &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;update&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;update&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-7"&gt;&lt;a href="#cb16-7"&gt;&lt;/a&gt;        &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;subscriptions&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; \&lt;span class="fu"&gt;_&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Sub&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;none&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-8"&gt;&lt;a href="#cb16-8"&gt;&lt;/a&gt;        }&lt;/span&gt;
&lt;span id="cb16-9"&gt;&lt;a href="#cb16-9"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb16-10"&gt;&lt;a href="#cb16-10"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="kw"&gt;alias&lt;/span&gt; &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-11"&gt;&lt;a href="#cb16-11"&gt;&lt;/a&gt;    { &lt;span class="fu"&gt;input&lt;/span&gt; : &lt;span class="dt"&gt;String&lt;/span&gt;           &lt;span class="co"&gt;-- 入力文字列を保存&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-12"&gt;&lt;a href="#cb16-12"&gt;&lt;/a&gt;    &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;exps&lt;/span&gt; : &lt;span class="dt"&gt;List&lt;/span&gt; &lt;span class="dt"&gt;Lambda&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Term&lt;/span&gt;  &lt;span class="co"&gt;-- 1ステップごとの評価結果を全部&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-13"&gt;&lt;a href="#cb16-13"&gt;&lt;/a&gt;    &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;error&lt;/span&gt; : &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-14"&gt;&lt;a href="#cb16-14"&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id="cb16-15"&gt;&lt;a href="#cb16-15"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb16-16"&gt;&lt;a href="#cb16-16"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-17"&gt;&lt;a href="#cb16-17"&gt;&lt;/a&gt;    &lt;span class="co"&gt;-- 文字列の入力&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-18"&gt;&lt;a href="#cb16-18"&gt;&lt;/a&gt;    &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;InputText&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-19"&gt;&lt;a href="#cb16-19"&gt;&lt;/a&gt;    &lt;span class="co"&gt;-- パースボタン&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-20"&gt;&lt;a href="#cb16-20"&gt;&lt;/a&gt;    &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;ParseInput&lt;/span&gt; (&lt;span class="dt"&gt;Result&lt;/span&gt; (&lt;span class="dt"&gt;List&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;DeadEnd&lt;/span&gt;) &lt;span class="dt"&gt;Term&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb16-21"&gt;&lt;a href="#cb16-21"&gt;&lt;/a&gt;    &lt;span class="co"&gt;-- 評価ボタン&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-22"&gt;&lt;a href="#cb16-22"&gt;&lt;/a&gt;    &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;EvalTerm&lt;/span&gt; (&lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;Term&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb16-23"&gt;&lt;a href="#cb16-23"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb16-24"&gt;&lt;a href="#cb16-24"&gt;&lt;/a&gt;&lt;span class="fu"&gt;update&lt;/span&gt; : &lt;span class="dt"&gt;Msg&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; ( &lt;span class="dt"&gt;Model&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;Cmd&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt; )&lt;/span&gt;
&lt;span id="cb16-25"&gt;&lt;a href="#cb16-25"&gt;&lt;/a&gt;&lt;span class="fu"&gt;update&lt;/span&gt; &lt;span class="fu"&gt;msg&lt;/span&gt; &lt;span class="fu"&gt;model&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-26"&gt;&lt;a href="#cb16-26"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;case&lt;/span&gt; &lt;span class="fu"&gt;msg&lt;/span&gt; &lt;span class="cf"&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-27"&gt;&lt;a href="#cb16-27"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;InputText&lt;/span&gt; &lt;span class="fu"&gt;txt&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-28"&gt;&lt;a href="#cb16-28"&gt;&lt;/a&gt;            ( { &lt;span class="fu"&gt;model&lt;/span&gt; &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="fu"&gt;input&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;txt&lt;/span&gt; }&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;Cmd&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;none&lt;/span&gt; )&lt;/span&gt;
&lt;span id="cb16-29"&gt;&lt;a href="#cb16-29"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb16-30"&gt;&lt;a href="#cb16-30"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;ParseInput&lt;/span&gt; (&lt;span class="dt"&gt;Ok&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt;) &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-31"&gt;&lt;a href="#cb16-31"&gt;&lt;/a&gt;            ( { &lt;span class="fu"&gt;model&lt;/span&gt; &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="fu"&gt;exps&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; [ &lt;span class="fu"&gt;t&lt;/span&gt; ]&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;error&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt; }&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;Cmd&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;none&lt;/span&gt; )&lt;/span&gt;
&lt;span id="cb16-32"&gt;&lt;a href="#cb16-32"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb16-33"&gt;&lt;a href="#cb16-33"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;ParseInput&lt;/span&gt; (&lt;span class="dt"&gt;Err&lt;/span&gt; &lt;span class="fu"&gt;_&lt;/span&gt;) &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-34"&gt;&lt;a href="#cb16-34"&gt;&lt;/a&gt;            ( { &lt;span class="fu"&gt;model&lt;/span&gt; &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="fu"&gt;exps&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; []&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;error&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;Can not parse&amp;quot;&lt;/span&gt; }&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;Cmd&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;none&lt;/span&gt; )&lt;/span&gt;
&lt;span id="cb16-35"&gt;&lt;a href="#cb16-35"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb16-36"&gt;&lt;a href="#cb16-36"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;EvalTerm&lt;/span&gt; (&lt;span class="dt"&gt;Just&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt;) &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-37"&gt;&lt;a href="#cb16-37"&gt;&lt;/a&gt;            ( { &lt;span class="fu"&gt;model&lt;/span&gt; &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="fu"&gt;exps&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="op"&gt;::&lt;/span&gt; &lt;span class="fu"&gt;model&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;exps&lt;/span&gt; }&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;Cmd&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;none&lt;/span&gt; )&lt;/span&gt;
&lt;span id="cb16-38"&gt;&lt;a href="#cb16-38"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb16-39"&gt;&lt;a href="#cb16-39"&gt;&lt;/a&gt;        &lt;span class="dt"&gt;EvalTerm&lt;/span&gt; &lt;span class="fu"&gt;_&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-40"&gt;&lt;a href="#cb16-40"&gt;&lt;/a&gt;            ( { &lt;span class="fu"&gt;model&lt;/span&gt; &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="fu"&gt;error&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;Can not eval&amp;quot;&lt;/span&gt; }&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;Cmd&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;none&lt;/span&gt; )&lt;/span&gt;
&lt;span id="cb16-41"&gt;&lt;a href="#cb16-41"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb16-42"&gt;&lt;a href="#cb16-42"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- いくつかの見た目の実装は割愛してます(class とか)&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-43"&gt;&lt;a href="#cb16-43"&gt;&lt;/a&gt;&lt;span class="fu"&gt;view&lt;/span&gt; : &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-44"&gt;&lt;a href="#cb16-44"&gt;&lt;/a&gt;&lt;span class="fu"&gt;view&lt;/span&gt; &lt;span class="fu"&gt;model&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-45"&gt;&lt;a href="#cb16-45"&gt;&lt;/a&gt;    &lt;span class="fu"&gt;div&lt;/span&gt; []&lt;/span&gt;
&lt;span id="cb16-46"&gt;&lt;a href="#cb16-46"&gt;&lt;/a&gt;        [ &lt;span class="fu"&gt;button&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-47"&gt;&lt;a href="#cb16-47"&gt;&lt;/a&gt;            &lt;span class="co"&gt;-- ここでボタンの前にパースしてるのはナンセンスな気もするけど...&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-48"&gt;&lt;a href="#cb16-48"&gt;&lt;/a&gt;            [ &lt;span class="fu"&gt;onClick&lt;/span&gt; (&lt;span class="dt"&gt;ParseInput&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;|&lt;/span&gt; &lt;span class="dt"&gt;Lambda&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;parse&lt;/span&gt; &lt;span class="fu"&gt;model&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;input&lt;/span&gt;)&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;type_&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;button&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id="cb16-49"&gt;&lt;a href="#cb16-49"&gt;&lt;/a&gt;            [ &lt;span class="fu"&gt;text&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;Parse!&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id="cb16-50"&gt;&lt;a href="#cb16-50"&gt;&lt;/a&gt;        &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;input&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-51"&gt;&lt;a href="#cb16-51"&gt;&lt;/a&gt;            [ &lt;span class="fu"&gt;onInput&lt;/span&gt; &lt;span class="dt"&gt;InputText&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;type_&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;text&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id="cb16-52"&gt;&lt;a href="#cb16-52"&gt;&lt;/a&gt;            []&lt;/span&gt;
&lt;span id="cb16-53"&gt;&lt;a href="#cb16-53"&gt;&lt;/a&gt;        &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;div&lt;/span&gt; [] (&lt;span class="fu"&gt;viewExps&lt;/span&gt; &lt;span class="fu"&gt;model&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb16-54"&gt;&lt;a href="#cb16-54"&gt;&lt;/a&gt;        &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="cf"&gt;if&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;isEmpty&lt;/span&gt; &lt;span class="fu"&gt;model&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;error&lt;/span&gt; &lt;span class="cf"&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-55"&gt;&lt;a href="#cb16-55"&gt;&lt;/a&gt;            &lt;span class="fu"&gt;div&lt;/span&gt; [] []&lt;/span&gt;
&lt;span id="cb16-56"&gt;&lt;a href="#cb16-56"&gt;&lt;/a&gt;          &lt;span class="cf"&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-57"&gt;&lt;a href="#cb16-57"&gt;&lt;/a&gt;            &lt;span class="fu"&gt;div&lt;/span&gt; [ &lt;span class="fu"&gt;class&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;flash flash-error&amp;quot;&lt;/span&gt; ] [ &lt;span class="fu"&gt;text&lt;/span&gt; &lt;span class="fu"&gt;model&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;error&lt;/span&gt; ]&lt;/span&gt;
&lt;span id="cb16-58"&gt;&lt;a href="#cb16-58"&gt;&lt;/a&gt;        ]&lt;/span&gt;
&lt;span id="cb16-59"&gt;&lt;a href="#cb16-59"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb16-60"&gt;&lt;a href="#cb16-60"&gt;&lt;/a&gt;&lt;span class="fu"&gt;viewExps&lt;/span&gt; : &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt; (&lt;span class="dt"&gt;Html&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb16-61"&gt;&lt;a href="#cb16-61"&gt;&lt;/a&gt;&lt;span class="fu"&gt;viewExps&lt;/span&gt; &lt;span class="fu"&gt;model&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-62"&gt;&lt;a href="#cb16-62"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;case&lt;/span&gt; &lt;span class="fu"&gt;model&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;exps&lt;/span&gt; &lt;span class="cf"&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-63"&gt;&lt;a href="#cb16-63"&gt;&lt;/a&gt;        [] &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-64"&gt;&lt;a href="#cb16-64"&gt;&lt;/a&gt;            []&lt;/span&gt;
&lt;span id="cb16-65"&gt;&lt;a href="#cb16-65"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb16-66"&gt;&lt;a href="#cb16-66"&gt;&lt;/a&gt;        &lt;span class="fu"&gt;x&lt;/span&gt; &lt;span class="op"&gt;::&lt;/span&gt; &lt;span class="fu"&gt;xs&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-67"&gt;&lt;a href="#cb16-67"&gt;&lt;/a&gt;            [ &lt;span class="dt"&gt;List&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;reverse&lt;/span&gt; &lt;span class="fu"&gt;model&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;exps&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-68"&gt;&lt;a href="#cb16-68"&gt;&lt;/a&gt;                &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;map&lt;/span&gt; &lt;span class="fu"&gt;viewExp&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-69"&gt;&lt;a href="#cb16-69"&gt;&lt;/a&gt;                &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;intersperse&lt;/span&gt; (&lt;span class="fu"&gt;div&lt;/span&gt; [ &lt;span class="fu"&gt;class&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;my-1&amp;quot;&lt;/span&gt; ] [ &lt;span class="fu"&gt;text&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;↓&amp;quot;&lt;/span&gt; ])&lt;/span&gt;
&lt;span id="cb16-70"&gt;&lt;a href="#cb16-70"&gt;&lt;/a&gt;                &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;div&lt;/span&gt; []&lt;/span&gt;
&lt;span id="cb16-71"&gt;&lt;a href="#cb16-71"&gt;&lt;/a&gt;            &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;button&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-72"&gt;&lt;a href="#cb16-72"&gt;&lt;/a&gt;                &lt;span class="co"&gt;-- ここもボタンの前に評価してるのは(ry&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-73"&gt;&lt;a href="#cb16-73"&gt;&lt;/a&gt;                [ &lt;span class="fu"&gt;onClick&lt;/span&gt; (&lt;span class="dt"&gt;EvalTerm&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;|&lt;/span&gt; &lt;span class="dt"&gt;Lambda&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;eval1&lt;/span&gt; &lt;span class="fu"&gt;x&lt;/span&gt;)&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;type_&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;button&amp;quot;&lt;/span&gt;　]&lt;/span&gt;
&lt;span id="cb16-74"&gt;&lt;a href="#cb16-74"&gt;&lt;/a&gt;                [ &lt;span class="fu"&gt;text&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;Eval!&amp;quot;&lt;/span&gt; ]&lt;/span&gt;
&lt;span id="cb16-75"&gt;&lt;a href="#cb16-75"&gt;&lt;/a&gt;            ]&lt;/span&gt;
&lt;span id="cb16-76"&gt;&lt;a href="#cb16-76"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb16-77"&gt;&lt;a href="#cb16-77"&gt;&lt;/a&gt;&lt;span class="fu"&gt;viewExp&lt;/span&gt; : &lt;span class="dt"&gt;Lambda&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Term&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-78"&gt;&lt;a href="#cb16-78"&gt;&lt;/a&gt;&lt;span class="fu"&gt;viewExp&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb16-79"&gt;&lt;a href="#cb16-79"&gt;&lt;/a&gt;    &lt;span class="fu"&gt;div&lt;/span&gt; [ &lt;span class="fu"&gt;class&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;my-1&amp;quot;&lt;/span&gt; ] [ &lt;span class="fu"&gt;text&lt;/span&gt; (&lt;span class="dt"&gt;Lambda&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;display&lt;/span&gt; &lt;span class="fu"&gt;t&lt;/span&gt;) ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;色々ととりあえずで作ったので雑だ（現在のは改良したあとなのでこのコードとは少し違う）．&lt;/p&gt;
&lt;h2 id="おしまい"&gt;おしまい&lt;/h2&gt;
&lt;p&gt;ちなみに，会社で同期と TaPL (雑な)読書会をしており，このシリーズはその成果です． すでに半年ぐらいやってるが未だに10章です笑&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/12/05/191010</id><title type="text">最強にして最速のビルダー、mason</title><updated>2019-12-05T19:33:25+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/12/05/191010"/><summary type="html">Haskell Advent Calendar 2019 5日目 この冬、神速のサンタクロースがやってくる—— Haskellにおいて、バイト列の表現はByteStringが定番である。ByteStringはPinned領域に直接格納され、空間効率はリストに比べればはるかに良い。しかし、Pinned領域にあるとヒープフラグメンテーションが起こりやすくなるということでもあり、細かい文字列をつなぎ合わせるような使い方はパフォーマンスに悪影響が及ぶ。そのような問題を避けるため、ビルダーと呼ばれる構造が用意されている。 Data.ByteString.Builderは、word8 42 &lt;&gt; byte…</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-12-02-haskell-with-gh-actions.html</id><title type="text">Haskell で GitHub Actions する</title><updated>2019-12-02T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-12-02-haskell-with-gh-actions.html"/><summary type="html">&lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;本記事は「&lt;a href="https://qiita.com/advent-calendar/2019/haskell"&gt;Haskell Advent Calendar 2019&lt;/a&gt;」の2日目の記事です．&lt;/p&gt;
&lt;h1 id="section"&gt;&lt;/h1&gt;
&lt;p&gt;2019/11/13 に GA された GitHub Actions を使って，Haskell プロジェクト，とりわけ Haskell Stack を使ったプロジェクトを CI/CD します．&lt;/p&gt;
&lt;p&gt;ちなみに，試すために導入した PR はこれです:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matsubara0507/octbook/pull/1"&gt;自動ビルドを追加 by matsubara0507 · Pull Request #1 · matsubara0507/octbook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これは適当な設定ファイルから GitHub の Organization や Organization の Team 機能にユーザーを招待したりキックしたりするための CLI ツールです．&lt;/p&gt;
&lt;h2 id="cabal-の場合"&gt;Cabal の場合&lt;/h2&gt;
&lt;p&gt;はわりかし簡単． Haskell のセットアップは公式がすでに用意してくれてるのでこれを使えば良い:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/actions/setup-haskell"&gt;actions/setup-haskell: Set up your GitHub Actions workflow with a specific version of Haskell (GHC and Cabal)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;こんな感じ:&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;span id="cb1-1"&gt;&lt;a href="#cb1-1"&gt;&lt;/a&gt;&lt;span class="fu"&gt;jobs&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-2"&gt;&lt;a href="#cb1-2"&gt;&lt;/a&gt;&lt;span class="at"&gt;  &lt;/span&gt;&lt;span class="fu"&gt;build&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-3"&gt;&lt;a href="#cb1-3"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;name&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; ghc ${{ matrix.ghc }}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-4"&gt;&lt;a href="#cb1-4"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;runs-on&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; ubuntu-16.04&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-5"&gt;&lt;a href="#cb1-5"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;strategy&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-6"&gt;&lt;a href="#cb1-6"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;matrix&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-7"&gt;&lt;a href="#cb1-7"&gt;&lt;/a&gt;&lt;span class="at"&gt;        &lt;/span&gt;&lt;span class="fu"&gt;ghc&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="kw"&gt;[&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;8.2.2&amp;quot;&lt;/span&gt;&lt;span class="kw"&gt;,&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="st"&gt;&amp;quot;8.4.4&amp;quot;&lt;/span&gt;&lt;span class="kw"&gt;,&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="st"&gt;&amp;quot;8.6.5&amp;quot;&lt;/span&gt;&lt;span class="kw"&gt;,&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="st"&gt;&amp;quot;8.8.1&amp;quot;&lt;/span&gt;&lt;span class="kw"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-8"&gt;&lt;a href="#cb1-8"&gt;&lt;/a&gt;&lt;span class="at"&gt;        &lt;/span&gt;&lt;span class="fu"&gt;cabal&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="kw"&gt;[&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;3.0&amp;quot;&lt;/span&gt;&lt;span class="kw"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-9"&gt;&lt;a href="#cb1-9"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb1-10"&gt;&lt;a href="#cb1-10"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;steps&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-11"&gt;&lt;a href="#cb1-11"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="fu"&gt;uses&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; actions/checkout@master&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-12"&gt;&lt;a href="#cb1-12"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;with&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-13"&gt;&lt;a href="#cb1-13"&gt;&lt;/a&gt;&lt;span class="at"&gt;        &lt;/span&gt;&lt;span class="fu"&gt;fetch-depth&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-14"&gt;&lt;a href="#cb1-14"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="fu"&gt;uses&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; actions/setup-haskell@v1&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-15"&gt;&lt;a href="#cb1-15"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;name&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; Setup Haskell&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-16"&gt;&lt;a href="#cb1-16"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;with&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-17"&gt;&lt;a href="#cb1-17"&gt;&lt;/a&gt;&lt;span class="at"&gt;        &lt;/span&gt;&lt;span class="fu"&gt;ghc-version&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; ${{ matrix.ghc }}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-18"&gt;&lt;a href="#cb1-18"&gt;&lt;/a&gt;&lt;span class="at"&gt;        &lt;/span&gt;&lt;span class="fu"&gt;cabal-version&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; ${{ matrix.cabal }}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Haskell パッケージ系のリポジトリなら，こんな感じに matrix の設定をすると良い． で，キャッシュする場合は，この matrix ごとに &lt;code&gt;~/.cabal/store&lt;/code&gt; だけをキャッシュすれば十分らしい（教えてもらった）:&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;span id="cb2-1"&gt;&lt;a href="#cb2-1"&gt;&lt;/a&gt;&lt;span class="at"&gt;   &lt;/span&gt;&lt;span class="fu"&gt;steps&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-2"&gt;&lt;a href="#cb2-2"&gt;&lt;/a&gt;&lt;span class="at"&gt;   ...&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-3"&gt;&lt;a href="#cb2-3"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="fu"&gt;name&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; Cache .cabal&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-4"&gt;&lt;a href="#cb2-4"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;uses&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; actions/cache@preview&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-5"&gt;&lt;a href="#cb2-5"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;with&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-6"&gt;&lt;a href="#cb2-6"&gt;&lt;/a&gt;&lt;span class="at"&gt;        &lt;/span&gt;&lt;span class="fu"&gt;path&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; ~/.cabal/store&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-7"&gt;&lt;a href="#cb2-7"&gt;&lt;/a&gt;&lt;span class="at"&gt;        &lt;/span&gt;&lt;span class="fu"&gt;key&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; ${{ matrix.ghc }}-cabal-${{ hashFiles(&amp;#39;**/fallible.cabal&amp;#39;) }}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-8"&gt;&lt;a href="#cb2-8"&gt;&lt;/a&gt;&lt;span class="fu"&gt;        restore-keys&lt;/span&gt;&lt;span class="kw"&gt;: &lt;/span&gt;&lt;span class="ch"&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-9"&gt;&lt;a href="#cb2-9"&gt;&lt;/a&gt;          ${{ matrix.ghc }}-cabal-&lt;/span&gt;
&lt;span id="cb2-10"&gt;&lt;a href="#cb2-10"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="fu"&gt;uses&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; actions/setup-haskell@v1&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-11"&gt;&lt;a href="#cb2-11"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;name&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; Setup Haskell&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-12"&gt;&lt;a href="#cb2-12"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;with&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-13"&gt;&lt;a href="#cb2-13"&gt;&lt;/a&gt;&lt;span class="at"&gt;        &lt;/span&gt;&lt;span class="fu"&gt;ghc-version&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; ${{ matrix.ghc }}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-14"&gt;&lt;a href="#cb2-14"&gt;&lt;/a&gt;&lt;span class="at"&gt;        &lt;/span&gt;&lt;span class="fu"&gt;cabal-version&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; ${{ matrix.cabal }}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-15"&gt;&lt;a href="#cb2-15"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="fu"&gt;name&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; Install dependencies&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-16"&gt;&lt;a href="#cb2-16"&gt;&lt;/a&gt;&lt;span class="fu"&gt;      run&lt;/span&gt;&lt;span class="kw"&gt;: &lt;/span&gt;&lt;span class="ch"&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-17"&gt;&lt;a href="#cb2-17"&gt;&lt;/a&gt;        cabal v2-update&lt;/span&gt;
&lt;span id="cb2-18"&gt;&lt;a href="#cb2-18"&gt;&lt;/a&gt;        cabal v2-build --only-dependencies&lt;/span&gt;
&lt;span id="cb2-19"&gt;&lt;a href="#cb2-19"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="fu"&gt;name&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; Build &amp;amp; test&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-20"&gt;&lt;a href="#cb2-20"&gt;&lt;/a&gt;&lt;span class="fu"&gt;      run&lt;/span&gt;&lt;span class="kw"&gt;: &lt;/span&gt;&lt;span class="ch"&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-21"&gt;&lt;a href="#cb2-21"&gt;&lt;/a&gt;        cabal v2-build&lt;/span&gt;
&lt;span id="cb2-22"&gt;&lt;a href="#cb2-22"&gt;&lt;/a&gt;        cabal v2-test&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Cabal の方はちゃんと調査してないのでこんでお終い（すいません）．&lt;/p&gt;
&lt;h2 id="stack-の場合"&gt;Stack の場合&lt;/h2&gt;
&lt;p&gt;こっからが本題．&lt;/p&gt;
&lt;p&gt;Stack はキャッシュすべきディレクトリ &lt;code&gt;~/.stack&lt;/code&gt; がでかすぎる． 下記は試しに GitHub Actions 上で &lt;code&gt;du&lt;/code&gt; して見た結果だ:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ du -sh ~/.stack/*
4.0K    /home/runner/.stack/config.yaml
1.3G    /home/runner/.stack/pantry
553M    /home/runner/.stack/pantry.sqlite3
0       /home/runner/.stack/pantry.sqlite3.pantry-write-lock
1.8G    /home/runner/.stack/programs
16M     /home/runner/.stack/setup-exe-cache
64K     /home/runner/.stack/setup-exe-src
462M    /home/runner/.stack/snapshots
192K    /home/runner/.stack/stack.sqlite3
0       /home/runner/.stack/stack.sqlite3.pantry-write-lock&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;現在，&lt;code&gt;actions/cache@v1&lt;/code&gt; では一度にキャッシュできるディレクトリの最大サイズは400MBしかない（今後緩和される可能性はあるが）． &lt;code&gt;actions/cache&lt;/code&gt; は内部で gzip かなんかで圧縮しているので，この数字まんまではない． 試しに，このまんまキャッシュしてみたら次のような警告が出た:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Post job cleanup.
/bin/tar -cz -f /home/runner/work/_temp/2706cc23-8789-4ed4-b4ec-4e7143b1cc98/cache.tgz -C /home/runner/.stack .
##[warning]Cache size of 814014541 bytes is over the 400MB limit, not saving cache.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;800MB強，意外と少ない！&lt;/p&gt;
&lt;p&gt;余談だが，&lt;del&gt;そのうち&lt;/del&gt; v1.0.2 から&lt;a href="https://github.com/actions/cache/pull/85"&gt;毎回キャッシュサイズが見れるようになる&lt;/a&gt;はず（今でも &lt;code&gt;ACTIONS_STEP_DEBUG&lt;/code&gt; を Secret に設定すると見れる）．&lt;/p&gt;
&lt;h3 id="system-ghc-を使う"&gt;system-ghc を使う&lt;/h3&gt;
&lt;p&gt;stack は &lt;code&gt;--system-ghc&lt;/code&gt; オプションを使うことで stack がインストールした GHC の代わりに，ホストマシンの GHC を直接使ってくれる:&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;span id="cb5-1"&gt;&lt;a href="#cb5-1"&gt;&lt;/a&gt;&lt;span class="fu"&gt;jobs&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-2"&gt;&lt;a href="#cb5-2"&gt;&lt;/a&gt;&lt;span class="at"&gt;  &lt;/span&gt;&lt;span class="fu"&gt;build&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-3"&gt;&lt;a href="#cb5-3"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;runs-on&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; ubuntu-18.04&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-4"&gt;&lt;a href="#cb5-4"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;strategy&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-5"&gt;&lt;a href="#cb5-5"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;matrix&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-6"&gt;&lt;a href="#cb5-6"&gt;&lt;/a&gt;&lt;span class="at"&gt;        &lt;/span&gt;&lt;span class="fu"&gt;ghc&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="kw"&gt;[&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;8.6.5&amp;quot;&lt;/span&gt;&lt;span class="kw"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-7"&gt;&lt;a href="#cb5-7"&gt;&lt;/a&gt;&lt;span class="at"&gt;        &lt;/span&gt;&lt;span class="fu"&gt;cabal&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="kw"&gt;[&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;3.0&amp;quot;&lt;/span&gt;&lt;span class="kw"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-8"&gt;&lt;a href="#cb5-8"&gt;&lt;/a&gt;&lt;span class="at"&gt;        &lt;/span&gt;&lt;span class="fu"&gt;cache-version&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="kw"&gt;[&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;v4&amp;quot;&lt;/span&gt;&lt;span class="kw"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-9"&gt;&lt;a href="#cb5-9"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb5-10"&gt;&lt;a href="#cb5-10"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;steps&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-11"&gt;&lt;a href="#cb5-11"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="fu"&gt;uses&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; actions/checkout@v1&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-12"&gt;&lt;a href="#cb5-12"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;with&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-13"&gt;&lt;a href="#cb5-13"&gt;&lt;/a&gt;&lt;span class="at"&gt;        &lt;/span&gt;&lt;span class="fu"&gt;fetch-depth&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-14"&gt;&lt;a href="#cb5-14"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="fu"&gt;name&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; Setup Haskell&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-15"&gt;&lt;a href="#cb5-15"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;uses&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; actions/setup-haskell@v1&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-16"&gt;&lt;a href="#cb5-16"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;with&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-17"&gt;&lt;a href="#cb5-17"&gt;&lt;/a&gt;&lt;span class="at"&gt;        &lt;/span&gt;&lt;span class="fu"&gt;ghc-version&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; ${{ matrix.ghc }}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-18"&gt;&lt;a href="#cb5-18"&gt;&lt;/a&gt;&lt;span class="at"&gt;        &lt;/span&gt;&lt;span class="fu"&gt;cabal-version&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; ${{ matrix.cabal }}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-19"&gt;&lt;a href="#cb5-19"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="fu"&gt;uses&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; mstksg/setup-stack@v1&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-20"&gt;&lt;a href="#cb5-20"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="fu"&gt;name&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; Install dependencies&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-21"&gt;&lt;a href="#cb5-21"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;run&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; stack --system-ghc build --only-dependencies&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-22"&gt;&lt;a href="#cb5-22"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="fu"&gt;name&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; Build binary&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-23"&gt;&lt;a href="#cb5-23"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;run&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; stack --system-ghc install --local-bin-path=./bin&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なんと system-ghc を使うことで &lt;code&gt;~/.stack/programs&lt;/code&gt; が保存されなくなった（ここには stack がインストールした GHC が保存されてた）． これで，半分弱の削減に成功．残り約500MB．&lt;/p&gt;
&lt;h3 id="必殺奥義-分割キャッシュ"&gt;必殺奥義: 分割キャッシュ&lt;/h3&gt;
&lt;p&gt;実は，キャッシュの最大サイズ 400MB は &lt;strong&gt;一つのディレクトリ毎の最大サイズ&lt;/strong&gt; だ． なので，別々のディレクトリを別々にキャッシュすれば，最大 2GB までキャッシュできる（これがリポジトリ単位での最大サイズ）．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;~/.stack/pantry&lt;/code&gt; というのが単体で 1.3GB ある． なので，これだけとそれ以外をキャッシュするようにしてみる． ちなみに，&lt;a href="https://docs.haskellstack.org/en/stable/pantry"&gt;Pantry というのが Stack の依存パッケージのキャッシュシステム&lt;/a&gt;だ．&lt;/p&gt;
&lt;p&gt;ここで問題が1つ． actions/cache はディレクトリを1つ指定して，それを圧縮しキャッシュしする． 複数のディレクトリを指定したり，中の一部のファイルだけを除外したりなどはできない（少なくとも現在のバージョンでは）． もちろん，一旦 &lt;code&gt;mv&lt;/code&gt; してキャッシュし，restore したら &lt;code&gt;mv&lt;/code&gt; し直せば良い． が，めんどいね． 単純なことはソフトウェアで解決しよう． ソフトウェアエンジニアの精神です（？）．&lt;/p&gt;
&lt;p&gt;ということで，それをやってくれるアクションがこちら:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matsubara0507/actions/tree/master/move-files"&gt;actions/move-files at master · matsubara0507/actions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ついに TypeScript デビューした． はい，actions/cache を参考にしてきていい感じに書き直しただけです． &lt;code&gt;mkdir&lt;/code&gt; や &lt;code&gt;mv&lt;/code&gt; は &lt;a href="https://github.com/actions/toolkit/tree/master/packages/io"&gt;actions/toolkit&lt;/a&gt; にあるので簡単に実装できた:&lt;/p&gt;
&lt;div class="sourceCode" id="cb6"&gt;&lt;pre class="sourceCode typescript"&gt;&lt;code class="sourceCode typescript"&gt;&lt;span id="cb6-1"&gt;&lt;a href="#cb6-1"&gt;&lt;/a&gt;&lt;span class="im"&gt;import&lt;/span&gt; &lt;span class="op"&gt;*&lt;/span&gt; &lt;span class="im"&gt;as&lt;/span&gt; core &lt;span class="im"&gt;from&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;@actions/core&amp;quot;&lt;/span&gt;&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-2"&gt;&lt;a href="#cb6-2"&gt;&lt;/a&gt;&lt;span class="im"&gt;import&lt;/span&gt; &lt;span class="op"&gt;*&lt;/span&gt; &lt;span class="im"&gt;as&lt;/span&gt; io &lt;span class="im"&gt;from&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;@actions/io&amp;quot;&lt;/span&gt;&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-3"&gt;&lt;a href="#cb6-3"&gt;&lt;/a&gt;&lt;span class="im"&gt;import&lt;/span&gt; &lt;span class="op"&gt;*&lt;/span&gt; &lt;span class="im"&gt;as&lt;/span&gt; utils &lt;span class="im"&gt;from&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;./utils/actionUtils&amp;quot;&lt;/span&gt;&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-4"&gt;&lt;a href="#cb6-4"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb6-5"&gt;&lt;a href="#cb6-5"&gt;&lt;/a&gt;&lt;span class="kw"&gt;async&lt;/span&gt; &lt;span class="kw"&gt;function&lt;/span&gt; &lt;span class="fu"&gt;run&lt;/span&gt;()&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="bu"&gt;Promise&lt;/span&gt;&lt;span class="op"&gt;&amp;lt;&lt;/span&gt;&lt;span class="dt"&gt;void&lt;/span&gt;&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-6"&gt;&lt;a href="#cb6-6"&gt;&lt;/a&gt;    &lt;span class="cf"&gt;try&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-7"&gt;&lt;a href="#cb6-7"&gt;&lt;/a&gt;        &lt;span class="kw"&gt;const&lt;/span&gt; source &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="va"&gt;utils&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;resolvePath&lt;/span&gt;(&lt;/span&gt;
&lt;span id="cb6-8"&gt;&lt;a href="#cb6-8"&gt;&lt;/a&gt;            &lt;span class="va"&gt;core&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;getInput&lt;/span&gt;(&lt;span class="st"&gt;&amp;quot;source_dir&amp;quot;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt; required&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="kw"&gt;true&lt;/span&gt; &lt;span class="op"&gt;}&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb6-9"&gt;&lt;a href="#cb6-9"&gt;&lt;/a&gt;        )&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-10"&gt;&lt;a href="#cb6-10"&gt;&lt;/a&gt;        &lt;span class="co"&gt;// 残念ながら inputs は文字列しか渡せないので改行で分割してる&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-11"&gt;&lt;a href="#cb6-11"&gt;&lt;/a&gt;        &lt;span class="kw"&gt;const&lt;/span&gt; files &lt;span class="op"&gt;=&lt;/span&gt; core&lt;/span&gt;
&lt;span id="cb6-12"&gt;&lt;a href="#cb6-12"&gt;&lt;/a&gt;            .&lt;span class="fu"&gt;getInput&lt;/span&gt;(&lt;span class="st"&gt;&amp;quot;source_files&amp;quot;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt; required&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="kw"&gt;true&lt;/span&gt; &lt;span class="op"&gt;}&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb6-13"&gt;&lt;a href="#cb6-13"&gt;&lt;/a&gt;            .&lt;span class="fu"&gt;split&lt;/span&gt;(&lt;span class="ss"&gt;/&lt;/span&gt;&lt;span class="sc"&gt;\r?\n&lt;/span&gt;&lt;span class="ss"&gt;/&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb6-14"&gt;&lt;a href="#cb6-14"&gt;&lt;/a&gt;            .&lt;span class="fu"&gt;filter&lt;/span&gt;(pat &lt;span class="kw"&gt;=&amp;gt;&lt;/span&gt; pat)&lt;/span&gt;
&lt;span id="cb6-15"&gt;&lt;a href="#cb6-15"&gt;&lt;/a&gt;            .&lt;span class="fu"&gt;map&lt;/span&gt;(pat &lt;span class="kw"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="va"&gt;pat&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;trim&lt;/span&gt;())&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-16"&gt;&lt;a href="#cb6-16"&gt;&lt;/a&gt;        &lt;span class="kw"&gt;const&lt;/span&gt; target &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="va"&gt;utils&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;resolvePath&lt;/span&gt;(&lt;/span&gt;
&lt;span id="cb6-17"&gt;&lt;a href="#cb6-17"&gt;&lt;/a&gt;            &lt;span class="va"&gt;core&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;getInput&lt;/span&gt;(&lt;span class="st"&gt;&amp;quot;target_dir&amp;quot;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt; required&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="kw"&gt;true&lt;/span&gt; &lt;span class="op"&gt;}&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb6-18"&gt;&lt;a href="#cb6-18"&gt;&lt;/a&gt;        )&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-19"&gt;&lt;a href="#cb6-19"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb6-20"&gt;&lt;a href="#cb6-20"&gt;&lt;/a&gt;        &lt;span class="cf"&gt;await&lt;/span&gt; &lt;span class="va"&gt;io&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;mkdirP&lt;/span&gt;(target)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-21"&gt;&lt;a href="#cb6-21"&gt;&lt;/a&gt;        &lt;span class="va"&gt;core&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;debug&lt;/span&gt;(&lt;span class="vs"&gt;`mkdir -p &lt;/span&gt;&lt;span class="sc"&gt;${&lt;/span&gt;target&lt;span class="sc"&gt;}&lt;/span&gt;&lt;span class="vs"&gt;`&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-22"&gt;&lt;a href="#cb6-22"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb6-23"&gt;&lt;a href="#cb6-23"&gt;&lt;/a&gt;        &lt;span class="va"&gt;files&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;forEach&lt;/span&gt;(&lt;span class="kw"&gt;async&lt;/span&gt; &lt;span class="fu"&gt;function&lt;/span&gt;(file) &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-24"&gt;&lt;a href="#cb6-24"&gt;&lt;/a&gt;            &lt;span class="cf"&gt;try&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-25"&gt;&lt;a href="#cb6-25"&gt;&lt;/a&gt;                &lt;span class="kw"&gt;const&lt;/span&gt; path &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="va"&gt;source&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;concat&lt;/span&gt;(&lt;span class="st"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; file)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-26"&gt;&lt;a href="#cb6-26"&gt;&lt;/a&gt;                &lt;span class="cf"&gt;await&lt;/span&gt; &lt;span class="va"&gt;io&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;mv&lt;/span&gt;(path&lt;span class="op"&gt;,&lt;/span&gt; target)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-27"&gt;&lt;a href="#cb6-27"&gt;&lt;/a&gt;                &lt;span class="va"&gt;core&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;debug&lt;/span&gt;(&lt;span class="vs"&gt;`mv &lt;/span&gt;&lt;span class="sc"&gt;${&lt;/span&gt;path&lt;span class="sc"&gt;}&lt;/span&gt;&lt;span class="vs"&gt; to &lt;/span&gt;&lt;span class="sc"&gt;${&lt;/span&gt;target&lt;span class="sc"&gt;}&lt;/span&gt;&lt;span class="vs"&gt;`&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-28"&gt;&lt;a href="#cb6-28"&gt;&lt;/a&gt;            &lt;span class="op"&gt;}&lt;/span&gt; &lt;span class="fu"&gt;catch&lt;/span&gt; (error) &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-29"&gt;&lt;a href="#cb6-29"&gt;&lt;/a&gt;                &lt;span class="va"&gt;core&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;warning&lt;/span&gt;(&lt;span class="va"&gt;error&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="at"&gt;message&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-30"&gt;&lt;a href="#cb6-30"&gt;&lt;/a&gt;            &lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-31"&gt;&lt;a href="#cb6-31"&gt;&lt;/a&gt;        &lt;span class="op"&gt;}&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-32"&gt;&lt;a href="#cb6-32"&gt;&lt;/a&gt;    &lt;span class="op"&gt;}&lt;/span&gt; &lt;span class="fu"&gt;catch&lt;/span&gt; (error) &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-33"&gt;&lt;a href="#cb6-33"&gt;&lt;/a&gt;        &lt;span class="va"&gt;core&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;warning&lt;/span&gt;(&lt;span class="va"&gt;error&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="at"&gt;message&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-34"&gt;&lt;a href="#cb6-34"&gt;&lt;/a&gt;    &lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-35"&gt;&lt;a href="#cb6-35"&gt;&lt;/a&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-36"&gt;&lt;a href="#cb6-36"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb6-37"&gt;&lt;a href="#cb6-37"&gt;&lt;/a&gt;&lt;span class="fu"&gt;run&lt;/span&gt;()&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-38"&gt;&lt;a href="#cb6-38"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb6-39"&gt;&lt;a href="#cb6-39"&gt;&lt;/a&gt;&lt;span class="im"&gt;export&lt;/span&gt; &lt;span class="im"&gt;default&lt;/span&gt; run&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使うときはこんな感じ:&lt;/p&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;span id="cb7-1"&gt;&lt;a href="#cb7-1"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="fu"&gt;name&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; Move .stack/pantry to temp&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-2"&gt;&lt;a href="#cb7-2"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;uses&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; matsubara0507/actions/move-files@master&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-3"&gt;&lt;a href="#cb7-3"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;with&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-4"&gt;&lt;a href="#cb7-4"&gt;&lt;/a&gt;&lt;span class="at"&gt;        &lt;/span&gt;&lt;span class="fu"&gt;source_dir&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; ~/.stack-temp/pantry&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-5"&gt;&lt;a href="#cb7-5"&gt;&lt;/a&gt;&lt;span class="fu"&gt;        source_files&lt;/span&gt;&lt;span class="kw"&gt;: &lt;/span&gt;&lt;span class="ch"&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-6"&gt;&lt;a href="#cb7-6"&gt;&lt;/a&gt;          pantry&lt;/span&gt;
&lt;span id="cb7-7"&gt;&lt;a href="#cb7-7"&gt;&lt;/a&gt;&lt;span class="at"&gt;        &lt;/span&gt;&lt;span class="fu"&gt;target_dir&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; ~/.stack&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実は，GitHub Actions には隠し機能（現状ドキュメントには書いてない）として &lt;code&gt;post&lt;/code&gt; と &lt;code&gt;post-if&lt;/code&gt; というのがある（&lt;code&gt;actions.yml&lt;/code&gt; に設定できる）:&lt;/p&gt;
&lt;div class="sourceCode" id="cb8"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;span id="cb8-1"&gt;&lt;a href="#cb8-1"&gt;&lt;/a&gt;&lt;span class="fu"&gt;name&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="st"&gt;&amp;#39;Move Files&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-2"&gt;&lt;a href="#cb8-2"&gt;&lt;/a&gt;&lt;span class="fu"&gt;description&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="st"&gt;&amp;#39;move files to other direcotory&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-3"&gt;&lt;a href="#cb8-3"&gt;&lt;/a&gt;&lt;span class="fu"&gt;inputs&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-4"&gt;&lt;a href="#cb8-4"&gt;&lt;/a&gt;&lt;span class="at"&gt;  &lt;/span&gt;&lt;span class="fu"&gt;source_dir&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-5"&gt;&lt;a href="#cb8-5"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;required&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="ch"&gt;true&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-6"&gt;&lt;a href="#cb8-6"&gt;&lt;/a&gt;&lt;span class="at"&gt;  &lt;/span&gt;&lt;span class="fu"&gt;source_files&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-7"&gt;&lt;a href="#cb8-7"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;required&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="ch"&gt;true&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-8"&gt;&lt;a href="#cb8-8"&gt;&lt;/a&gt;&lt;span class="at"&gt;  &lt;/span&gt;&lt;span class="fu"&gt;target_dir&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-9"&gt;&lt;a href="#cb8-9"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;require&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="ch"&gt;true&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-10"&gt;&lt;a href="#cb8-10"&gt;&lt;/a&gt;&lt;span class="fu"&gt;runs&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-11"&gt;&lt;a href="#cb8-11"&gt;&lt;/a&gt;&lt;span class="at"&gt;  &lt;/span&gt;&lt;span class="fu"&gt;using&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="st"&gt;&amp;#39;node12&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-12"&gt;&lt;a href="#cb8-12"&gt;&lt;/a&gt;&lt;span class="at"&gt;  &lt;/span&gt;&lt;span class="fu"&gt;main&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="st"&gt;&amp;#39;dist/move/index.js&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-13"&gt;&lt;a href="#cb8-13"&gt;&lt;/a&gt;&lt;span class="at"&gt;  &lt;/span&gt;&lt;span class="fu"&gt;post&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="st"&gt;&amp;#39;dist/restore/index.js&amp;#39;&lt;/span&gt;&lt;span class="co"&gt; # move.ts とは全く逆のことをするだけ&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-14"&gt;&lt;a href="#cb8-14"&gt;&lt;/a&gt;&lt;span class="at"&gt;  &lt;/span&gt;&lt;span class="fu"&gt;post-if&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="st"&gt;&amp;#39;success()&amp;#39;&lt;/span&gt;&lt;span class="co"&gt;          # move が成功したときにだけ&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これは &lt;a href="https://github.com/actions/cache"&gt;actions/cache&lt;/a&gt; や &lt;a href="https://github.com/actions/checkout"&gt;actions/checkout&lt;/a&gt; がやっているやつで，ジョブステップの最後にデストラクタのように指定したアクションを実行してくれる機能だ． ちなみに，実行したステップとは逆順にポストステップは実行する．&lt;/p&gt;
&lt;p&gt;これと actions/cache を組み合わせることで，自由にキャッシュしたいディレクトリを分割してキャッシュすることができるようになった！&lt;/p&gt;
&lt;div class="sourceCode" id="cb9"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;span id="cb9-1"&gt;&lt;a href="#cb9-1"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;steps&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-2"&gt;&lt;a href="#cb9-2"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="fu"&gt;uses&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; actions/checkout@v1&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-3"&gt;&lt;a href="#cb9-3"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;with&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-4"&gt;&lt;a href="#cb9-4"&gt;&lt;/a&gt;&lt;span class="at"&gt;        &lt;/span&gt;&lt;span class="fu"&gt;fetch-depth&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-5"&gt;&lt;a href="#cb9-5"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb9-6"&gt;&lt;a href="#cb9-6"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="fu"&gt;name&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; Cache .stack&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-7"&gt;&lt;a href="#cb9-7"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;id&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; cache-stack&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-8"&gt;&lt;a href="#cb9-8"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;uses&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; actions/cache@v1&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-9"&gt;&lt;a href="#cb9-9"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;with&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-10"&gt;&lt;a href="#cb9-10"&gt;&lt;/a&gt;&lt;span class="at"&gt;        &lt;/span&gt;&lt;span class="fu"&gt;path&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; ~/.stack&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-11"&gt;&lt;a href="#cb9-11"&gt;&lt;/a&gt;&lt;span class="at"&gt;        &lt;/span&gt;&lt;span class="fu"&gt;key&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; ${{ runner.os }}-stack-${{ hashFiles(&amp;#39;**/stack.yaml.lock&amp;#39;) }}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-12"&gt;&lt;a href="#cb9-12"&gt;&lt;/a&gt;&lt;span class="fu"&gt;        restore-keys&lt;/span&gt;&lt;span class="kw"&gt;: &lt;/span&gt;&lt;span class="ch"&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-13"&gt;&lt;a href="#cb9-13"&gt;&lt;/a&gt;          ${{ runner.os }}-stack-&lt;/span&gt;
&lt;span id="cb9-14"&gt;&lt;a href="#cb9-14"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb9-15"&gt;&lt;a href="#cb9-15"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="fu"&gt;name&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; Cache .stack/pantry&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-16"&gt;&lt;a href="#cb9-16"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;id&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; cache-pantry&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-17"&gt;&lt;a href="#cb9-17"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;uses&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; actions/cache@v1&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-18"&gt;&lt;a href="#cb9-18"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;with&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-19"&gt;&lt;a href="#cb9-19"&gt;&lt;/a&gt;&lt;span class="at"&gt;        &lt;/span&gt;&lt;span class="fu"&gt;path&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; ~/.stack-temp/pantry&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-20"&gt;&lt;a href="#cb9-20"&gt;&lt;/a&gt;&lt;span class="at"&gt;        &lt;/span&gt;&lt;span class="fu"&gt;key&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; ${{ runner.os }}-pantry-${{ hashFiles(&amp;#39;**/stack.yaml.lock&amp;#39;) }}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-21"&gt;&lt;a href="#cb9-21"&gt;&lt;/a&gt;&lt;span class="fu"&gt;        restore-keys&lt;/span&gt;&lt;span class="kw"&gt;: &lt;/span&gt;&lt;span class="ch"&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-22"&gt;&lt;a href="#cb9-22"&gt;&lt;/a&gt;          ${{ runner.os }}-pantry-&lt;/span&gt;
&lt;span id="cb9-23"&gt;&lt;a href="#cb9-23"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb9-24"&gt;&lt;a href="#cb9-24"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="fu"&gt;name&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; Move .stack/pantry to temp&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-25"&gt;&lt;a href="#cb9-25"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;uses&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; matsubara0507/actions/move-files@master&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-26"&gt;&lt;a href="#cb9-26"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;with&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-27"&gt;&lt;a href="#cb9-27"&gt;&lt;/a&gt;&lt;span class="at"&gt;        &lt;/span&gt;&lt;span class="fu"&gt;source_dir&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; ~/.stack-temp/pantry&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-28"&gt;&lt;a href="#cb9-28"&gt;&lt;/a&gt;&lt;span class="fu"&gt;        source_files&lt;/span&gt;&lt;span class="kw"&gt;: &lt;/span&gt;&lt;span class="ch"&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-29"&gt;&lt;a href="#cb9-29"&gt;&lt;/a&gt;          pantry&lt;/span&gt;
&lt;span id="cb9-30"&gt;&lt;a href="#cb9-30"&gt;&lt;/a&gt;&lt;span class="at"&gt;        &lt;/span&gt;&lt;span class="fu"&gt;target_dir&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; ~/.stack&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-31"&gt;&lt;a href="#cb9-31"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb9-32"&gt;&lt;a href="#cb9-32"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="fu"&gt;uses&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; actions/setup-haskell@v1&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-33"&gt;&lt;a href="#cb9-33"&gt;&lt;/a&gt;&lt;span class="at"&gt;    ...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ちょっとわかりにくいですが，別々にキャッシュしたディレクトリを &lt;code&gt;move-files&lt;/code&gt; で合体させるイメージ．&lt;/p&gt;
&lt;h3 id="キャッシュバージョンを付ける"&gt;キャッシュバージョンを付ける&lt;/h3&gt;
&lt;p&gt;今回の PR のコミット履歴を見るとわかるのだが迷走してる． なぜかというと，actions/cache の「cache save は cache key が &lt;strong&gt;ヒットしなかったときにだけ&lt;/strong&gt; 行う」という性質に気づくのに時間がかかったから． &lt;code&gt;key&lt;/code&gt; にはヒットせず &lt;code&gt;restore-keys&lt;/code&gt; でヒットしたときには restore をして更にキャッシュを更新する． しかし，key に変更が無いとズーーーット古いキャッシュを使い続けてしまった． 変だと思った．&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/actions/cache/issues/2"&gt;現状キャッシュを手動でクリアする方法が無い&lt;/a&gt;． まぁなんでも良かったので cache-version というサフィックスを付けることにした笑:&lt;/p&gt;
&lt;div class="sourceCode" id="cb10"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;span id="cb10-1"&gt;&lt;a href="#cb10-1"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;strategy&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-2"&gt;&lt;a href="#cb10-2"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;matrix&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-3"&gt;&lt;a href="#cb10-3"&gt;&lt;/a&gt;&lt;span class="at"&gt;        &lt;/span&gt;&lt;span class="fu"&gt;ghc&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="kw"&gt;[&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;8.6.5&amp;quot;&lt;/span&gt;&lt;span class="kw"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-4"&gt;&lt;a href="#cb10-4"&gt;&lt;/a&gt;&lt;span class="at"&gt;        &lt;/span&gt;&lt;span class="fu"&gt;cabal&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="kw"&gt;[&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;3.0&amp;quot;&lt;/span&gt;&lt;span class="kw"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-5"&gt;&lt;a href="#cb10-5"&gt;&lt;/a&gt;&lt;span class="at"&gt;        &lt;/span&gt;&lt;span class="fu"&gt;cache-version&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="kw"&gt;[&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;v4&amp;quot;&lt;/span&gt;&lt;span class="kw"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-6"&gt;&lt;a href="#cb10-6"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb10-7"&gt;&lt;a href="#cb10-7"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;steps&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-8"&gt;&lt;a href="#cb10-8"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="fu"&gt;uses&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; actions/checkout@v1&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-9"&gt;&lt;a href="#cb10-9"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;with&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-10"&gt;&lt;a href="#cb10-10"&gt;&lt;/a&gt;&lt;span class="at"&gt;        &lt;/span&gt;&lt;span class="fu"&gt;fetch-depth&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="dv"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-11"&gt;&lt;a href="#cb10-11"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb10-12"&gt;&lt;a href="#cb10-12"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="fu"&gt;name&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; Cache .stack&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-13"&gt;&lt;a href="#cb10-13"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;id&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; cache-stack&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-14"&gt;&lt;a href="#cb10-14"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;uses&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; actions/cache@v1&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-15"&gt;&lt;a href="#cb10-15"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;with&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-16"&gt;&lt;a href="#cb10-16"&gt;&lt;/a&gt;&lt;span class="at"&gt;        &lt;/span&gt;&lt;span class="fu"&gt;path&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; ~/.stack&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-17"&gt;&lt;a href="#cb10-17"&gt;&lt;/a&gt;&lt;span class="at"&gt;        &lt;/span&gt;&lt;span class="fu"&gt;key&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; ${{ runner.os }}-stack-${{ hashFiles(&amp;#39;**/stack.yaml.lock&amp;#39;) }}-${{ matrix.cache-version }}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-18"&gt;&lt;a href="#cb10-18"&gt;&lt;/a&gt;&lt;span class="fu"&gt;        restore-keys&lt;/span&gt;&lt;span class="kw"&gt;: &lt;/span&gt;&lt;span class="ch"&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-19"&gt;&lt;a href="#cb10-19"&gt;&lt;/a&gt;          ${{ runner.os }}-stack-&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;少なくとも，キャッシュを試行錯誤してるときには便利だ．&lt;/p&gt;
&lt;h3 id="ビフォーアフター"&gt;ビフォーアフター&lt;/h3&gt;
&lt;p&gt;もともと25分以上かかかっていたビルドが:&lt;/p&gt;
&lt;p&gt;&lt;img src="/assets/haskell-with-gh-actions/before.jpg"&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;なんと2分まで減った！&lt;/p&gt;
&lt;p&gt;&lt;img src="/assets/haskell-with-gh-actions/after.jpg"&gt;&lt;/img&gt;&lt;/p&gt;
&lt;h2 id="おまけ-github-packages"&gt;おまけ: GitHub Packages&lt;/h2&gt;
&lt;p&gt;Haskell プログラムのバイナリを配布するために，僕は普段 Docker Image にして Docker Hub に置いてた． しかし，先日 GitHub の 2019年のもう一つの目玉機能「GitHub Packages」も GA されたので，こっちに置いてみることにした（なんと Docker レジストリにもなる）．&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/matsubara0507/octbook/packages"&gt;&lt;img src="/assets/haskell-with-gh-actions/image.jpg"&gt;&lt;/img&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ちなみに，現状パブリックリポジトリのパッケージであっても &lt;code&gt;docker pull&lt;/code&gt; するのに認証が必要である． その点がとても残念(改善されることを祈る)．&lt;/p&gt;
&lt;h3 id="ログイン"&gt;ログイン&lt;/h3&gt;
&lt;p&gt;意外と手間取った． どうやら MFA 設定してるとトークンを使う他ないらしい． しかも，新しく（？）追加された &lt;code&gt;write:packages&lt;/code&gt; というスコープをオンしないとダメっぽい．&lt;/p&gt;
&lt;h3 id="github-actions-からプッシュ"&gt;GitHub Actions からプッシュ&lt;/h3&gt;
&lt;p&gt;こんな感じ&lt;/p&gt;
&lt;div class="sourceCode" id="cb11"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;span id="cb11-1"&gt;&lt;a href="#cb11-1"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="fu"&gt;name&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; Build binary&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-2"&gt;&lt;a href="#cb11-2"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;run&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; stack --system-ghc install --local-bin-path=./bin&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-3"&gt;&lt;a href="#cb11-3"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb11-4"&gt;&lt;a href="#cb11-4"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="fu"&gt;name&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; Build Docker Image&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-5"&gt;&lt;a href="#cb11-5"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;run&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; docker build -t octbook . --build-arg local_bin_path=./bin&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-6"&gt;&lt;a href="#cb11-6"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb11-7"&gt;&lt;a href="#cb11-7"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="fu"&gt;name&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; Push Docker Image&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-8"&gt;&lt;a href="#cb11-8"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;if&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; github.ref == &amp;#39;refs/heads/master&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-9"&gt;&lt;a href="#cb11-9"&gt;&lt;/a&gt;&lt;span class="fu"&gt;      run&lt;/span&gt;&lt;span class="kw"&gt;: &lt;/span&gt;&lt;span class="ch"&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-10"&gt;&lt;a href="#cb11-10"&gt;&lt;/a&gt;        echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u matsubara0507 --password-stdin&lt;/span&gt;
&lt;span id="cb11-11"&gt;&lt;a href="#cb11-11"&gt;&lt;/a&gt;        docker tag octbook docker.pkg.github.com/matsubara0507/octbook/cli&lt;/span&gt;
&lt;span id="cb11-12"&gt;&lt;a href="#cb11-12"&gt;&lt;/a&gt;        docker push docker.pkg.github.com/matsubara0507/octbook/cli:latest&lt;/span&gt;
&lt;span id="cb11-13"&gt;&lt;a href="#cb11-13"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb11-14"&gt;&lt;a href="#cb11-14"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="fu"&gt;name&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; Push Docker Image (tag)&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-15"&gt;&lt;a href="#cb11-15"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;if&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; startsWith(github.ref, &amp;#39;refs/tags/&amp;#39;)&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-16"&gt;&lt;a href="#cb11-16"&gt;&lt;/a&gt;&lt;span class="fu"&gt;      run&lt;/span&gt;&lt;span class="kw"&gt;: &lt;/span&gt;&lt;span class="ch"&gt;|&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-17"&gt;&lt;a href="#cb11-17"&gt;&lt;/a&gt;        echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u matsubara0507 --password-stdin&lt;/span&gt;
&lt;span id="cb11-18"&gt;&lt;a href="#cb11-18"&gt;&lt;/a&gt;        docker tag octbook docker.pkg.github.com/matsubara0507/octbook/cli:${GITHUB_REF#refs/tags/}&lt;/span&gt;
&lt;span id="cb11-19"&gt;&lt;a href="#cb11-19"&gt;&lt;/a&gt;        docker push docker.pkg.github.com/matsubara0507/octbook/cli:${GITHUB_REF#refs/tags/}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;if: github.ref == &amp;#39;refs/heads/master&amp;#39;&lt;/code&gt; とすることで master ブランチのときだけ，&lt;code&gt;if: startsWith(github.ref, &amp;#39;refs/tags/&amp;#39;)&lt;/code&gt; とすることで tag のときだけ，それぞれのステップを評価させることができる．&lt;/p&gt;
&lt;p&gt;ちなみに，&lt;code&gt;GITHUB_TOKEN&lt;/code&gt; という Secret はデフォルトで用意されてる． &lt;a href="https://help.github.com/en/actions/automating-your-workflow-with-github-actions/authenticating-with-the-github_token#permissions-for-the-github_token"&gt;スコープについてはここに書いてある&lt;/a&gt;． packages の read/write があるのでそのまま利用できるね．&lt;/p&gt;
&lt;h2 id="おしまい"&gt;おしまい&lt;/h2&gt;
&lt;p&gt;まぁきっと数ヶ月後ぐらいにはキャッシュ容量の制限が緩和されてこんなことしなくても良くなると思うけど．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/11/30/215950</id><title type="text">状態機械を合成してデッドロックを検出できる Go 言語パッケージを作ってみました</title><updated>2019-11-30T21:59:50+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/11/30/215950"/><summary type="html">はじめに マルチスレッドで動作するプログラムの設計は難しい問題です。個々のスレッドの動作は単純に見えても、複数が並行して動作する場合の動作は組み合わせ論的に複雑になります。また、タイミングに依存する不具合は狙って再現することが難しく、通常の単体テストによる検出にも限界があります。 そんなとき、有効な手法がモデル検査です。システムの取りうる状態をあらかじめ網羅的に探索することで、「実際に動作させた際にごく低い確率で踏むバグ」であっても、動作させることなく設計段階で発見することが可能になります。 ところでちょうど先日、デッドロック発見器を自作するハンズオンに参加する機会がありました。内容は非常にシ…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/11/22/192220</id><title type="text">今日は 吉祥寺.pm20 の日です</title><updated>2019-11-22T21:51:07+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/11/22/192220"/><summary type="html">弊社での開催でしたので、自分用のメモを残しておきます。 本当は難しいPSL / hiratara 自分のセッションでした。 speakerdeck.com Windowsデスクトップでweb開発 / setoazusaさん Windowsで開発している人は少ない TypeScriptやJavaScriptならなんとかなる？ ネイティブコード、symlink、permission、ビルドスクリプトでのUNIXコマンド 大型アップデートの繰り返し。Win7とは違う VSCode のリモート WSL のデモ wsl.exe を起動 Dancer(Perl)でのデモ サーバを起動 VSCode から編…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/11/21/FFI_%E3%81%A7_Haskell_%E3%81%8B%E3%82%89_Rust_%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B</id><title type="text">FFI で Haskell から Rust を利用する</title><updated>2019-11-22T13:28:53+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/11/21/FFI_%E3%81%A7_Haskell_%E3%81%8B%E3%82%89_Rust_%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B"/><summary type="html">Rust で作ったライブラリーを静的リンクして Haskell（GHC）から使う例と説明を書いた。 github.com</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/10/23/%E6%9C%80%E8%BF%91%E3%81%AE%E8%87%AA%E5%88%86%E3%81%AE_Haskell_%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83%EF%BC%88Windows%EF%BC%89</id><title type="text">最近の自分の Haskell 開発環境（Windows）</title><updated>2019-11-21T09:09:44+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/10/23/%E6%9C%80%E8%BF%91%E3%81%AE%E8%87%AA%E5%88%86%E3%81%AE_Haskell_%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83%EF%BC%88Windows%EF%BC%89"/><summary type="html">id:syocy のブログを見たので Windows で自分がどうしているかをメモしておく。 syocy.hatenablog.com Stack 最近は ghcup があるがシェルスクリプト製で自分は PowerShell ユーザーなので stack を使っている。（ghcup はなんで Haskell 製じゃないんだ1？） GHC 8.8 を使うには resolver は ghc-8.8 や nightly を指定する。まだ LTS にはなっていない。 エディター エディターは Spacemacs を使っている。前は IntelliJ IDEA に HaskForce プラグインを入れて使…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/11/19/185744</id><title type="text">今日は安全なシステムプログラミング言語Rustへの招待の日です</title><updated>2019-11-19T19:11:21+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/11/19/185744"/><summary type="html">IIJさんでのセミナー を聴講に来ましたので、自分用のメモを残しておきます。 安全なシステムプログラミング言語Rustへの招待 / keenさん 2015 年に 1.0.0 がリリース ここからは安定している 6週間ごとのリリース Firefox と同じ 言語仕様は2つ Rust2015 と Rust2018 移行ツールはある。両方をコンパイルしてリンクすることも可能 実例 firecracker AWS Lambda の内側 Magick Pocket: DropBoxのストレージマネージャ Servo: レンダリングエンジン 一部が Firefox Redox : OS。 大学のプロジェク…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2019/11/18/120000</id><title type="text">開発環境構築スクリプトのCIをGitHub Actionsで回す</title><updated>2019-11-18T13:51:36+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2019/11/18/120000"/><summary type="html">小ネタですが、開発環境の構築はスクリプト化して、CIを回そうという話です。 開発環境を構築することは年にそう何回もあるわけではないですが、スクリプトを一発叩いて必要なツールが揃うようにしておくと便利です。私は素朴にシェルスクリプトで書いています。好きな言語で書けばいいと思いますが、macOSは将来的にRubyやPythonといったスクリプト言語を排除しようとしていて、不安ですね。Ansibleみたいなのを使ってもいいと思います。私はちょっと苦手で… あくまで私用のスクリプトなので使わないでください。 このスクリプトを叩いてしまえば、iTerm2やVim、tmux、自分のdotfilesの配置と…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/11/15/C_%E3%83%89%E3%83%A9%E3%82%A4%E3%83%96%E4%BE%9D%E5%AD%98%E3%82%92%E6%B8%9B%E3%82%89%E3%81%99</id><title type="text">C ドライブ依存を減らす</title><updated>2019-11-17T16:13:29+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/11/15/C_%E3%83%89%E3%83%A9%E3%82%A4%E3%83%96%E4%BE%9D%E5%AD%98%E3%82%92%E6%B8%9B%E3%82%89%E3%81%99"/><summary type="html">いろいろなソフトウェアがデフォルトで何でも C ドライブを使う。 C ドライブが手狭になってきたのでいくらかのデータを別ドライブに移行する方法をメモしておく。 Stack Stack（Haskell）のリソースはユーザー環境変数 STACK_ROOT の指すディレクトリーに保存される。デフォルト値は C:\sr である。パス長制限の問題があるので浅い場所がよい。D:\stack に変更した。 Stack によってインストールされる GHC や MSYS2 は LOCALAPPDATA\Programs\stack にある。これは STACK_ROOT\config.yaml に local-p…</summary></entry><entry><id>https://kurokawh.blogspot.com/2019/11/mac-mojava.html</id><title type="text">[mac] Mojavaクリーンインストール</title><updated>2019-11-16T09:38:23.124+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2019/11/mac-mojava.html"/><summary type="text">Mojavaへのアップデートを契機にmac book airを初期化して環境をクリーンセットアップしました。
自分にとって使いやすい環境の設定手順および、インストールしたアプリ群の情報をメモがわりに残しておきます。



システム環境設定

トラックパッド

軌跡の速さを速くする 
「スクロールとズーム」内の「スクロールの方向」を「ナチュラル」にする
「その他のジェスチャー」内の全てのチェックを外す

アクセシビリティ

マウスとトラックパッド

トラックパッドオプション

「ドラッグを有効にする」にチェック

→ダブルタップでドラッグできるようになる

「ドラッグロックなし」を選択

→トラックパッドから手を離すとドラッグ解除





キーボード

F1, F2などのキーを標準のファンクションキーとして利用する：チェック

Dock

 最近使ったアプリケーションをDock に追加</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-11-15-line-charts-with-elm.html</id><title type="text">Elm で line charts する</title><updated>2019-11-15T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-11-15-line-charts-with-elm.html"/><summary type="html">&lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;Elm で作っているスコアボードにスコアの線グラフを追加したかったので &lt;a href="https://package.elm-lang.org/packages/terezka/line-charts/"&gt;&lt;code&gt;terezka/line-charts&lt;/code&gt;&lt;/a&gt; というパッケージを使って追加した． っていうメモ書き。 追加の PR はこれです:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matsubara0507/git-plantation/pull/49"&gt;スコアボードにグラフを描写するページを追加 by matsubara0507 · Pull Request #49 · matsubara0507/git-plantation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最終的に出来上がったグラフがこんな感じ:&lt;/p&gt;
&lt;p&gt;&lt;img src="/assets/line-charts-with-elm/graph.jpg"&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;実は色をランダムに生成している部分がキモ(?)です． ちなみに，本記事で扱う &lt;code&gt;terezka/line-charts&lt;/code&gt; パッケージのバージョンは 2.0 です．&lt;/p&gt;
&lt;h2 id="terezkaline-charts"&gt;terezka/line-charts&lt;/h2&gt;
&lt;p&gt;どんなグラフが書けるかは作者が用意してる&lt;a href="https://terezka.github.io/line-charts"&gt;サンプルページ&lt;/a&gt;を見ると良い． ただし，&lt;code&gt;see source&lt;/code&gt; ボタンで右からニュッっと出てくるソースコードは Elm 0.19 では動かない点に注意． サンプルページのコードはおそらく&lt;a href="https://github.com/terezka/line-charts/blob/2.0.0/docs/src"&gt;ココ&lt;/a&gt;にある．&lt;/p&gt;
&lt;p&gt;今回は競技プログラミングのスコア変遷をグラフ化したかったので &lt;a href="https://github.com/terezka/line-charts/blob/2.0.0/docs/src/Stepped.elm"&gt;&lt;code&gt;Steeped&lt;/code&gt;&lt;/a&gt; というグラフを使うことにする(段々になっているやつ)．&lt;/p&gt;
&lt;h3 id="linechart.viewcustom-を使ってみる"&gt;&lt;code&gt;LineChart.viewCustom&lt;/code&gt; を使ってみる&lt;/h3&gt;
&lt;p&gt;グラフを描写するには &lt;code&gt;LineChart.viewCustom&lt;/code&gt; 関数を使う:&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb1-1"&gt;&lt;a href="#cb1-1"&gt;&lt;/a&gt;&lt;span class="fu"&gt;viewCustom&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-2"&gt;&lt;a href="#cb1-2"&gt;&lt;/a&gt;  : &lt;span class="dt"&gt;Config&lt;/span&gt; &lt;span class="fu"&gt;data&lt;/span&gt; &lt;span class="fu"&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-3"&gt;&lt;a href="#cb1-3"&gt;&lt;/a&gt;  &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt; (&lt;span class="dt"&gt;Series&lt;/span&gt; &lt;span class="fu"&gt;data&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb1-4"&gt;&lt;a href="#cb1-4"&gt;&lt;/a&gt;  &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Svg&lt;/span&gt; &lt;span class="fu"&gt;msg&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;1引数めがどうのように描写するかの設定で，2引数目は描写する(プロットする)データのリストをである． &lt;code&gt;Config data msg&lt;/code&gt; 型は次のようになっている:&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb2-1"&gt;&lt;a href="#cb2-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="kw"&gt;alias&lt;/span&gt; &lt;span class="dt"&gt;Config&lt;/span&gt; &lt;span class="fu"&gt;data&lt;/span&gt; &lt;span class="fu"&gt;msg&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-2"&gt;&lt;a href="#cb2-2"&gt;&lt;/a&gt;    { &lt;span class="fu"&gt;x&lt;/span&gt; : &lt;span class="dt"&gt;Axis&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Config&lt;/span&gt; &lt;span class="fu"&gt;data&lt;/span&gt; &lt;span class="fu"&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-3"&gt;&lt;a href="#cb2-3"&gt;&lt;/a&gt;    &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;y&lt;/span&gt; : &lt;span class="dt"&gt;Axis&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Config&lt;/span&gt; &lt;span class="fu"&gt;data&lt;/span&gt; &lt;span class="fu"&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-4"&gt;&lt;a href="#cb2-4"&gt;&lt;/a&gt;    &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;container&lt;/span&gt; : &lt;span class="dt"&gt;Container&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Config&lt;/span&gt; &lt;span class="fu"&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-5"&gt;&lt;a href="#cb2-5"&gt;&lt;/a&gt;    &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;intersection&lt;/span&gt; : &lt;span class="dt"&gt;Axis&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Intersection&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Config&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-6"&gt;&lt;a href="#cb2-6"&gt;&lt;/a&gt;    &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;interpolation&lt;/span&gt; : &lt;span class="dt"&gt;Interpolation&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Config&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-7"&gt;&lt;a href="#cb2-7"&gt;&lt;/a&gt;    &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;legends&lt;/span&gt; : &lt;span class="dt"&gt;Legends&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Config&lt;/span&gt; &lt;span class="fu"&gt;data&lt;/span&gt; &lt;span class="fu"&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-8"&gt;&lt;a href="#cb2-8"&gt;&lt;/a&gt;    &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;events&lt;/span&gt; : &lt;span class="dt"&gt;Events&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Config&lt;/span&gt; &lt;span class="fu"&gt;data&lt;/span&gt; &lt;span class="fu"&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-9"&gt;&lt;a href="#cb2-9"&gt;&lt;/a&gt;    &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;area&lt;/span&gt; : &lt;span class="dt"&gt;Area&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Config&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-10"&gt;&lt;a href="#cb2-10"&gt;&lt;/a&gt;    &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;grid&lt;/span&gt; : &lt;span class="dt"&gt;Grid&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Config&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-11"&gt;&lt;a href="#cb2-11"&gt;&lt;/a&gt;    &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;line&lt;/span&gt; : &lt;span class="dt"&gt;Line&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Config&lt;/span&gt; &lt;span class="fu"&gt;data&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-12"&gt;&lt;a href="#cb2-12"&gt;&lt;/a&gt;    &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;dots&lt;/span&gt; : &lt;span class="dt"&gt;Dots&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Config&lt;/span&gt; &lt;span class="fu"&gt;data&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-13"&gt;&lt;a href="#cb2-13"&gt;&lt;/a&gt;    &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;junk&lt;/span&gt; : &lt;span class="dt"&gt;Junk&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Config&lt;/span&gt; &lt;span class="fu"&gt;data&lt;/span&gt; &lt;span class="fu"&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-14"&gt;&lt;a href="#cb2-14"&gt;&lt;/a&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;それぞれサブモジュールの設定をしている(例えば &lt;code&gt;container&lt;/code&gt; フィールドは &lt;code&gt;LineChart.Container&lt;/code&gt; モジュール):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt;,&lt;code&gt;y&lt;/code&gt; はX軸とY軸の設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;container&lt;/code&gt; はグラフを描写する外枠の設定(たぶん)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;intersection&lt;/code&gt; は両軸の交点の設定(真ん中にするとか左下にするとか)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;interpolation&lt;/code&gt; は点と点を結ぶ線の引き方を設定(直線か曲線かなど)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;legends&lt;/code&gt; はグラフの凡例のを設定(どの線が何のグラフかなど)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;events&lt;/code&gt; はグラフ上でのイベント(&lt;code&gt;Msg&lt;/code&gt;)を設定(クリックとかマウスホバーとか)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;area&lt;/code&gt; は線の下の部分の描写の仕方を設定
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;default&lt;/code&gt; だと何も描写しないのでただの線グラフになる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;normal&lt;/code&gt; だと同じ色で塗りつぶしてくれる(引数は &lt;code&gt;opacity&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grid&lt;/code&gt; はグラフのグリッドを設定(そのまんま)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;line&lt;/code&gt; は線の幅やホバーした時の動作を設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dots&lt;/code&gt; は点の大きさやホバーした時の動作を設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;junk&lt;/code&gt; は点や線にホバーした時にモーダル(?)かなんかを表示する設定(たぶん)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回は基本的にサンプルコードのまんまで，軸や &lt;code&gt;junk&lt;/code&gt; の設定を少しだけいじった．&lt;/p&gt;
&lt;h3 id="プロットデータを用意する"&gt;プロットデータを用意する&lt;/h3&gt;
&lt;p&gt;2引数目の &lt;code&gt;Series data&lt;/code&gt; はプロットしたいデータ型(&lt;code&gt;data&lt;/code&gt;)に描写するための情報を付与したデータ型だ． 次の関数などで変換する:&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb3-1"&gt;&lt;a href="#cb3-1"&gt;&lt;/a&gt;&lt;span class="fu"&gt;line&lt;/span&gt; : &lt;span class="dt"&gt;Color&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Shape&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt; &lt;span class="fu"&gt;data&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Series&lt;/span&gt; &lt;span class="fu"&gt;data&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-2"&gt;&lt;a href="#cb3-2"&gt;&lt;/a&gt;&lt;span class="fu"&gt;dash&lt;/span&gt; : &lt;span class="dt"&gt;Color&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Shape&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt; &lt;span class="dt"&gt;Float&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt; &lt;span class="fu"&gt;data&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Series&lt;/span&gt; &lt;span class="fu"&gt;data&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;line&lt;/code&gt; は直線で &lt;code&gt;dash&lt;/code&gt; はたぶん破線． &lt;code&gt;Color&lt;/code&gt; は色を，&lt;code&gt;Shape&lt;/code&gt; は &lt;code&gt;LineChart.Dots&lt;/code&gt; にある関数で点の形を，&lt;code&gt;String&lt;/code&gt; は線の凡例名を与える． で，実際のプロットデータは &lt;code&gt;List data&lt;/code&gt; だ． &lt;code&gt;data&lt;/code&gt; から何をX軸にして，何をY軸にするかは &lt;code&gt;Config&lt;/code&gt; の &lt;code&gt;x&lt;/code&gt;・&lt;code&gt;y&lt;/code&gt; で指定する(&lt;code&gt;variable&lt;/code&gt;)．&lt;/p&gt;
&lt;p&gt;今回は，各チームのスコアデータの時間毎での遷移を描写したいので，X軸に正解時間をY軸に総ポイントを割り当てる． そのためのデータ型を用意した:&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb4-1"&gt;&lt;a href="#cb4-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="kw"&gt;alias&lt;/span&gt; &lt;span class="dt"&gt;ScoreHistory&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-2"&gt;&lt;a href="#cb4-2"&gt;&lt;/a&gt;    { &lt;span class="fu"&gt;point&lt;/span&gt; : &lt;span class="dt"&gt;Int&lt;/span&gt;                &lt;span class="co"&gt;-- 総ポイント&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-3"&gt;&lt;a href="#cb4-3"&gt;&lt;/a&gt;    &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;latest&lt;/span&gt; : &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;API&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Status&lt;/span&gt;  &lt;span class="co"&gt;-- 最後にクリアステータス&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-4"&gt;&lt;a href="#cb4-4"&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id="cb4-5"&gt;&lt;a href="#cb4-5"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-6"&gt;&lt;a href="#cb4-6"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="kw"&gt;alias&lt;/span&gt; &lt;span class="dt"&gt;Status&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-7"&gt;&lt;a href="#cb4-7"&gt;&lt;/a&gt;    { &lt;span class="fu"&gt;problem_id&lt;/span&gt; : &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-8"&gt;&lt;a href="#cb4-8"&gt;&lt;/a&gt;    &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;correct&lt;/span&gt; : &lt;span class="dt"&gt;Bool&lt;/span&gt;           &lt;span class="co"&gt;-- クリアしてると True&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-9"&gt;&lt;a href="#cb4-9"&gt;&lt;/a&gt;    &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;corrected_at&lt;/span&gt; : &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="co"&gt;-- まだクリアしてないと Nothing&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-10"&gt;&lt;a href="#cb4-10"&gt;&lt;/a&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Status&lt;/code&gt; はもともとある型で，サーバーサイドからスコア(&lt;code&gt;Score&lt;/code&gt;)を取得する際に用いる． このサーバーからのスコアから &lt;code&gt;Series ScoreHistory&lt;/code&gt; を構築する関数を用意した:&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb5-1"&gt;&lt;a href="#cb5-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="kw"&gt;alias&lt;/span&gt; &lt;span class="dt"&gt;Score&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-2"&gt;&lt;a href="#cb5-2"&gt;&lt;/a&gt;    { &lt;span class="fu"&gt;team&lt;/span&gt; : &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-3"&gt;&lt;a href="#cb5-3"&gt;&lt;/a&gt;    &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;point&lt;/span&gt; : &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-4"&gt;&lt;a href="#cb5-4"&gt;&lt;/a&gt;    &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;stats&lt;/span&gt; : &lt;span class="dt"&gt;List&lt;/span&gt; &lt;span class="dt"&gt;Status&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-5"&gt;&lt;a href="#cb5-5"&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id="cb5-6"&gt;&lt;a href="#cb5-6"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb5-7"&gt;&lt;a href="#cb5-7"&gt;&lt;/a&gt;&lt;span class="fu"&gt;buildScoreHistories&lt;/span&gt; : &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Color&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;API&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Score&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;LineChart&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Series&lt;/span&gt; &lt;span class="dt"&gt;ScoreHistory&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-8"&gt;&lt;a href="#cb5-8"&gt;&lt;/a&gt;&lt;span class="fu"&gt;buildScoreHistories&lt;/span&gt; &lt;span class="fu"&gt;model&lt;/span&gt; &lt;span class="fu"&gt;color&lt;/span&gt; &lt;span class="fu"&gt;score&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-9"&gt;&lt;a href="#cb5-9"&gt;&lt;/a&gt;    &lt;span class="fu"&gt;score&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;stats&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-10"&gt;&lt;a href="#cb5-10"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;filter&lt;/span&gt; &lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;correct&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-11"&gt;&lt;a href="#cb5-11"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;sortBy&lt;/span&gt; (&lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;withDefault&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;corrected_at&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb5-12"&gt;&lt;a href="#cb5-12"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;scanl&lt;/span&gt; (&lt;span class="op"&gt;::&lt;/span&gt;) []&lt;/span&gt;
&lt;span id="cb5-13"&gt;&lt;a href="#cb5-13"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;map&lt;/span&gt; (&lt;span class="fu"&gt;buildScoreHistory&lt;/span&gt; &lt;span class="fu"&gt;model&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb5-14"&gt;&lt;a href="#cb5-14"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;LineChart&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;line&lt;/span&gt; &lt;span class="fu"&gt;color&lt;/span&gt; &lt;span class="dt"&gt;Dots&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;circle&lt;/span&gt; &lt;span class="fu"&gt;score&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;team&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-15"&gt;&lt;a href="#cb5-15"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb5-16"&gt;&lt;a href="#cb5-16"&gt;&lt;/a&gt;&lt;span class="fu"&gt;buildScoreHistory&lt;/span&gt; : &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt; &lt;span class="dt"&gt;API&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Status&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;ScoreHistory&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-17"&gt;&lt;a href="#cb5-17"&gt;&lt;/a&gt;&lt;span class="fu"&gt;buildScoreHistory&lt;/span&gt; &lt;span class="fu"&gt;model&lt;/span&gt; &lt;span class="fu"&gt;stats&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-18"&gt;&lt;a href="#cb5-18"&gt;&lt;/a&gt;    { &lt;span class="fu"&gt;point&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;sum&lt;/span&gt; (&lt;span class="dt"&gt;List&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;map&lt;/span&gt; (&lt;span class="fu"&gt;findProblemPoint&lt;/span&gt; &lt;span class="fu"&gt;model&lt;/span&gt;) &lt;span class="fu"&gt;stats&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb5-19"&gt;&lt;a href="#cb5-19"&gt;&lt;/a&gt;    &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;latest&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;head&lt;/span&gt; &lt;span class="fu"&gt;stats&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-20"&gt;&lt;a href="#cb5-20"&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id="cb5-21"&gt;&lt;a href="#cb5-21"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb5-22"&gt;&lt;a href="#cb5-22"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- どの問題が何点かは `Model.problems` にしか書いてない&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-23"&gt;&lt;a href="#cb5-23"&gt;&lt;/a&gt;&lt;span class="fu"&gt;findProblemPoint&lt;/span&gt; : &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;API&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Status&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-24"&gt;&lt;a href="#cb5-24"&gt;&lt;/a&gt;&lt;span class="fu"&gt;findProblemPoint&lt;/span&gt; &lt;span class="fu"&gt;model&lt;/span&gt; &lt;span class="fu"&gt;status&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-25"&gt;&lt;a href="#cb5-25"&gt;&lt;/a&gt;    &lt;span class="fu"&gt;model&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;problems&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-26"&gt;&lt;a href="#cb5-26"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;find&lt;/span&gt; (\&lt;span class="fu"&gt;p&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;p&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;id&lt;/span&gt; &lt;span class="op"&gt;==&lt;/span&gt; &lt;span class="fu"&gt;status&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;problem_id&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb5-27"&gt;&lt;a href="#cb5-27"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;map&lt;/span&gt; &lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;difficulty&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-28"&gt;&lt;a href="#cb5-28"&gt;&lt;/a&gt;        &lt;span class="op"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;withDefault&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;scanl&lt;/code&gt; で綺麗になってるのが気持ちいい． また，&lt;code&gt;variable&lt;/code&gt; は次のように設定した:&lt;/p&gt;
&lt;div class="sourceCode" id="cb6"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb6-1"&gt;&lt;a href="#cb6-1"&gt;&lt;/a&gt;&lt;span class="fu"&gt;chart&lt;/span&gt; : &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Html&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-2"&gt;&lt;a href="#cb6-2"&gt;&lt;/a&gt;&lt;span class="fu"&gt;chart&lt;/span&gt; &lt;span class="fu"&gt;model&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-3"&gt;&lt;a href="#cb6-3"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;LineChart&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;viewCustom&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-4"&gt;&lt;a href="#cb6-4"&gt;&lt;/a&gt;        { &lt;span class="fu"&gt;y&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-5"&gt;&lt;a href="#cb6-5"&gt;&lt;/a&gt;            &lt;span class="dt"&gt;Axis&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;custom&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-6"&gt;&lt;a href="#cb6-6"&gt;&lt;/a&gt;                { &lt;span class="fu"&gt;title&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Title&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;default&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;Point&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-7"&gt;&lt;a href="#cb6-7"&gt;&lt;/a&gt;                &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;variable&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Just&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="fu"&gt;toFloat&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;point&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-8"&gt;&lt;a href="#cb6-8"&gt;&lt;/a&gt;                &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;pixels&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dv"&gt;380&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-9"&gt;&lt;a href="#cb6-9"&gt;&lt;/a&gt;                &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;range&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Range&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;padded&lt;/span&gt; &lt;span class="dv"&gt;20&lt;/span&gt; &lt;span class="dv"&gt;20&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-10"&gt;&lt;a href="#cb6-10"&gt;&lt;/a&gt;                &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;axisLine&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;AxisLine&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;full&lt;/span&gt; &lt;span class="dt"&gt;Colors&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;gray&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-11"&gt;&lt;a href="#cb6-11"&gt;&lt;/a&gt;                &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;ticks&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Ticks&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;float&lt;/span&gt; &lt;span class="dv"&gt;5&lt;/span&gt; &lt;span class="co"&gt;-- これは軸に表示する数字の間隔&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-12"&gt;&lt;a href="#cb6-12"&gt;&lt;/a&gt;                }&lt;/span&gt;
&lt;span id="cb6-13"&gt;&lt;a href="#cb6-13"&gt;&lt;/a&gt;        &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;x&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-14"&gt;&lt;a href="#cb6-14"&gt;&lt;/a&gt;            &lt;span class="dt"&gt;Axis&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;custom&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-15"&gt;&lt;a href="#cb6-15"&gt;&lt;/a&gt;                { &lt;span class="fu"&gt;title&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Title&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;default&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;Time&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-16"&gt;&lt;a href="#cb6-16"&gt;&lt;/a&gt;                &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;variable&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-17"&gt;&lt;a href="#cb6-17"&gt;&lt;/a&gt;                    &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;map&lt;/span&gt; &lt;span class="fu"&gt;toFloat&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-18"&gt;&lt;a href="#cb6-18"&gt;&lt;/a&gt;                      &lt;span class="op"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;map&lt;/span&gt; (\&lt;span class="fu"&gt;n&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;n&lt;/span&gt; &lt;span class="op"&gt;*&lt;/span&gt; &lt;span class="dv"&gt;1000&lt;/span&gt;) &lt;span class="co"&gt;-- 確かデフォルト millisec&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-19"&gt;&lt;a href="#cb6-19"&gt;&lt;/a&gt;                      &lt;span class="op"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;andThen&lt;/span&gt; &lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;corrected_at&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-20"&gt;&lt;a href="#cb6-20"&gt;&lt;/a&gt;                      &lt;span class="op"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;latest&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-21"&gt;&lt;a href="#cb6-21"&gt;&lt;/a&gt;                &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;pixels&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dv"&gt;1270&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-22"&gt;&lt;a href="#cb6-22"&gt;&lt;/a&gt;                &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;range&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Range&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;padded&lt;/span&gt; &lt;span class="dv"&gt;20&lt;/span&gt; &lt;span class="dv"&gt;20&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-23"&gt;&lt;a href="#cb6-23"&gt;&lt;/a&gt;                &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;axisLine&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;AxisLine&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;full&lt;/span&gt; &lt;span class="dt"&gt;Colors&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;gray&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-24"&gt;&lt;a href="#cb6-24"&gt;&lt;/a&gt;                &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;ticks&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Ticks&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;time&lt;/span&gt; &lt;span class="fu"&gt;model&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;zone&lt;/span&gt; &lt;span class="dv"&gt;10&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-25"&gt;&lt;a href="#cb6-25"&gt;&lt;/a&gt;                }&lt;/span&gt;
&lt;span id="cb6-26"&gt;&lt;a href="#cb6-26"&gt;&lt;/a&gt;        &lt;span class="op"&gt;...&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-27"&gt;&lt;a href="#cb6-27"&gt;&lt;/a&gt;        }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;さて，ここまではいい感じにできた． 問題は &lt;code&gt;buildScoreHistories&lt;/code&gt; の &lt;code&gt;Color&lt;/code&gt; にどうやってチームごとに違う色を渡すか． &lt;code&gt;LineChart.Colors&lt;/code&gt; には事前に色が用意されていたが全部で22色ぐらいしかない． できればチーム数に応じて可変にしたい．&lt;/p&gt;
&lt;h2 id="color-を付け変える"&gt;Color を付け変える&lt;/h2&gt;
&lt;p&gt;グラフ描写に使うグラフの色はチーム数によって可変にしたい． 色を任意個数だけ生成する方法はないか調べてみたところ，&lt;a href="https://package.elm-lang.org/packages/tesk9/palette"&gt;&lt;code&gt;tesk9/palette&lt;/code&gt;&lt;/a&gt; の &lt;code&gt;Palette.Cubehelix.generate&lt;/code&gt; を使えば実現できそうだ:&lt;/p&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb7-1"&gt;&lt;a href="#cb7-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;#&lt;/span&gt; ただし &lt;span class="dv"&gt;0&lt;/span&gt;&lt;span class="op"&gt;-&lt;/span&gt;&lt;span class="dv"&gt;256&lt;/span&gt; の間だけ有効&lt;/span&gt;
&lt;span id="cb7-2"&gt;&lt;a href="#cb7-2"&gt;&lt;/a&gt;&lt;span class="fu"&gt;generate&lt;/span&gt; : &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt; &lt;span class="dt"&gt;Color&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここで問題が一つ． line-charts は別の &lt;code&gt;Color&lt;/code&gt; パッケージに依存しており，&lt;code&gt;Color&lt;/code&gt; モジュールが衝突して使うことができない！&lt;/p&gt;
&lt;p&gt;困った． とりあえず，フォークして差し替えるしかない． 差し替えたものがコチラ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matsubara0507/line-charts/tree/color-palette"&gt;matsubara0507/line-charts at color-palette&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Elm のビルドツールにはパッケージをいい感じにフォーク先などに変更する方法がない． ざっくり調べてみたところ，フォークしたもの elm-packages にあげて使うか，プロジェクト内にフォークしたリポジトリを直接置いて参照するか． Elm-jp でも相談してみたところ，後者の方が良さそうなのでそうすることにした．&lt;/p&gt;
&lt;h3 id="elm-のパッケージをフォークしたのにa差し替える"&gt;Elm のパッケージをフォークしたのにa差し替える&lt;/h3&gt;
&lt;p&gt;まずは普通に &lt;code&gt;git submodule&lt;/code&gt; をします:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mkdir elm-lib
$ git submodule add git@github.com:matsubara0507/line-charts.git elm-lib/line-charts
$ elm-lib/line-charts
$ git checkout color-palette&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;そしてこのディレクトリも見るように &lt;code&gt;elm.json&lt;/code&gt; を書き換えます:&lt;/p&gt;
&lt;div class="sourceCode" id="cb9"&gt;&lt;pre class="sourceCode diff"&gt;&lt;code class="sourceCode diff"&gt;&lt;span id="cb9-1"&gt;&lt;a href="#cb9-1"&gt;&lt;/a&gt;&lt;span class="dt"&gt;@@ -1,30 +1,40 @@&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-2"&gt;&lt;a href="#cb9-2"&gt;&lt;/a&gt;  {&lt;/span&gt;
&lt;span id="cb9-3"&gt;&lt;a href="#cb9-3"&gt;&lt;/a&gt;      &amp;quot;type&amp;quot;: &amp;quot;application&amp;quot;,&lt;/span&gt;
&lt;span id="cb9-4"&gt;&lt;a href="#cb9-4"&gt;&lt;/a&gt;      &amp;quot;source-directories&amp;quot;: [&lt;/span&gt;
&lt;span id="cb9-5"&gt;&lt;a href="#cb9-5"&gt;&lt;/a&gt;&lt;span class="st"&gt;-         &amp;quot;elm-src&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-6"&gt;&lt;a href="#cb9-6"&gt;&lt;/a&gt;&lt;span class="va"&gt;+         &amp;quot;elm-src&amp;quot;,&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-7"&gt;&lt;a href="#cb9-7"&gt;&lt;/a&gt;&lt;span class="va"&gt;+         &amp;quot;elm-lib/line-charts/src&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-8"&gt;&lt;a href="#cb9-8"&gt;&lt;/a&gt;      ],&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;そして，適当に &lt;code&gt;import LineChart&lt;/code&gt; を追記して &lt;code&gt;elm make&lt;/code&gt; するとどうなるでしょうか？ 残念ながらうまくいきません:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ elm make elm-src/Main.elm --output=static/main.js
-- UNKNOWN IMPORT -------- elm-lib/line-charts/src/Internal/Axis/Values/Time.elm

The Internal.Axis.Values.Time module has a bad import:

    import Time.Extra

I cannot find that module! Is there a typo in the module name?

The &amp;quot;source-directories&amp;quot; field of your elm.json tells me to look in directories
like elm-src, but it is not in any of them. Maybe it is in a package that is not
installed yet?&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Time.Extra&lt;/code&gt; は line-charts が依存しているパッケージで，それが &lt;code&gt;elm.json&lt;/code&gt; に書かれてないというエラーメッセージです． サブモジュール側の依存パッケージは自動で解決してくれない(単純にローカルのソースコードが増えてるだけなので，そりゃそうって感じだ)． なので，自分で書き足す必要がある:&lt;/p&gt;
&lt;div class="sourceCode" id="cb11"&gt;&lt;pre class="sourceCode diff"&gt;&lt;code class="sourceCode diff"&gt;&lt;span id="cb11-1"&gt;&lt;a href="#cb11-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;diff --git a/elm.json b/elm.json&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-2"&gt;&lt;a href="#cb11-2"&gt;&lt;/a&gt;index 30d0662..7c32604 100644&lt;/span&gt;
&lt;span id="cb11-3"&gt;&lt;a href="#cb11-3"&gt;&lt;/a&gt;&lt;span class="dt"&gt;--- a/elm.json&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-4"&gt;&lt;a href="#cb11-4"&gt;&lt;/a&gt;&lt;span class="dt"&gt;+++ b/elm.json&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-5"&gt;&lt;a href="#cb11-5"&gt;&lt;/a&gt;&lt;span class="dt"&gt;@@ -1,36 +1,36 @@&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-6"&gt;&lt;a href="#cb11-6"&gt;&lt;/a&gt;     &amp;quot;dependencies&amp;quot;: {&lt;/span&gt;
&lt;span id="cb11-7"&gt;&lt;a href="#cb11-7"&gt;&lt;/a&gt;         &amp;quot;direct&amp;quot;: {&lt;/span&gt;
&lt;span id="cb11-8"&gt;&lt;a href="#cb11-8"&gt;&lt;/a&gt;             &amp;quot;avh4/elm-color&amp;quot;: &amp;quot;1.0.0&amp;quot;,&lt;/span&gt;
&lt;span id="cb11-9"&gt;&lt;a href="#cb11-9"&gt;&lt;/a&gt;             &amp;quot;bartavelle/json-helpers&amp;quot;: &amp;quot;2.0.2&amp;quot;,&lt;/span&gt;
&lt;span id="cb11-10"&gt;&lt;a href="#cb11-10"&gt;&lt;/a&gt;&lt;span class="va"&gt;+            &amp;quot;debois/elm-dom&amp;quot;: &amp;quot;1.3.0&amp;quot;,&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-11"&gt;&lt;a href="#cb11-11"&gt;&lt;/a&gt;             &amp;quot;elm/browser&amp;quot;: &amp;quot;1.0.1&amp;quot;,&lt;/span&gt;
&lt;span id="cb11-12"&gt;&lt;a href="#cb11-12"&gt;&lt;/a&gt;             &amp;quot;elm/core&amp;quot;: &amp;quot;1.0.2&amp;quot;,&lt;/span&gt;
&lt;span id="cb11-13"&gt;&lt;a href="#cb11-13"&gt;&lt;/a&gt;             &amp;quot;elm/html&amp;quot;: &amp;quot;1.0.0&amp;quot;,&lt;/span&gt;
&lt;span id="cb11-14"&gt;&lt;a href="#cb11-14"&gt;&lt;/a&gt;             &amp;quot;elm/http&amp;quot;: &amp;quot;2.0.0&amp;quot;,&lt;/span&gt;
&lt;span id="cb11-15"&gt;&lt;a href="#cb11-15"&gt;&lt;/a&gt;             &amp;quot;elm/json&amp;quot;: &amp;quot;1.1.3&amp;quot;,&lt;/span&gt;
&lt;span id="cb11-16"&gt;&lt;a href="#cb11-16"&gt;&lt;/a&gt;&lt;span class="va"&gt;+            &amp;quot;elm/svg&amp;quot;: &amp;quot;1.0.1&amp;quot;,&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-17"&gt;&lt;a href="#cb11-17"&gt;&lt;/a&gt;             &amp;quot;elm/time&amp;quot;: &amp;quot;1.0.0&amp;quot;,&lt;/span&gt;
&lt;span id="cb11-18"&gt;&lt;a href="#cb11-18"&gt;&lt;/a&gt;             &amp;quot;elm/url&amp;quot;: &amp;quot;1.0.0&amp;quot;,&lt;/span&gt;
&lt;span id="cb11-19"&gt;&lt;a href="#cb11-19"&gt;&lt;/a&gt;             &amp;quot;elm-community/list-extra&amp;quot;: &amp;quot;8.2.2&amp;quot;,&lt;/span&gt;
&lt;span id="cb11-20"&gt;&lt;a href="#cb11-20"&gt;&lt;/a&gt;&lt;span class="va"&gt;+            &amp;quot;justinmimbs/time-extra&amp;quot;: &amp;quot;1.1.0&amp;quot;,&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-21"&gt;&lt;a href="#cb11-21"&gt;&lt;/a&gt;             &amp;quot;justinmimbs/timezone-data&amp;quot;: &amp;quot;2.1.4&amp;quot;,&lt;/span&gt;
&lt;span id="cb11-22"&gt;&lt;a href="#cb11-22"&gt;&lt;/a&gt;             &amp;quot;krisajenkins/remotedata&amp;quot;: &amp;quot;6.0.1&amp;quot;,&lt;/span&gt;
&lt;span id="cb11-23"&gt;&lt;a href="#cb11-23"&gt;&lt;/a&gt;&lt;span class="st"&gt;-            &amp;quot;terezka/line-charts&amp;quot;: &amp;quot;2.0.0&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-24"&gt;&lt;a href="#cb11-24"&gt;&lt;/a&gt;&lt;span class="va"&gt;+            &amp;quot;myrho/elm-round&amp;quot;: &amp;quot;1.0.4&amp;quot;,&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-25"&gt;&lt;a href="#cb11-25"&gt;&lt;/a&gt;&lt;span class="va"&gt;+            &amp;quot;ryannhg/date-format&amp;quot;: &amp;quot;2.3.0&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-26"&gt;&lt;a href="#cb11-26"&gt;&lt;/a&gt;         },&lt;/span&gt;
&lt;span id="cb11-27"&gt;&lt;a href="#cb11-27"&gt;&lt;/a&gt;         &amp;quot;indirect&amp;quot;: {&lt;/span&gt;
&lt;span id="cb11-28"&gt;&lt;a href="#cb11-28"&gt;&lt;/a&gt;&lt;span class="st"&gt;-            &amp;quot;debois/elm-dom&amp;quot;: &amp;quot;1.3.0&amp;quot;,&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-29"&gt;&lt;a href="#cb11-29"&gt;&lt;/a&gt;             &amp;quot;elm/bytes&amp;quot;: &amp;quot;1.0.8&amp;quot;,&lt;/span&gt;
&lt;span id="cb11-30"&gt;&lt;a href="#cb11-30"&gt;&lt;/a&gt;             &amp;quot;elm/file&amp;quot;: &amp;quot;1.0.5&amp;quot;,&lt;/span&gt;
&lt;span id="cb11-31"&gt;&lt;a href="#cb11-31"&gt;&lt;/a&gt;             &amp;quot;elm/parser&amp;quot;: &amp;quot;1.1.0&amp;quot;,&lt;/span&gt;
&lt;span id="cb11-32"&gt;&lt;a href="#cb11-32"&gt;&lt;/a&gt;&lt;span class="st"&gt;-            &amp;quot;elm/svg&amp;quot;: &amp;quot;1.0.1&amp;quot;,&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-33"&gt;&lt;a href="#cb11-33"&gt;&lt;/a&gt;             &amp;quot;elm/virtual-dom&amp;quot;: &amp;quot;1.0.0&amp;quot;,&lt;/span&gt;
&lt;span id="cb11-34"&gt;&lt;a href="#cb11-34"&gt;&lt;/a&gt;&lt;span class="st"&gt;-            &amp;quot;justinmimbs/date&amp;quot;: &amp;quot;3.2.0&amp;quot;,&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-35"&gt;&lt;a href="#cb11-35"&gt;&lt;/a&gt;&lt;span class="st"&gt;-            &amp;quot;justinmimbs/time-extra&amp;quot;: &amp;quot;1.1.0&amp;quot;,&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-36"&gt;&lt;a href="#cb11-36"&gt;&lt;/a&gt;&lt;span class="st"&gt;-            &amp;quot;myrho/elm-round&amp;quot;: &amp;quot;1.0.4&amp;quot;,&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-37"&gt;&lt;a href="#cb11-37"&gt;&lt;/a&gt;&lt;span class="st"&gt;-            &amp;quot;ryannhg/date-format&amp;quot;: &amp;quot;2.3.0&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-38"&gt;&lt;a href="#cb11-38"&gt;&lt;/a&gt;&lt;span class="va"&gt;+            &amp;quot;justinmimbs/date&amp;quot;: &amp;quot;3.2.0&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-39"&gt;&lt;a href="#cb11-39"&gt;&lt;/a&gt;         }&lt;/span&gt;
&lt;span id="cb11-40"&gt;&lt;a href="#cb11-40"&gt;&lt;/a&gt;     },&lt;/span&gt;
&lt;span id="cb11-41"&gt;&lt;a href="#cb11-41"&gt;&lt;/a&gt;     &amp;quot;test-dependencies&amp;quot;: {&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで無事 &lt;code&gt;elm make&lt;/code&gt; をすることができるようになった．&lt;/p&gt;
&lt;h3 id="palette.cubehelix-を使ってみる"&gt;&lt;code&gt;Palette.Cubehelix&lt;/code&gt; を使ってみる&lt;/h3&gt;
&lt;p&gt;いよいよ &lt;code&gt;Palette.Cubehelix&lt;/code&gt; を使ってみる． そもそも Cubehelix とはなんなのか．&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.mrao.cam.ac.uk/~dag/CUBEHELIX/"&gt;ググった感じこれっぽい&lt;/a&gt;． 宇宙を撮影した画像を描写するときのためのカラースキーマーっぽい(なにが課題なのかはよくわからなんだw)． &lt;code&gt;Palette.Cubehelix.generate :: Int -&amp;gt; List Color&lt;/code&gt; を使うことで最大で256色を返してくれる． 更にどんな感じの色を返してくれるかは &lt;code&gt;generateAdvanced&lt;/code&gt; の方を使い，&lt;code&gt;AdvancedConfig&lt;/code&gt; 型の値を自作することでコントロールできる:&lt;/p&gt;
&lt;div class="sourceCode" id="cb12"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb12-1"&gt;&lt;a href="#cb12-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="kw"&gt;alias&lt;/span&gt; &lt;span class="dt"&gt;AdvancedConfig&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-2"&gt;&lt;a href="#cb12-2"&gt;&lt;/a&gt;    { &lt;span class="fu"&gt;start&lt;/span&gt; : &lt;span class="dt"&gt;Color&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-3"&gt;&lt;a href="#cb12-3"&gt;&lt;/a&gt;    &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;rotationDirection&lt;/span&gt; : &lt;span class="dt"&gt;RotationDirection&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-4"&gt;&lt;a href="#cb12-4"&gt;&lt;/a&gt;    &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;rotations&lt;/span&gt; : &lt;span class="dt"&gt;Float&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-5"&gt;&lt;a href="#cb12-5"&gt;&lt;/a&gt;    &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;gamma&lt;/span&gt; : &lt;span class="dt"&gt;Float&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-6"&gt;&lt;a href="#cb12-6"&gt;&lt;/a&gt;    }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;色々試したところ各引数はこんな感じだった:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;start&lt;/code&gt; は HSL の Hue + Saturation を元に起点を決める&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rotationDirection&lt;/code&gt; は回転方向 (RGB or BGR)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rotation&lt;/code&gt; は回転角を 0-1.5 で指定（小さいほど似た色になる）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gamma&lt;/code&gt; は明暗な色のバランスを 0-2 で指定（0は明るい、2は暗い色が長くなる）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HSLとは RGB とは違う色の表現のし方で，色相（Hue）・彩度（Saturation）・輝度（Lightness）を指定する． 直感的なイメートして，黒から白へこうぐるっと指定した螺旋でカラーパレットを表現する感じ．&lt;/p&gt;
&lt;p&gt;物は試し，repl で色々と試すと良い(色だけに):&lt;/p&gt;
&lt;div class="sourceCode" id="cb13"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb13-1"&gt;&lt;a href="#cb13-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;map&lt;/span&gt; &lt;span class="dt"&gt;Color&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;toHex&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;|&lt;/span&gt; &lt;span class="dt"&gt;Palette&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;generateAdvanced&lt;/span&gt; &lt;span class="dv"&gt;10&lt;/span&gt; { &lt;span class="fu"&gt;start&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Color&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;fromHSL&lt;/span&gt; (&lt;span class="op"&gt;-&lt;/span&gt;&lt;span class="dv"&gt;60&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;span class="dv"&gt;100&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;span class="dv"&gt;0&lt;/span&gt;)&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;rotationDirection&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Palette&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;RGB&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;rotations&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dv"&gt;5&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;gamma&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dv"&gt;0&lt;/span&gt; }&lt;/span&gt;
&lt;span id="cb13-2"&gt;&lt;a href="#cb13-2"&gt;&lt;/a&gt;[&lt;span class="st"&gt;&amp;quot;#000000&amp;quot;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;#311410&amp;quot;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;#3C3F0D&amp;quot;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;#2B6F39&amp;quot;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;#3E8590&amp;quot;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;#8984CC&amp;quot;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;#D490C6&amp;quot;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;#EAB8B1&amp;quot;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;#E5E6CA&amp;quot;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;#FFFFFF&amp;quot;&lt;/span&gt;]&lt;/span&gt;
&lt;span id="cb13-3"&gt;&lt;a href="#cb13-3"&gt;&lt;/a&gt;   : &lt;span class="dt"&gt;List&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なんとこれを Slack に貼ると色を確認できる(賢い)． で，最終的には最初と最後の黒白を抜いて適当に使った．&lt;/p&gt;
&lt;h2 id="おしまい"&gt;おしまい&lt;/h2&gt;
&lt;p&gt;submodule のやつしんどいし，なんか自動で &lt;code&gt;elm.json&lt;/code&gt; を書き換えてくれる CLI ツールでも作ろうかしら．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-11-10-join-haskell-day-2019.html</id><title type="text">Haskell Day 2019 に参加してきた</title><updated>2019-11-10T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-11-10-join-haskell-day-2019.html"/><summary type="html">&lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;11月9日にあった「&lt;a href="https://techplay.jp/event/727059"&gt;Haskell Day 2019&lt;/a&gt;」に参加してきたのでメモ書きです． 裏方もほんの少しだけ手伝ったけど，裏方については公式のブログで(誰かが)書くと思うので割愛． ただ，全部オープンな場でやりとりしてるの気になる方は Haskell-jp slack を見に行くか Haskell-jp の GitHub を漁るといいと思う．&lt;/p&gt;
&lt;h3 id="関数型function-typeを見つめるプログラミング"&gt;関数型(function type)を見つめるプログラミング&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/nobsun"&gt;山下&lt;/a&gt;氏の発表． &lt;a href="https://github.com/nobsun/hday2019/blob/master/doc/ftype.pdf"&gt;発表資料はこちら&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;関数型(プログラミング)の話かとずっと思ってたら関数「型」の話だった(よく読め)． 今回で唯一の Basics なセッション． 特別動くコードは出てこないとのこと． 話の中で &lt;code&gt;A -&amp;gt; B&lt;/code&gt; という関数型があるときに，ドメイン(&lt;code&gt;A&lt;/code&gt; 側)がさらに関数型なのは多くの人たちも慣れて来てる(他の言語の人たちも含め)が，コドメイン(&lt;code&gt;B&lt;/code&gt; 側)が関数型になるのはしっくりこない人が多いらしい．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;f :: (X -&amp;gt; Y) -&amp;gt; Z -- は平気
g :: X -&amp;gt; (Y -&amp;gt; Z) -- はダメらしい(もちろん Haskell はカッコいらない)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;まぁ確かに，他の言語ではあんまり使わないですね． 自分は学生の頃に，なんかのプログラミング言語に慣れる前に C/C++/Java/Ruby/Haskell を学んだから困った記憶ないけど． ちなみに「拡張適用演算子」っていう用語は山下氏の造語らしい．&lt;/p&gt;
&lt;h3 id="hkdhigher-kinded-datatype"&gt;HKD(Higher Kinded Datatype)&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/fumieval"&gt;fumieval&lt;/a&gt; 氏の発表． &lt;a href="https://assets.adobe.com/public/b93f214d-58c2-482f-5528-a939d3e83660"&gt;発表資料はこちら&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;Haskell のレコードの各フィールドに共通の性質を付加したいことはしばしばある． 多相な型パラメータ &lt;code&gt;h :: Type -&amp;gt; Type&lt;/code&gt; を付けてあげれば実現可能． &lt;a href="https://hackage.haskell.org/package/barbies"&gt;barbies&lt;/a&gt;パッケージを使うと自動でやってくれるし，fumieval 氏が作った &lt;a href="https://hackage.haskell.org/package/extensible"&gt;extensible&lt;/a&gt; パッケージはその機能もサポートしてる(2014~)． 僕は2017年ぐらいから愛用していますありがとうございます．&lt;/p&gt;
&lt;p&gt;他にも &lt;code&gt;TangleT&lt;/code&gt; という機能を紹介してましたが，なんとこのサイトを生成してる Hakyll プログラムにも &lt;code&gt;TangleT&lt;/code&gt; を使ってます笑． &lt;code&gt;TangleT&lt;/code&gt; はレコードのフィールド間に依存関係がある場合に有用で，フィールドの評価順を制御できるようになる． これと，静的サイトのレンダリング順を組み合わせたらいいんじゃね？ってなってやってみた(別段効果があったわけじゃないけど)．&lt;/p&gt;
&lt;h3 id="しんさんきぼうghcのderivingテクノロジー"&gt;「しんさんきぼう」GHCのderivingテクノロジー&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/aiya000"&gt;aiya000&lt;/a&gt; 氏の発表． &lt;a href="https://aiya000.github.io/Maid/haskell-day-2019-deriving/#/"&gt;発表資料はこちら&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;表題の通り，型クラスのインスタンス宣言を容易にしてくれる &lt;code&gt;deriving&lt;/code&gt; 機能の最近の話． 標準のを含め，現在 GHC には &lt;code&gt;deriving&lt;/code&gt; は4種類もあり，特に &lt;code&gt;DerivingVia&lt;/code&gt; GHC 拡張はすごいぞ！って感じです． で，さらに4種類の &lt;code&gt;deriving&lt;/code&gt; を整理して綺麗に記述するために &lt;code&gt;DerivingStrategies&lt;/code&gt; という GHC 拡張があるとのこと．&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb2-1"&gt;&lt;a href="#cb2-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;{-# LANGUAGE DerivingStrategies #-}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-2"&gt;&lt;a href="#cb2-2"&gt;&lt;/a&gt;&lt;span class="kw"&gt;newtype&lt;/span&gt; &lt;span class="dt"&gt;SomeBody&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;SomeBody&lt;/span&gt; &lt;span class="dt"&gt;Person&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-3"&gt;&lt;a href="#cb2-3"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;deriving&lt;/span&gt;          (&lt;span class="dt"&gt;Show&lt;/span&gt;)                &lt;span class="co"&gt;-- 標準&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-4"&gt;&lt;a href="#cb2-4"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;deriving&lt;/span&gt; stock    (&lt;span class="dt"&gt;Eq&lt;/span&gt;)                  &lt;span class="co"&gt;-- 標準&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-5"&gt;&lt;a href="#cb2-5"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;deriving&lt;/span&gt; anyclass (&lt;span class="dt"&gt;Visible&lt;/span&gt;)             &lt;span class="co"&gt;-- DeriveAnyClass&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-6"&gt;&lt;a href="#cb2-6"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;deriving&lt;/span&gt; &lt;span class="kw"&gt;newtype&lt;/span&gt;  (&lt;span class="dt"&gt;Enum&lt;/span&gt;)                &lt;span class="co"&gt;-- GeneralizedNewtypeDeriving&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-7"&gt;&lt;a href="#cb2-7"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;deriving&lt;/span&gt;          (&lt;span class="dt"&gt;Bounded&lt;/span&gt;) via &lt;span class="dt"&gt;Person&lt;/span&gt;  &lt;span class="co"&gt;-- DerivingVia&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(発表資料より引用)ここまでのコードは書いたことも見たこともないけど笑&lt;/p&gt;
&lt;p&gt;ちなみに，&lt;code&gt;DerivingVia&lt;/code&gt; は僕も前に「&lt;a href="https://speakerdeck.com/konn/ben-dang-hasugoi-newtype"&gt;本当はすごい newtype&lt;/a&gt;」っていう資料を読んでびっくりした記憶． 今回紹介した git-plantation では CLI の「なんらかの型の ID を列挙する」引数から「なんらかの型」を探す部分の ID 側に &lt;code&gt;DerivingVia&lt;/code&gt; を使った． 思うにただの &lt;code&gt;Int&lt;/code&gt; や &lt;code&gt;String&lt;/code&gt; になりやすい ID 系の型は &lt;code&gt;DerivingVia&lt;/code&gt; との相性がいい気がする．&lt;/p&gt;
&lt;h3 id="haskellメタプログラミングによるegisonのパターンマッチの実装"&gt;HaskellメタプログラミングによるEgisonのパターンマッチの実装&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/egisatoshi"&gt;江木&lt;/a&gt;氏の発表． &lt;a href="https://www.egison.org/download/20191109HaskellDay.pdf"&gt;発表資料はこちら&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;egisatoshi 氏が学生時代(?)から作成し続けてるプログラミング言語 &lt;a href="https://www.egison.org"&gt;Egison&lt;/a&gt; の強力なパターンマッチング機能を Haskell に導入した話． &lt;a href="https://github.com/egison/egison-haskell"&gt;リポジトリは多分これ&lt;/a&gt;． Egison の機能を他の言語に突っ込むというのは Scheme ですでにやっていたが，Haskell の場合は型付けをしなくちゃいけないらしく苦労したとのこと． もう，すっごい GHC の型拡張機能をふんだんに使ってました(多くの人に手伝ってもらったらしい)．&lt;/p&gt;
&lt;p&gt;なお，スライドはめっちゃ長く，時間が足りなかったので全部のページを丁寧に説明してはなかった笑． あとで読んでだって．&lt;/p&gt;
&lt;p&gt;僕は Egison を学生の頃から知ってて，ずーっと何かに使えないかなぁって考えてるけど思いつかない． Egison パターンマッチングは，再帰の「全探索する部分」と「条件付けて絞り込む部分」の前者をサボることができるようになるらしい． つまり，順番を無視するために似たようなパターンを記述しなくて済むようになる． 順番を無視したい場合，うーん，CLI の引数とか？ 今度試してみるか(なんか違う気もする)．&lt;/p&gt;
&lt;p&gt;あ，ちなみに，最後にステマ(?)してた Egison Jornal は全部買ってます． 面白いです．&lt;/p&gt;
&lt;h3 id="関数と型で理解する自動微分"&gt;関数と型で理解する自動微分&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/lotz84"&gt;lotz&lt;/a&gt; 氏の発表． &lt;a href="https://speakerdeck.com/lotz84/guan-shu-toxing-deli-jie-suruzi-dong-wei-fen"&gt;発表資料はこちら&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;ぱっと見，一番好評だった気がする． 急に導関数が欲しくなる時がありますよね？ってことで自動で導関数を導出する方法を紹介します，って感じの話です(?)． Haskell で自動微分するためには &lt;a href="https://github.com/ekmett/ad"&gt;ad&lt;/a&gt; パッケージを使うといいらしい． ちなみにこのパッケージは，今回の Haskell Day のスペシャルゲストとしていらしゃった ekmett 氏が作ったものだ． で，動作を理解するために &lt;code&gt;diff&lt;/code&gt; 関数を自作してみたっていう流れでした．&lt;/p&gt;
&lt;p&gt;本来，型エラーになって欲しい部分が型エラーにならないので，幽霊型や存在型を使って実現している． といった Haskell 型機能のアドバンスドな話から，自動微分というアカデミックな話まで，盛りだくさんでした． というか話が上手．&lt;/p&gt;
&lt;h3 id="ghcjs-による-web-フロントエンド開発"&gt;GHCJS による Web フロントエンド開発&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/y-taka-23"&gt;チャシャ猫&lt;/a&gt;氏の発表． &lt;a href="https://guide.elm-lang.jp/architecture/"&gt;The Elm Architecture&lt;/a&gt; を表現した GHCJS の &lt;a href="https://github.com/dmjio/miso"&gt;Miso&lt;/a&gt; パッケージをライブコーデイング形式で紹介． 基本ライブコーディングだった結果，スライドはないのかな．&lt;/p&gt;
&lt;h3 id="haskell-で作る競技型イベントの裏側"&gt;Haskell で作る競技型イベントの裏側&lt;/h3&gt;
&lt;p&gt;僕の発表． &lt;a href="https://www.slideshare.net/noob00/haskell-191796924"&gt;発表資料はこちら&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;去年の6月ぐらいから少しずーつ作ってた &lt;a href="https://github.com/matsubara0507/git-plantation"&gt;git-plantation&lt;/a&gt; の紹介． 話題が逸れるから言わなかったけど「作り直すか〜」ってやり始めたのは技術書典5のネタ用でした笑． もちろん，作り直す意義は発表した通りですよ．&lt;/p&gt;
&lt;p&gt;extensible・Servant・Elm・STM・Dhall など前回・今回の Haskell Day で出たような話題をふんだんに使ってるので「詳しくは〜」って形で引用させてもらった． この発表以外の多くは，Haskell の強力な「型」でいろんな問題を解決したよって感じの話でしたが，僕はその解決した機能をふんだんに使ってリアルアプリケーションをサクッと作ったって感じなのです． 巨人の肩に乗ろう．&lt;/p&gt;
&lt;h3 id="大規模数値計算を支える-haskell-pragmatic-haskell-in-large-scale-numerical-computation"&gt;大規模数値計算を支える Haskell ── Pragmatic Haskell in Large-Scale Numerical Computation&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/konn"&gt;石井&lt;/a&gt;氏の発表． &lt;del&gt;内容があれなので写真は最初のスライドだけで，的なこと言ってたのでスライドは公開されないんじゃないかな&lt;/del&gt;&lt;a href="https://speakerdeck.com/konn/da-gui-mo-shu-zhi-ji-suan-wozhi-eru-haskell-nil-nil-pragmatic-haskell-in-large-scale-numerical-computation-nil-nil"&gt;公開されました&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;GoS2014(?)で ekmett 氏にメンターをしてもらったとのこと．すごい． で，発表の内容は社長(?)が前に言っていた「&lt;a href="https://twitter.com/hiroki_f/status/1135160082373652480"&gt;弊社のプロダクトはモナドで各々知っているべき領域を区分して仕事を分けています。ですので、全部知ってなくても、仕事ができます。&lt;/a&gt;」というツイートの詳しい話(代弁)． どうやら，物理系ソルバを(Haskellで)記述してる人たちが，それに注力できるように本質的な部分以外は Haskell の魔法(モナド)で隠蔽しているという感じの話らしい． 今回はその魔法についてたくさん紹介してくれた． 例えば，前にも出てきた依存型や拡張可能レコード，他にも Tagless final など． 高度な Haskell (というか GHC)の機能を Real World に消化しておりすごかった(小並感)．&lt;/p&gt;
&lt;h3 id="special-talk-cadenza-building-fast-functional-languages-on-the-jvm"&gt;Special Talk: Cadenza: Building fast functional languages on the JVM&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/ekmett/"&gt;ekmett&lt;/a&gt; 氏の特別講演． これまたライブコーデイングでした(まさかの被り)． タイトルでも言及してる &lt;a href="https://github.com/ekmett/cadenza"&gt;Cadenza ってのはこれっぽい&lt;/a&gt;． JVM の方は最近よく耳にする(?) &lt;a href="https://www.graalvm.org/"&gt;GraalVM&lt;/a&gt; のことだった． ライブコーデイングの内容は単純型付きラムダ計算をささっと作ってるみたいだった．&lt;/p&gt;
&lt;h3 id="lt"&gt;LT&lt;/h3&gt;
&lt;p&gt;だいたい間に合ってない笑 特にメモも何も取ってなかったのでリンクの列挙だけ．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/as-capabl"&gt;アズなんとかさん&lt;/a&gt;氏の「&lt;a href="https://docs.google.com/presentation/d/1TiDWz3zLUwEWgpzXfgVZFIib6JtYriB03TVgHsimJC0"&gt;3D Model in Haskell&lt;/a&gt;」&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/cyclone-t"&gt;CycloneT&lt;/a&gt;氏の「HaskellでIoTやってます」
&lt;ul&gt;
&lt;li&gt;業務の紹介なのでスライドは公開されてないかも&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jabaraster"&gt;河野&lt;/a&gt;氏の「&lt;a href="https://docs.google.com/presentation/d/1xcdZ42lF64b_S0wZfi1Er-3YTs8H_Ob15BO3kpuRSMU"&gt;QuoraでHaskellへの愛を語る&lt;/a&gt;」&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/coord-e"&gt;coord_e&lt;/a&gt; 氏の「&lt;a href="https://gitpitch.com/coord-e/slide-type-class-impl"&gt;Haskellで作ってわかる型クラス&lt;/a&gt;」
&lt;ul&gt;
&lt;li&gt;型クラス機能自体を作る方の話だった笑(間に合ってはない)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/minoki"&gt;mod_poppo&lt;/a&gt; 氏の「&lt;a href="https://drive.google.com/file/d/1YGKjl8S-LlfuB8yrHnKSK5G5MGsP9xd3/view"&gt;Abstract Typeclasses&lt;/a&gt;」&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kazu-yamamoto"&gt;kazu_yamamoto&lt;/a&gt; 氏の「&lt;a href="http://www.mew.org/~kazu/material/2019-gc.pdf"&gt;GHCのGC&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="おしまい"&gt;おしまい&lt;/h2&gt;
&lt;p&gt;さて，来年のネタ仕込みを始めるか(発表するかはさておき)．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/11/09/110030</id><title type="text">今日は Haskell Day 2019 の日です</title><updated>2019-11-09T18:10:03+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/11/09/110030"/><summary type="html">咳が止まらない状態で非常に厳しいですが、来ていますので、自分用のメモを残しておきます。 関数型(function type)を見つめるプログラミング / 山下さん 関数の型、 Haskell では第一級 リスト型 a が型なら [a] も型 タプル a b が型なら (a, b) も型 タプル a b が型なら a -&gt; b も型 a が domain 、 b が codomain 高階関数型 domain が関数 (a -&gt; b) -&gt; c codomain が関数 a -&gt; (b -&gt; c) こちらは意識されにくい 2変数関数 (a, b) -&gt; c Haskell 以外でもよく使う セク…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/11/03/121103</id><title type="text">今日は YAPC::Nagoya::Tiny 2019 の日です</title><updated>2019-11-03T18:09:50+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/11/03/121103"/><summary type="html">来ましたので、自分用のメモを残しておきます。 開会の挨拶 名古屋から来た人、東海から来た人 ランチはルーセントタワーB1が穴場 Tiny とは？ 新たなコミュニティの形成。 小規模で開催しやすい メインはトーク ハッシュタグ: #yapcjapan フロア貸切ではないので注意 Perlでもできる！ PerlウェブサービスにDocker, ECS, CDKを導入してよかったこと、大変だったこと / Windymeltさん Perlアプリケーションの環境構築は大変 plenv, MySQL Redice, Imagemagic, bzip2 などなど デザイナーさんやプランナーさん Docker-…</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-10-31-join-hacktoberfest-2019.html</id><title type="text">Hacktoberfest 2019 なので PR を4つ以上出してみた</title><updated>2019-10-31T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-10-31-join-hacktoberfest-2019.html"/><summary type="html">&lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;毎年恒例，去年に引き続き Hacktoberfest に参加しました．&lt;/p&gt;
&lt;p&gt;&lt;img src="/assets/join-hacktoberfest-2019/status.jpg"&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;すごい量になっているけど個人のリポジトリや参加してる Org アカウントにも PR を作ってやっていたのでこんな量になった. 実際に、自分の所属となんも関係のない PR は以下の4つ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/phadej/github/pull/407"&gt;Update EditRepo type by matsubara0507 · Pull Request #407 · phadej/github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/drone/drone-go/pull/47"&gt;Change &lt;code&gt;RepoPatch.Counter&lt;/code&gt; type to &lt;code&gt;int64&lt;/code&gt; from &lt;code&gt;int&lt;/code&gt; by matsubara0507 · Pull Request #47 · drone/drone-go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/elm-jp/guide/pull/170"&gt;「型: 型を読む」の原文を追従して翻訳 by matsubara0507 · Pull Request #170 · elm-jp/guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/orangain/textlint-plugin-review/pull/16"&gt;Update textlint version to 11.4 by matsubara0507 · Pull Request #16 · orangain/textlint-plugin-review&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="phadejgithub"&gt;phadej/github&lt;/h2&gt;
&lt;p&gt;このリポジトリは Haskell の GitHub API クライアントライブラリだ． 愛用している． ただ，GitHub API の開発速度はそこそこ速く，機能が追いついてないことが多々あり，自分はよく&lt;a href="https://github.com/matsubara0507/github/tree/myext"&gt;フォークして必要なものを雑に足したブランチ&lt;/a&gt;を利用している． もっとマメに本家へ PR を出せば良いのだが，ついついサボってしまい… ということで，一つだけだが出してみた．&lt;/p&gt;
&lt;p&gt;この PR はリポジトリを編集する API に使うための PATCH 用のデータ型が古くなっており，僕が必要なフィールドが足りなかったので作った差分だ． ついでに，リポジトリ自体の型やリポジトリを作る型のフィールドも古くなっていることに気づいた． 僕は必要ではないし，めんどくさかったから最初はそのまま出したが，「直した方がいいですか？」と尋ねたら「ぜひ」と返ってきたので直した． ちょっと差分が大きくなってしまったのでコメントを書いているうちにマージされた笑&lt;/p&gt;
&lt;h2 id="dronedrone-go"&gt;drone/drone-go&lt;/h2&gt;
&lt;p&gt;これは &lt;a href="https://drone.io"&gt;Drone CI&lt;/a&gt; という OSS の CI/CD プラットフォームの，本家が提供している Go 言語の API クライアントだ． 同様の &lt;a href="https://github.com/matsubara0507/drone-haskell"&gt;Haskell 用 API クライアント&lt;/a&gt;を整備していた(ドキュメントが少ないので Go の実装を参照している)ら型が間違っているような気がしたので PR にした．&lt;/p&gt;
&lt;p&gt;PR に拙い英語でコメントしている通り，&lt;code&gt;Counter&lt;/code&gt; というフィールドは &lt;code&gt;Repo&lt;/code&gt; 型では &lt;code&gt;int64&lt;/code&gt; だが，&lt;code&gt;RepoPatch&lt;/code&gt; では &lt;code&gt;int&lt;/code&gt; だった． &lt;a href="https://github.com/drone/drone/blob/0b4e5156ae1111463145e522e206eacb6d036960/handler/api/repos/update.go#L30-L40"&gt;API サーバー側の実装&lt;/a&gt;を見てみると &lt;code&gt;int64&lt;/code&gt; として扱っていたので &lt;code&gt;RepoPatch&lt;/code&gt; 側を修正する PR を出した． 無事マージされるといいなぁ．&lt;/p&gt;
&lt;h2 id="elm-jpguide"&gt;elm-jp/guide&lt;/h2&gt;
&lt;p&gt;これは &lt;a href="https://guide.elm-lang.org/"&gt;Elm Guide&lt;/a&gt; というサイトの翻訳リポジトリだ． 翻訳元は Elm の作者がメンテナンスしている，Elm のチュートリアルである． Elm-jp という日本ユーザーグループで翻訳をしている(僕も所属してるので無関係ではなかった)．&lt;/p&gt;
&lt;p&gt;最近，大量の本家との差分を &lt;a href="https://github.com/negiboudu"&gt;negiboudu&lt;/a&gt; 氏が取り込んでくれた． その結果，差分ができたので1ページだけ翻訳したという PR だ． ちなみに，まだまだあるので誰でも翻訳 PR お待ちしております．&lt;/p&gt;
&lt;h2 id="orangaintextlint-plugin-review"&gt;orangain/textlint-plugin-review&lt;/h2&gt;
&lt;p&gt;これは文章用の linter ツール，textlint の &lt;a href="https://github.com/kmuto/review"&gt;Re:VIEW&lt;/a&gt; プラグインのリポジトリだ． Re:VIEW は技術書典用の頒布物作成の折に使っており，textlint で軽い静的検査をしている． 技術書典7のときに，このプラグインで「plugin-review が依存している textlint が古い」という警告が出ているので直した． そのときのものを PR にしただけだ．&lt;/p&gt;
&lt;p&gt;ちょっと差分がでかいし，長く更新がないのでマージされないような気がする しかし，まぁ同じような警告が気になった人が辿り着いて助けになればいいなぁぐらいの温度感．&lt;/p&gt;
&lt;h2 id="おしまい"&gt;おしまい&lt;/h2&gt;
&lt;p&gt;いろんなジャンルのリポジトリに PR が出せて満足． あとでTシャツの出さなきゃ．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/10/24/Zenza_Bronica_S_%E7%B3%BB%E7%94%A8%E6%8E%A5%E5%86%99%E3%83%AA%E3%83%B3%E3%82%B0</id><title type="text">Zenza Bronica S 系用接写リング</title><updated>2019-10-24T00:43:20+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/10/24/Zenza_Bronica_S_%E7%B3%BB%E7%94%A8%E6%8E%A5%E5%86%99%E3%83%AA%E3%83%B3%E3%82%B0"/><summary type="html">Zenza Bronica S 系用接写リングの説明書（をスキャンしたものをプリントしたもの）を入手したので文字データに起こした。 docs.google.com この接写リングは4個（C-A C-B C-C C-D）で1組になっています 使用できるレンズも 40 mm～200 mm までと巾広く 標準レンズ使用の場合で等倍までの近接撮影ができます 4個の接写リングは撮影の目的に合わせ ご自由に組合せてご使用ください 別表は S2 型・C2 型カメラに 接写リングと交換レンズを組合せた場合の撮影倍率と露出倍数の関係を示します （表） ● 被写体に近接するに従って フィルム面とレンズの距離は遠く…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/10/19/171847</id><title type="text">A Regular Expression Matcher in Rust</title><updated>2019-10-19T17:18:47+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/10/19/171847"/><summary type="html">なんかの本でCで数十行のバックトラックを使った正規表現のマッチャが紹介されてた記憶があるんだけど、ビューティフルコードだったっけ？#regexfesta— hiratara (@hiratara) October 18, 2019 ということで、ソースコードが書かれている記事を見つけた。 https://www.cs.princeton.edu/courses/archive/spr09/cos333/beautiful.html Rust で書き直したものを文末に貼っておく。 rstfmt が if 文を改行してくれるせいで行数が膨らんでCの実装より数行長いが、ほぼ同じ感覚で書ける。 do …</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/10/18/182013</id><title type="text">今日は Regex Festa の日です</title><updated>2019-10-18T21:57:06+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/10/18/182013"/><summary type="html">今日は Regex Festa の日です Regex Festa に来ていますので、自分のためのメモを残しておきます。 挨拶 wi-fiとお手洗い、喫煙所の案内 Opt Technologies さんについて QRコード読むとアンケートあります いろいろな正規表現、いろいろなオートマトン / @sinya8282 さん 正規表現は好きだが、難しい面も面白い面もある 学部の頃は世界最速のgrepを書いてたりした 院では学術よりな研究 Shibuya.pm#16 が正規表現オンリーなイベントだった 東京素晴らしい！ 8年の時を経て復活 正規言語の魅力 オートマトンという単純な計算モデル 台数モデル…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/09/21/124858</id><title type="text">結局rustの標準入出力はどう書けばいいの？</title><updated>2019-09-21T16:07:52+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/09/21/124858"/><summary type="html">現状。 StdoutLock は LineWriter を噛んでるので、 BufWriter の意味があるのか謎。ベンチマーク取らねば。 use std::io::{self, BufRead, BufWriter, Write}; fn main() { let stdio = io::stdin(); let mut input = stdio.lock(); let stdout = io::stdout(); let mut output = BufWriter::new(stdout.lock()); let mut line = String::new(); while input…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/init-ghc-8-8-1</id><title type="text">HaskellやっていくGHC8.8.1令和元年白露の候</title><updated>2019-09-20T21:45:08+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/init-ghc-8-8-1"/><summary type="html">GHC 8.8.1 が出たので雑に環境を整えていきます。 OS: Ubuntu 18.04 LTS on VirtualBox on Windows screenshot GHC, Cabal 最近は ghcup で入れている。 $ ghcup upgrade $ ghcup list --tool all $ ghcup install 8.8 $ ghcup install-cabal latest ~/.ghcup/bin と ~/.cabal/bin にPATHが通っていない場合は通しておく。 stack は手になじまない感じがして最近使っていない。 stack のいいところとしてスク…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/09/14/171210</id><title type="text">emacsで自動改行して欲しくない</title><updated>2019-09-14T17:12:10+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/09/14/171210"/><summary type="html">特に端末へコピペとかするときに、本当に迷惑なので。 init.el をイジる。まず、 (setq indent-line-function 'insert-tab) なんて記述があったので削除（誰がなんのために入れたんだ？）。 次に、 (electric-indent-mode 0) を追加。 これでほとんどのモードで直ったのだけど、 markdown-mode だけは駄目だったので、ダメ押しの (setq markdown-indent-on-enter nil) を追加。 RET 押下時の indent-and-new-item の呼び出しを抑制できるらしい（勝手にそんなことしないで）。 …</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/09/07/115437</id><title type="text">単純で頑強なメッセージングシステム、franz</title><updated>2019-09-08T21:41:20+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/09/07/115437"/><summary type="html">Haskell製の新しいメッセージングシステムfranz(フランツ)の紹介。 github.com 背景 取引所にあるマシンで取引プログラムを実行するのが我々の仕事だが、朝8時に起動したらあとは昼寝したり酒を飲んだりというわけにはいかない。モニタリングしたり、分析のためにデータを残しておく必要がある。そのため、プログラムによって解析しやすい形でログを出力する。 今までは複数の種類のレコードをシリアライズし、一つのファイルに連結させる独自のフォーマットを10年近く使っていたが、書いていて恥ずかしくなるような多数の問題を抱えていた。 柔軟性が乏しい: 32bit整数や文字列などの単純な値しか格納で…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/09/03/190018</id><title type="text">今日はRustのLT会 Shinjuku.rs #6 @FORCIAの日です</title><updated>2019-09-03T20:32:30+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/09/03/190018"/><summary type="html">ブログ枠で RustのLT会 Shinjuku.rs #6 @FORCIA に来ています。ブログ枠が何をすればいいのかあまりわかってませんが、とりあえずブログにメモを残しておきます。 開会 会場、懇親会はフォルシア株式会社さんが提供(ありがとうございます！) 次回 11/19 で一周年 Rust初心者がRay Tracer書いてみた / keisukefukudaさん 前回も初心者、相変わらず初心者 Ray Tracer は楽しいので、新しい言語を練習するときに良い Ray Tracing とは？ 3Dのオブジェクトを平面に描画する ちゃんと計算する オフラインで時間をかけて アルゴリズム、プ…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2019/08/26/090000</id><title type="text">jqのGo実装 gojq を作りました！ ― スタックマシン型インタープリタによるイテレータセマンティクスの実装</title><updated>2019-08-26T09:00:03+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2019/08/26/090000"/><summary type="html">jqはとても便利なコマンドです。 JSONを返すAPIを実装するときや、SaaSのAPIから特定の情報を抜き出してシェル変数に代入するときなど、web開発や運用には欠かせないツールとなっています。 しかし、私にとってjqのクエリを一発で書くのは容易ではなく、思い通りの出力が得られないことがよくありました。 難しいエラーメッセージに悩まされて、jqで書くのを諦めて別の言語で書き直すこともありました。 jqの十八番と思える場面で使いこなせないのは、なかなか悔しいものがあります。 ツールを使うのが難しいなら、同じものを作ってしまえばよいのです。 jqの全ての機能を実装する jqを言語としてきちんと書…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/08/24/151450</id><title type="text">rustのcombineで入力されたトークンによる場合分け</title><updated>2019-08-24T15:14:50+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/08/24/151450"/><summary type="html">combine を使ったときに、例えば識別子のパース時に予約語を弾く方法。 最初は and_then を使うのかと思ったのだけど、 エラーの型指定がえらく面倒 だったので諦め。というか、なんか絶対違うだろうと思って別の方法を模索。 Parser のドキュメントに以下の例がある。これだ。 digit() .then(|d| { if d == '9' { value(9).left() } else { unexpected_any(d).message("Not a nine").right() } }) ということで、 then を使うと Parser を返す処理を書けるので、ここで une…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/02/windows-windows10.html</id><title type="text">[windows] Windows10セットアップ・設定項目のメモ</title><updated>2019-08-22T13:32:52.909+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/02/windows-windows10.html"/><summary type="text">Windows10セットアップ時の設定項目、インストールアプリの備忘録。


スタートメニュー・タスクバーの設定

タスクバーの設定 

小さいタスクバーボタンを使う：オン 
[スタート]ボタンを右クリックするかWindowsキー＋Xキーを押したときに表示されるメニューで、コマンドプロンプトをWindows PowerShellに置き換える：オフ
タスクバーボタンを結合する

「タスクバーに入りきらない場合」を選択

タスクバーをすべての ディスプレイに表示する：オフ



 Quick Launcherを表示する

クイック起動を復活する 
Windows 10 タスクバーにクイック起動を表示する

スタートメニューにコントロールパネルを表示する

「Windows 10」のコントロールパネルを表示する方法について

スタートメニューにピン止めするアプリ：

Windowsシステム</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/08/15/195448</id><title type="text">Minecraft 1.14サーバーを運用してみた</title><updated>2019-08-15T19:54:48+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/08/15/195448"/><summary type="html">Minecraft 1.14 "Village and Pillage"は、サブタイトルの通り村人と略奪者をテーマにしたアップデートだ。 主な楽しみ方 村人の取引システムが一新され、以前よりもバリエーションに富み、かつリーズナブルな取引ができるようになった。余ったアイテムを換金したり、有益なアイテムを入手できるようになるだろう。 ランタン、焚火などの新たな光源や、壁や階段の変種、さらには鐘なども追加され、建築の楽しみも大きく増した。だが、良いことばかりではない――新たなイリジャー(邪悪な村人)、ピリジャーが出現するようになったのだ。条件を満たすと発生する襲撃から村を守る死闘、そして安全な拠点づ…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2019/04/04/210000</id><title type="text">Makefileの変数展開はレシピの実行前に行われる</title><updated>2019-08-14T10:31:52+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2019/04/04/210000"/><summary type="html">makeなんてよく使うものだから分かっているつもりだったけど実はよく分かっていなかったのが、変数展開がどのタイミングで行われるかということ。 itchyny.hatenablog.com Makefileでの := は simply expanded variable といって一度しか展開されないが、 = は参照するたびに展開される。 DATE = $(shell date) .PHONY: all all: @echo $(DATE) @$(shell sleep 3) @echo $(DATE) @$(shell sleep 3) @echo $(DATE) これは、 $(DATE) を参…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/08/07/120015</id><title type="text">rust の publicsuffix は遅過ぎる</title><updated>2019-08-07T12:03:57+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/08/07/120015"/><summary type="html">rust で Public Suffix List を扱うクレートの速度が遅過ぎるので、パッチを書いた。最右部のラベル ( .jp .com など) でルールを区分けして、後は愚直に線形探索という方法だったので、そりゃあ遅すぎるよねって感じ。 github.com 実は Perl の Domain::PublicSuffix でも速度の問題にあたって書き直したことがあるのだけど、このときはドメインのバリデーションが重過ぎるのが原因で、 このコミット で解消されている 1 。 rust の publicsuffix でも バリデーション は比較的重いので、この点も改善できるのかもしれない。 とこ…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/07/30/200423</id><title type="text">今日は Roppongi.rs #1 の日です</title><updated>2019-07-30T20:38:11+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/07/30/200423"/><summary type="html">職場から近いので Roppoingi.rs に来ました。自分のためにメモを残しておきます。ハッシュタグは #roppongirs 。 Rustがいかにエンジニアの脳を楽にさせているかをC++初心者が語る〜関数篇〜 / @natsu_no_yuki さん C++歴15年の初心者 rvalue reference, template特殊化などが使えるのは初心者らしい rust歴は3日 プログラミングの歴史からrustの良さを考える C言語: メモリ管理を何もしてくれない プログラマが明示的にメモリを確保したり・・・ (C、C++のことです) C++ と rust の比較 C++で関数呼び出しをする…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/07/29/%E9%96%A2%E6%95%B0%E3%81%AE%E3%83%A1%E3%83%A2%E5%8C%96</id><title type="text">関数のメモ化</title><updated>2019-07-30T13:06:40+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/07/29/%E9%96%A2%E6%95%B0%E3%81%AE%E3%83%A1%E3%83%A2%E5%8C%96"/><summary type="html">ブログに書いてみるとよく分からなくなってきました 🙃 Haskell-jp で回答をもらいました。 @lotz84_ さんの記事や GHC のプロファイルに出てくる CAF がよく分かってなかったのをまとめる。 qiita.com fact のメモ化 lotz さんの記事の階乗 fact 関数を題材にする。 fact :: Int -&gt; Integer fact 0 = 1 fact n = fromIntegral n * fact (n-1) lotz さんの記事よれば、次の実装だとメモ化されるとのこと。 -- | 関数をメモ化する関数 memoize :: (Int -&gt; a) -&gt; I…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/07/30/112634</id><title type="text">CloudNative Days Tokyo 2019 登壇こぼれ話 #CNDT2019</title><updated>2019-07-30T11:26:34+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/07/30/112634"/><summary type="html">先日行われた CloudNative Days Tokyo 2019 で、Kubernetes のスケジューリングについて発表してきました。公募 CFP 枠です。 今回の発表は、実は技術的に目新しい内容をほとんど含んでいません。各トピックは今までいくつかの勉強会で LT として発表しているものがほとんどです。 ただし、普段の発表では時間が短いこともあって断片的になりがちだった内容を 40 分の枠で再構成し、スケジューリングについて初めて聞く人にとっても入り口のギャップを少なく、できるだけ学習曲線がなだらかになるようにすることを念頭に置いてプレゼンを組み立てました。 当日の Twitter でも…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/07/27/195704</id><title type="text">Strassen の行列積を求めるアルゴリズム</title><updated>2019-07-27T21:57:53+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/07/27/195704"/><summary type="html">アルゴリズムイントロダクションで、行列積を求める奇妙なアルゴリズムを見つけたので rust で実装した。簡単のため、行列の表現には ndarray を用いている。 #[macro_use] extern crate ndarray; use ndarray::prelude::*; type Matrix = Array2&lt;i32&gt;; type MatrixView&lt;'a&gt; = ArrayView2&lt;'a, i32&gt;; type MatrixViewMut&lt;'a&gt; = ArrayViewMut2&lt;'a, i32&gt;; fn strassen_multiply_inner (a: MatrixVi…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/07/23/225523</id><title type="text">rustのsliceとlen()</title><updated>2019-07-23T22:55:53+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/07/23/225523"/><summary type="html">こう書くと、 fn main() { let mut a = [1, 2, 3, 4, 5]; let x = &amp;mut a[3..a.len()]; println!("{:?}", x); } こう怒られる。 error[E0502]: cannot borrow `a` as immutable because it is also borrowed as mutable --&gt; src/main.rs:3:23 | 3 | let x = &amp;mut a[3..a.len()]; | -----^------- | | | | | immutable borrow occurs here…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/07/06/151347</id><title type="text">rust の perl-xs を触る</title><updated>2019-07-19T16:30:43+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/07/06/151347"/><summary type="html">rust の perl-xs なるリポジトリを見つけたので触ってみた。 Perl の carton と rust の cargo が動く環境1であれば、 README に書かれている通りリポジトリを clone してきて以下で簡単に試せる。 $ carton install $ carton exec -- 'cd t &amp;&amp; perl Makefile.PL &amp;&amp; make test' perl-xs は Perl API を rust から使いやすいようにラップしたものという位置づけになる。 Perl API への低レベルなバインディングは perl-sys で提供され、 Rust のコード…</summary></entry><entry><id>https://kurokawh.blogspot.com/2019/07/mac-el-capitan.html</id><title type="text">[mac] El Capitanへのアップグレード関連作業まとめ</title><updated>2019-07-13T19:19:56.684+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2019/07/mac-el-capitan.html"/><summary type="text">YosemiteからEl Capitan（10.11.2）へアップグレードしました。旧環境で起動できていたアプリケーションが起動できなくなったり、コマンドが見つからなくなる、といった問題が発生しましたが一通り解決できたので、その内容をまとめておきます。

＃ポストし忘れてた･･･。今更な情報ですが自分の備忘録の意味もあるので公開。


El Capitanの新機能に伴う問題・設定の修正

OS X El Capitan：日本語入力のライブ変換モードをオフにする

[システム環境設定] - [キーボード]を開く
[入力ソース]タブを選択
「ライブ変換」のチェックを外す





MacPortsのアップデート

Yosemite環境でインストールしたMacPortsはそのままでは利用できない。以下のようなエラーメッセージが表示される。
% port qv installed
Error: </summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/07/07/215220</id><title type="text">rustで「サイコロを転がす」を解く</title><updated>2019-07-07T21:52:20+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/07/07/215220"/><summary type="html">最近 rust を勉強し始めたので、オフラインリアルタイムどう書くで一番簡単な問題（と思っている） サイコロを転がす を解いた。破壊的更新を戦略的に使えるのは、この程度の難易度のサンプルであれば書いてて大変気持ちがいい。 yhpg-rs/lib.rs at ord12rotdice · hiratara/yhpg-rs · GitHub</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/07/06/213029</id><title type="text">Docker Meetup Tokyo #31 で Kubernetes 1.15 について話してきました</title><updated>2019-07-06T21:30:29+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/07/06/213029"/><summary type="html">先日行われた Docker Meetup Tokyo #31 で、Kubernetes 1.15 の Scheduler 周りの新機能について発表してきました。 Kubernetes の Pod Preemption を利用すると、より重要な Pod にノードの計算リソースを割り当てる優先的に割り当てることができ、コストの最適化につながります。しかし優先度の低い Pod は実行中に強制的に終了されることとなり、長時間かかるバッチ処理が途中で中断されてしまうという弊害もあります。 本スライドでは、Kubernetes 1.15 から Alpha 機能として導入された NonPreemptingP…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/07/05/155146</id><title type="text">Kubernetes 1.15: SIG Scheduling の変更内容</title><updated>2019-07-05T15:51:46+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/07/05/155146"/><summary type="html">はじめに 本記事では、Kubernetes 1.15 のリリースノート からスケジューリングに関する内容をまとめました。 なお、SIG Scheduling の変更内容については既に他の方から翻訳記事が出ていますが、本記事は後発ということもあり、すべての機能を実際に触ってみた上でサンプルコードを添えて解説していきます。 Kubernetes 1.15: SIG Scheduling の変更内容 1.15 の新着情報 (1.15 What’s New) 今回、完全な変更ログは https://relnotes.k8s.io/ で、絞り込み可能なフォーマットで公開されています。確認とフィードバック…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/06/24/222657</id><title type="text">トレイト境界の F: FnMut(u8) -&gt; bool という記法について</title><updated>2019-06-24T22:26:57+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/06/24/222657"/><summary type="html">rust で where の中でトレイト境界を書ける。そして、クロージャはトレイトで実現されている。ってことなんだけど、クロージャを表す型変数のトレイト境界の書き方はなんとも気持ちが悪い。 struct Cacher&lt;T&gt; where T: Fn(u32) -&gt; u32 { calculation: T, value: Option&lt;u32&gt;, } Closures: Anonymous Functions that Can Capture Their Environment - The Rust Programming Language トレイト境界と言えば T: Display + Clo…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/06/22/101608</id><title type="text">VSCodeからWSL上のRLSを使うメモ (2)</title><updated>2019-06-22T10:16:08+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/06/22/101608"/><summary type="html">ある朝突然、 cargo test が VSCode Insiders から呼べなくなった。これを踏んでた。どうやら昨日の夕方に 1.36.0-insider がアップデートされて壊れたようだ（アップデートされた記憶はあまりない）。 github.com 以下に従って5月のビルド 1.35.0-insider に戻したら問題なく動いた。 Insider らしくてとてもよい（よくない）。 Access older Insider builds · Issue #46089 · microsoft/vscode · GitHub</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/06/19/104356</id><title type="text">VSCodeからWSL上のRLSを使うメモ</title><updated>2019-06-19T10:50:33+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/06/19/104356"/><summary type="html">悲しいことにうまく動せていない。時間が解決してくれる気はする。 その1. Remote WSL環境 開発者版 VSCode insiders が必要。 VSCode とは別のアプリとしてインストールできるので気にせず入れて良い。Remote WSL 拡張を入れればそれで終わり。 その2 で使う useWSL は使わない。ほぼうまく動くが、なぜか rustfmt による整形が動かない上に、 Output View へログを一行も吐いてくれない*1ので調査もできなくて困る。 その2. RLS拡張のuseWSLを使う RLS拡張 が想定しているのはおそらくこちらの使い方。 しかし、まず rustup…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/06/13/155557</id><title type="text">Traversable API</title><updated>2019-06-15T15:54:35+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/06/13/155557"/><summary type="html">与えられたConnectionを通じて、指定したKeyに対応するByteStringを取り出すような、シンプルなKey-ValueストアのAPIを考えてみよう。 type Key = ByteString fetchOne :: Connection -&gt; Key -&gt; IO ByteString ネットワーク越しにたくさんのデータを取得したいとき、何度もこれを呼び出していては効率が悪い。一度にまとめて取り出せるように拡張するなら、このように書ける。 fetchMany :: Connection -&gt; [Key] -&gt; IO [ByteString] 悪くはないが、この型はたとえば「["fo…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/05/29/194539</id><title type="text">Fun Fun Functional (1) で Haskell と Firebase を使ってライブコーディングしてきました</title><updated>2019-05-29T19:45:39+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/05/29/194539"/><summary type="html">先日行われた Fun Fun Functional (1) で、Haskell と Firebase を使った Web アプリの作り方について発表してきました。 使用した要素技術は、GHCJS 上のフレームワーク Miso と、Fireabse SDK を呼び出すための DSL である JSaddle です。 GHCJS は Haskell のソースコードを JavaScript に変換するコンパイラで、GHC をフォークすることによって開発されています。 github.com Miso は GHCJS 上で The Elm Architecture を実装するためのフレームワークです。Mis…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/04/16/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_5_%E3%81%B5%E3%82%8A%E3%81%8B%E3%81%88%E3%82%8A</id><title type="text">技術書典 5 ふりかえり</title><updated>2019-04-16T00:44:52+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/04/16/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_5_%E3%81%B5%E3%82%8A%E3%81%8B%E3%81%88%E3%82%8A"/><summary type="html">え？6？いやいや 5 ですよ？ techbookfest.org 池袋 慣れ親しんだ秋葉原の地を飛び出して池袋にやってきました。 めちゃくちゃ広くてびっくりです。秋葉原通運会館からアキバスクエアにやってきたときも思いましたが、同じ感想がもう一度。 ガラス張りじゃなくなったので外の行列見てやばいやばい言えなくなったのはほんのちょっとだけ残念です。 か61 kakkun61 という名前でもろもろアカウントを取っているのですが、今回は卓番号が「か61」ということでまさに自分のための場所でした。覚えやすい！ そんな弊卓の様子です。 落 新刊落としました…… フィルムカメラに目覚めた結果土日をそれに使っ…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/04/01/185927</id><title type="text">楽園へ行きたい</title><updated>2019-04-01T19:01:12+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/04/01/185927"/><summary type="html">楽園へ行きたい。 森と平原に囲まれた、街のはずれの小屋に住みたい。 朝は、小鳥たちのさえずりと窓から射し込む陽の光で目覚めたい。 昼は、コーヒーと焼き菓子を用意して一服したい。 夜は、天の河の向こうに思いを馳せながら眠りたい。 月曜日は大学に行き、エルフの先生の下で言語学を学びたい。 火曜日は研究室にこもり、ドラゴンの教授と研究に没頭したい。 水、木曜日は道具鍛治と修繕の仕事をしたい。 金曜日は都に向かい、品を売って食材と情報を仕入れたい。 土曜日は酒場に集まり、仲間たちと杯を交わしたい。 日曜日は使い魔を連れ、公園をゆったり散歩したい。 春は、花々を眺めながら、渡り鳥たちにしばしの別れを告げ…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/03/30/131932</id><title type="text">dockerで古いバージョンのperlを使う</title><updated>2019-03-30T19:05:32+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/03/30/131932"/><summary type="html">Docker Hub に perlのイメージ が上がっていて便利なのだけど、残念ながら 5.24 までしかない。検索してみたけど他に良さげなイメージもなかった。 仕方がないので 自分でビルド をして上げておいた（自分で使う用）。幸い、以下のリポジトリにいい感じの Dockerfile が落ちてるので、これを落としてきて自前でビルドするだけで済んだ。 github.com 追記 5.14 と 5.16 はビルドできなかった。</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/03/30/131344</id><title type="text">LTSのubuntuを16.04から18.04へアップグレードした</title><updated>2019-03-30T13:13:44+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/03/30/131344"/><summary type="html">以下に書いてあるとおり。 wiki.ubuntu.com 基本的に sudo do-release-upgrade を叩いただけ。sshd の config を置き換えていいかみたいなことを聞かれたので、触った覚えがないので不安を覚えつつ置き換えた。後は、質問に答えながら延べで数時間放置していたら終わっていた。 たしかに新しくはなったが、何が変わったかわからないレベル。 emacs がなぜか無くなっていたようなので、 $ sudo apt install emacs25-nox した。今のとこそのくらい。</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/06/12/090000</id><title type="text">コマンドラインがさらに便利になるfillinコマンドを作りました！</title><updated>2019-03-22T00:59:05+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/06/12/090000"/><summary type="html">fillinというコマンドラインツールを作成しました。 コマンドの一部を変数化して、別の履歴に保存しておけるツールです。 ステージング環境と本番環境のように、同じコマンドで複数の環境を切り替えるのに便利です。 zshの本 (エッセンシャルソフトウェアガイドブック)作者: 広瀬雄二,A5出版社/メーカー: 技術評論社発売日: 2009/06/17メディア: 単行本（ソフトカバー）購入: 11人 クリック: 126回この商品を含むブログ (37件) を見る どうして作ったの コマンド履歴って便利ですよね。 私はよくコマンド履歴からコマンドを選んで実行しています。 シェルに付属しているデフォルトの履…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/03/21/172101</id><title type="text">特級シリアライズライブラリ、winery 1.0解禁</title><updated>2019-03-21T18:06:56+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/03/21/172101"/><summary type="html">fumieval.hatenablog.com あれから9ヶ月…wineryのバージョン1.0をついにリリースした。 前回までのあらすじ データの保存や通信に直列化は不可欠の概念である。 binaryなどの直列化ライブラリは、レコードのフィールド名などの情報が欠けており、構造が変わると互換性を持たせることができない。 一方、JSONやCBORなどのフォーマットで愚直にフィールド名などを残すと極めて冗長になり、時間・空間効率が悪い。 コード生成が前提のProtobufなどはHaskellの既存のデータ構造との相性がよくない。 そんな現状に殴り込みをかけたのがwineryだ。値を「スキーマ」と「デ…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2019/03/15/090000</id><title type="text">joのGo実装 gojo を作りました！</title><updated>2019-03-20T17:50:02+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2019/03/15/090000"/><summary type="html">joというJSONを組み立てるコマンドがあって、これは2016年からある便利なCLIツールなのですが、昨日急に思い立ってGo実装を作りました。 go get -u github.com/itchyny/gojo/cmd/gojo brewでもインストールできます。 brew install itchyny/tap/gojo 使い方はこんな感じ。 $ gojo foo=bar qux=quux {"foo":"bar","qux":"quux"} $ gojo -p foo=bar qux=quux { "foo": "bar", "qux": "quux" } $ gojo -a foo ba…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/03/14/159265</id><title type="text">円周率の16進数表現100億桁目を求めてみた！ ― 円周率の世界記録をどのように検証するか ―</title><updated>2019-03-15T16:17:18+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/03/14/159265"/><summary type="html">あなたは円周率を何桁言えますか。3.14159…という、あの数字です。 円周率の小数部分は無限に続き、循環することもありません。 古来より、数学者は円周率の値を様々な幾何学的な近似や公式を用いて計算してきました。 その桁数は計算機の発明により飛躍的に伸び、収束の速い公式の発見や効率の良いアルゴリズムの発明などによって加速してきました *1。 5年前、私がまだ学生だった頃、円周率1億桁の計算に挑んだことがありました。 私にとって高精度計算の初めての挑戦で、様々な試行錯誤で苦労したのをよく覚えています。 itchyny.hatenablog.com 2017年現在、円周率計算の世界記録は22兆桁で…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/03/15/123532</id><title type="text">minillaは便利</title><updated>2019-03-15T12:35:32+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/03/15/123532"/><summary type="html">songmu さんの WEB+DB の記事を読むのが良い。 gihyo.jp リリーステストで、 Hoge.pm requires 5.010 due to explicit requirement で死んだときは Perl version 指定が正しいか確認する。 // とか使ってると 5.8 系はサポートできないというか、流石に 5.8 系は平成半ばにしてすでに終わっているのではないか。 xt/minilla/spelling.t ......... skipped: no ~/.spellunker.en が出てたときは touch ~/.spellunker.en するとPODのスペル…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/03/15/114042</id><title type="text">CircleCIのsave_caheするPATHとdocker imageの相違</title><updated>2019-03-15T11:40:42+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/03/15/114042"/><summary type="html">.circleci/config.yml に以下のように書いておいたら、ある時からキャッシュが効かなくなってハマった。 version: 2 jobs: build: docker: - image: perl:5.28 steps: - checkout - restore_cache: key: cacheminil-v1 - run: name: Install Minilla command: | cpanm Minilla - save_cache: key: cacheminil-v1 paths: - "/usr/local/bin" - "/usr/local/lib/perl…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/03/02/161800</id><title type="text">mariadbのdokcer imageの10.2と10.3でmysql.dbが違う</title><updated>2019-03-02T16:18:00+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/03/02/161800"/><summary type="html">https://hub.docker.com/_/mariadb 10.2 の方では、 MYSQL_USER で test_ データベースを作れない。 mariadb:10.2 の mysql.db 。 MariaDB [mysql]&gt; SELECT Host, Db, User, Create_priv FROM db; +------+--------------+----------+-------------+ | Host | Db | User | Create_priv | +------+--------------+----------+-------------+ | % …</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2019/03/01/090000</id><title type="text">gore 0.4.0をリリースしました！</title><updated>2019-03-01T09:00:03+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2019/03/01/090000"/><summary type="html">Go言語のREPL、goreの0.4.0をリリースしました。 id:motemenさんに連絡をとって、goreのコミット権をいただきました。 最初はpull requestが溜まっていたので片付けて、細かいバグ修正などを行いました。 しばらく触っていると慣れてきたので、新機能も実装して入れました。 かなり便利になっているので、ぜひアップデートして (またはインストールして) お使いください。 go get -u github.com/motemen/gore/cmd/gore バグ修正 特定のケースで Evaluated but not used というエラーが出ることがあるのを修正しました …</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/02/26/Servant_%E3%81%A8_Relational_Record_%E3%81%A7%E3%82%A6%E3%82%A7%E3%83%96%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E9%96%8B%E7%99%BA</id><title type="text">Servant と Relational Record でウェブアプリケーション開発</title><updated>2019-02-27T15:29:35+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/02/26/Servant_%E3%81%A8_Relational_Record_%E3%81%A7%E3%82%A6%E3%82%A7%E3%83%96%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E9%96%8B%E7%99%BA"/><summary type="html">Servant とは Servant は型レベルプログラミングによって、ウェブアプリとしてのインターフェースと実装との差異を防ぐことのできるウェブアプリフレームワークです。 haskell-servant.readthedocs.io 日本語記事としては lotz さんのこちらが分かりやすいので、参考にしてください。 qiita.com Haskell Relational Record とは Haskell Relational Record は言語内 DSL によって SQL を生成するもので、正しくない SQL に相当するものは型エラーとなります。 khibino.github.io こ…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/02/27/032421</id><title type="text">Docker Meetup Tokyo #28 で Scheduler のカスタマイズについて話してきました</title><updated>2019-02-27T03:24:21+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/02/27/032421"/><summary type="html">先日行われた Docker Meetup Tokyo #28で、Kubernetes Scheduler の挙動をカスタマイズする方法について発表してきました。 なお Scheduler のカスタマイズについては、つい最近 Kubernetes Meetup Tokyo #16 でも発表しています。ドキュメント類へのリンクも含めてまとめたものが以下の記事です。 ccvanishing.hateblo.jp 両方のスライドを見比べて頂ければ分かる通り、内容としてはオーバラップしている部分がかなりあります。 ただし、前回はあくまでも Scheduling Framework の解説であったのに対し…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/02/15/181806</id><title type="text">旅のチェックリスト</title><updated>2019-02-25T15:44:26+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/02/15/181806"/><summary type="html">筆者が旅に出る際に確認する項目をまとめた。 事前の準備 渡航ビザ: 必要な場合もあるので事前に確かめよう。 ESTA(アメリカの場合): どんな理由であれUSに入国する場合申請する必要がある。大抵すぐ承認されるが、遅くとも出発の72時間前に済ませるべきである。 宿: 好みに応じてホテルでもAirBnBなどで民泊を予約しても。後者はキッチンが用意されているところもある。 交通手段: 電車は大抵の場合当日で大丈夫だが、もちろん船舶や航空機の場合は予約が必須である。 冷蔵庫の整理: 日持ちしないものは消費してしまおう。 携帯するもの 財布: 財布は現金やカードを収納する。リスク回避の観点から財布は省…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/02/22/193916</id><title type="text">Kubernetes Meetup Tokyo #16 で Scheduling Framework について話してきました</title><updated>2019-02-22T19:39:16+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/02/22/193916"/><summary type="html">先日行われた Kubernetes Meetup Tokyo #16 で、現在 Scheduling SIG で進められているプロジェクト Scheduling Framework について発表してきました。 Kubernetes では、Pod をどの Node に配置するかを決める手続きをスケジューリングと呼びます。 古典的な Kubernetes の用途、すなわち通常の long-running なサーバ群の管理においては、Pod のスケジューリングは比較的シンプルな問題でした。すなわち、Node の障害時でも可用性が保てるように Pod を複数の Node に散らし、一度立ち上がった P…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/02/12/191002</id><title type="text">ある期間内に更新されたデータを素早く検索できるモデル</title><updated>2019-02-13T15:49:35+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/02/12/191002"/><summary type="html">特定の技術とは関係ない、誰でも思いつきそうな、でも便利なお話。 こんなケースを考えてみよう。 人気のトレーディングカードゲームAugur Unlimitedを扱うショップ「しらさぎ商店」では、1000種類にも及ぶカードの買い取り・販売をしている。記録のため、カードごとに日時、価格、在庫数などをまとめたレコードを毎日データベースに書き込んでいる。 新着・売り切れや、価格の変化などを、指定された期間について一覧で表示するようなWebページを作りたいとオーナーは考えた。しかし、ユーザーからの要求ごとに全データの差分を取るのは、あまり効率的な手段とはいえない。レアなカードでもない限り価格は一定であるこ…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/01/30/Haskell_Ctrl-C_%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D</id><title type="text">Haskell Windows Ctrl-C 動作確認</title><updated>2019-01-30T23:53:07+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/01/30/Haskell_Ctrl-C_%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D"/><summary type="html">コード コードは前回記事と同じです（再掲）。 Git リポジトリーはこちら。 import Control.Concurrent import Control.Monad import System.Exit import System.IO import System.Win32.Console.CtrlHandler main :: IO () main = do tid &lt;- myThreadId let handler event = do if event == cTRL_C_EVENT then do putStrLn "goodbye!" killThread tid pure …</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/01/25/Haskell_%E3%81%A7_Ctrl-C_%E3%82%92%E5%88%B6%E5%BE%A1%E3%81%99%E3%82%8B%EF%BC%88Windows%EF%BC%89</id><title type="text">Haskell で Ctrl-C を制御する（Windows）</title><updated>2019-01-25T11:26:15+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/01/25/Haskell_%E3%81%A7_Ctrl-C_%E3%82%92%E5%88%B6%E5%BE%A1%E3%81%99%E3%82%8B%EF%BC%88Windows%EF%BC%89"/><summary type="html">Ctrl-C 等の割り込みの扱い方です。 tl;dr System.Win32.Console.CtrlHandler を使います。 Ctrl-C が押されたらクロージングの処理を伴って終了するプログラムを書いてみます。 import Control.Concurrent import Control.Monad import System.Exit import System.IO import System.Win32.Console.CtrlHandler main :: IO () main = do tid &lt;- myThreadId let handler event = do i…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/try-linear-types</id><title type="text">GHCの線形型プロトタイプを試すだけ</title><updated>2019-01-08T02:01:09+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/try-linear-types"/><summary type="html">GHCに線形型を導入すると以下のような良い事があるらしい。 リソース安全性: ファイルハンドル、ソケット、DBコネクションのようなリソースについて、これらを提供するAPIの設計者が安全な使用を強制できる。リソース解放後のアクセス、二重解放、解放忘れを防止することができる。 レイテンシ: リソースAPIの実装をうまくやるとoff-heap(GCの対象外)でリソースを確保・解放できる。GC対象が少なくなることによりGCによってプログラムが停止する時間を減らせる。 並列性: 過剰な直列化を強要しない。リソース安全性を保ちつつもできる限り並列化できる。 詳しくはproposal。 この記事では線形型G…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2018/12/31/210000</id><title type="text">2018年を振り返って</title><updated>2018-12-31T21:00:02+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2018/12/31/210000"/><summary type="html">今年は仕事を淡々とこなしつつ、自分の技術の方向性に悩みながらも、ずいぶんとだらけてしまった一年だったと思います。技術面での成長に伸び悩んでいます。 Mackerelのコードの整理や改善は無限にやることがあるのですが、平日夜や休日をそれで潰す生活をしていると、頭の切り替えがうまく行かなくなり仕事中に集中できなくなってしまいました。フロントエンドはかなりコードの整理が進み、SPA化できたのはよかったですね。コンテナ周りはチョットワカルと言えるようになりたいですね。 春先にバイナリエディタをリリースしました。まだ実装したい機能はたくさんありますが、リリースしたら燃え尽きてしまってあまりコードを触れて…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/12/27/213853</id><title type="text">戊戌の追憶</title><updated>2018-12-28T09:01:05+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/12/27/213853"/><summary type="html">この記事は、筆者が過ごした2018年を簡潔に振り返り、その経験を糧とすることを狙う。 1月 第二鰓弓由来側頸嚢胞という先天異常が原因で首が化膿し、激痛に苦しんでいた。対人関係のトラブルなどもあり軽い錯乱状態にあったのか、自分が知らない間に高い買い物をすることがあった。 drinkery: Boozy streaming library というストリーム処理ライブラリを作った。当初はすべて酒関係の用語を用いていたが、批判を受けてそこはやめた。今思えばそれで正解だった気がする。 パフォーマンスはモナディックなAPIを持つライブラリの中ではトップクラスで、双方向性や多入力多出力のような発展的な機能も…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/12/21/201108</id><title type="text">Elias-Fano encoding: 単調増加する数列をほぼ簡潔に表現する</title><updated>2018-12-22T01:15:08+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/12/21/201108"/><summary type="html">Haskell Advent Calendar 2018 20日目 単調増加する自然数の列を、最低限のビット数で表現するための興味深いテクニックと、Haskellによる実装を紹介する。 Elias-Fano encoding この手法は、簡潔データ構造に分類されるもの一つであるが、厳密には条件を満たさないため疑似簡潔データ構造と呼ばれる。1970年代、Peter EliasとRobert Mario Fanoによって独立して発見された。 例題として1, 1, 4, 10, 17, 22, 23, 30という列をエンコードしてみよう。まず、それぞれの数を上位3ビットと下位2ビットに分割する。列の…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/12/06/195433</id><title type="text">Kubernetes 1.13: SIG Scheduling の変更内容</title><updated>2018-12-06T19:54:33+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/12/06/195433"/><summary type="html">はじめに 本記事では、Kubernetes 1.13 の CHANGELOG からスケジューリングに関する内容をまとめました。 主な変更点 https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.13.md#sig-scheduling 1.13 における SIG Scheduling の取り組みは主に安定性に焦点を当てており、いくつかの大きな機能の導入は次のバージョンまで延期することになりました。特記すべき変更として次に挙げる 2 点があります。 #69824: Taint based Eviction の有効化 Ta…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/11/24/232705</id><title type="text">We Are JavaScripters! @26th で Elm と Firebase の連携について話してきました</title><updated>2018-11-24T23:27:05+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/11/24/232705"/><summary type="html">先日行われた We Are JavaScripters! @19th で Elm と JavaScript ライブラリの連携について発表してきました。 Elm の初心者向けの解説としてよく Msg, Model, update からなるアーキテクチャが挙げられていますが、今回の発表ではもう一歩だけ進んで、Cmd と Sub を使って Elm から JavaScript のライブラリを呼ぶ方法について解説しました。 サーバとしての JS ライブラリ 他の AltJS では JavaScript を呼び出す際、ソースコードの内部に埋め込む形になるのが普通です。 例えば Haskell を Java…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/11/19/Windows_%E3%81%A7_Haskell_iconv_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B</id><title type="text">Windows で Haskell iconv をビルドする</title><updated>2018-11-19T19:13:49+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/11/19/Windows_%E3%81%A7_Haskell_iconv_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B"/><summary type="html">GHC 8.0 以前についてはこちらを参考に。 teratail.com GHC 8.2 以降で stack を使う場合をここではとりあげる。 確信はないのだが、GHC 8.2 から GHC 自体が iconv に依存しなくなったのか、$(stack path --programs)\ghc-8.0.2\mingw\lib から libiconv.a と libiconv.dll.a がなくなっているため GHC 8.0 以前のようにビルドができなくなっている。 なので、まず libiconv を取得する。 stack exec -- pacman -S libiconv-devel インスト…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/09/30/Leica_M3</id><title type="text">Leica M3</title><updated>2018-11-15T10:47:47+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/09/30/Leica_M3"/><summary type="html">Lomography Konstruktor F・Diana Mini から始まったフィルムカメラ熱ですが一瞬で行くところまで行ってしまった感じです。 Leica M3。 現在まで続く M 型 Leica の始祖を買ってしまいました。1962年製の56歳です。 （この写真を撮ったレンズも Asahi Super Takumar 55mm F1.8 なので60年代のレンズです。） Leica 意識前 初めはフィルムカメラの入門機としていくつかの記事に紹介されていた Asahi Pentax SP か Olympus OM-1（M-1）かと考えて中古カメラ屋めぐりをしていました。 このころはひたす…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/10/31/150056</id><title type="text">「名前の束縛」という名の束縛</title><updated>2018-10-31T18:20:45+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/10/31/150056"/><summary type="html">実用的なプログラミングにおいて、名前と概念を結びつける「束縛」はほぼ必須の概念である。しかし、その言葉には大きな誤解と混乱が根付いていた。 事の発端となったのは「Haskellにおいては、変数は値を代入するものではなく、値に束縛するものである」という議論である*1 *2。しかし、これは大きな誤解を孕んでいる。言葉の定義に立ち返ってその誤解を解いていこう。 束縛とバインディング 実は「束縛」には二つの意味がある。一つは、数学的な意味での変数の束縛*3、もう一つは、識別子と実体の結合という意味での束縛*4だ。 前者は変数の導入と言い換えることもできる。ラムダ計算におけるラムダ抽象と変数の関係もこれ…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/05/17/180426</id><title type="text">Kubernetes Meetup Tokyo #10 で Pod の Preemption について話してきました</title><updated>2018-10-23T16:31:12+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/05/17/180426"/><summary type="html">だいぶ日が空いてしまって今更ですが、先日行われた Kubernetes Meetup Tokyo #10 で、v1.8*1 から導入された新機能 Preemption について発表してきました。 Preemption は、Kubernetes クラスタのリソースが不足した際に、優先度が低い Pod を追い出して優先度が高い Pod の稼働を保証する仕組みです。 当日は時間が不足気味だったので、説明不十分だったかなと思われる点についていくつか補足しておきます。 Priority の指定について スライド中では詳しく説明しませんでしたが、ユーザは直接 Pod（や Deployment 中の Pod…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2018/10/15/100000</id><title type="text">Mackerelのグラフを端末で描画するコマンドmkrgを作りました</title><updated>2018-10-17T23:52:07+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2018/10/15/100000"/><summary type="html">Mackerelのグラフを端末で見れたらいいなと思ったので作ってみました。 github.com 使い方 $ go get -u github.com/itchyny/mkrg/cmd/mkrg $ mkrg コマンドを叩くと、そのホストのメトリックを取ってきてグラフを表示します。 何も考えずにコマンドを叩けば、システムメトリックのグラフを表示してくれます。 私はiTerm2を使っているので、とりあえずiTerm2では画像を表示できるようにしています。それ以外の端末では点字を使って頑張って表示します。 Mackerel サーバ監視[実践]入門作者: 井上大輔,粕谷大輔,杉山広通,田中慎司,坪内…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/10/02/203205</id><title type="text">猫でもわかる Vertical Pod Autoscaler</title><updated>2018-10-02T20:32:05+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/10/02/203205"/><summary type="html">先日行われた Kubernetes Meetup Tokyo #13 で、Vertical Pod Autoscaler (VPA) について発表してきました。 VPA は、各コンテナの Resource Request の値を自動的に調整してくれるコンポーネント群です。必要とするリソース（CPU、メモリ）量があらかじめ推測しにくいアプリケーションに対して、実績に基づいてそれらしい値を決めたい場合に効果を発揮します。 本記事ではスライドの補足として、VPA が動作する流れをクラスタ上での実際の挙動を通じて確認し、また内部実装についても踏み込んで解説します。 なお、本記事中で引用している仕様やソ…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/09/26/191231</id><title type="text">elm/time の使い方</title><updated>2018-09-26T19:12:31+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/09/26/191231"/><summary type="html">はじめに 先日、Elm v0.19 がリリースされました。公式ライブラリのリポジトリが elm-lang から elm に変更され、その中身も大きく再構成されています。 本記事では、これらの変更のうち特に時刻や日付の扱いに関する部分について、新しい API の使い方を含めて簡単に解説します。 v0.18 における時刻の扱い v0.18 では、時刻を扱う機能は標準パッケージ elm-lang/core の中で提供されていました。時刻を扱う Time モジュールと日付を扱う Date モジュールで、それぞれデータ型や関数が定義されているのが特徴です。 なお、旧バージョンのライブラリは現在 Elm …</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/konstruktor-f</id><title type="text">プラモデルカメラ Lomography Konstruktor F</title><updated>2018-09-13T16:25:09+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/konstruktor-f"/><summary type="html">本来はフジヤカメラに行くことが目的だった。 「カメラバカにつける薬 in デジカメ Watch」でも取り上げられてて、その前から気になってたのもあって中野に行った。 特に買うつもりもなかったので雰囲気だけ知れればいいやというようにそそくさと出たのだが、ジャンク館が中野ブロードウェイにあるということで行ってみた。 そういえば中野ブロードウェイも気になってたんだし一石二鳥だった。 するとコイデカメラがあった。Lomography Konstruktor F があった。 動くしくみを理解しながら自分で組み立てるのが好きでカメラも好きな自分が惹かれるのは当然という感じだった。 そのときは散財する予定は…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/04/27/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_4_%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%9F</id><title type="text">技術書典 4 にサークル参加した</title><updated>2018-09-12T13:03:31+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/04/27/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_4_%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%9F"/><summary type="html">4月22日に開催された『技術書典 4』にサークル参加してきました。 techbookfest.org 技術書典は1と2に個人で参加して3は会社として参加して今回の4は会社と個人と2サークルにかかわっていました。 超技術書典を抜くと皆勤です。 個人サークル 既刊として『遠回りして学ぶ Yesod 入門』を増刷し、新刊は『手続き Haskell』を持っていきました。 doujin.kakkun61.com doujin.kakkun61.com 数字 売り上げ部数は、どんぶり勘定ですが（特に Yesod 本のダウンロードカードが完全に記憶による）下記の通りとなりました。 Yesod 本 紙 + P…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/09/01/%E3%80%8EYesod_%E5%85%A5%E9%96%80%E3%80%8F%E5%95%86%E6%A5%AD%E8%AA%8C%E5%8C%96</id><title type="text">『Yesod 入門』商業誌化</title><updated>2018-09-01T08:26:27+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/09/01/%E3%80%8EYesod_%E5%85%A5%E9%96%80%E3%80%8F%E5%95%86%E6%A5%AD%E8%AA%8C%E5%8C%96"/><summary type="html">同人誌で発売していた『遠回りして学ぶ Yesod 入門』がこのたびインプレス R&amp;D より『Haskell で作る Web アプリケーション 遠回りして学ぶ Yesod 入門』として商業誌化されることになりました。 www.impressrd.jp 同人誌版からの変更点は主に、 日本語が読みやすくなった 対応バージョンが上がった 点です。章が増えたり減ったりはしていません。あと、表紙がかわいくなりました。かわいい。 商業誌では Amazon と honto にてオンデマンド印刷の紙の書籍も購入できるようになっています。紙はこれまで即売会でしか販売していなかったので初めて通信販売で買えるようにな…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/09/01/%E5%88%9D%E3%83%95%E3%82%A3%E3%83%AB%E3%83%A0</id><title type="text">初フィルム</title><updated>2018-09-01T07:50:07+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/09/01/%E5%88%9D%E3%83%95%E3%82%A3%E3%83%AB%E3%83%A0"/><summary type="html">厳密にいうと小学校の旅行などで「写ルンです」を使ったりしたことがあるので、初フィルムじゃないんだけど自分で装填するものとしては初ということで。 中野のコイデカメラで自分でプラモデルのように組み立てるカメラを見つけて「なんだこれは！？」と調べていたら Lomography にあてられてどうしても自分でも撮りたくなって中古の Lomography Diana Mini を買った。 それで2本撮ったので現像・スキャンしてもらってきた。（本当はもう1本もあったんだけどダメにした。） 70枚撮った中で奇跡的に手ぶれもなくピントも合っている1枚。 鏡筒の向かって左のレバーがシャッターボタンなんだけどこれが…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/08/23/211858</id><title type="text">詳解！ Elm における Fuzzing</title><updated>2018-08-23T21:18:58+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/08/23/211858"/><summary type="html">先日行われた We Are JavaScripters! @23rd で、Elm のテストフレームワーク elm-test に搭載されている Fuzzing 機能について発表してきました。 Fuzzing を利用するとテストデータを自動で生成することができるため、例えば「encode と decode を行うと元に戻る」といった、入力に依存しない 関数の性質に関するテスト をより簡単かつ効率的に実装することができます。 さらに、後で詳しく解説する通り、elm-test の Fuzzer にはバグが起こりやすいエッジケースを集中的に生成してくれるというメリットもあります。 elm-test の使…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/08/16/Windows_%E3%81%A7_haskell-ide-engine_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B</id><title type="text">Windows で haskell-ide-engine をビルドする</title><updated>2018-08-16T17:34:50+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/08/16/Windows_%E3%81%A7_haskell-ide-engine_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B"/><summary type="html">手順 1. ソースコード取得。 git clone git@github.com:haskell/haskell-ide-engine.git 2. Unicode を扱う ICU の古いバージョンが要るので取得。 自分の使うバージョンの text-icu の changelog を見て、必要な ICU のバージョンを探す。執筆時点では 53 だった。 http://site.icu-project.org/download/53#TOC-ICU4C-Download 任意の場所に展開する。以降、展開先の箇所を $icu と表記する。 $icu\bin64 にある dll の名前を変える。（要…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/08/01/055608</id><title type="text">July Tech Festa 2018 で分散システムの検証について話してきました / #JTF2018</title><updated>2018-08-01T13:56:39+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/08/01/055608"/><summary type="html">先日行われた July Tech Festa 2018 で、モデル検査を使った分散アルゴリズムの検証について発表してきました。 前半はオートマトンによるシステムの記述と検査の基礎について、後半は三種類のツール SPIN、TLA+、P による記述方法の紹介、といった内容です。 後半のソースコード紹介が散文的な感じになってしまって、いまいちメリットが伝わらない感じだったので、次回があればもっとエモいスライドにしようと思います。 分散アルゴリズムの形式化 定理証明による検証 今回の話の流れとして「分散システムにはモデル検査が有効」と述べていますが、必ずしも定理証明が分散システムの検証に向かないという…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/08/01/%E5%85%A5%E7%A4%BE</id><title type="text">入社</title><updated>2018-08-01T00:00:56+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/08/01/%E5%85%A5%E7%A4%BE"/><summary type="html">本日付けで IIJ に入社します。 職業 Haskeller になる……はず。</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/07/31/%E9%80%80%E8%81%B7</id><title type="text">退職</title><updated>2018-07-31T22:30:05+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/07/31/%E9%80%80%E8%81%B7"/><summary type="html">2013年に新卒で入社した KLab を今日付けで退職しました。</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2018/07/14/195255</id><title type="text">Dhallによるリッチな設定ファイル体験</title><updated>2018-07-14T19:52:55+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2018/07/14/195255"/><summary type="html">(この記事のレギュレーション: lts-11.9) Dhall という設定記述用言語があり、使ってみたところ良い感じだったので紹介します。 なお、この記事は先日某所で発表したものの拡大版になります。 speakerdeck.com Dhallとは何か Dhallについて短かく表現するなら公式サイトの以下の説明が分かりやすいです。 You can think of Dhall as: JSON + functions + types + imports データ表現にプログラマブルさと静的な検査とファイルのインポートを加えたものというわけです。 まだ開発中のためかあまりアピールされていませんがツー…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/11/17/090000</id><title type="text">zshの標準エラー出力の色を赤くする</title><updated>2018-06-29T14:22:55+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/11/17/090000"/><summary type="html">[追記]以下の方法は良くないようです。必ず、このエントリー最後の「stderredを使う」を参照してください[/追記] 最近stderrを赤くするように設定したら、コマンドの出力がかなり見やすくなりました。 設定はこんな感じに書いてます。 zmodload zsh/terminfo zsh/system color_stderr() { while sysread std_err_color; do syswrite -o 2 "${fg_bold[red]}${std_err_color}${terminfo[sgr0]}" done } exec 2&gt; &gt;(color_stderr) fg…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2018/06/25/130000</id><title type="text">はてな・ペパボ技術大会 #4 〜DevOps〜 @京都 で登壇しました</title><updated>2018-06-25T13:40:55+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2018/06/25/130000"/><summary type="html">先日 6/23 に技術イベント「はてな・ペパボ技術大会 #4 〜DevOps〜 @京都」で登壇・トークセッションに参加しました。 hatena.connpass.com 普段の業務でDevOpsという言葉を使うことはありません。 しかし、DevOpsのあり方を見直した結果が現状の体制や仕事のフローであったり、あるいはこれからやろうとしていることにつながっているのだと思います。 技術の進歩によりDockerやGraphQLといった、レイヤー間の共通言語が発達する中で、ソフトウェア間あるいはチーム間が疎結合になっていくことはよいです。 一方でそういう技術で解決できない場面も残っていくのだろうなと思…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/06/linuxcygwin-unzip-error-invalid.html</id><title type="text">[linux][cygwin] unzipコマンドで "error:  invalid compressed data to inflate" というエラーメッセージがでたら？</title><updated>2018-06-06T01:11:48.468+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/06/linuxcygwin-unzip-error-invalid.html"/><summary type="text">zipアーカイブの中に長さが0のファイルが含まれていると、unzipコマンドでは以下のようなエラーメッセージが表示されて、解凍することができません。アーカイブが壊れていなくてもエラーになります。
% unzip hoge.zip
  error:  invalid compressed data to inflate

このような場合には、-tzipオプションを指定して7zコマンドを実行することで、エラーを回避して解凍できます。パスワード保護されているzipアーカイブも問題なく解凍できました。

% 7z x -tzip hoge.zip


manページによると、以下のフォーマットがサポートされていて、デフォルトは7zとのこと。

The program supports 7z (that implements  LZMA  compression  algorithm),  
ZIP</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/06/03/195024</id><title type="text">日持ちする直列化のためのライブラリ「winery」</title><updated>2018-06-04T00:57:20+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/06/03/195024"/><summary type="html">人類は、酒と共に発展してきたと言っても過言ではない。穀物や果実などを酒に変換することにより、糖を除く栄養を保ったまま、高い保存性を持たせることができる。酒は人々の喉を潤し、時に薬として使われた。 プログラミングにおいても、終了したら消えてしまうデータを、保存性の高いバイト列に変えたい場面がよくある。そのような操作を直列化(シリアライズ)と呼び、いくつかのアプローチが存在する。 コード生成タイプ Protocol Buffers、cap'n'protoなど データの構造を記述する言語(スキーマ)から、データ構造およびシリアライザ・デシリアライザをコードごと生成する。幅広い言語で使える一方、作れる…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/05/24/213324</id><title type="text">We Are JavaScripters! @19th で Haskell 製フレームワーク Miso について話してきました</title><updated>2018-05-24T21:33:24+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/05/24/213324"/><summary type="html">先日行われた We Are JavaScripters! @19th で Haskell によるフロントエンド開発について発表してきました。 Elm の代わりにフレームワーク Miso を使うことで、クライアントサイドとサーバサイドの両方を Haskell で実装することができる、という内容です。 github.com なお今回のプレゼンでは、参加者のほとんどは Haskell に馴染みがないだろう*1ということもあって、実装上の詳細にはほとんど触れませんでした。 Elm と Miso の詳しい比較、さらに Servant と組み合わせた Isomorphic なアプリの作り方については、記事…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/05/18/205101</id><title type="text">JAWS DAYS 2018 で形式手法による IAM の検証について話してきました</title><updated>2018-05-18T20:51:01+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/05/18/205101"/><summary type="html">だいぶ日が空いてしまって今更ですが、先日行われた JAWS DAYS 2018 で登壇してきました*1。モデル検査器 Alloy を使って AWS の IAM を検証してみるという内容です。 形式手法 × AWS というテーマではこれまでにもいくつかのイベントで発表していますが、題材はネットワーク関連の検証がメインでした。 ccvanishing.hateblo.jp ccvanishing.hateblo.jp ccvanishing.hateblo.jp さすがに同じことばかり話していても芸がないので、今回は新ネタとして IAM を投入してみました。CFP も Security Slot …</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/07/31/090000</id><title type="text">ptraceシステムコール入門 ― プロセスの出力を覗き見してみよう！</title><updated>2018-05-14T18:45:57+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/07/31/090000"/><summary type="html">他のプロセスを中断せずに、その出力をミラーリングして新しくパイプで繋ぐ、そんなことはできるのでしょうか。 straceやgdbといったコマンドは一体どういう仕組みで動いているのでしょうか。 ptraceシステムコールを使い、プロセスが呼ぶシステムコールを調べて出力を覗き見するコマンドを実装してみたいと思います。 ptraceシステムコール Linuxを触っていると、いかにプロセスを組み合わせるか、組み合わせる方法をどれだけ知っているかが重要になってきます。 パイプやリダイレクトを使ってプロセスの出力結果を制御したり、コードの中からコマンドを実行して、終了ステータスを取得したりします。 プロセス…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/03/06/100000</id><title type="text">LLVM APIを使ってみよう！ 〜 Brainf**kコンパイラをIRBuilderで書き直してみた 〜</title><updated>2018-03-28T10:44:28+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/03/06/100000"/><summary type="html">先日LLVMの入門記事を書きました。 clangが吐くLLVM IR (Intermediate representation, 中間表現) を頼りに、Brainf**kのコンパイラを書いてみました。 itchyny.hatenablog.com この記事で書いたコードでは、直接printfでLLVM IRの命令を出力していました。 このステップを踏むことで、LLVM IRの命令をどう調べればいいかについて身についたと思います。 しかし、この「コンパイラ」は次のような問題がありました。 bf2llvmコマンドが出力するのがLLVM IRのために、lliやllcといったLLVM IRのランタイム…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/02/27/100000</id><title type="text">LLVMを始めよう！ 〜 LLVM IRの基礎はclangが教えてくれた・Brainf**kコンパイラを作ってみよう 〜</title><updated>2018-03-28T10:33:19+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/02/27/100000"/><summary type="html">コンパイラを作ってみたいと思っていても、アセンブリ言語はよくわからない。 パーサーみたいなコードは書いたことがあるけれど、コード生成の処理はさっぱりだ。 実行ファイルをバイナリエディターで見るとかなにそれ怖い。 そんな私なのですが、LLVMに興味を持ち始めています。 SwiftやRust、あるいはEmscriptenなど、近年注目されている言語やコンパイラ技術の中枢にはLLVMがあります。 アセンブリはよく分からなくてもLLVMを使いこなせるようになれば、マルチプラットフォームで実行ファイルを生成できる言語処理系を作るのではないか。 コンパイラ作ってみたいな、LLVMを使ってみようかなと思って…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/04/21/200000</id><title type="text">VimプラグインのTravis CIテストを複数のVimのバージョンで動かそう</title><updated>2018-03-28T10:30:13+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/04/21/200000"/><summary type="html">Vimプラグインにテストがあるのはあたりまえ。 そういう空気になってきたのはここ3年くらいのことでしょうか。 私自身、昔はあまりテスト文化に慣れておらず、「Vimプラグインみたいな小さなスクリプトにテストなんているのか？自分のプラグインは普段から使う、バグっていたらすぐ気がつくからテストなんていらないでしょ」と思っていました。 しかし、そういうテストのない自作プラグインがどんどん増えていき、3年4年と経ってしまうと自分のプラグインのコードを触りにくくなってきました。 昔はあまりVimプラグインの書き方に慣れていなかったので、酷いコードが絡み合っているのだけど、普段使う分には普通に便利なプラグイ…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/05/30/223000</id><title type="text">lightline.vimのREADME.mdを書き直しました</title><updated>2018-03-28T10:29:32+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/05/30/223000"/><summary type="html">lightline.vimはVimのステータスラインをいい感じにしてくれるプラグインです。 作って四年弱経つんですね。 おかげさまで多くのユーザーさまに使っていただいています。 itchyny.hatenablog.com github.com このREADME.mdを最近書き換えました。 ……… それだけかいな！って感じなのですが、いろいろと大変でした… 主に精神的に… つらい… プラグインを作った勢いと使って欲しいという強い思いで、プラグインを作ってすぐにREADME.mdをかなり詳しく書いていた そのために当初の設計や実装時の思いが強く出ていたが、初めてプラグインを触る人にとっては読みに…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/12/31/170000</id><title type="text">2017年を振り返って</title><updated>2018-03-28T10:27:47+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/12/31/170000"/><summary type="html">今年は仕事で関わっているプロダクトが大きな転換期を迎えて、様々な経験ができました。 ミドルウェアを自ら作り上げ、データをオンラインで移行し、運用を始めるというのはなかなか経験できないことだと思います。 サービスは以前より安定し、穏やかな年末を過ごしています。 今年は初めてカンファレンスで登壇しました。 慣れないことばかりで色々と戸惑いましたが、沢山の方に発表を聞きに来ていただいて嬉しかったです。 マネージドサービスを組み合わせて1つのソフトウェアを作り、それをサーバーレスミドルウェアとして抽象度を上げて捉えることができるようになったもの、このカンファレンスに参加してよかったことでした。 今年は…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/02/11/185306</id><title type="text">HaskellでDiscordのBotを作る</title><updated>2018-03-09T13:45:13+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/02/11/185306"/><summary type="html">Discordはゲーミング向けのテキストチャットと音声通話を兼ねるプラットフォームであり、「テキストチャンネル」と「ボイスチャンネル」の二種を好きなだけ作ることができる。もちろん音声を全チャンネルに常時垂れ流すわけには行かないので、通話するにはボイスチャンネルに参加するという手順を踏む必要がある。しかし、例えば誰かがやっているゲームに混ざろうとしてボイスチャンネルに参加しても、チャンネル外のユーザーにはいかなる通知も発生しないため、気づかれないままのことがよくある。 そこで、ボイスチャンネルに参加したとき、テキストチャンネルにその旨を投稿するボットを用意すれば、気軽に通話の合図を送れる。全員に…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/03/haskell-http-clienthaskellhttp.html</id><title type="text">[haskell] http-clientライブラリを利用してHaskellでHTTPクライアント機能を実装する</title><updated>2018-03-05T09:34:57.715+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/03/haskell-http-clienthaskellhttp.html"/><summary type="text">Haskellでは、http-clientライブラリを用いることで、HTTPクライアント機能を簡単に実装できます。http-client以外にも何種類かライブラリがありますが、今回はhttp-client, http-client-tlsの機能と使い方をまとめておきます。

本エントリで紹介するhttp-client, http-client-tlsライブラリの機能：

単純なHTTP GETリクエスト

主要な型の説明 

Managerのカスタマイズ 

https
proxy設定 
タイムアウト値の設定

Requestのカスタマイズ

ベーシック認証 
リクエストヘッダ 

Responseの操作

ストリーミング受信 
レスポンスヘッダの参照 

エラーハンドリング 






単純なHTTP GETリクエスト
{-# LANGUAGE OverloadedStrings #</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/12/13/170000</id><title type="text">Go言語のsyscall.Sysctlは最後のNULを落とす</title><updated>2018-03-02T17:07:49+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/12/13/170000"/><summary type="html">カーネルのパラメータを引いたり設定したりする時に便利なのが sysctl コマンドです。 $ sysctl kern.ostype kern.ostype: Darwin このコマンドのシステムコールをGo言語から叩いて、OSの種類を引いてみましょう。 func main() { ret, _ := syscall.Sysctl("kern.ostype") fmt.Printf("%s\n", ret) } Darwin 問題ないですね。 数字を返すものを叩いてみましょう。 $ sysctl machdep.cpu.feature_bits machdep.cpu.feature_bits:…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/12/23/082635</id><title type="text">猫でもわかる rkt + Kubernetes</title><updated>2018-02-28T00:36:58+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/12/23/082635"/><summary type="html">このエントリは Kubernetes Advent Calendar 2017 の 23 日目の記事です。ちなみに昨日は takezaki さんの「GCBを利用したContinuous Delivery環境」でした。 LT で使用したスライド 先日、市ヶ谷Geek★Night #16 の 10 分 LT 枠で、CoreOS 社によるコンテナ実装 rkt とその Kubernetes 連携について発表してきました。今回のエントリはこの LT の内容を補足しつつ、実際に手を動かして rkt を試せるような構成にしてあります。 Hello, rkt! rkt は、Docker の対抗馬として Cor…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/02/haskell-stack-install-cryptoniteno-such.html</id><title type="text">[haskell] stack install cryptoniteがno such instruction: `rdrand %r8'エラーで失敗する問題の対処方法</title><updated>2018-02-25T15:34:07.378+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/02/haskell-stack-install-cryptoniteno-such.html"/><summary type="text">手許の環境（mac）で、cryptoniteライブラリのビルドがエラーになる問題が発生したが、ネットの情報を元に解決できたので、その症状と手順をblogに残しておく。



エラーの症状：
stack install cryptoniteで以下のようなエラーが発生。
% stack install cryptonite
--  While building custom Setup.hs for package cryptonite-0.24 using:
      /Users/xxx/.stack/setup-exe-cache/x86_64-osx/Cabal-simple_mPHDZzAJ_2.0.1.0_ghc-8.2.2 --builddir=.stack-work/dist/x86_64-osx/Cabal-2.0.1.0 build --ghc-options " </summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/12/25/%E3%81%AA%E3%81%9C_Haskell_%E3%81%8C%E5%A5%BD%E3%81%8D%E3%81%AA%E3%81%AE%E3%81%8B</id><title type="text">なぜ Haskell が好きなのか</title><updated>2018-02-25T14:53:18+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/12/25/%E3%81%AA%E3%81%9C_Haskell_%E3%81%8C%E5%A5%BD%E3%81%8D%E3%81%AA%E3%81%AE%E3%81%8B"/><summary type="html">自分は Haskell が好きで休日は Haskell を書いています。そういうことを言うと関数型が好きなんですねと言われるのですが、Haskell のよさはそこじゃないと感じているので書き起こそうかと、筆を執りました。 というわけで、この記事は技術的文書というよりもお話です。Haskell を知らない人向けです。 この記事は Haskell Advent Calendar 2017 その3の6日めの記事です。6日が過ぎても担当のいない日だったため担当します。 関数型プログラミングだから Haskell が好きというわけではない まず、「Haskell というと手続き型とは全然違う関数型なんで…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2018/02/14/160833</id><title type="text">Haskellの実行バイナリにファイルを埋め込む</title><updated>2018-02-14T16:12:25+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2018/02/14/160833"/><summary type="html">コンパイルしてできる実行バイナリにファイルを埋め込みたいことがある。
アプリのGUIで使うアイコンとか機械学習の学習済みモデルとか。
Go では (現在では非推奨らしいが) go-bindata を使う場面だろうか。

Haskell ではそういうときには [file-embed](https://hackage.haskell.org/package/file-embed) パッケージが使える。
たとえば `[project root]/resources/lorem.txt` に置かれた [lorem ipsum](https://ja.wikipedia.org/wiki/Lorem_ipsum) テキストを埋め込む場合:</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/01/27/%E5%BC%8A%E5%90%8C%E4%BA%BA%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E3%81%AE%E3%82%A6%E3%82%A7%E3%83%96%E3%82%B5%E3%82%A4%E3%83%88%E3%82%92%E4%BD%9C%E3%82%8A%E3%81%BE%E3%81%97%E3%81%9F</id><title type="text">弊同人サークルのウェブサイトを作りました</title><updated>2018-01-28T12:39:56+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/01/27/%E5%BC%8A%E5%90%8C%E4%BA%BA%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E3%81%AE%E3%82%A6%E3%82%A7%E3%83%96%E3%82%B5%E3%82%A4%E3%83%88%E3%82%92%E4%BD%9C%E3%82%8A%E3%81%BE%E3%81%97%E3%81%9F"/><summary type="html">がんばった。 doujin.kakkun61.com GitHub Pages だからと Jekyll にしたけど、生成したものを置けばいいんだから Hakyll でもよかったな。変えようかなというところ。 後はレスポンシブ対応したい。</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/12/24/202404</id><title type="text">ガバガバAltJSを作った(言語実装 Advent Calendar 2017)</title><updated>2017-12-24T20:27:10+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/12/24/202404"/><summary type="html">qiita.com JavaScriptを書いていると、頻出する継続渡しのリフレインにうんざりさせられる。 foo.bar(function(result){ qux.baz(function(data){ hoge(function(r){ ... }); }); }); そこで、腕試しに継続モナドをベースにしたAltJS、jatkoを作った。フィンランド語で「継続」という意味だ(継続戦争から知った人も多いだろう)。しかし、なんの考えもなしに653行Haskellを書いた結果ガバガバな言語になってしまった。 Hello, world Haskellにだいぶ近いのでなんとなく読めるはず。 in…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/12/19/203500</id><title type="text">HaskellのABC(Haskell Advent Calendar 6th)</title><updated>2017-12-19T20:35:00+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/12/19/203500"/><summary type="html">Haskellといえば一文字変数名、一文字変数名といえばHaskellという{{要出典}}ほどにHaskellでは一文字の変数名がよく使われている。これは名前を考えるのをサボっているとは限らない。多相性によって変数が具体的な性質を持たないがゆえに、具体的な名前がつけられないというのが主な理由だ。あるいは、適切な名前があっても、既存の名前と被っているという場合もある。かといって完全なランダムというわけでもないので、一文字変数名はどのように選べばいいか考察していこう。 a よくある種: * アルファベットの最初であるaは汎用性が高い。型変数に使うのが王道だ。値レベルの変数として単体で使うことは意外…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/12/12/170000</id><title type="text">Go言語のHTTPリクエストのレスポンスボディーとEOF</title><updated>2017-12-12T18:16:42+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/12/12/170000"/><summary type="html">Reader interface の Read 関数は、どのタイミングで io.EOF を返すのでしょうか。 まずは strings.Reader で見てみましょう。 package main import ( "fmt" "strings" ) func main() { r := strings.NewReader("example\n") for { var b [1]byte n, err := r.Read(b[:]) fmt.Printf("%d %q %v\n", n, b, err) if err != nil { break } } } 結果 1 "e" &lt;nil&gt; 1 "x…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2016/07/02/174426</id><title type="text">Haskellの最近の例外ハンドリング</title><updated>2017-12-06T17:19:02+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2016/07/02/174426"/><summary type="html">どうもHaskellには標準のControl.Exceptionモジュールだけでなくmtlやexceptionsやexceptionalといった例外を扱うためのパッケージがあるらしいのだが、そのあたりのパッケージの選び方や使い方についてまとまった情報を見つけられなかった。 HaskellWiki例外のページも少々古いようで、deprecatedなものや統合される前のパッケージを書いていたりする。 調べた限り、mtlとexceptionsが今の主流っぽい。 その2つの使い方をまとめる。 なおバージョンはlts-6.1を基準としている。 mtl mtlパッケージのControl.Monad.Exc…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2016/08/28/175500</id><title type="text">続・Haskellの最近の例外ハンドリング</title><updated>2017-12-06T17:18:53+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2016/08/28/175500"/><summary type="html">前回 の記事ではHaskellの例外ハンドリングには exceptions パッケージを使えばいいのではないかと書いた。 ところが今年の6月に safe-exceptions という exceptions を拡張したようなパッケージがさる FPComplete から 発表 された。 そこでこの記事では safe-exceptions について調べてみる。 おそらくほぼ FPComplete の発表の受け売りになってしまうので英語を読める人は原文を読む方がいいかもしれない。 さすが FPComplete だけあってこれは既に LTS Haskell に入っている。 この記事では lts-6.14…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/haskell-library-2016</id><title type="text">Haskellライブラリ所感2016</title><updated>2017-12-06T17:18:40+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/haskell-library-2016"/><summary type="html">(これは Haskell Advent Calendar 2016 の7日目の記事です) 今年使ったり調べたりした Haskell ライブラリを広く紹介していく企画です。 あくまで今年使ったものなので新しいものばかりではないです。 また記事の性質上、紹介するものが偏っていてもご容赦ください。 Hackage にはすごい数のライブラリが登録されていて、 頼もしいことですが目が回りそうにもなってしまいます。 この記事が Haskell のライブラリを調べる上での指針になったら幸いです。 なおこの企画と方向性が似ているものとして State of the Haskell ecosystem ( 20…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2017/04/26/005415</id><title type="text">超技術書典でGHCJSの本を出します</title><updated>2017-12-06T17:18:31+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2017/04/26/005415"/><summary type="html">【告知】ニコニコ超会議2017と併催される超技術書典Day1(4/29)にて、GHCJSの入門的な本を出します。@y_taka_23 さんのスペースに委託する形になります。Haskell×JavaScriptに興味のある方はぜひA-04まで。 #技術書典 #超技術書典 pic.twitter.com/zUhiVc3CyX — しょしー 超技術書典A-04 (@syocy) 2017年4月25日 出します。 GHCJSの仕組みの話はほとんどなくて、あくまで使い方とか周辺事情の話になります。 GHCJSって昔は導入すること自体が難しくて、他のHaskell系AltJSに水をあけられている感があった…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2017/05/20/025021</id><title type="text">Haskellは真面目なアプリケーション開発に向いている</title><updated>2017-12-06T17:18:19+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2017/05/20/025021"/><summary type="html">qiita.com ↑の記事で（主題ではないと思うものの）Haskellの批判に結構な分量が割かれていて、その批判のなかに「ちょっと違うんじゃないかな」という点がいくつかあったので反論ぽいことを書きます。 "Haskell は真面目なアプリケーション開発には向いてない"について これには多分いくつか事例を挙げればよくて、 Facebook ではスパム等の攻撃と戦うためのシステムを Haskell で作っています。 Fighting spam with Haskell | Engineering Blog | Facebook Code | Facebook (この記事を書いている Simon …</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2017/08/14/235830</id><title type="text">HaskellとJSON、そしてレコード型</title><updated>2017-12-06T17:18:07+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2017/08/14/235830"/><summary type="html">HaskellのJSON周りについて、こうやるのがいいんじゃないかという私の現在のやり方を書きます。 題材としては、 Swagger Petstore に記されている REST API にリクエストを投げてレスポンスを取り出すというのをやります。 (Swagger ですが scaffold は使わず自分で HTTP クライアントライブラリを使います)。 基本方針は「出力は厳密に入力には寛容に」(出典失念) です。 もくじ JSONの前に: レコードのフィールドへのアクセス JSONの前に: レコードのデフォルト値 Haskellのデータ型→JSON JSONデータを含むHTTPリクエスト レス…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2017/08/27/003035</id><title type="text">GoのTickerみたいなやつをHaskellで作った</title><updated>2017-12-06T17:17:55+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2017/08/27/003035"/><summary type="html">github.com 作った。 GoのTickerはとてもシンプルな関数で、 指定した周期でチャネルに値を送るスレッドを生成する。 一定間隔で何かの処理を行いたいときに利用する。 今回作ったHaskell版もだいたい同じようなものを提供する。 実際のところパッケージにするには小さすぎる気もするけど、 Haskellパッケージ製作の練習をしたかったのでHackageのアカウントを取ってHackageに上げた。 練習のため、HaddockによるAPIドキュメントおよびhspecとdoctestによるテストも書いてある。 あとは何かCIを導入してGithubのページにCIのステータスを表示するような…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/a-tour-of-go-in-haskell</id><title type="text">A Tour of Go in Haskellを作ったのと、GoとHaskellの比較</title><updated>2017-12-06T17:17:38+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/a-tour-of-go-in-haskell"/><summary type="html">A Tour of Go in Haskell (日本語版/英語版) というサイトを作ったので、それの紹介をします。 https://a-tour-of-go-in-haskell.syocy.net/ja_JP/index.html Haskell は Go と同じく軽量スレッドやチャネルの機能があり、並行並列が得意な言語です。このサイトは A Tour of Go という Go のチュートリアルの並行性の章を題材として２つの言語を比較しています。</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/12/04/044908</id><title type="text">NGK2017B で Liquid Haskell について話してきました</title><updated>2017-12-04T04:49:08+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/12/04/044908"/><summary type="html">先日、毎年恒例のなごや LT 大会 NGK2017B / 名古屋合同懇親会 2017 忘年会 で発表してきました。 Liquid Haskell で普通の型システムの上を行け #NGK2017B from y_taka_23 www.slideshare.net 当日の動画は NGK2017B 第2部 - YouTube から見ることができます。 ちなみに NGK での発表は 5 年連続 5 回目です。前回まではモデル検査をテーマにしていましたが、今回はちょっと目先を変えて（とはいえ同じ形式手法の枠内ですが）もう少しプログラム寄りの題材として Liquid Haskell を選びました。 N…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/11/27/070558</id><title type="text">現在時刻をモックする Haskell ライブラリ time-machine を作ってみました</title><updated>2017-11-27T07:05:58+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/11/27/070558"/><summary type="html">主としてテスト時のために、現在時刻を操作する Haskell ライブラリを作成しました。Hackage にも登録済みです。 github.com 試しに次のコードを実行してみましょう。getCurrentTime しているはずなのに、返ってくる値が 1985 年 10 月 26 日になっているはずです。 module Main where import Control.Monad.TimeMachine import Control.Monad.Trans ( liftIO ) main :: IO () main = backTo (the future) $ do t &lt;- getCurr…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/11/06/090000</id><title type="text">Serverlessconf Tokyo 2017で『サーバレスアーキテクチャによる時系列データベースの構築と監視』という発表してきました</title><updated>2017-11-06T14:01:24+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/11/06/090000"/><summary type="html">先日開催されたServerlessconf Tokyo 2017にスピーカーとして参加しました。 2017.serverlessconf.tokyo Mackerelの今の時系列データベースは、マネージドサービスを組み合わせて作っています。 検証・実装・投入フェーズを終えて、運用・新機能開発フェーズに入っています。そんな中で、監視サービスを提供する私たちが、サーバーレスアーキテクチャで作ったミドルウェアをどのように監視しているかについてお話しました。 何かしら役に立つことや発想の元となるようなことをお伝えできていたらいいなと思います。 私も他の発表から様々なことを学びました。特に面白かった発表…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/10/25/033444</id><title type="text">技術書典 3 で新刊落としました</title><updated>2017-10-25T03:34:44+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/10/25/033444"/><summary type="html">先日、秋葉原で開催された技術系同人誌のオンリーイベント 技術書典 3 にサークル参加しました。 本当は新刊として Scala 用の静的解析ツール Stainless の入門書を頒布する予定で、サークルカットも完全にその線で準備していたのですが、残念ながら諸事情につき完成しませんでした。 事前にサークルチェックしてくださっていた 36 名の方々には大変申し訳ありませんでした。チェシャ猫先生の次回作にご期待ください。 何も並べるものがないのはちょっとどうかと思ったので、当日は 前回の技術書典 2 で頒布 した既刊『入門 LiquidHaskell』の PDF 版（ダウンロードカード）を持ち込みまし…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/10/18/202148</id><title type="text">Serverless Meetup Tokyo #6 で Kubernetes について話してきました</title><updated>2017-10-21T02:14:23+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/10/18/202148"/><summary type="html">先日行われた Serverless Meetup Tokyo #6 で、Kubernetes 上で動作する Serverless フレームワーク Fission について発表してきました。 Fission で 始める Containerless Kubernetes #serverlesstokyo from y_taka_23 www.slideshare.net 先週も 似たようなブログ を書いたような気がしなくもないですが、Kubeless と Fission を比較した前回の発表に対し、今回は話題を Fission に限定しています。一方で追加要素として、複数の Function を組…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/10/17/172322</id><title type="text">ステートマシン猛レース</title><updated>2017-10-19T18:19:14+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/10/17/172322"/><summary type="html">ストリーム処理ライブラリはHaskellにおいて競争の激しい分野の一つだ。ストリーム処理ライブラリとは大雑把に言うと、IOなどの作用を絡めながら値の列(ストリーム)を生成したり、処理したりする構造を提供するライブラリである。多くのライブラリは、以下の3種の構造を定義している。 生産者(プロデューサー): IOなどのアクションを伴いつつ値を生成する。 消費者(コンシューマー): 多くの場合モナド変換子になっており、await :: Consumer s m sのようなアクションを組み合わせ、値の列を処理するプログラムを書ける。 変換者(トランスデューサー): 入力を受け取りながら、出力もできる。…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/10/14/092409</id><title type="text">Kubernetes Meetup Tokyo #7 で Serverless について話してきました</title><updated>2017-10-14T09:24:09+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/10/14/092409"/><summary type="html">先日行われた Kubernetes Meetup Tokyo #7 で、Kubernetes 上で動作する Serverless フレームワークについて発表してきました。 Kubernetes でも Serverless したい！ #k8sjp from y_taka_23 www.slideshare.net Serverless on Kubernetes を謳うツールはいくつかありますが、今回はそのうち Kubeless と Fission に焦点を当て、それぞれのアーキテクチャの違いを比較してみました。 当日の補足 Twitter 上で反応をもらった点についていくつか補足します。 Fu…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/10/11/230117</id><title type="text">WindowsでのHaskell開発環境構築(2017年秋版)</title><updated>2017-10-13T23:20:39+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/10/11/230117"/><summary type="html">身の丈に合わないと形容されても仕方ないようなハイスペックなPCを買った。開発環境は当然作り直すことになるので、その軌跡を残しておく。 MSYS2 まずはMSYS2を入れる。これでツールチェーンが揃い、minttyというターミナルエミュレータもついてくる。 $ pacman -Syuu $ pacman -Sy git stack Haskellのビルドツールであるstackのインストーラを入手する。処理系から依存パッケージまで無難かつ自動的に用意してくれるので便利だ。 Home - The Haskell Tool Stack ただしstackはMSYS2上ではうまく動作しない。設定ファイル(…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/10/10/100000</id><title type="text">負荷を均すための『時間軸シャーディング』という考え方</title><updated>2017-10-10T10:46:10+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/10/10/100000"/><summary type="html">ウェブアプリケーションを作っていると、負荷を分散させるために「タイミングをばらけさせる」場面に時々遭遇します。 データの更新、キャッシュのフラッシュ、バッチ処理など様々な問題で、同じ構造が見られます。 例えば、スマホアプリからバックグラウンドで1時間ごとに何らかの情報をサーバーに送りたいとします。 愚直に毎時0分に更新処理を行うようにすると、すべてのユーザーから同じタイミングでリクエストが来てしまいます。 ですから、リクエストのタイミングをユーザーごとにばらして負荷を均す必要があります。 他のケースを考えます。 5分ごとにジョブを投入して何らかの更新を行うタスクがあるとします。 本来ならデータ…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/10/05/090000</id><title type="text">Mackerelのプラグインを書く楽しみ ― Rustでプラグインを書くためのライブラリを作りました！</title><updated>2017-10-07T14:43:39+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/10/05/090000"/><summary type="html">Mackerelは「エンジニアをワクワクさせる」ツールであることをサービスの大事な考え方の一つとして捉えています。 一体どういう場面でエンジニアはワクワクするのでしょうか。 簡単にインストールできるmackerel-agentや、直感的で触りやすい画面、チャットツールとの連携は大事な機能です。 しかし、監視ツールとしてもっと重要なのは、ミドルウェアのメトリックをどのように可視化し、何を監視するかということです。 Mackerelは公式のプラグインリポジトリに各種プラグインを揃えています (contributorの皆様ありがとうございます)。 これらはすべてGo言語で書かれています。 しかし、M…</summary></entry><entry><id>http://lotz84.github.io/posts/an-introduction-to-haskell-for-engineers.html</id><title type="text">エンジニアのための『Haskell入門』</title><updated>2017-10-03T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/an-introduction-to-haskell-for-engineers.html"/><summary type="html"></summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/08/15/C%23_%E3%81%A7%E3%83%A9%E3%83%B3%E3%82%AF_N_%E5%A4%9A%E7%9B%B8</id><title type="text">C# でランク N 多相</title><updated>2017-09-25T06:24:00+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/08/15/C%23_%E3%81%A7%E3%83%A9%E3%83%B3%E3%82%AF_N_%E5%A4%9A%E7%9B%B8"/><summary type="html">追記：これだと解決できていない。 C# に Sprache というパーサーコンビネーターがあるのだが、最近そいつを継続渡しスタイル（continuation passing style; CPS）にしてやろうと、Haskell のパーサーコンビネーター attoparsec を参考にいじっていた。 そこでこういう型があった。 newtype Parser i a = Parser { runParser :: forall r. State i -&gt; Pos -&gt; More -&gt; Failure i (State i) r -&gt; Success i (State i) a r -&gt; IResu…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/09/14/150435</id><title type="text">Haskell ライブラリにスターを送るツール thank-you-stars を作ってみました</title><updated>2017-09-14T15:04:35+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/09/14/150435"/><summary type="html">Haskell の GitHub レポジトリを眺めてみると、有名ライブラリであってもスター数が意外と少ないことがあります。かの Yesod ですら本記事執筆時点で 1,794 個であり、Rails の 36,933 個や Django の 28,165 個と比較すると文字通り桁違いです。 スター数は必ずしも OSS としての評価や価値を反映しませんし、そもそも Haskell ユーザの絶対数が少ないからと言ってしまえばそれまでなのですが、若干寂しい感じがしません？ 一方、先日 id:teppeis さんが 依存しているライブラリにスターを送る npm ツール を公開されていました。そこで真似し…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/08/06/154901</id><title type="text">FRPクライシス</title><updated>2017-08-06T18:18:29+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/08/06/154901"/><summary type="html">FRP(Functional Reactive Programming)は、リアクティブプログラミングと関数型プログラミングの性質を持つプログラミングパラダイムである。FRPは古典的FRPと矢矧のFRPに大別される。 古典的FRP 古典的(Classical)FRPは、非連続的な値の列Eventと、常に何らかの値を取るBehaviourの二種類の構造を導入したものである。 代表的な実装としてreactive-banana、euphoria、reflexなどが挙げられる。 Haskellにおいては、EventはIOを通じて非同期的に生成できる設計が多い。Eventはマップやフィルタリングができ、…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/08/02/230422</id><title type="text">快速のExtensible effects</title><updated>2017-08-03T08:52:52+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/08/02/230422"/><summary type="html">extensibleは拡張可能レコードだけでなく拡張可能作用(extensible effects)も用意している。拡張可能作用は一時期Haskell界隈で話題になったものの、今では人気も下火になってしまった。新しいバージョンをリリースした今、拡張可能作用の動機と使い方について改めて紹介しよう。 難行の一次関数 Haskellでモナドをカスタマイズする方法としては、transformersのモナド変換子がよく使われている。モナド変換子は、モナドをパラメータとして取り、新たな能力を付与したモナドにする構造だ。例えば、StateT sはモナド変換子の一つである。任意のアクションm aはliftを使…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/07/08/%E2%80%9Cmeaningless_REX_prefix_used%E2%80%9D_%E2%80%9Cuse_of_REX.w_is_meaningless%E2%80%9D</id><title type="text">“meaningless REX prefix used” “use of REX.w is meaningless”</title><updated>2017-07-09T00:20:11+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/07/08/%E2%80%9Cmeaningless_REX_prefix_used%E2%80%9D_%E2%80%9Cuse_of_REX.w_is_meaningless%E2%80%9D"/><summary type="html">コマンドプロンプトや PowerShell でプログラムを実行したときに次のようなエラーが出て困っていた。 [0x7FFE822C2B00] ANOMALY : meaningless REX prefix used [0x7FFE85B3DDA0] ANOMALY : use of REX.w is meaningless (default operand size is 64) REX プレフィックスとは何ぞや。 ロングモードでは、64ビット化するにあたり、16ビット時代から存在した1バイトのinc/dec命令であるinc reg16/dec reg16命令(op 0x40〜0x4f)を廃…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/06/19/090000</id><title type="text">音量を調節できるCLIツールをGo言語で作りました！</title><updated>2017-06-19T09:01:35+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/06/19/090000"/><summary type="html">volumeコマンドを作りました。 音量の調整ってコマンドからどうやるんだろう、ポータブルな形でコマンドラインツールがあれば便利なのでは… と思ったので作りました。 macOSとUbuntuで動作確認をしています。 インストール go get -u github.com/itchyny/volume-go/cmd/volume getは今の音量を返します。set (0-100) で音量を設定できます。 $ volume get 25 $ volume set 20 $ volume get 20 up, down, mute, unmuteなど、直感的に使えるサブコマンドを揃えています。 $ …</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/06/07/210000</id><title type="text">Vimに自分の書いたパッチが取り込まれた！</title><updated>2017-06-08T15:33:13+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/06/07/210000"/><summary type="html">Vim 8.0.0623に私の書いたパッチが取り込まれました。 わーい ∩(＞◡＜*)∩ わーい！ もともとのきっかけは、自分のプラグインを開発している中で、[\u3000-\u4000]という正規表現に対する挙動がset re=1とset re=2で違うことに気がついたのです。 Vimは正規表現エンジンを2つ積んでいる恐ろしいエディターなのですが、この2つの正規表現エンジンの挙動に微妙な違いがあることに気がつきました。 新しいNFAエンジンではエラーは出ませんが、古いエンジンではエラーが出ます。 古い正規表現エンジンでは、[a-z] みたいなパターンで、[\u3000-\u4000]のように…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/05/22/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84</id><title type="text">関係と代数的データ型との相互変換についての妄想 その3</title><updated>2017-05-22T10:11:04+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/05/22/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84"/><summary type="html">思い付き その2 class QueryUser ? where queryUser :: (?) =&gt; Key -&gt; MonadDB User instance QueryUser ? where -- queryUser :: (HasFriends ?) =&gt; Key -&gt; MonadDB User query = … instance QueryUser ? where -- queryUser :: (HasName ?) =&gt; Key -&gt; MonadDB User query = … userFriends :: (HasFriends ?) =&gt; User -&gt; [User] …</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/05/21/120000</id><title type="text">Haskellで10を作るプログラムを書いてみたので動画で公開してみた</title><updated>2017-05-21T23:25:27+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/05/21/120000"/><summary type="html">最近Rui Ueyamaさんがコーディング動画をアップされているのを見て、私も動画を撮りたくなりました。題材をしばらく考えていたんですが、10を作るプログラムを書いてみることにしました。 www.youtube.com 後から見直すと色々ミスっていて、わりと焦っていることがわかります。なにかの癖で適当に bc -l とかやったのだけど、音声をあてる時は関係ないオプションだと勘違いしてしまいました。確かにglobされていたのはよくなかったけど、 echo '5 / (5 / (5 + 5))' | bc -l とかで考えてみると -l も必要なんですよね。2つの問題が起きていて混乱してしまった……</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/05/21/150903</id><title type="text">JJUG CCC 2017 Spring で Haskell on JVM について話してきました</title><updated>2017-05-21T15:14:00+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/05/21/150903"/><summary type="html">先日行われた JJUG CCC 2017 Spring で、JVM 上で動作する Haskell について発表してきました。 思ったほど怖くない！ Haskell on JVM 超入門 #jjug_ccc #ccc_l8 from y_taka_23 www.slideshare.net メインになるコンテンツはふたつの JVM 言語、Frege と Eta です。 今回はあくまでも Java のイベントなので、発表前半では Haskell の基本概念、特にモナドについてそれなりの時間を割いて説明してみました。さらにそれを踏まえて後半ではモナドを利用した Java ライブラリの呼び出しに焦点を…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/05/17/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84</id><title type="text">関係と代数的データ型との相互変換についての妄想 その2</title><updated>2017-05-17T15:13:55+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/05/17/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84"/><summary type="html">思い付き その1 型レベルのリストをクエリー函数に与えてやる。（DataKinds が有効） data Attr = Id | Name | Friends data User = User { id :: Int, name :: String, friends :: [User] } query :: Proxy '[??] -&gt; Key -&gt; MonadDB User userFriends :: Proxy '[Friends] -&gt; User -&gt; [User] リストだとダメだなーって気付いた。勝手に型の和が取られるわけじゃないからね。 それはそれとして、分からないところが2点。 …</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/05/16/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84</id><title type="text">関係と代数的データ型との相互変換についての妄想 その1</title><updated>2017-05-16T10:53:24+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/05/16/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84"/><summary type="html">OR マッパーみたいな、関係*1とデータ型との相互変換が機械的にできたら嬉しいなという話。 シンプルなのは簡単だしすでにできる。例えば次のような関係がある場合*2、 var user base relation { id integer, name string, } key { id }; var friends base relation { user1 integer, user2 integer }; これを単に次のようなデータ型に変換するのはいくらかのライブラリーで実現できる。 data User = User { id: Int, name: String } data Frien…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/05/07/100000</id><title type="text">gitのファイル変更日時をファイルのアクセス日時に設定</title><updated>2017-05-07T10:00:11+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/05/07/100000"/><summary type="html">普段使っているファイラーはファイルのアクセス日時でソートされるように設定しています。大きめのリポジトリをcloneしてコードを読む時に、意外とファイルの最終変更日時が参考になったりします。仕事で使うリポジトリや、定期的にpullしているなら、徐々に変更のないファイルはファイラーの下の方に移動していく (上の方からアクセス日時の降順として) のですが、cloneしたばかりだとこうは行きません。 要はgitリポジトリ内の各ファイルのアクセス日時を、そのファイルのgit履歴上での最終変更日時に戻したいという気持ちになるわけです。そうするとファイラー上でもいい感じにファイルがソートされるのです。 #!…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/05/06/060400</id><title type="text">超技術書典で同人誌『入門 LiquidHaskell』を頒布できませんでした</title><updated>2017-05-06T06:04:00+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/05/06/060400"/><summary type="html">先日、ニコニコ超会議内で行われた「超技術書典」にて、LiquidHaskell の同人誌でサークル参加してきました。 lh101.dodgsonlabs.com 技術書典 2 ではそこそこの部数が出た ので Haskell 同人誌の需要はゼロではないと踏んでいたのですが、びっくりするぐらい売れません でした。とりあえず後に続く人が同じ轍を踏まないように、今回の様子について記録しておきます。 頒布物 頒布した同人誌は以下の 2 種類です。前者は技術書典 2 で頒布したものの増刷、後者は id:kazeula さんから委託を受けた新刊です。 入門 LiquidHaskell −篩型による静的コード…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/02/28/Yesod_%E3%81%A8_HDBC-mysql_%E3%81%A8_haskell-relational-record_%E3%81%A7_%E2%80%9CCommands_out_of_sync%E2%80%9D</id><title type="text">Yesod と HDBC-mysql と haskell-relational-record で “Commands out of sync”</title><updated>2017-04-27T10:05:11+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/02/28/Yesod_%E3%81%A8_HDBC-mysql_%E3%81%A8_haskell-relational-record_%E3%81%A7_%E2%80%9CCommands_out_of_sync%E2%80%9D"/><summary type="html">Yesod と HDBC-mysql と haskell-relational-record を一緒に使っているのだが、MySQL サーバーに「Commands out of sync; you can’t run this command now」って言われてぐぬぬってなって、最近デバッグをがんばっている。とりあえず途中経過をメモしておく。 そもそも MySQL プロトコルの呼び出し順とか知らないので苦戦していた。 この辺でエラーが出ている。結合をしなければエラーは出ない。 import Import hiding (on) import Database.Relational.Query …</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/04/11/044041</id><title type="text">技術書典 2 で同人誌『入門 LiquidHaskell』を頒布しました</title><updated>2017-04-11T04:40:41+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/04/11/044041"/><summary type="html">先日、秋葉原で行われた技術書のオンリーイベント「技術書典 2」にて、LiquidHaskell の同人誌を頒布してきました。 lh101.dodgsonlabs.com LiquidHaskell は、SMT ソルバをバックエンドとして利用することで、Haskell の持つ型の表現力をより強化する仕組みです。通常の Haskell では型情報としてエンコードできない値レベルの制約を記述できるため、例えば「0 でない Int 型」を定義すればゼロ除算をコンパイル時に検知できます。以前の記事 にちょっとした解説があります。 当日は冊子版を 30 冊と PDF 版ダウンロードカードを 50 シリアル…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/03/30/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B82%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%BE%E3%81%99</id><title type="text">技術書典2にサークル参加します 「Haskell Yesod 本」</title><updated>2017-04-06T19:35:40+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/03/30/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B82%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%BE%E3%81%99"/><summary type="html">4月9日日曜日にアキバ・スクエアにて開催される技術書オンリー同人誌即売会「技術書典2」にサークル「趣味はデバッグ……」として参加します。 冬コミで頒布した『遠回りして学ぶ Yesod 入門』の誤字脱字等を修正して組版を改善したものを持っていきます。 新作はちょっと間に合うか…… 内容 内容は、下記となります。 ビルドツール Stack 効率のよい文字列の扱い Haskell の言語拡張 コンパイル時計算 Template Haskell Web Application Interface とは 簡単な Yesod の解説 ロガー用 Middleware を作る 詳しい内容は見本誌で確認ください…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/03/28/Yesod_%E3%81%A71%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AB%E8%A4%87%E6%95%B0%E5%80%8B%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%81%8C%E3%81%82%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AF_identifyForm_%E3%82%92%E4%BD%BF</id><title type="text">Yesod で1ページに複数個フォームがある場合は identifyForm を使う</title><updated>2017-03-28T10:49:23+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/03/28/Yesod_%E3%81%A71%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AB%E8%A4%87%E6%95%B0%E5%80%8B%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%81%8C%E3%81%82%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AF_identifyForm_%E3%82%92%E4%BD%BF"/><summary type="html">resolver lts-5.4 で確認。 問題 1ページに複数個フォームがある場合、runFormPost はそれぞれのフォームの区別をしてくれません。どういうことかというと、例えば下記のような2つのフォームを利用するとします。 data AFormData = AFormData Text aForm :: Html -&gt; MForm Handler (FormResult AFormData, Widget) aForm = renderDivs $ AFormData &lt;$&gt; areq textField "A Text" Nothing data BFormData = BFormD…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/03/11/232319</id><title type="text">generateの罠</title><updated>2017-03-11T23:24:28+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/03/11/232319"/><summary type="html">vectorパッケージのData.Vectorにはgenerateという関数がある。 generate :: Int -&gt; (Int -&gt; a) -&gt; Vector a 型から全てを知ることはできないが、だいたい想像通りgenerate n fは[f 0, f 1, f 2, ...f (n - 1)]からなるVectorを生成する。しかし、これは要素を評価はしない。生成されるのはあくまでサンクのVectorだ。 Prelude &gt; import Data.Vector as V Prelude V&gt; V.length $ V.generate 5 (const undefined) 5 ve…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2016/12/24/193038</id><title type="text">LiquidHaskell コトハジメ</title><updated>2016-12-25T15:06:06+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2016/12/24/193038"/><summary type="html">このエントリは Haskell Advent Calendar 2016 および Formal Method Advent Calendar 2016 の 23 日目の投稿です。のはずでしたがすでに日付が変わりました。謹んでお詫び申し上げます。 ちなみに 22 日目の担当者はそれぞれ Haskell Advent Calendar 2016 : heredocsの紹介 - Qiita Formal Method Advent Calendar 2016 : 農夫 山羊 キャベツ 狼 - Qiita です。偶然ですが同じ方が執筆担当ですね。 さて、本エントリでは Haskell の型の表現力をよ…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2016/12/19/060147</id><title type="text">NGK2016B で Kubernetes + Alloy について話してきました</title><updated>2016-12-19T06:01:47+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2016/12/19/060147"/><summary type="html">先日、毎年恒例のなごや LT 大会 NGK2016B / 名古屋合同懇親会 2016 忘年会 で発表してきました。 机上の Kubernetes - 形式手法で見るコンテナオーケストレーション #NGK2016B from y_taka_23 www.slideshare.net 当日の動画は NGK 2016B LT #2 - YouTube から見ることができます。 ちなみに NGK での発表は 4 年連続 4 回目です。今回も含めてすべてモデル検査が題材になっています。 NGK2013B : Alloy ではじめる簡単モデル検査 NGK2014B : 猫でもわかる！ モデル検査器 SPI…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/12/18/181540</id><title type="text">波打たせるものの正体(エクステンシブル・タングル)</title><updated>2016-12-18T18:15:40+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/12/18/181540"/><summary type="html">Haskell Advent Calendar 11日目 リアルワールドなHaskellerは、幾十ものフィールドを持つ大きなレコードをしばしば扱う羽目になる。モナディックにレコードを構築したい場合、RecordWildCards拡張を用いて以下のようにするのが定番だ。 import System.Random data Rec = Rec { foo :: String, bar :: Int, baz :: Double, qux :: Bool } makeRec = do foo &lt;- getLine bar &lt;- length &lt;$&gt; getLine baz &lt;- readLn qu…</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/12/haskellyesod-typedcontent.html</id><title type="text">[haskell][yesod] TypedContentを利用してクライアントが要求するフォーマットでレスポンスを返す</title><updated>2016-12-17T15:16:26.835+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/12/haskellyesod-typedcontent.html"/><summary type="text">Yesod Advent Calendar 2016の6日目の記事です。

RESTfulなAPIを提供する場合、クライアントの都合にあわせて、フォーマットを変えてレスポンスを返したいケースがあります。サーバー上で管理しているDBから、表現だけをHTML, JSON, XML, CSVなどに変更して返すイメージです。例えば、人物情報（名前、年齢、性別など）の一覧を返す際には以下のようなデータが返されることになります。

HTML
&lt;table border&gt;
  &lt;tr&gt;
    &lt;th&gt;name&lt;/th&gt;    &lt;th&gt;sex&lt;/th&gt;    &lt;th&gt;age&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Taro Yamada&lt;/td&gt;    &lt;td&gt;Male&lt;/td&gt;    &lt;td&gt;18&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Hanako Yamada&lt;/</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/07/yesodhaskell-stack-new-xxx-project.html</id><title type="text">[haskell][yesod] stackのnewコマンドで指定できるyesod関連templateの説明</title><updated>2016-12-03T23:37:28.283+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/07/yesodhaskell-stack-new-xxx-project.html"/><summary type="text">現状、stackで指定できるyesod関連のtemplatesには以下のものがあります。どのtemplateに何が用意されているのか、知りたかったのですがどこにも説明されていないようなので、調べてまとめてみました。
% stack templates | grep yesod
yesod-hello-world （←現時点では削除されています）
yesod-minimal
yesod-mongo
yesod-mysql
yesod-postgres
yesod-postgres-fay
yesod-simple
yesod-sqlite


以下、各テンプレートの説明です。後に出てくるテンプレートほど内容が複雑になっています。テンプレートを指定して新しいプロジェクトを生成する場合は以下のコマンドを実行します。
% stack new プロジェクト名 yesod-???




</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/11/emacs-emacsgrep.html</id><title type="text">[emacs] emacs上のgrep関連機能、複数ファイルの一括置換手順のまとめ</title><updated>2016-11-30T10:03:25.873+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/11/emacs-emacsgrep.html"/><summary type="text">emacs上でgrep関連の機能を利用する際のTIPSをまとめておきます（よく忘れて調べ直すので…）。


grepコマンドのオプション

指定ディレクトリ以下のファイルを再帰的に検索

-R DIR    シンボリックリンクを辿る
-r  DIR    シンボリックリンクは辿らない

検索対象をファイル名でフィルタする

--include=GLOB    GLOBにファイル名を指定する。"*.cpp"のようにワイルドカード（*,?,[...]）を指定可能

検索対象から指定ファイル・ディレクトリを除外する

--exclude=GLOB   GLOBに除外するファイルのファイル名を指定する（ワイルドカード指定可能）。
--exclude-dir=DIR DIRに指定されたディレクトリをスキップ


使用例：

docディレクトリ以下の.txtを拡張子に持つ全てのファイルを対象に"</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/09/cygwin-cygwin64.html</id><title type="text">[cygwin] cygwin64セットアップメモ</title><updated>2016-11-28T00:47:36.358+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/09/cygwin-cygwin64.html"/><summary type="text">自分向け備忘録。cygwin64環境をセットアップする際の手順をまとめておきます。


設定


ssh-agent関連

ssh-agentの重複起動を防ぐ
ssh-agentのために秘密鍵セットアップ

~/.ssh/

※group/otherのrw権限は削除


ssh-agentがパスワードを覚えてくれなくなった問題への対処

pingのエラー回避
ユーザーのアカウント名、ホームディレクトリの変更

/etc/passwdを編集する

GNU screen でlessやvimの終了後に画面クリアをしない方法
改行コードにCR+LFが用いられているbashスクリプトを実行するための設定
tcshのデフォルト補完設定のイマイチな部分を修正




環境変数

HOME

ホームディレクトリを設定



SHELL

"/bin/tcsh"とすることでデフォルトのシェルが切り替わる
</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2016/10/31/025512</id><title type="text">HaskellのロガーKatipを試す</title><updated>2016-10-31T02:55:12+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2016/10/31/025512"/><summary type="html">モチベ Haskell の実行時ログ出力を行うライブラリは monad-logger が一番有名っぽい。 これは Yesod 陣営が開発しているから安心感があるし、バックエンドが fast-logger なので速度も信頼できる。 ただ (自分の調べ方が悪いのかもしれないが) ちょっと自分の用途には機能が足りなかった。 具体的には以下の機能: ログにタイムスタンプを付記したい。 ロガーに名前をつけたい。 ファイルサイズか日付でログローテーションしたい。 Katip という別のロガーライブラリは機能が豊富のようなので今回はそれを試してみる。 (この記事のHaskell環境: lts-6.23) K…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/10/10/000011</id><title type="text">割とすぐに始められるextensibleチュートリアル(レコード編)</title><updated>2016-10-10T00:50:06+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/10/10/000011"/><summary type="html">ごきげんよう諸君。今回はextensibleについて説明しよう。 extensibleはその名の通り、拡張可能なデータ構造を提供するライブラリである。具体的には、型レベルのリストによって特徴づけられる積と和を提供する。非常に残念なことに、GHC 8.0.1ではコンパイラのバグのせいでそもそもライブラリがビルドできない*1。来たる8.0.2では修正されているので、それを待つほかない。 とにかく、ここでは積の応用技である拡張可能レコードについて紹介する。使い方は簡単だ。まず使いたいフィールド名をスペースで区切ってmkFieldに渡す。 {-# LANGUAGE TemplateHaskell, D…</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/08/haskellyesod-yesodrestfuljson-api.html</id><title type="text">[haskell][yesod] YesodにおけるRESTfulなJSON API実装チュートリアル</title><updated>2016-08-28T17:53:43.356+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/08/haskellyesod-yesodrestfuljson-api.html"/><summary type="text">HaskellのwebフレームワークであるYesodにおいて、RESTful APIを実装する手順を紹介します。Haskell上のデータ構造をJSONテキストに変換する、逆に、JSONテキストをパースしてHaskell上のデータ構造を生成する、といった処理が非常に簡単に実現できます。加えて、コードを書かなくてもバックエンドのDBとのORマッピングが可能になっており、効率的に開発することができます。
ここで紹介しているコードはgithubにコミットしています。


準備：

json-sampleというプロジェクト名でYesodのscaffolding siteをセットアップする

空のプロジェクト生成

% stack new json-sample yesod-sqlite --system-ghc

"--system-ghc"は省略可能。インストール済みのghcを使うことを指示し</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/07/haskellyesod-stackyesod-tutorial.html</id><title type="text">[haskell][yesod] stack対応版Yesod tutorial</title><updated>2016-07-17T18:06:36.108+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/07/haskellyesod-stackyesod-tutorial.html"/><summary type="text">HaskellのwebサービスフレームワークにYesodというフレームワークがあります。Yesodに触れたことのない開発者向けに書かれたチュートリアルの一つにYesod tutorialがあり、手順に沿っていくだけで簡単なwebサービスを動作させることができ、Yesodで何ができるかを簡単に理解できるようになっています。
ただ残念なことに、このYesod tutorialの記載は内容が古く、stackを利用した現行の手順とマッチしなくなっています。stackに対応している最新環境（Yesod 1.4.x）における順があると役に立つと思い、書き起こしてみました。


Before the real start（はじめに）

Install（インストール手順）
stackをインストールする。以下のサイトが参考になります。

installation instructions for </summary></entry><entry><id>https://kurokawh.blogspot.com/2016/07/haskellyesod-stack-exec-yesod-devel.html</id><title type="text">[haskell][yesod] stack exec -- yesod devel で devel.hs: getAddrInfo: does not existというエラーになる問題の対処方法</title><updated>2016-07-17T17:39:43.279+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/07/haskellyesod-stack-exec-yesod-devel.html"/><summary type="text">
Widnwos環境での現象：
windows上でyesodのscafolding siteをセットアップし、さあ起動！ブラウザから接続確認してOKとなるはずが、なぜか「The application isn't built」という表示が出てしまいました。



このときターミナルには以下のようなログが出力されていました。
% stack exec -- yesod devel
Yesod devel server. Type 'quit' to quit
Application can be accessed at:

http://localhost:3000
https://localhost:3443
If you wish to test https capabilities, you should set the following variable:
  export </summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/05/03/211430</id><title type="text">写真の撮り方</title><updated>2016-06-14T23:59:05+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/05/03/211430"/><summary type="html">物体の発する光や反射した光を結像し、何らかの媒体に記録したものを写真と呼ぶ。カメラと呼ばれる道具には「撮影」という動作が必ず定義されており、撮影によって内部状態に画像を記録できる。内部状態を取り出して処理する(現像)ことで写真が得られる。大抵のカメラには以下のようなパラメータがあり、それらを最適化するのが撮影者の仕事になる。 焦点(Focus) はっきりとした像を得るには、光学系の焦点をそれに合わせる必要がある。最近のカメラは対象物の距離を測定し、自動で焦点を合わせる(オートフォーカス)機能を持っているものもある。 焦点距離(Focal length) 焦点距離が長いほど像は拡大されて見えるよ…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/04/08/215045</id><title type="text">今のところ比較的簡単なモナドの作り方</title><updated>2016-04-08T21:51:50+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/04/08/215045"/><summary type="html">準備 モナドを作るには、どんなモナドを作りたいか考える。モナドは一般に、どのようなアクションが使えるかによって特徴付けられる。その点ではオブジェクト指向におけるインターフェイスとよく似ている。 では、foo :: String -&gt; M Boolとbar :: M Intという二種類のアクションを持つモナドを作るとしよう。まず、どんなアクションが使えるかを表すデータ型を定義する。 {-# LANGUAGE GADTs #-} data MBase x where Foo :: String -&gt; MBase Bool Bar :: MBase Int GADT(一般化代数的データ型)の各データ…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/02/29/191740</id><title type="text">GHC 8.0.1/base-4.9.0.0の新機能まとめ</title><updated>2016-02-29T19:17:40+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/02/29/191740"/><summary type="html">GHC 8.0.1は、最上位の桁が変わるだけあって、かなり新しい機能が追加されている。 base-4.9.0.0 めっちゃインスタンスが増えた ghc/changelog.md at ghc-8.0 · ghc/ghc · GitHubを参照。あるべきインスタンスが存在することにより、孤児インスタンスを定義する必要がなくなるため、ぐっとストレスが減る。Monoid a =&gt; Monad ((,) a)、Traversable ZipListなど、いくつかは私がやった。 Semigroup ついにData.Semigroupが追加された。将来的にはこれはモノイドのスーパークラスになる。この変更に…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/02/04/214714</id><title type="text">比を最適化する</title><updated>2016-02-04T21:47:14+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/02/04/214714"/><summary type="html">二つの負でない実数、を考える。比をある値に近づけたいといった条件が複数あり、それらを最適化したいとき、どうするのがよいだろうか。 序: 近道の階段 簡単な方法の一つとして考えられるのは、単純に比の差をとり、それらの平方の和を最適化の対象とするというものだ。 しかし、これは最適化の結果、しばしば、のどちらかが0にぶつかってしまう。これは目的関数として非常にいびつであり、直感的とも言いがたい。 破: バリアフリー化 0や1に近い比率は極端であり、望まれていない。境界に近づくほど目的関数が無限大に発散するようにできないだろうか。 そんなときに使えるのがロジットだ。ロジットは0より大きい1未満の実数を…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/11/haskellyesodsqlite-persistent.html</id><title type="text">[haskell][persistent][sqlite] Persistentパッケージ利用時にテーブルにインデックスを生成する方法</title><updated>2016-01-30T17:12:12.076+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/11/haskellyesodsqlite-persistent.html"/><summary type="text">PersistentパッケージにはMigration機能が備わっており、自動的にテーブルを生成してくれます。スキーマ変更を行った際にも、変換が可能な限りテーブル内のレコードを保持したまま新しいスキーマに変換してくれます（Migration機能については過去のエントリでまとめています）。

自分が利用する上で、インデックスやトリガーを生成する手順が紹介されておらず困っていたのですが、rawExecuteという関数を用いることで自由にDDLを発行できることがわかりました。以下その手順とサンプルを紹介しておきます。


サンプルコード：
以下は、personテーブルのnameカラムにインデックスをs生成するサンプルです。runMigration実行直後に、runExecuteを実行することでインデックスを生成しています。このサンプルではインデックスを生成しているだけですが、同じ手順でトリガーの</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/08/haskellyesodsqlite-persistentmigration.html</id><title type="text">[haskell][persistent][sqlite] Persistentパッケージのmigration機能のまとめ</title><updated>2016-01-30T17:11:40.032+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/08/haskellyesodsqlite-persistentmigration.html"/><summary type="text">HaskellでDB操作ができるPersistentパッケージの紹介をしましたが、このエントリではPersistentパッケージが提供しているmigration機能をまとめておきます。
DBを作って運用していると、機能追加や仕様変更に伴いスキーマ変更が必要になるケースが多々あります。このようなケースにおいてPersistentのmigration機能がどれくらい使えるのかを調べた結果です。


基本：
Persistetのmigration機構は（保守的なルールに沿って）スキーマ変更をある程度まで自動で処理してくれます。
ロードしたDB内のテーブル情報と、コードで定義されたEntity Definition（テーブル定義）を比較し、以下のケースにおいてスキーマの変更を行います。

カラムの型を変更した場合：

ただし、値の変換ができない場合には、DBによって拒否されることになります。

</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/01/haskellgccwin-windowshaskell.html</id><title type="text">[haskell][gcc][win] Windows版Haskell Platform付属のgccでC++11のコードをコンパイルする方法</title><updated>2016-01-15T00:45:37.692+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/01/haskellgccwin-windowshaskell.html"/><summary type="text">Windows版のHaskell Platformにはmingwが同梱されておりgccが含まれています。現在自分のPCにはHaskell Platform 2014.2.0.0をインストールしているのですが、これに付属されているgccでC++11のコードをコンパイルしようとすると、以下のようなエラーになってしまいました。
% gcc -std=c++11 cpp11.cpp
cc1plus.exe: error: unrecognized command line option '-std=c++11'


-stdオプションで"c++11"を指定しても、認識してくれません。
本家のサイトによると、'-std=c++11'オプションはgcc 4.7でサポートされたようです。これに対し、Haskell Platform 2014.2.0.0に付属されているgccのバージョンを確認したところ</summary></entry><entry><id>https://kurokawh.blogspot.com/2013/11/sqlite-sqlite.html</id><title type="text">[sqlite] SQLiteのロック・トランザクション関連仕様の整理</title><updated>2016-01-06T12:11:40.986+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2013/11/sqlite-sqlite.html"/><summary type="text">SQLiteは共有ロック・排他ロックの仕組みを備えており、プロセス内の複数スレッド、だけでなく、プロセスをまたぐ状態でSQLが同時に発行されても適切に処理されます。
トランザクションに複数のモードが存在し、指定するモードに依って取得されるロックが変わります。さらにSQLの内容に依存してロック状態が遷移するため、複数プロセスがアクセスしたときの挙動を正確に把握できるよう、仕様を整理してみました。
（文中の「プロセス」は、正確には「プロセス、もしくはスレッド」を意味します。）


DBのロック状態の種類：

UNLOCKED

ロックされていない状態。誰も読み書きしていない。DBの初期状態。

SHARED

read可、write不可な状態。複数プロセスが同時にSHAREDロックを取得可能。複数プロセスが同時にreadできることを意味する。DBがこの状態にあるとき、他のプロセスからの</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/12/30/220159</id><title type="text">デシリアライザとスキーマ</title><updated>2015-12-30T22:16:49+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/12/30/220159"/><summary type="html">盛大に遅れました… qiita.com 最近思いついたネタで実用性の高そうなものを紹介。 binaryやcerealのようなライブラリはデータを密にシリアライズするが、その際にフィールド名や型などの情報は失われてしまう。かといってそれらを一つ一つすべて含めるとひどく効率の悪いフォーマットになってしまう。そこで、スキーマを分離できるような仕組みを作れないかと考えて作ったのがこのクラスだ。 {-# LANGUAGE TypeFamilies, ScopedTypeVariables, FlexibleContexts, UndecidableInstances #-} import Data.Bi…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/07/cygwinhaskellemacs-mingwcygwincygdrivec.html</id><title type="text">[cygwin][haskell][emacs] MinGWでcygwinの"/cygdrive"パスにアクセスする裏技（cygwin環境のemacsでflycheckを動作させる方法）</title><updated>2015-12-27T23:55:24.842+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/07/cygwinhaskellemacs-mingwcygwincygdrivec.html"/><summary type="text">haskell関連のコマンドはMinGW上でビルドされているため、cygwin環境の"/cygdrive"から始まるパスには対応していません。haskell-hlintから呼び出されるhlintも当然この問題の影響を受けておりemacs関連の設定が適切にされていたとしても、以下のようなエラーが表示されてしまいます。



ミニバッファに表示されるエラー詳細：
Suspicious state from syntax checker haskell-hlint: Checker haskell-hlint returned non-zero exit code 1, but no errors from output: hlint.exe: Couldn't find file: /cygdrive/c/Users/Hiroyuki/tmp/flycheck_hello.hs



</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/12/10/200630</id><title type="text">正格フラグ、バンパターン、正格版関数・データ構造</title><updated>2015-12-10T20:06:30+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/12/10/200630"/><summary type="html">Haskellスペースリーク Advent Calendar 2015 9日目 Haskellerとて、時には厳しくならなければいけないこともある―― @fumieval, 2015 Haskellは遅延評価を基本としているため、場合によっては未評価の式が積もり非効率な状況に陥ることがある。これを防ぐため、部分的に正格評価にするための仕組みが用意されている。もちろんこれらは闇雲に使えばよいというものではない。使うべきポイントを把握し、これらを見逃さないようにしよう。 この記事では、それらの機能の正しい使い方、間違った使い方を紹介していこう。 カウンター・カウンターズ・サンクス 条件を満たす要素…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/11/haskellstack-stack-exec-ghcicouldnt.html</id><title type="text">[haskell][stack] stack exec ghciで”Couldn't match expected type"エラーが発生する問題の対処</title><updated>2015-11-08T15:09:21.187+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/11/haskellstack-stack-exec-ghcicouldnt.html"/><summary type="text">先日、haskellのパッケージ管理をcabalからstackに移行して「便利〜！」と感動していたところなのですが、stach exec ghciでソースをロードしようとすると"Couldn't match expected type: xxxxx"とエラーが発生する問題に遭遇しました。
ネットの情報を参考に解決することができたのでその手順をまとめておきます。


問題：
stack buildは成功するにもかかわらず、stack exec ghci xxx.hs（xxx.hsはbuild対象のファイル）がエラーになる。
stack exec ghci実行時のエラーログ：
% stack exec ghci FileToVec.hs
GHCi, version 7.10.2: http://www.haskell.org/ghc/  :? for help
[1 of 1] </summary></entry><entry><id>https://kurokawh.blogspot.com/2015/11/cygwin-cygwinpathusrbinusrlocalbin.html</id><title type="text">[cygwin] cygwinのシェル起動時にPATHの先頭に/usr/binと/usr/local/binが勝手に追加されないようにする</title><updated>2015-11-04T22:29:43.126+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/11/cygwin-cygwinpathusrbinusrlocalbin.html"/><summary type="text">cygwinのデフォルトの設定では、シェル起動時に以下の2つのディレクトリが自動的にPATHの先頭に追加されます。

/usr/local/bin
/usr/bin


cygwinでインストールされているコマンドと同名の別コマンドを優先して起動したい場合には、この設定が邪魔になります。
これを無効にするには以下の方法があります。お好みでどちらかを選択してください。

/etc/profileもしくは/etc/csh.loginの該当処理をコメントアウトする（bash / tcsh）

cygwinがPATHを上書きしているのは、/etc/profile（bashの場合）と/etc/csh.login（tcshの場合）です。これらのスクリプトを編集することで、/usr/binと/usr/local/binが勝手に追加されないようにできます。

ORIGINAL_PATHでPATHを上書き</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/10/27/234832</id><title type="text">動物、とくにヒトと性について</title><updated>2015-10-27T23:52:44+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/10/27/234832"/><summary type="html">我々脊椎動物は有性生殖をする。したがって、繁殖に寄与する性質が必然的に残り、そうでないものは消えてゆく。オスは精子、メスは卵を作り出すという非対称性があり、体つきや行動もそれに合わせるように決まるのは自然だ。一夫多妻制の種においては、オスはメスを取り合うためにより強靭で攻撃的な性質が要求される。日本では法律上一夫一妻制を取るが、その影響は強く残っているだろう。実際、オスとして生を受けた私も、コミュニティの中でそれを体感している。 生まれつきの体質か、育った環境のせいかは知らないが、幼いころは体が弱かった(3才のころ、両足飛びができなかったそうだ)。そのため、幼いころの私の趣味は読書、ままごとや…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/09/ssh-opensshssh-agent.html</id><title type="text">[ssh] OpenSSHのアップデートでssh-agentがパスワードを覚えてくれなくなった問題への対処</title><updated>2015-09-06T00:44:24.703+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/09/ssh-opensshssh-agent.html"/><summary type="text">ssh-agent/ssh-addを利用してsshを用いたサーバーへのログイン時のパスワード入力を省略している方、OpenSSHのアップデートにより、毎回パスワード入力を求められるようになった場合は以下の設定を疑ってみてください。


問題の症状：
OpenSSHパッケージを最新版にアップデートすると発生するようになった問題です。ssh-agentを起動してssh-addで鍵を正しく登録しているにも関わらず、sshコマンドを実行する度に"password:"というプロンプトが表示されてパスワードの入力を求められてしまいます。


環境：
問題に遭遇＆解決した私のcygwin環境では以下のバージョンで問題が発生することを確認しました。

OpenSSH_7.0p1, OpenSSL 1.0.2d 9 Jul 2015
OpenSSH_7.1p1, OpenSSL 1.0.2d 9 Jul </summary></entry><entry><id>https://kurokawh.blogspot.com/2015/09/cygwin-cygwinx-serverxwin.html</id><title type="text">[cygwin] cygwin版X server（XWin）にリモートクライアントから接続できない問題の対処方法</title><updated>2015-09-02T23:09:07.989+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/09/cygwin-cygwinx-serverxwin.html"/><summary type="text">cygwinを最新バージョンにアップデートしたところ、リモートのX clientからwindows上のcygwin版X serverに接続できなくなってしまいました。
対処方法は簡単でXWin起動時に"-listen tcp"オプションを付けてあげればよいだけです。cygwinバージョンアップ前にはオプション指定なしで接続できていたため、デフォルトの設定が変わったのだと思われます。


cygwin環境：
uname -aで表示されるcygwinバージョン情報です。

% uname -a
CYGWIN_NT-6.1 xxx 2.2.1(0.289/5/3) 2015-08-20 11:42 x86_64 Cygwin



問題発生時の症状：
クライアント側で起動したxtermをサーバー側で表示しようとすると、以下のようなエラーになっていました。
% xterm
xterm Xt </summary></entry><entry><id>https://kurokawh.blogspot.com/2015/08/cygwinemacs-cygwinemacsgtags.html</id><title type="text">[cygwin][emacs] cygwin版emacsでgtagsを使えるようにする方法</title><updated>2015-08-17T00:49:02.649+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/08/cygwinemacs-cygwinemacsgtags.html"/><summary type="text">これまでタグジャンプにはctagsを用いていたのですが、gtagsの「呼び出し元も一覧できる」という機能に惹かれてセットアップしてみました。いくつかはまりポイントがあったのでその対応方法も含め、手順を残しておきます。
cgwin提供のパッケージにはgtagsは含まれていなかったため、自前でビルドすることにしました。


目次：

gatgsの特徴
gtagsのインストール手順
emacsの設定
gtagsの使い方




gtagsの特徴：

良い点！

関数の呼び出し元を一覧表示しジャンプできる（gtags-find-rtag）
関数だけでなく、ローカル変数を含む任意のシンボルをタグジャンプできる（gtags-find-symbol）

正規表現で一覧絞り込み可能（gtags-find-pattern）
開いているファイルで絞り込み可能（gtags-parsefiile）

特定文字列</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/06/subversion.html</id><title type="text">[subversion] 特定ディレクトリ以下をサーバーとの同期対象から除外する方法</title><updated>2015-06-26T13:55:24.651+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/06/subversion.html"/><summary type="text">subversionでチェックアウトした作業コピー内の特定ディレクトリ以下をサーバーとの同期対象から除外したい、ということを考えたことはないでしょうか。
例えば、リポジトリの特定ディレクトリ以下に自分にとって不要なファイルやアーカイブが多数コミットされていると、以下のような無駄が生じます。これらの無駄をなくしたい、というのが主なユースケースです。

不要なファイル・アーカイブによってディスクスペースが占有される
サーバー上に更新が発生した際にupdateに余計な時間がかかってしまう



単純に特定ディレクトリ以下の作業ファイルを削除してしまうと、コミット時に差分として検知されてしまう、また、次回以降のupdateコマンドで再ダウンロードされてしまう、という非常に残念な挙動になります。

このようなケースでは以下の方法を使えば、差分が検知されない状態で所定ディレクトリ以下のファイルを削除</summary></entry><entry><id>http://lotz84.github.io/posts/published_haskell_by_example.html</id><title type="text">Haskell by Exampleを公開しました</title><updated>2015-05-06T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/published_haskell_by_example.html"/><summary type="html"></summary></entry><entry><id>http://lotz84.github.io/posts/build-chat-server-on-haskell.html</id><title type="text">Haskellでチャットサーバーを建ててみた</title><updated>2015-04-27T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/build-chat-server-on-haskell.html"/><summary type="html"></summary></entry><entry><id>http://lotz84.github.io/posts/unity-hands-on-session-at-camphor.html</id><title type="text">Unityハンズオン勉強会に参加しました@CAMPHOR-</title><updated>2015-04-25T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/unity-hands-on-session-at-camphor.html"/><summary type="html"></summary></entry><entry><id>http://lotz84.github.io/posts/the-way-of-separate-compilation-in-swift.html</id><title type="text">Swift で分割コンパイルする方法</title><updated>2015-02-07T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/the-way-of-separate-compilation-in-swift.html"/><summary type="html"></summary></entry><entry><id>http://lotz84.github.io/posts/use-selenium-by-haskell.html</id><title type="text">HaskellでSeleniumを使ってみる＠勉強会</title><updated>2014-12-14T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/use-selenium-by-haskell.html"/><summary type="html"></summary></entry></feed>