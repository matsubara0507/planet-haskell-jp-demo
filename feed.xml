<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title type="text">Planet Haskell (JP)</title><id>https://matsubara0507.github.io/planet-haskell-jp-demo/feed.xml</id><updated>2019-09-14T23:40:48+09:00</updated><link href="https://matsubara0507.github.io/planet-haskell-jp-demo"/><entry><id>http://syocy.hatenablog.com/entry/init-ghc-8-8-1</id><title type="text">HaskellやっていくGHC8.8.1令和元年白露の候</title><updated>2019-09-14T23:40:48+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/init-ghc-8-8-1"/><summary type="html">GHC 8.8.1 が出たので雑に環境を整えていきます。 OS: Ubuntu 18.04 LTS on VirtualBox on Windows screenshot GHC, Cabal 最近は ghcup で入れている。 $ ghcup upgrade $ ghcup list --tool all $ ghcup install 8.8 $ ghcup install-cabal latest ~/.ghcup/bin と ~/.cabal/bin にPATHが通っていない場合は通しておく。 stack は手になじまない感じがして最近使っていない。 stack のいいところとしてスク…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/09/14/171210</id><title type="text">emacsで自動改行して欲しくない</title><updated>2019-09-14T17:12:10+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/09/14/171210"/><summary type="html">特に端末へコピペとかするときに、本当に迷惑なので。 init.el をイジる。まず、 (setq indent-line-function 'insert-tab) なんて記述があったので削除（誰がなんのために入れたんだ？）。 次に、 (electric-indent-mode 0) を追加。 これでほとんどのモードで直ったのだけど、 markdown-mode だけは駄目だったので、ダメ押しの (setq markdown-indent-on-enter nil) を追加。 RET 押下時の indent-and-new-item の呼び出しを抑制できるらしい（勝手にそんなことしないで）。 …</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/09/07/115437</id><title type="text">単純で頑強なメッセージングシステム、franz</title><updated>2019-09-08T21:41:20+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/09/07/115437"/><summary type="html">Haskell製の新しいメッセージングシステムfranz(フランツ)の紹介。 github.com 背景 取引所にあるマシンで取引プログラムを実行するのが我々の仕事だが、朝8時に起動したらあとは昼寝したり酒を飲んだりというわけにはいかない。モニタリングしたり、分析のためにデータを残しておく必要がある。そのため、プログラムによって解析しやすい形でログを出力する。 今までは複数の種類のレコードをシリアライズし、一つのファイルに連結させる独自のフォーマットを10年近く使っていたが、書いていて恥ずかしくなるような多数の問題を抱えていた。 柔軟性が乏しい: 32bit整数や文字列などの単純な値しか格納で…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/09/03/190018</id><title type="text">今日はRustのLT会 Shinjuku.rs #6 @FORCIAの日です</title><updated>2019-09-03T20:32:30+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/09/03/190018"/><summary type="html">ブログ枠で RustのLT会 Shinjuku.rs #6 @FORCIA に来ています。ブログ枠が何をすればいいのかあまりわかってませんが、とりあえずブログにメモを残しておきます。 開会 会場、懇親会はフォルシア株式会社さんが提供(ありがとうございます！) 次回 11/19 で一周年 Rust初心者がRay Tracer書いてみた / keisukefukudaさん 前回も初心者、相変わらず初心者 Ray Tracer は楽しいので、新しい言語を練習するときに良い Ray Tracing とは？ 3Dのオブジェクトを平面に描画する ちゃんと計算する オフラインで時間をかけて アルゴリズム、プ…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2019/08/26/090000</id><title type="text">jqのGo実装 gojq を作りました！ ― スタックマシン型インタープリタによるイテレータセマンティクスの実装</title><updated>2019-08-26T09:00:03+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2019/08/26/090000"/><summary type="html">jqはとても便利なコマンドです。 JSONを返すAPIを実装するときや、SaaSのAPIから特定の情報を抜き出してシェル変数に代入するときなど、web開発や運用には欠かせないツールとなっています。 しかし、私にとってjqのクエリを一発で書くのは容易ではなく、思い通りの出力が得られないことがよくありました。 難しいエラーメッセージに悩まされて、jqで書くのを諦めて別の言語で書き直すこともありました。 jqの十八番と思える場面で使いこなせないのは、なかなか悔しいものがあります。 ツールを使うのが難しいなら、同じものを作ってしまえばよいのです。 jqの全ての機能を実装する jqを言語としてきちんと書…</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-08-26-qr-code-reader-with-elm.html</id><title type="text">Elm で QR コードリーダー</title><updated>2019-08-26T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-08-26-qr-code-reader-with-elm.html"/><summary type="html">&lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;タイトル通りです． ただし，jsQR とポートを使ってるだけです． Elm 側で QR コードのデコードをするわけじゃないので，そういうのを期待した人はすいません．&lt;/p&gt;
&lt;p&gt;今回の実装は下記のリポジトリにあります:&lt;/p&gt;
&lt;h4 id="section"&gt;&lt;iframe width="426" height="183" scrolling="no" frameborder="0" src="https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/anaqram-web-samples"&gt;&lt;/iframe&gt;&lt;/h4&gt;
&lt;p&gt;リポジトリの詳細のとこを読むとわかるんですけど，実はこの話は書典7のネタの一部を抜粋したものです(典の方はもっと丁寧に書いてます)．&lt;/p&gt;
&lt;h2 id="elm-からカメラを使う"&gt;Elm からカメラを使う&lt;/h2&gt;
&lt;p&gt;ブラウザからカメラを使うには JavaScript の &lt;a href="https://developer.mozilla.org/ja/docs/Web/API/MediaDevices/getUserMedia"&gt;&lt;code&gt;MediaDevices.getUserMedia()&lt;/code&gt;&lt;/a&gt; を使う． このメソッドを使うには &lt;a href="https://webrtc.github.io/samples/src/content/getusermedia/gum"&gt;WebRTC のサンプルコード&lt;/a&gt;を参考に次のように書く:&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode javascript"&gt;&lt;code class="sourceCode javascript"&gt;&lt;span id="cb1-1"&gt;&lt;a href="#cb1-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;const&lt;/span&gt; constraints &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt; &lt;span class="dt"&gt;audio&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="kw"&gt;false&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;video&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="kw"&gt;true&lt;/span&gt; &lt;span class="op"&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-2"&gt;&lt;a href="#cb1-2"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb1-3"&gt;&lt;a href="#cb1-3"&gt;&lt;/a&gt;&lt;span class="kw"&gt;async&lt;/span&gt; &lt;span class="kw"&gt;function&lt;/span&gt; &lt;span class="at"&gt;initCamera&lt;/span&gt;(videoId) &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-4"&gt;&lt;a href="#cb1-4"&gt;&lt;/a&gt;  &lt;span class="cf"&gt;try&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-5"&gt;&lt;a href="#cb1-5"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;const&lt;/span&gt; stream &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="cf"&gt;await&lt;/span&gt; &lt;span class="va"&gt;navigator&lt;/span&gt;.&lt;span class="va"&gt;mediaDevices&lt;/span&gt;.&lt;span class="at"&gt;getUserMedia&lt;/span&gt;(constraints)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-6"&gt;&lt;a href="#cb1-6"&gt;&lt;/a&gt;    &lt;span class="va"&gt;document&lt;/span&gt;.&lt;span class="at"&gt;getElementById&lt;/span&gt;(videoId).&lt;span class="at"&gt;srcObject&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; stream&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-7"&gt;&lt;a href="#cb1-7"&gt;&lt;/a&gt;  &lt;span class="op"&gt;}&lt;/span&gt; &lt;span class="cf"&gt;catch&lt;/span&gt; (e) &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-8"&gt;&lt;a href="#cb1-8"&gt;&lt;/a&gt;    &lt;span class="at"&gt;handleError&lt;/span&gt;(e)&lt;span class="op"&gt;;&lt;/span&gt; &lt;span class="co"&gt;// ここの実装は割愛&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-9"&gt;&lt;a href="#cb1-9"&gt;&lt;/a&gt;  &lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-10"&gt;&lt;a href="#cb1-10"&gt;&lt;/a&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;HTML 側は &lt;code&gt;id=videoId&lt;/code&gt; を設定した &lt;code&gt;video&lt;/code&gt; タグを用意するだけで良い． &lt;code&gt;initCamera&lt;/code&gt; メソッドを Elm から使うにはポート機能を使って呼び出す:&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb2-1"&gt;&lt;a href="#cb2-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- QRCode.elm&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-2"&gt;&lt;a href="#cb2-2"&gt;&lt;/a&gt;&lt;span class="kw"&gt;port&lt;/span&gt; &lt;span class="kw"&gt;module&lt;/span&gt; &lt;span class="dt"&gt;QRCode&lt;/span&gt; &lt;span class="kw"&gt;exposing&lt;/span&gt; (&lt;span class="op"&gt;..&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb2-3"&gt;&lt;a href="#cb2-3"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-4"&gt;&lt;a href="#cb2-4"&gt;&lt;/a&gt;&lt;span class="kw"&gt;port&lt;/span&gt; &lt;span class="fu"&gt;startCamera&lt;/span&gt; : () &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Cmd&lt;/span&gt; &lt;span class="fu"&gt;msg&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;純粋関数型プログラミング言語である Elm にとって JavaScript のコードを直接呼び出すことは非純粋な行為(&lt;code&gt;Cmd a&lt;/code&gt; 型は非純粋な型)であり，&lt;code&gt;port&lt;/code&gt; プレフィックスを使って普通の関数とは全く別に管理される(&lt;code&gt;port&lt;/code&gt; が付くモジュール・関数はパッケージに含めることができない)． より詳しいポート機能については &lt;a href="https://guide.elm-lang.jp/interop/ports.html"&gt;guide.elm-lang.jp のポートのページ&lt;/a&gt;を読むと良いだろう．&lt;/p&gt;
&lt;p&gt;さて，&lt;code&gt;startCamera&lt;/code&gt; 関数の実装は JavaScript 側で次のように行った:&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode javascript"&gt;&lt;code class="sourceCode javascript"&gt;&lt;span id="cb3-1"&gt;&lt;a href="#cb3-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;// flags は Elm コードの JavaScript 側から与える初期値&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-2"&gt;&lt;a href="#cb3-2"&gt;&lt;/a&gt;&lt;span class="kw"&gt;const&lt;/span&gt; flags &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-3"&gt;&lt;a href="#cb3-3"&gt;&lt;/a&gt;  &lt;span class="dt"&gt;ids&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt; &lt;span class="dt"&gt;video&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;video_area&amp;#39;&lt;/span&gt; &lt;span class="op"&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-4"&gt;&lt;a href="#cb3-4"&gt;&lt;/a&gt;  &lt;span class="dt"&gt;size&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt; &lt;span class="dt"&gt;width&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="dv"&gt;300&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;height&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="dv"&gt;300&lt;/span&gt; &lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-5"&gt;&lt;a href="#cb3-5"&gt;&lt;/a&gt;&lt;span class="op"&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-6"&gt;&lt;a href="#cb3-6"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-7"&gt;&lt;a href="#cb3-7"&gt;&lt;/a&gt;&lt;span class="co"&gt;// true だけではなくカメラのサイズとリアカメラ優先フラグ(facingMode)を与える&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-8"&gt;&lt;a href="#cb3-8"&gt;&lt;/a&gt;&lt;span class="kw"&gt;const&lt;/span&gt; constraints &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-9"&gt;&lt;a href="#cb3-9"&gt;&lt;/a&gt;  &lt;span class="dt"&gt;audio&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="kw"&gt;false&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-10"&gt;&lt;a href="#cb3-10"&gt;&lt;/a&gt;  &lt;span class="dt"&gt;video&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;...&lt;span class="va"&gt;flags&lt;/span&gt;.&lt;span class="at"&gt;size&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;facingMode&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;environment&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-11"&gt;&lt;a href="#cb3-11"&gt;&lt;/a&gt;&lt;span class="op"&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-12"&gt;&lt;a href="#cb3-12"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-13"&gt;&lt;a href="#cb3-13"&gt;&lt;/a&gt;&lt;span class="kw"&gt;const&lt;/span&gt; app &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="va"&gt;Elm&lt;/span&gt;.&lt;span class="va"&gt;Main&lt;/span&gt;.&lt;span class="at"&gt;init&lt;/span&gt;(&lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-14"&gt;&lt;a href="#cb3-14"&gt;&lt;/a&gt;  &lt;span class="dt"&gt;node&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="va"&gt;document&lt;/span&gt;.&lt;span class="at"&gt;getElementById&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;main&amp;#39;&lt;/span&gt;)&lt;span class="op"&gt;,&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-15"&gt;&lt;a href="#cb3-15"&gt;&lt;/a&gt;  &lt;span class="dt"&gt;flags&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; flags&lt;/span&gt;
&lt;span id="cb3-16"&gt;&lt;a href="#cb3-16"&gt;&lt;/a&gt;&lt;span class="op"&gt;}&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-17"&gt;&lt;a href="#cb3-17"&gt;&lt;/a&gt;&lt;span class="va"&gt;app&lt;/span&gt;.&lt;span class="va"&gt;ports&lt;/span&gt;.&lt;span class="va"&gt;startCamera&lt;/span&gt;.&lt;span class="at"&gt;subscribe&lt;/span&gt;(&lt;span class="kw"&gt;function&lt;/span&gt;() &lt;span class="op"&gt;{&lt;/span&gt; &lt;span class="at"&gt;initCamera&lt;/span&gt;(&lt;span class="va"&gt;flags&lt;/span&gt;.&lt;span class="va"&gt;ids&lt;/span&gt;.&lt;span class="at"&gt;video&lt;/span&gt;) &lt;span class="op"&gt;}&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;あとはこんな感じに Elm 側で呼び出す:&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb4-1"&gt;&lt;a href="#cb4-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;module&lt;/span&gt; &lt;span class="dt"&gt;Main&lt;/span&gt; &lt;span class="kw"&gt;exposing&lt;/span&gt; (&lt;span class="fu"&gt;main&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb4-2"&gt;&lt;a href="#cb4-2"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-3"&gt;&lt;a href="#cb4-3"&gt;&lt;/a&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;QRCode&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-4"&gt;&lt;a href="#cb4-4"&gt;&lt;/a&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Browser&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-5"&gt;&lt;a href="#cb4-5"&gt;&lt;/a&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt; &lt;span class="kw"&gt;exposing&lt;/span&gt; (&lt;span class="op"&gt;..&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb4-6"&gt;&lt;a href="#cb4-6"&gt;&lt;/a&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Attributes&lt;/span&gt; &lt;span class="kw"&gt;exposing&lt;/span&gt; (&lt;span class="op"&gt;..&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb4-7"&gt;&lt;a href="#cb4-7"&gt;&lt;/a&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Events&lt;/span&gt; &lt;span class="kw"&gt;exposing&lt;/span&gt; (&lt;span class="fu"&gt;onClick&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb4-8"&gt;&lt;a href="#cb4-8"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-9"&gt;&lt;a href="#cb4-9"&gt;&lt;/a&gt;&lt;span class="fu"&gt;main&lt;/span&gt; : &lt;span class="dt"&gt;Program&lt;/span&gt; &lt;span class="dt"&gt;Config&lt;/span&gt; &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-10"&gt;&lt;a href="#cb4-10"&gt;&lt;/a&gt;&lt;span class="fu"&gt;main&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-11"&gt;&lt;a href="#cb4-11"&gt;&lt;/a&gt;  &lt;span class="dt"&gt;Browser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;element&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-12"&gt;&lt;a href="#cb4-12"&gt;&lt;/a&gt;    { &lt;span class="fu"&gt;init&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;init&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-13"&gt;&lt;a href="#cb4-13"&gt;&lt;/a&gt;    &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;view&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;view&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-14"&gt;&lt;a href="#cb4-14"&gt;&lt;/a&gt;    &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;update&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;update&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-15"&gt;&lt;a href="#cb4-15"&gt;&lt;/a&gt;    &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;subscriptions&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; \&lt;span class="fu"&gt;_&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Sub&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;none&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-16"&gt;&lt;a href="#cb4-16"&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id="cb4-17"&gt;&lt;a href="#cb4-17"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-18"&gt;&lt;a href="#cb4-18"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="kw"&gt;alias&lt;/span&gt; &lt;span class="dt"&gt;Config&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-19"&gt;&lt;a href="#cb4-19"&gt;&lt;/a&gt;  { &lt;span class="fu"&gt;ids&lt;/span&gt; : { &lt;span class="fu"&gt;video&lt;/span&gt; : &lt;span class="dt"&gt;String&lt;/span&gt; }&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;size&lt;/span&gt; : { &lt;span class="fu"&gt;width&lt;/span&gt; : &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;height&lt;/span&gt; : &lt;span class="dt"&gt;Int&lt;/span&gt; } }&lt;/span&gt;
&lt;span id="cb4-20"&gt;&lt;a href="#cb4-20"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-21"&gt;&lt;a href="#cb4-21"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="kw"&gt;alias&lt;/span&gt; &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; { &lt;span class="fu"&gt;config&lt;/span&gt; : &lt;span class="dt"&gt;Config&lt;/span&gt; }&lt;/span&gt;
&lt;span id="cb4-22"&gt;&lt;a href="#cb4-22"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-23"&gt;&lt;a href="#cb4-23"&gt;&lt;/a&gt;&lt;span class="fu"&gt;init&lt;/span&gt; : &lt;span class="dt"&gt;Config&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; (&lt;span class="dt"&gt;Model&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;Cmd&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb4-24"&gt;&lt;a href="#cb4-24"&gt;&lt;/a&gt;&lt;span class="fu"&gt;init&lt;/span&gt; &lt;span class="fu"&gt;config&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; (&lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="fu"&gt;config&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;Cmd&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;none&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb4-25"&gt;&lt;a href="#cb4-25"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-26"&gt;&lt;a href="#cb4-26"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;EnableCamera&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-27"&gt;&lt;a href="#cb4-27"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-28"&gt;&lt;a href="#cb4-28"&gt;&lt;/a&gt;&lt;span class="fu"&gt;update&lt;/span&gt; : &lt;span class="dt"&gt;Msg&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; (&lt;span class="dt"&gt;Model&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;Cmd&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb4-29"&gt;&lt;a href="#cb4-29"&gt;&lt;/a&gt;&lt;span class="fu"&gt;update&lt;/span&gt; &lt;span class="fu"&gt;msg&lt;/span&gt; &lt;span class="fu"&gt;model&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-30"&gt;&lt;a href="#cb4-30"&gt;&lt;/a&gt;  &lt;span class="cf"&gt;case&lt;/span&gt; &lt;span class="fu"&gt;msg&lt;/span&gt; &lt;span class="cf"&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-31"&gt;&lt;a href="#cb4-31"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;EnableCamera&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; (&lt;span class="fu"&gt;model&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;QRCode&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;startCamera&lt;/span&gt; ())&lt;/span&gt;
&lt;span id="cb4-32"&gt;&lt;a href="#cb4-32"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-33"&gt;&lt;a href="#cb4-33"&gt;&lt;/a&gt;&lt;span class="fu"&gt;view&lt;/span&gt; : &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-34"&gt;&lt;a href="#cb4-34"&gt;&lt;/a&gt;&lt;span class="fu"&gt;view&lt;/span&gt; &lt;span class="fu"&gt;model&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-35"&gt;&lt;a href="#cb4-35"&gt;&lt;/a&gt;  &lt;span class="fu"&gt;div&lt;/span&gt; []&lt;/span&gt;
&lt;span id="cb4-36"&gt;&lt;a href="#cb4-36"&gt;&lt;/a&gt;    [ &lt;span class="fu"&gt;video&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-37"&gt;&lt;a href="#cb4-37"&gt;&lt;/a&gt;        [ &lt;span class="fu"&gt;id&lt;/span&gt; &lt;span class="fu"&gt;model&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;config&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;ids&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;video&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;style&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;background-color&amp;quot;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;#000&amp;quot;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;autoplay&lt;/span&gt; &lt;span class="dt"&gt;True&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-38"&gt;&lt;a href="#cb4-38"&gt;&lt;/a&gt;        &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;width&lt;/span&gt; &lt;span class="fu"&gt;model&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;config&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;size&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;width&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;height&lt;/span&gt; &lt;span class="fu"&gt;model&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;config&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;size&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;height&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-39"&gt;&lt;a href="#cb4-39"&gt;&lt;/a&gt;        &lt;span class="co"&gt;-- iOS のために必要&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-40"&gt;&lt;a href="#cb4-40"&gt;&lt;/a&gt;        &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;attribute&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;playsinline&amp;quot;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-41"&gt;&lt;a href="#cb4-41"&gt;&lt;/a&gt;        ] []&lt;/span&gt;
&lt;span id="cb4-42"&gt;&lt;a href="#cb4-42"&gt;&lt;/a&gt;    &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;p&lt;/span&gt; [] [ &lt;span class="fu"&gt;button&lt;/span&gt; [ &lt;span class="fu"&gt;onClick&lt;/span&gt; &lt;span class="dt"&gt;EnableCamera&lt;/span&gt; ] [ &lt;span class="fu"&gt;text&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;Enable Camera&amp;quot;&lt;/span&gt; ] ]&lt;/span&gt;
&lt;span id="cb4-43"&gt;&lt;a href="#cb4-43"&gt;&lt;/a&gt;    ]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ボタンの &lt;code&gt;onClick&lt;/code&gt; でイベントハンドラを受け取り，&lt;code&gt;startCamera&lt;/code&gt; ポート関数を呼び出しているだけ． また，&lt;code&gt;Flags&lt;/code&gt; 機能を使って &lt;code&gt;video&lt;/code&gt; タグに必要な id を JavaScript 側と共有している． &lt;a href="https://matsubara0507.github.io/anaqram-web-samples/step1/"&gt;ここ&lt;/a&gt;で実際にビルド結果を触れる．&lt;/p&gt;
&lt;h2 id="qr-コードを読み取る"&gt;QR コードを読み取る&lt;/h2&gt;
&lt;p&gt;Elm からカメラを起動できたので，次に QR コードを読み取る． 冒頭で述べた通り，QR コードのでコードには &lt;a href="https://github.com/cozmo/jsQR"&gt;jsQR&lt;/a&gt; という JavaScript のライブラリを利用する． jsQR の使い方は簡単で，&lt;code&gt;jsQR&lt;/code&gt; というメソッドに &lt;code&gt;ImageData&lt;/code&gt; オブジェクト(とサイズ)を渡してあげるだけ:&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode javascript"&gt;&lt;code class="sourceCode javascript"&gt;&lt;span id="cb5-1"&gt;&lt;a href="#cb5-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;// jsQR の README に載っているサンプルコード&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-2"&gt;&lt;a href="#cb5-2"&gt;&lt;/a&gt;&lt;span class="kw"&gt;const&lt;/span&gt; code &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="at"&gt;jsQR&lt;/span&gt;(imageData&lt;span class="op"&gt;,&lt;/span&gt; width&lt;span class="op"&gt;,&lt;/span&gt; height)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-3"&gt;&lt;a href="#cb5-3"&gt;&lt;/a&gt;&lt;span class="co"&gt;// QR コードがなければ null になるようです&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-4"&gt;&lt;a href="#cb5-4"&gt;&lt;/a&gt;&lt;span class="cf"&gt;if&lt;/span&gt; (code) &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-5"&gt;&lt;a href="#cb5-5"&gt;&lt;/a&gt;  &lt;span class="va"&gt;console&lt;/span&gt;.&lt;span class="at"&gt;log&lt;/span&gt;(&lt;span class="st"&gt;&amp;quot;Found QR code&amp;quot;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; code)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-6"&gt;&lt;a href="#cb5-6"&gt;&lt;/a&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;ImageData&lt;/code&gt; オブジェクトはカメラ画像をいったん Canvas に退避させることで取得できる:&lt;/p&gt;
&lt;div class="sourceCode" id="cb6"&gt;&lt;pre class="sourceCode javascript"&gt;&lt;code class="sourceCode javascript"&gt;&lt;span id="cb6-1"&gt;&lt;a href="#cb6-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;function&lt;/span&gt; &lt;span class="at"&gt;captureImage&lt;/span&gt;(videoId&lt;span class="op"&gt;,&lt;/span&gt; captureId) &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-2"&gt;&lt;a href="#cb6-2"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;var&lt;/span&gt; canvas &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="va"&gt;document&lt;/span&gt;.&lt;span class="at"&gt;getElementById&lt;/span&gt;(captureId)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-3"&gt;&lt;a href="#cb6-3"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;var&lt;/span&gt; video &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="va"&gt;document&lt;/span&gt;.&lt;span class="at"&gt;getElementById&lt;/span&gt;(videoId)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-4"&gt;&lt;a href="#cb6-4"&gt;&lt;/a&gt;  &lt;span class="va"&gt;canvas&lt;/span&gt;.&lt;span class="at"&gt;width&lt;/span&gt;  &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="va"&gt;video&lt;/span&gt;.&lt;span class="at"&gt;videoWidth&lt;/span&gt;&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-5"&gt;&lt;a href="#cb6-5"&gt;&lt;/a&gt;  &lt;span class="va"&gt;canvas&lt;/span&gt;.&lt;span class="at"&gt;height&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="va"&gt;video&lt;/span&gt;.&lt;span class="at"&gt;videoHeight&lt;/span&gt;&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-6"&gt;&lt;a href="#cb6-6"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb6-7"&gt;&lt;a href="#cb6-7"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;const&lt;/span&gt; ctx &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="va"&gt;canvas&lt;/span&gt;.&lt;span class="at"&gt;getContext&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;2d&amp;#39;&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-8"&gt;&lt;a href="#cb6-8"&gt;&lt;/a&gt;  &lt;span class="va"&gt;ctx&lt;/span&gt;.&lt;span class="at"&gt;drawImage&lt;/span&gt;(video&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-9"&gt;&lt;a href="#cb6-9"&gt;&lt;/a&gt;  &lt;span class="cf"&gt;return&lt;/span&gt; &lt;span class="va"&gt;ctx&lt;/span&gt;.&lt;span class="at"&gt;getImageData&lt;/span&gt;(&lt;span class="dv"&gt;0&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="va"&gt;video&lt;/span&gt;.&lt;span class="at"&gt;videoWidth&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="va"&gt;video&lt;/span&gt;.&lt;span class="at"&gt;videoHeight&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-10"&gt;&lt;a href="#cb6-10"&gt;&lt;/a&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;さて，後はこれを Elm で呼び出す． ただし，カメラを起動する &lt;code&gt;startCamera&lt;/code&gt; 関数の時と違い，ボタンを押したらQRコードのデコード結果の文字列を取得したい． なので JavaScript 側から実行されることを想定した「内向き」のポート関数も定義する:&lt;/p&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb7-1"&gt;&lt;a href="#cb7-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- QRCode.elm&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-2"&gt;&lt;a href="#cb7-2"&gt;&lt;/a&gt;&lt;span class="kw"&gt;port&lt;/span&gt; &lt;span class="kw"&gt;module&lt;/span&gt; &lt;span class="dt"&gt;QRCode&lt;/span&gt; &lt;span class="kw"&gt;exposing&lt;/span&gt; (&lt;span class="op"&gt;..&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb7-3"&gt;&lt;a href="#cb7-3"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb7-4"&gt;&lt;a href="#cb7-4"&gt;&lt;/a&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Json&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Decode&lt;/span&gt; &lt;span class="kw"&gt;as&lt;/span&gt; &lt;span class="dt"&gt;D&lt;/span&gt; &lt;span class="kw"&gt;exposing&lt;/span&gt; (&lt;span class="dt"&gt;Decoder&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb7-5"&gt;&lt;a href="#cb7-5"&gt;&lt;/a&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Json&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Encode&lt;/span&gt; &lt;span class="kw"&gt;as&lt;/span&gt; &lt;span class="dt"&gt;E&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-6"&gt;&lt;a href="#cb7-6"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb7-7"&gt;&lt;a href="#cb7-7"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="kw"&gt;alias&lt;/span&gt; &lt;span class="dt"&gt;QRCode&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; { &lt;span class="fu"&gt;data&lt;/span&gt; : &lt;span class="dt"&gt;String&lt;/span&gt; }&lt;/span&gt;
&lt;span id="cb7-8"&gt;&lt;a href="#cb7-8"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb7-9"&gt;&lt;a href="#cb7-9"&gt;&lt;/a&gt;&lt;span class="fu"&gt;decoder&lt;/span&gt; : &lt;span class="dt"&gt;Decoder&lt;/span&gt; &lt;span class="dt"&gt;QRCode&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-10"&gt;&lt;a href="#cb7-10"&gt;&lt;/a&gt;&lt;span class="fu"&gt;decoder&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;D&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;map&lt;/span&gt; &lt;span class="dt"&gt;QRCode&lt;/span&gt; (&lt;span class="dt"&gt;D&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;field&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;data&amp;quot;&lt;/span&gt; &lt;span class="dt"&gt;D&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;string&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb7-11"&gt;&lt;a href="#cb7-11"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb7-12"&gt;&lt;a href="#cb7-12"&gt;&lt;/a&gt;&lt;span class="kw"&gt;port&lt;/span&gt; &lt;span class="fu"&gt;startCamera&lt;/span&gt; : () &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Cmd&lt;/span&gt; &lt;span class="fu"&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-13"&gt;&lt;a href="#cb7-13"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb7-14"&gt;&lt;a href="#cb7-14"&gt;&lt;/a&gt;&lt;span class="kw"&gt;port&lt;/span&gt; &lt;span class="fu"&gt;captureImage&lt;/span&gt; : () &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Cmd&lt;/span&gt; &lt;span class="fu"&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-15"&gt;&lt;a href="#cb7-15"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb7-16"&gt;&lt;a href="#cb7-16"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- JS とは JSON データでやり取りするのが良いらしい&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-17"&gt;&lt;a href="#cb7-17"&gt;&lt;/a&gt;&lt;span class="kw"&gt;port&lt;/span&gt; &lt;span class="fu"&gt;updateQRCode&lt;/span&gt; : (&lt;span class="dt"&gt;E&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Value&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;msg&lt;/span&gt;) &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Sub&lt;/span&gt; &lt;span class="fu"&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-18"&gt;&lt;a href="#cb7-18"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb7-19"&gt;&lt;a href="#cb7-19"&gt;&lt;/a&gt;&lt;span class="fu"&gt;updateQRCodeWithDecode&lt;/span&gt; : (&lt;span class="dt"&gt;Result&lt;/span&gt; &lt;span class="dt"&gt;D&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Error&lt;/span&gt; (&lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;QRCode&lt;/span&gt;) &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;msg&lt;/span&gt;) &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Sub&lt;/span&gt; &lt;span class="fu"&gt;msg&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-20"&gt;&lt;a href="#cb7-20"&gt;&lt;/a&gt;&lt;span class="fu"&gt;updateQRCodeWithDecode&lt;/span&gt; &lt;span class="fu"&gt;msg&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-21"&gt;&lt;a href="#cb7-21"&gt;&lt;/a&gt;  &lt;span class="fu"&gt;updateQRCode&lt;/span&gt; (&lt;span class="fu"&gt;msg&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="dt"&gt;D&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;decodeValue&lt;/span&gt; (&lt;span class="dt"&gt;D&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;nullable&lt;/span&gt; &lt;span class="fu"&gt;decoder&lt;/span&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;updateQRCode&lt;/code&gt; 関数が内向きのポート関数だ． &lt;code&gt;Sub a&lt;/code&gt; 型はタイマーやマウスの動作など外部から非同期に送られてくるメッセージを取得するための型だ． 次のように，JS 側で実装する &lt;code&gt;captureImage&lt;/code&gt; 関数の最後で &lt;code&gt;updateQRCode&lt;/code&gt; 関数が呼ばれ &lt;code&gt;QRCode&lt;/code&gt; 型を表す JS オブジェクトが送られてくる:&lt;/p&gt;
&lt;div class="sourceCode" id="cb8"&gt;&lt;pre class="sourceCode javascript"&gt;&lt;code class="sourceCode javascript"&gt;&lt;span id="cb8-1"&gt;&lt;a href="#cb8-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;// canvas の id を追加&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-2"&gt;&lt;a href="#cb8-2"&gt;&lt;/a&gt;&lt;span class="kw"&gt;const&lt;/span&gt; flags &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-3"&gt;&lt;a href="#cb8-3"&gt;&lt;/a&gt;  &lt;span class="dt"&gt;ids&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt; &lt;span class="dt"&gt;video&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;video_area&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;capture&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;capture_image&amp;#39;&lt;/span&gt; &lt;span class="op"&gt;},&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-4"&gt;&lt;a href="#cb8-4"&gt;&lt;/a&gt;  &lt;span class="dt"&gt;size&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt; &lt;span class="dt"&gt;width&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="dv"&gt;300&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;height&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="dv"&gt;300&lt;/span&gt; &lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-5"&gt;&lt;a href="#cb8-5"&gt;&lt;/a&gt;&lt;span class="op"&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-6"&gt;&lt;a href="#cb8-6"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb8-7"&gt;&lt;a href="#cb8-7"&gt;&lt;/a&gt;&lt;span class="va"&gt;app&lt;/span&gt;.&lt;span class="va"&gt;ports&lt;/span&gt;.&lt;span class="va"&gt;captureImage&lt;/span&gt;.&lt;span class="at"&gt;subscribe&lt;/span&gt;(&lt;span class="kw"&gt;function&lt;/span&gt;() &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-8"&gt;&lt;a href="#cb8-8"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;const&lt;/span&gt; imageData &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="at"&gt;captureImage&lt;/span&gt;(&lt;span class="va"&gt;flags&lt;/span&gt;.&lt;span class="va"&gt;ids&lt;/span&gt;.&lt;span class="at"&gt;video&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="va"&gt;flags&lt;/span&gt;.&lt;span class="va"&gt;ids&lt;/span&gt;.&lt;span class="at"&gt;capture&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-9"&gt;&lt;a href="#cb8-9"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;const&lt;/span&gt; qrcode &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="at"&gt;jsQR&lt;/span&gt;(&lt;span class="va"&gt;imageData&lt;/span&gt;.&lt;span class="at"&gt;data&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="va"&gt;imageData&lt;/span&gt;.&lt;span class="at"&gt;width&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="va"&gt;imageData&lt;/span&gt;.&lt;span class="at"&gt;height&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb8-10"&gt;&lt;a href="#cb8-10"&gt;&lt;/a&gt;  &lt;span class="va"&gt;app&lt;/span&gt;.&lt;span class="va"&gt;ports&lt;/span&gt;.&lt;span class="va"&gt;updateQRCode&lt;/span&gt;.&lt;span class="at"&gt;send&lt;/span&gt;(qrcode)&lt;span class="op"&gt;;&lt;/span&gt; &lt;span class="co"&gt;// ココ&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-11"&gt;&lt;a href="#cb8-11"&gt;&lt;/a&gt;&lt;span class="op"&gt;}&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Elm 側は次のように書き換える:&lt;/p&gt;
&lt;div class="sourceCode" id="cb9"&gt;&lt;pre class="sourceCode elm"&gt;&lt;code class="sourceCode elm"&gt;&lt;span id="cb9-1"&gt;&lt;a href="#cb9-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;module&lt;/span&gt; &lt;span class="dt"&gt;Main&lt;/span&gt; &lt;span class="kw"&gt;exposing&lt;/span&gt; (&lt;span class="fu"&gt;main&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb9-2"&gt;&lt;a href="#cb9-2"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb9-3"&gt;&lt;a href="#cb9-3"&gt;&lt;/a&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;AnaQRam&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;QRCode&lt;/span&gt; &lt;span class="kw"&gt;as&lt;/span&gt; &lt;span class="dt"&gt;QRCode&lt;/span&gt; &lt;span class="kw"&gt;exposing&lt;/span&gt; (&lt;span class="dt"&gt;QRCode&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb9-4"&gt;&lt;a href="#cb9-4"&gt;&lt;/a&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Json&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="dt"&gt;Decode&lt;/span&gt; &lt;span class="kw"&gt;exposing&lt;/span&gt; (&lt;span class="dt"&gt;Error&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;errorToString&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb9-5"&gt;&lt;a href="#cb9-5"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb9-6"&gt;&lt;a href="#cb9-6"&gt;&lt;/a&gt;&lt;span class="fu"&gt;main&lt;/span&gt; : &lt;span class="dt"&gt;Program&lt;/span&gt; &lt;span class="dt"&gt;Config&lt;/span&gt; &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-7"&gt;&lt;a href="#cb9-7"&gt;&lt;/a&gt;&lt;span class="fu"&gt;main&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-8"&gt;&lt;a href="#cb9-8"&gt;&lt;/a&gt;  &lt;span class="dt"&gt;Browser&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;element&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-9"&gt;&lt;a href="#cb9-9"&gt;&lt;/a&gt;    { &lt;span class="op"&gt;..&lt;/span&gt; &lt;span class="co"&gt;-- 割愛&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-10"&gt;&lt;a href="#cb9-10"&gt;&lt;/a&gt;    &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;subscriptions&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;subscriptions&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-11"&gt;&lt;a href="#cb9-11"&gt;&lt;/a&gt;    }&lt;/span&gt;
&lt;span id="cb9-12"&gt;&lt;a href="#cb9-12"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb9-13"&gt;&lt;a href="#cb9-13"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- capture を追加&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-14"&gt;&lt;a href="#cb9-14"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="kw"&gt;alias&lt;/span&gt; &lt;span class="dt"&gt;Config&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-15"&gt;&lt;a href="#cb9-15"&gt;&lt;/a&gt;  { &lt;span class="fu"&gt;ids&lt;/span&gt; : { &lt;span class="fu"&gt;video&lt;/span&gt; : &lt;span class="dt"&gt;String&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;capture&lt;/span&gt; : &lt;span class="dt"&gt;String&lt;/span&gt; }&lt;/span&gt;
&lt;span id="cb9-16"&gt;&lt;a href="#cb9-16"&gt;&lt;/a&gt;  &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;size&lt;/span&gt; : { &lt;span class="fu"&gt;width&lt;/span&gt; : &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;height&lt;/span&gt; : &lt;span class="dt"&gt;Int&lt;/span&gt; }&lt;/span&gt;
&lt;span id="cb9-17"&gt;&lt;a href="#cb9-17"&gt;&lt;/a&gt;  }&lt;/span&gt;
&lt;span id="cb9-18"&gt;&lt;a href="#cb9-18"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb9-19"&gt;&lt;a href="#cb9-19"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="kw"&gt;alias&lt;/span&gt; &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-20"&gt;&lt;a href="#cb9-20"&gt;&lt;/a&gt;  { &lt;span class="fu"&gt;config&lt;/span&gt; : &lt;span class="dt"&gt;Config&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-21"&gt;&lt;a href="#cb9-21"&gt;&lt;/a&gt;  &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;qrcode&lt;/span&gt; : &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;QRCode&lt;/span&gt; &lt;span class="co"&gt;-- QRコードのデコード結果&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-22"&gt;&lt;a href="#cb9-22"&gt;&lt;/a&gt;  &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;error&lt;/span&gt; : &lt;span class="dt"&gt;String&lt;/span&gt;        &lt;span class="co"&gt;-- JSONのデコード失敗結果&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-23"&gt;&lt;a href="#cb9-23"&gt;&lt;/a&gt;  }&lt;/span&gt;
&lt;span id="cb9-24"&gt;&lt;a href="#cb9-24"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb9-25"&gt;&lt;a href="#cb9-25"&gt;&lt;/a&gt;&lt;span class="fu"&gt;init&lt;/span&gt; : &lt;span class="dt"&gt;Config&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; (&lt;span class="dt"&gt;Model&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;Cmd&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb9-26"&gt;&lt;a href="#cb9-26"&gt;&lt;/a&gt;&lt;span class="fu"&gt;init&lt;/span&gt; &lt;span class="fu"&gt;config&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; (&lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="fu"&gt;config&lt;/span&gt; &lt;span class="dt"&gt;Nothing&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;Cmd&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;none&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb9-27"&gt;&lt;a href="#cb9-27"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb9-28"&gt;&lt;a href="#cb9-28"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-29"&gt;&lt;a href="#cb9-29"&gt;&lt;/a&gt;  &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;EnableCamera&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-30"&gt;&lt;a href="#cb9-30"&gt;&lt;/a&gt;  &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;CaptureImage&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-31"&gt;&lt;a href="#cb9-31"&gt;&lt;/a&gt;  &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;UpdateQRCode&lt;/span&gt; (&lt;span class="dt"&gt;Result&lt;/span&gt; &lt;span class="dt"&gt;Error&lt;/span&gt; (&lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;QRCode&lt;/span&gt;))&lt;/span&gt;
&lt;span id="cb9-32"&gt;&lt;a href="#cb9-32"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb9-33"&gt;&lt;a href="#cb9-33"&gt;&lt;/a&gt;&lt;span class="fu"&gt;update&lt;/span&gt; : &lt;span class="dt"&gt;Msg&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; (&lt;span class="dt"&gt;Model&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;Cmd&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb9-34"&gt;&lt;a href="#cb9-34"&gt;&lt;/a&gt;&lt;span class="fu"&gt;update&lt;/span&gt; &lt;span class="fu"&gt;msg&lt;/span&gt; &lt;span class="fu"&gt;model&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-35"&gt;&lt;a href="#cb9-35"&gt;&lt;/a&gt;  &lt;span class="cf"&gt;case&lt;/span&gt; &lt;span class="fu"&gt;msg&lt;/span&gt; &lt;span class="cf"&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-36"&gt;&lt;a href="#cb9-36"&gt;&lt;/a&gt;    &lt;span class="op"&gt;...&lt;/span&gt; &lt;span class="co"&gt;-- 割愛&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-37"&gt;&lt;a href="#cb9-37"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb9-38"&gt;&lt;a href="#cb9-38"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;CaptureImage&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; (&lt;span class="fu"&gt;model&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;QRCode&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;captureImage&lt;/span&gt; ())&lt;/span&gt;
&lt;span id="cb9-39"&gt;&lt;a href="#cb9-39"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb9-40"&gt;&lt;a href="#cb9-40"&gt;&lt;/a&gt;    &lt;span class="co"&gt;-- QRコードがなかった場合(null が返ってくるので)&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-41"&gt;&lt;a href="#cb9-41"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;UpdateQRCode&lt;/span&gt; (&lt;span class="dt"&gt;Ok&lt;/span&gt; &lt;span class="dt"&gt;Nothing&lt;/span&gt;) &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; ({ &lt;span class="fu"&gt;model&lt;/span&gt; &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="fu"&gt;error&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;QR code is not found&amp;quot;&lt;/span&gt; }&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;Cmd&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;none&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb9-42"&gt;&lt;a href="#cb9-42"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb9-43"&gt;&lt;a href="#cb9-43"&gt;&lt;/a&gt;    &lt;span class="co"&gt;-- QRコードのデコード成功&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-44"&gt;&lt;a href="#cb9-44"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;UpdateQRCode&lt;/span&gt; (&lt;span class="dt"&gt;Ok&lt;/span&gt; &lt;span class="fu"&gt;qrcode&lt;/span&gt;) &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; ({ &lt;span class="fu"&gt;model&lt;/span&gt; &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="fu"&gt;qrcode&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;qrcode&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;error&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt; }&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;Cmd&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;none&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb9-45"&gt;&lt;a href="#cb9-45"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb9-46"&gt;&lt;a href="#cb9-46"&gt;&lt;/a&gt;    &lt;span class="co"&gt;-- JSONのデコード失敗&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-47"&gt;&lt;a href="#cb9-47"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;UpdateQRCode&lt;/span&gt; (&lt;span class="dt"&gt;Err&lt;/span&gt; &lt;span class="fu"&gt;message&lt;/span&gt;) &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; ({ &lt;span class="fu"&gt;model&lt;/span&gt; &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="fu"&gt;error&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;errorToString&lt;/span&gt; &lt;span class="fu"&gt;message&lt;/span&gt; }&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;Cmd&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;none&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb9-48"&gt;&lt;a href="#cb9-48"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb9-49"&gt;&lt;a href="#cb9-49"&gt;&lt;/a&gt;&lt;span class="fu"&gt;view&lt;/span&gt; : &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-50"&gt;&lt;a href="#cb9-50"&gt;&lt;/a&gt;&lt;span class="fu"&gt;view&lt;/span&gt; &lt;span class="fu"&gt;model&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-51"&gt;&lt;a href="#cb9-51"&gt;&lt;/a&gt;  &lt;span class="fu"&gt;div&lt;/span&gt; []&lt;/span&gt;
&lt;span id="cb9-52"&gt;&lt;a href="#cb9-52"&gt;&lt;/a&gt;    [ &lt;span class="fu"&gt;video&lt;/span&gt; &lt;span class="co"&gt;-- 割愛&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-53"&gt;&lt;a href="#cb9-53"&gt;&lt;/a&gt;    &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;p&lt;/span&gt; [] [ &lt;span class="fu"&gt;button&lt;/span&gt; [ &lt;span class="fu"&gt;onClick&lt;/span&gt; &lt;span class="dt"&gt;EnableCamera&lt;/span&gt; ] [ &lt;span class="fu"&gt;text&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;Enable Camera&amp;quot;&lt;/span&gt; ] ]&lt;/span&gt;
&lt;span id="cb9-54"&gt;&lt;a href="#cb9-54"&gt;&lt;/a&gt;    &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;p&lt;/span&gt; [] [ &lt;span class="fu"&gt;button&lt;/span&gt; [ &lt;span class="fu"&gt;onClick&lt;/span&gt; &lt;span class="dt"&gt;CaptureImage&lt;/span&gt; ] [ &lt;span class="fu"&gt;text&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;Decode QR&amp;quot;&lt;/span&gt; ] ]&lt;/span&gt;
&lt;span id="cb9-55"&gt;&lt;a href="#cb9-55"&gt;&lt;/a&gt;    &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;canvas&lt;/span&gt; [ &lt;span class="fu"&gt;id&lt;/span&gt; &lt;span class="fu"&gt;model&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;config&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;ids&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;capture&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;hidden&lt;/span&gt; &lt;span class="dt"&gt;True&lt;/span&gt; ] [] &lt;span class="co"&gt;-- カメラ画像退避用&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-56"&gt;&lt;a href="#cb9-56"&gt;&lt;/a&gt;    &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="fu"&gt;viewResult&lt;/span&gt; &lt;span class="fu"&gt;model&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-57"&gt;&lt;a href="#cb9-57"&gt;&lt;/a&gt;    ]&lt;/span&gt;
&lt;span id="cb9-58"&gt;&lt;a href="#cb9-58"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb9-59"&gt;&lt;a href="#cb9-59"&gt;&lt;/a&gt;&lt;span class="fu"&gt;viewResult&lt;/span&gt; : &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-60"&gt;&lt;a href="#cb9-60"&gt;&lt;/a&gt;&lt;span class="fu"&gt;viewResult&lt;/span&gt; &lt;span class="fu"&gt;model&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-61"&gt;&lt;a href="#cb9-61"&gt;&lt;/a&gt;  &lt;span class="cf"&gt;if&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;isEmpty&lt;/span&gt; &lt;span class="fu"&gt;model&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;error&lt;/span&gt; &lt;span class="cf"&gt;then&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-62"&gt;&lt;a href="#cb9-62"&gt;&lt;/a&gt;    &lt;span class="fu"&gt;p&lt;/span&gt; [] [ &lt;span class="fu"&gt;text&lt;/span&gt; (&lt;span class="st"&gt;&amp;quot;QR code: &amp;quot;&lt;/span&gt; &lt;span class="op"&gt;++&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;withDefault&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt; (&lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;map&lt;/span&gt; &lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;data&lt;/span&gt; &lt;span class="fu"&gt;model&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;qrcode&lt;/span&gt;)) ]&lt;/span&gt;
&lt;span id="cb9-63"&gt;&lt;a href="#cb9-63"&gt;&lt;/a&gt;  &lt;span class="cf"&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-64"&gt;&lt;a href="#cb9-64"&gt;&lt;/a&gt;    &lt;span class="fu"&gt;p&lt;/span&gt; [] [ &lt;span class="fu"&gt;text&lt;/span&gt; &lt;span class="fu"&gt;model&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;error&lt;/span&gt; ]&lt;/span&gt;
&lt;span id="cb9-65"&gt;&lt;a href="#cb9-65"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb9-66"&gt;&lt;a href="#cb9-66"&gt;&lt;/a&gt;&lt;span class="fu"&gt;subscriptions&lt;/span&gt; : &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="op"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Sub&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-67"&gt;&lt;a href="#cb9-67"&gt;&lt;/a&gt;&lt;span class="fu"&gt;subscriptions&lt;/span&gt; &lt;span class="fu"&gt;_&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;QRCode&lt;/span&gt;&lt;span class="op"&gt;.&lt;/span&gt;&lt;span class="fu"&gt;updateQRCodeWithDecode&lt;/span&gt; &lt;span class="dt"&gt;UpdateQRCode&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;出来上がったのが&lt;a href="https://matsubara0507.github.io/anaqram-web-samples/step2"&gt;こんな感じ&lt;/a&gt;． ほんとはここがゴールじゃないんだが結果的に QR コードリーダーができた．&lt;/p&gt;
&lt;h2 id="おしまい"&gt;おしまい&lt;/h2&gt;
&lt;p&gt;Elm 側でデコードする話は気が向いたらそのうち頑張るかもしれない(画像データをポートでやりとりするのは，あまり効率的ではないと思うけど)．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/08/24/151450</id><title type="text">rustのcombineで入力されたトークンによる場合分け</title><updated>2019-08-24T15:14:50+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/08/24/151450"/><summary type="html">combine を使ったときに、例えば識別子のパース時に予約語を弾く方法。 最初は and_then を使うのかと思ったのだけど、 エラーの型指定がえらく面倒 だったので諦め。というか、なんか絶対違うだろうと思って別の方法を模索。 Parser のドキュメントに以下の例がある。これだ。 digit() .then(|d| { if d == '9' { value(9).left() } else { unexpected_any(d).message("Not a nine").right() } }) ということで、 then を使うと Parser を返す処理を書けるので、ここで une…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/02/windows-windows10.html</id><title type="text">[windows] Windows10セットアップ・設定項目のメモ</title><updated>2019-08-22T13:32:52.909+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/02/windows-windows10.html"/><summary type="text">Windows10セットアップ時の設定項目、インストールアプリの備忘録。


スタートメニュー・タスクバーの設定

タスクバーの設定 

小さいタスクバーボタンを使う：オン 
[スタート]ボタンを右クリックするかWindowsキー＋Xキーを押したときに表示されるメニューで、コマンドプロンプトをWindows PowerShellに置き換える：オフ
タスクバーボタンを結合する

「タスクバーに入りきらない場合」を選択

タスクバーをすべての ディスプレイに表示する：オフ



 Quick Launcherを表示する

クイック起動を復活する 
Windows 10 タスクバーにクイック起動を表示する

スタートメニューにコントロールパネルを表示する

「Windows 10」のコントロールパネルを表示する方法について

スタートメニューにピン止めするアプリ：

Windowsシステム</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/08/15/195448</id><title type="text">Minecraft 1.14サーバーを運用してみた</title><updated>2019-08-15T19:54:48+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/08/15/195448"/><summary type="html">Minecraft 1.14 "Village and Pillage"は、サブタイトルの通り村人と略奪者をテーマにしたアップデートだ。 主な楽しみ方 村人の取引システムが一新され、以前よりもバリエーションに富み、かつリーズナブルな取引ができるようになった。余ったアイテムを換金したり、有益なアイテムを入手できるようになるだろう。 ランタン、焚火などの新たな光源や、壁や階段の変種、さらには鐘なども追加され、建築の楽しみも大きく増した。だが、良いことばかりではない――新たなイリジャー(邪悪な村人)、ピリジャーが出現するようになったのだ。条件を満たすと発生する襲撃から村を守る死闘、そして安全な拠点づ…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2019/04/04/210000</id><title type="text">Makefileの変数展開はレシピの実行前に行われる</title><updated>2019-08-14T10:31:52+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2019/04/04/210000"/><summary type="html">makeなんてよく使うものだから分かっているつもりだったけど実はよく分かっていなかったのが、変数展開がどのタイミングで行われるかということ。 itchyny.hatenablog.com Makefileでの := は simply expanded variable といって一度しか展開されないが、 = は参照するたびに展開される。 DATE = $(shell date) .PHONY: all all: @echo $(DATE) @$(shell sleep 3) @echo $(DATE) @$(shell sleep 3) @echo $(DATE) これは、 $(DATE) を参…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/08/07/120015</id><title type="text">rust の publicsuffix は遅過ぎる</title><updated>2019-08-07T12:03:57+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/08/07/120015"/><summary type="html">rust で Public Suffix List を扱うクレートの速度が遅過ぎるので、パッチを書いた。最右部のラベル ( .jp .com など) でルールを区分けして、後は愚直に線形探索という方法だったので、そりゃあ遅すぎるよねって感じ。 github.com 実は Perl の Domain::PublicSuffix でも速度の問題にあたって書き直したことがあるのだけど、このときはドメインのバリデーションが重過ぎるのが原因で、 このコミット で解消されている 1 。 rust の publicsuffix でも バリデーション は比較的重いので、この点も改善できるのかもしれない。 とこ…</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-08-05-create-elmap-project.html</id><title type="text">elmap.hs プロジェクトを作りました</title><updated>2019-08-05T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-08-05-create-elmap-project.html"/><summary type="html">&lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;GUI 付きのツールを作成したい時、普段は Elm を使います． さらにバックエンドを付けるときは Haskell + Elm で実装し，Elm 側で呼び出す API クライアントは &lt;a href="http://hackage.haskell.org/package/elm-export"&gt;elm-export&lt;/a&gt; と &lt;a href="http://hackage.haskell.org/package/servant-elm"&gt;servant-elm&lt;/a&gt; というパッケージを使い，Haskell Servant の API 定義から自動生成させていました．&lt;/p&gt;
&lt;p&gt;elm-export は Elm 0.19 に追いつけてなかったので独自にフォークして運用し，また愛用している extensible パッケージにも独自で対応していました． しかし，servant-elm が Elm 0.19 に対応するために依存パッケージを elm-export から &lt;a href="http://hackage.haskell.org/package/elm-bridge"&gt;elm-bridge&lt;/a&gt; に変更したところ，独自で対応してた部分と色々都合が悪かったので，それらのクッションとなる薄いラッパーパッケージ群として elmap.hs プロジェクトを作成しました:&lt;/p&gt;
&lt;h2 id="section"&gt;&lt;iframe width="426" height="162" scrolling="no" frameborder="0" src="https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/elmap.hs"&gt;&lt;/iframe&gt;&lt;/h2&gt;
&lt;p&gt;この記事は elmap.hs を作る上で色々したことのメモ書きです．&lt;/p&gt;
&lt;h2 id="なぜ-elm-bridgeservant-elm-ではダメか"&gt;なぜ elm-bridge/servant-elm ではダメか&lt;/h2&gt;
&lt;p&gt;を説明するためにまずは elm-bridge パッケージについて紹介する．&lt;/p&gt;
&lt;h3 id="elm-bridge-パッケージ"&gt;elm-bridge パッケージ&lt;/h3&gt;
&lt;p&gt;elm-bridge は Haskell の型定義から Elm の型定義などを生成するためのパッケージだ． 型定義の他にも，Elm 側の JSON デコーダー・エンコーダーも自動生成してくれる(メタプログラミングなどが無い Elm にとってこれは大変嬉しい)．&lt;/p&gt;
&lt;p&gt;仕組みは簡単で，簡易的な Elm の型定義などを Haskell で表現している．&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb1-1"&gt;&lt;a href="#cb1-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- Elm の型定義そのもの&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-2"&gt;&lt;a href="#cb1-2"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;ETypeDef&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-3"&gt;&lt;a href="#cb1-3"&gt;&lt;/a&gt;   &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;ETypeAlias&lt;/span&gt; &lt;span class="dt"&gt;EAlias&lt;/span&gt;         &lt;span class="co"&gt;-- レコードの型エイリアス&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-4"&gt;&lt;a href="#cb1-4"&gt;&lt;/a&gt;   &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;ETypePrimAlias&lt;/span&gt; &lt;span class="dt"&gt;EPrimAlias&lt;/span&gt; &lt;span class="co"&gt;-- 普通の型エイリアス&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-5"&gt;&lt;a href="#cb1-5"&gt;&lt;/a&gt;   &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;ETypeSum&lt;/span&gt; &lt;span class="dt"&gt;ESum&lt;/span&gt;             &lt;span class="co"&gt;-- 直和型&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-6"&gt;&lt;a href="#cb1-6"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb1-7"&gt;&lt;a href="#cb1-7"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- Elm の型自身&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-8"&gt;&lt;a href="#cb1-8"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;EType&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-9"&gt;&lt;a href="#cb1-9"&gt;&lt;/a&gt;   &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;ETyVar&lt;/span&gt; &lt;span class="dt"&gt;ETVar&lt;/span&gt;       &lt;span class="co"&gt;-- 型変数&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-10"&gt;&lt;a href="#cb1-10"&gt;&lt;/a&gt;   &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;ETyCon&lt;/span&gt; &lt;span class="dt"&gt;ETCon&lt;/span&gt;       &lt;span class="co"&gt;-- コンストラクタ&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-11"&gt;&lt;a href="#cb1-11"&gt;&lt;/a&gt;   &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;ETyApp&lt;/span&gt; &lt;span class="dt"&gt;EType&lt;/span&gt; &lt;span class="dt"&gt;EType&lt;/span&gt; &lt;span class="co"&gt;-- 型適用&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-12"&gt;&lt;a href="#cb1-12"&gt;&lt;/a&gt;   &lt;span class="op"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;ETyTuple&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;       &lt;span class="co"&gt;-- タプル型&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Elm での型定義の構文を表したのが &lt;code&gt;ETypeDef&lt;/code&gt; 型で，関数の型を書くときなどの型を表現する構文を表したのが &lt;code&gt;EType&lt;/code&gt; 型だ． &lt;code&gt;toElmType&lt;/code&gt; 関数を使うことで任意の型の &lt;code&gt;EType&lt;/code&gt; を &lt;code&gt;Typeable&lt;/code&gt; で機械的に導出したり，&lt;code&gt;deriveElmDef&lt;/code&gt; と TemplateHaskell で &lt;code&gt;ETypeDef&lt;/code&gt; への変換を導出することができる:&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb2-1"&gt;&lt;a href="#cb2-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;toElmType ::&lt;/span&gt; &lt;span class="dt"&gt;Typeable&lt;/span&gt; a &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Proxy&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;EType&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-2"&gt;&lt;a href="#cb2-2"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-3"&gt;&lt;a href="#cb2-3"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- ETypeDef への変換は型クラスで定義する&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-4"&gt;&lt;a href="#cb2-4"&gt;&lt;/a&gt;&lt;span class="kw"&gt;class&lt;/span&gt; &lt;span class="dt"&gt;IsElmDefinition&lt;/span&gt; a &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-5"&gt;&lt;a href="#cb2-5"&gt;&lt;/a&gt;&lt;span class="ot"&gt;  compileElmDef ::&lt;/span&gt; &lt;span class="dt"&gt;Proxy&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;ETypeDef&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-6"&gt;&lt;a href="#cb2-6"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-7"&gt;&lt;a href="#cb2-7"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- Hoge 型の IsElmDefinition 型クラスのインスタンスを導出&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-8"&gt;&lt;a href="#cb2-8"&gt;&lt;/a&gt;deriveElmDef defaultOptions &amp;#39;&lt;span class="dt"&gt;&amp;#39;Hoge&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ちなみに &lt;code&gt;deriveElmDef&lt;/code&gt; の代わりに &lt;code&gt;deriveBoth&lt;/code&gt; を使うと aeson 系の型クラスのインスタンスも一緒に導出してくれる． そして &lt;code&gt;ETypeDef&lt;/code&gt; などに変換したあとは，&lt;code&gt;renderElm&lt;/code&gt; 関数や &lt;code&gt;makeElmModule&lt;/code&gt; 関数を使うことで Elm のコードに変換できる．&lt;/p&gt;
&lt;h3 id="都合の悪い部分"&gt;都合の悪い部分&lt;/h3&gt;
&lt;p&gt;問題はどっちかというと servant-elm にある． servant-elm は Elm 関数の変換に内部で &lt;code&gt;toElmType&lt;/code&gt; 関数を使っている:&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb3-1"&gt;&lt;a href="#cb3-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;LangElm&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-2"&gt;&lt;a href="#cb3-2"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-3"&gt;&lt;a href="#cb3-3"&gt;&lt;/a&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;Typeable&lt;/span&gt; a &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;HasForeignType&lt;/span&gt; &lt;span class="dt"&gt;LangElm&lt;/span&gt; &lt;span class="dt"&gt;EType&lt;/span&gt; a &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-4"&gt;&lt;a href="#cb3-4"&gt;&lt;/a&gt;  typeFor _ _ _ &lt;span class="ot"&gt;=&lt;/span&gt; toElmType (&lt;span class="dt"&gt;Proxy&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Proxy&lt;/span&gt; a)&lt;/span&gt;
&lt;span id="cb3-5"&gt;&lt;a href="#cb3-5"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-6"&gt;&lt;a href="#cb3-6"&gt;&lt;/a&gt;&lt;span class="ot"&gt;getEndpoints ::&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-7"&gt;&lt;a href="#cb3-7"&gt;&lt;/a&gt;  (&lt;span class="dt"&gt;HasForeign&lt;/span&gt; &lt;span class="dt"&gt;LangElm&lt;/span&gt; &lt;span class="dt"&gt;EType&lt;/span&gt; api, &lt;span class="dt"&gt;GenerateList&lt;/span&gt; &lt;span class="dt"&gt;EType&lt;/span&gt; (&lt;span class="dt"&gt;Foreign&lt;/span&gt; &lt;span class="dt"&gt;EType&lt;/span&gt; api))&lt;/span&gt;
&lt;span id="cb3-8"&gt;&lt;a href="#cb3-8"&gt;&lt;/a&gt;  &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Proxy&lt;/span&gt; api&lt;/span&gt;
&lt;span id="cb3-9"&gt;&lt;a href="#cb3-9"&gt;&lt;/a&gt;  &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; [&lt;span class="dt"&gt;Req&lt;/span&gt; &lt;span class="dt"&gt;EType&lt;/span&gt;]&lt;/span&gt;
&lt;span id="cb3-10"&gt;&lt;a href="#cb3-10"&gt;&lt;/a&gt;getEndpoints &lt;span class="ot"&gt;=&lt;/span&gt; listFromAPI (&lt;span class="dt"&gt;Proxy&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Proxy&lt;/span&gt; &lt;span class="dt"&gt;LangElm&lt;/span&gt;) (&lt;span class="dt"&gt;Proxy&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Proxy&lt;/span&gt; &lt;span class="dt"&gt;EType&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここで，extensible パッケージの拡張可能レコード型に &lt;code&gt;toElmType&lt;/code&gt; を使ってみると…&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb4-1"&gt;&lt;a href="#cb4-1"&gt;&lt;/a&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;User&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Record&lt;/span&gt; &amp;#39;[ &lt;span class="st"&gt;&amp;quot;id&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; ]&lt;/span&gt;
&lt;span id="cb4-2"&gt;&lt;a href="#cb4-2"&gt;&lt;/a&gt;&lt;span class="op"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; toElmType (&lt;span class="dt"&gt;Proxy&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Proxy&lt;/span&gt; &lt;span class="dt"&gt;User&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb4-3"&gt;&lt;a href="#cb4-3"&gt;&lt;/a&gt;&lt;span class="dt"&gt;ETyApp&lt;/span&gt; (&lt;span class="dt"&gt;ETyApp&lt;/span&gt; (&lt;span class="dt"&gt;ETyCon&lt;/span&gt; (&lt;span class="dt"&gt;ETCon&lt;/span&gt; {tc_name &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;:&amp;amp;&amp;quot;&lt;/span&gt;})) (&lt;span class="dt"&gt;ETyApp&lt;/span&gt; (&lt;span class="dt"&gt;ETyApp&lt;/span&gt; (&lt;span class="dt"&gt;ETyCon&lt;/span&gt; (&lt;span class="dt"&gt;ETCon&lt;/span&gt; {tc_name &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;&amp;#39;:&amp;quot;&lt;/span&gt;})) (&lt;span class="dt"&gt;ETyApp&lt;/span&gt; (&lt;span class="dt"&gt;ETyApp&lt;/span&gt; (&lt;span class="dt"&gt;ETyCon&lt;/span&gt; (&lt;span class="dt"&gt;ETCon&lt;/span&gt; {tc_name &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;&amp;#39;:&amp;gt;&amp;quot;&lt;/span&gt;})) (&lt;span class="dt"&gt;ETyCon&lt;/span&gt; (&lt;span class="dt"&gt;ETCon&lt;/span&gt; {tc_name &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;\&amp;quot;id\&amp;quot;&amp;quot;&lt;/span&gt;}))) (&lt;span class="dt"&gt;ETyCon&lt;/span&gt; (&lt;span class="dt"&gt;ETCon&lt;/span&gt; {tc_name &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;Int&amp;quot;&lt;/span&gt;})))) (&lt;span class="dt"&gt;ETyApp&lt;/span&gt; (&lt;span class="dt"&gt;ETyApp&lt;/span&gt; (&lt;span class="dt"&gt;ETyCon&lt;/span&gt; (&lt;span class="dt"&gt;ETCon&lt;/span&gt; {tc_name &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;&amp;#39;:&amp;quot;&lt;/span&gt;})) (&lt;span class="dt"&gt;ETyApp&lt;/span&gt; (&lt;span class="dt"&gt;ETyApp&lt;/span&gt; (&lt;span class="dt"&gt;ETyCon&lt;/span&gt; (&lt;span class="dt"&gt;ETCon&lt;/span&gt; {tc_name &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;&amp;#39;:&amp;gt;&amp;quot;&lt;/span&gt;})) (&lt;span class="dt"&gt;ETyCon&lt;/span&gt; (&lt;span class="dt"&gt;ETCon&lt;/span&gt; {tc_name &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;\&amp;quot;name\&amp;quot;&amp;quot;&lt;/span&gt;}))) (&lt;span class="dt"&gt;ETyCon&lt;/span&gt; (&lt;span class="dt"&gt;ETCon&lt;/span&gt; {tc_name &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;String&amp;quot;&lt;/span&gt;})))) (&lt;span class="dt"&gt;ETyCon&lt;/span&gt; (&lt;span class="dt"&gt;ETCon&lt;/span&gt; {tc_name &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;&amp;#39;[]&amp;quot;&lt;/span&gt;}))))) (&lt;span class="dt"&gt;ETyApp&lt;/span&gt; (&lt;span class="dt"&gt;ETyCon&lt;/span&gt; (&lt;span class="dt"&gt;ETCon&lt;/span&gt; {tc_name &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;Field&amp;quot;&lt;/span&gt;})) (&lt;span class="dt"&gt;ETyCon&lt;/span&gt; (&lt;span class="dt"&gt;ETCon&lt;/span&gt; {tc_name &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;Identity&amp;quot;&lt;/span&gt;})))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これは絶対に Elm 側で動かない… そもそも拡張可能レコードは型エイリアスで定義されているため型名の情報が落ちてしまうし，理想的には Elm のレコード型に変換してほしい．&lt;/p&gt;
&lt;h2 id="section-1"&gt;&lt;/h2&gt;
&lt;p&gt;ということで，extensible の拡張可能レコードでもうまく動作する薄いラッパーパッケージを作ることにした．&lt;/p&gt;
&lt;h2 id="elmap.hs-プロジェクト"&gt;elmap.hs プロジェクト&lt;/h2&gt;
&lt;p&gt;elm-bridge と servant-elm には生成した &lt;code&gt;ETypeDef&lt;/code&gt; や &lt;code&gt;EType&lt;/code&gt; を再変換する関数を指定することができる:&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb5-1"&gt;&lt;a href="#cb5-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- servant-elm&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-2"&gt;&lt;a href="#cb5-2"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;ElmOptions&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;ElmOptions&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-3"&gt;&lt;a href="#cb5-3"&gt;&lt;/a&gt;  {&lt;span class="ot"&gt; urlPrefix             ::&lt;/span&gt; &lt;span class="dt"&gt;UrlPrefix&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-4"&gt;&lt;a href="#cb5-4"&gt;&lt;/a&gt;  ,&lt;span class="ot"&gt; elmTypeAlterations    ::&lt;/span&gt; (&lt;span class="dt"&gt;EType&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;EType&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb5-5"&gt;&lt;a href="#cb5-5"&gt;&lt;/a&gt;    &lt;span class="co"&gt;-- ^ 生成した ETypes を変換しなおす&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-6"&gt;&lt;a href="#cb5-6"&gt;&lt;/a&gt;  ,&lt;span class="ot"&gt; elmAlterations        ::&lt;/span&gt; (&lt;span class="dt"&gt;ETypeDef&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;ETypeDef&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb5-7"&gt;&lt;a href="#cb5-7"&gt;&lt;/a&gt;    &lt;span class="co"&gt;-- ^ 生成した ETypeDef を変換しなおす&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-8"&gt;&lt;a href="#cb5-8"&gt;&lt;/a&gt;  ,&lt;span class="ot"&gt; emptyResponseElmTypes ::&lt;/span&gt; [&lt;span class="dt"&gt;EType&lt;/span&gt;]&lt;/span&gt;
&lt;span id="cb5-9"&gt;&lt;a href="#cb5-9"&gt;&lt;/a&gt;  ,&lt;span class="ot"&gt; stringElmTypes        ::&lt;/span&gt; [&lt;span class="dt"&gt;EType&lt;/span&gt;]&lt;/span&gt;
&lt;span id="cb5-10"&gt;&lt;a href="#cb5-10"&gt;&lt;/a&gt;  }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;しかし，これで extensible の型を変換しなおすのは大変なので &lt;code&gt;toElmType&lt;/code&gt; のところから置き換える必要がある(そもそも型名の情報が落ちてしまっているし)．&lt;/p&gt;
&lt;h3 id="elmap-パッケージ"&gt;elmap パッケージ&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;toElmType&lt;/code&gt; が扱いにくい理由は，&lt;code&gt;Typeable&lt;/code&gt; 型クラスから自動で定義を導出されてしまうからだ． 多くの場合，自動で導出される方が嬉しいのだが，今回は型名の情報を与えたり Elm のレコード型に対応させたりなど，個別に対応したいので型クラスを利用することにする:&lt;/p&gt;
&lt;div class="sourceCode" id="cb6"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb6-1"&gt;&lt;a href="#cb6-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;class&lt;/span&gt; &lt;span class="dt"&gt;IsElmType&lt;/span&gt; a &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-2"&gt;&lt;a href="#cb6-2"&gt;&lt;/a&gt;&lt;span class="ot"&gt;  compileElmType ::&lt;/span&gt; &lt;span class="dt"&gt;Proxy&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;EType&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-3"&gt;&lt;a href="#cb6-3"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb6-4"&gt;&lt;a href="#cb6-4"&gt;&lt;/a&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;IsElmType&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-5"&gt;&lt;a href="#cb6-5"&gt;&lt;/a&gt;  compileElmType _ &lt;span class="ot"&gt;=&lt;/span&gt; toElmType (&lt;span class="dt"&gt;Proxy&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Proxy&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb6-6"&gt;&lt;a href="#cb6-6"&gt;&lt;/a&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;IsElmType&lt;/span&gt; &lt;span class="dt"&gt;Float&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-7"&gt;&lt;a href="#cb6-7"&gt;&lt;/a&gt;  compileElmType _ &lt;span class="ot"&gt;=&lt;/span&gt; toElmType (&lt;span class="dt"&gt;Proxy&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;Proxy&lt;/span&gt; &lt;span class="dt"&gt;Float&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;さらに，リネームを簡単に行いやすいようにリネームする関数を定義しておいた:&lt;/p&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb7-1"&gt;&lt;a href="#cb7-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;toElmTypeWith ::&lt;/span&gt; &lt;span class="dt"&gt;Typeable&lt;/span&gt; a &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Proxy&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;EType&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-2"&gt;&lt;a href="#cb7-2"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb7-3"&gt;&lt;a href="#cb7-3"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- Elm の場合 `Order` という型名になっている&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-4"&gt;&lt;a href="#cb7-4"&gt;&lt;/a&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;IsElmType&lt;/span&gt; &lt;span class="dt"&gt;Ordering&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-5"&gt;&lt;a href="#cb7-5"&gt;&lt;/a&gt;  compileElmType _ &lt;span class="ot"&gt;=&lt;/span&gt; toElmTypeWith &lt;span class="st"&gt;&amp;quot;Order&amp;quot;&lt;/span&gt; (&lt;span class="dt"&gt;Proxy&lt;/span&gt; &lt;span class="op"&gt;@&lt;/span&gt; &lt;span class="dt"&gt;Ordering&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="servant-elmap-パッケージ"&gt;servant-elmap パッケージ&lt;/h3&gt;
&lt;p&gt;servant 側では elmap パッケージで定義した &lt;code&gt;IsElmType&lt;/code&gt; 型クラスを利用するようにする:&lt;/p&gt;
&lt;div class="sourceCode" id="cb8"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb8-1"&gt;&lt;a href="#cb8-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;LangElmap&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-2"&gt;&lt;a href="#cb8-2"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb8-3"&gt;&lt;a href="#cb8-3"&gt;&lt;/a&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;IsElmType&lt;/span&gt; a &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;HasForeignType&lt;/span&gt; &lt;span class="dt"&gt;LangElmap&lt;/span&gt; &lt;span class="dt"&gt;EType&lt;/span&gt; a &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-4"&gt;&lt;a href="#cb8-4"&gt;&lt;/a&gt;  typeFor _ _ _ &lt;span class="ot"&gt;=&lt;/span&gt; compileElmType (&lt;span class="dt"&gt;Proxy&lt;/span&gt; &lt;span class="op"&gt;@&lt;/span&gt; a)&lt;/span&gt;
&lt;span id="cb8-5"&gt;&lt;a href="#cb8-5"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb8-6"&gt;&lt;a href="#cb8-6"&gt;&lt;/a&gt;&lt;span class="ot"&gt;getEndpoints ::&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-7"&gt;&lt;a href="#cb8-7"&gt;&lt;/a&gt;  (&lt;span class="dt"&gt;HasForeign&lt;/span&gt; &lt;span class="dt"&gt;LangElmap&lt;/span&gt; &lt;span class="dt"&gt;EType&lt;/span&gt; api, &lt;span class="dt"&gt;GenerateList&lt;/span&gt; &lt;span class="dt"&gt;EType&lt;/span&gt; (&lt;span class="dt"&gt;Foreign&lt;/span&gt; &lt;span class="dt"&gt;EType&lt;/span&gt; api))&lt;/span&gt;
&lt;span id="cb8-8"&gt;&lt;a href="#cb8-8"&gt;&lt;/a&gt;  &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Proxy&lt;/span&gt; api&lt;/span&gt;
&lt;span id="cb8-9"&gt;&lt;a href="#cb8-9"&gt;&lt;/a&gt;  &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; [&lt;span class="dt"&gt;Req&lt;/span&gt; &lt;span class="dt"&gt;EType&lt;/span&gt;]&lt;/span&gt;
&lt;span id="cb8-10"&gt;&lt;a href="#cb8-10"&gt;&lt;/a&gt;getEndpoints &lt;span class="ot"&gt;=&lt;/span&gt; listFromAPI (&lt;span class="dt"&gt;Proxy&lt;/span&gt; &lt;span class="op"&gt;@&lt;/span&gt; &lt;span class="dt"&gt;LangElmap&lt;/span&gt;) (&lt;span class="dt"&gt;Proxy&lt;/span&gt; &lt;span class="op"&gt;@&lt;/span&gt; &lt;span class="dt"&gt;EType&lt;/span&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;getEndpoints&lt;/code&gt; 関数を書き換えたので，この関数に依存している関数を全部置き換えた(ということをする必要があったのでフォークせずに薄いラッパーパッケージを作るようにした)．&lt;/p&gt;
&lt;h3 id="extensible-elmap-パッケージ"&gt;extensible-elmap パッケージ&lt;/h3&gt;
&lt;p&gt;最後に，extensible の拡張可能レコード型に対して &lt;code&gt;IsElmType&lt;/code&gt; 型クラスのインスタンスを定義すれば完成． 完成品はこちら:&lt;/p&gt;
&lt;div class="sourceCode" id="cb9"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb9-1"&gt;&lt;a href="#cb9-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;compileElmRecordTypeWith ::&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Proxy&lt;/span&gt; (&lt;span class="dt"&gt;RecordOf&lt;/span&gt; h xs) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;EType&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-2"&gt;&lt;a href="#cb9-2"&gt;&lt;/a&gt;compileElmRecordTypeWith name _ &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;ETyCon&lt;/span&gt; &lt;span class="op"&gt;$&lt;/span&gt; &lt;span class="dt"&gt;ETCon&lt;/span&gt; name&lt;/span&gt;
&lt;span id="cb9-3"&gt;&lt;a href="#cb9-3"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb9-4"&gt;&lt;a href="#cb9-4"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- ここから下は利用者側で定義する&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-5"&gt;&lt;a href="#cb9-5"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;User&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Record&lt;/span&gt; &amp;#39;[ &lt;span class="st"&gt;&amp;quot;id&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; ]&lt;/span&gt;
&lt;span id="cb9-6"&gt;&lt;a href="#cb9-6"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb9-7"&gt;&lt;a href="#cb9-7"&gt;&lt;/a&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;IsElmType&lt;/span&gt; &lt;span class="dt"&gt;User&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb9-8"&gt;&lt;a href="#cb9-8"&gt;&lt;/a&gt;  compileElmType &lt;span class="ot"&gt;=&lt;/span&gt; compileElmRecordTypeWith &lt;span class="st"&gt;&amp;quot;User&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;ElmType&lt;/code&gt; 自体は型名を覚えるだけなので簡単(とはいえ，この定義だと型変数などには未対応だが…)． さらに &lt;code&gt;IsElmDefinition&lt;/code&gt; 型クラスのインスタンスも定義する:&lt;/p&gt;
&lt;div class="sourceCode" id="cb10"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb10-1"&gt;&lt;a href="#cb10-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;compileElmRecordAliasWith ::&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-2"&gt;&lt;a href="#cb10-2"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;forall&lt;/span&gt; xs h &lt;span class="op"&gt;.&lt;/span&gt; &lt;span class="dt"&gt;Forall&lt;/span&gt; (&lt;span class="dt"&gt;KeyTargetAre&lt;/span&gt; &lt;span class="dt"&gt;KnownSymbol&lt;/span&gt; &lt;span class="dt"&gt;IsElmType&lt;/span&gt;) xs&lt;/span&gt;
&lt;span id="cb10-3"&gt;&lt;a href="#cb10-3"&gt;&lt;/a&gt;  &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Proxy&lt;/span&gt; (&lt;span class="dt"&gt;RecordOf&lt;/span&gt; h xs) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;EAlias&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-4"&gt;&lt;a href="#cb10-4"&gt;&lt;/a&gt;compileElmRecordAliasWith name _ &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;EAlias&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-5"&gt;&lt;a href="#cb10-5"&gt;&lt;/a&gt;  { ea_name &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;ETypeName&lt;/span&gt; name []&lt;/span&gt;
&lt;span id="cb10-6"&gt;&lt;a href="#cb10-6"&gt;&lt;/a&gt;  , ea_fields &lt;span class="ot"&gt;=&lt;/span&gt; fields&lt;/span&gt;
&lt;span id="cb10-7"&gt;&lt;a href="#cb10-7"&gt;&lt;/a&gt;  , ea_omit_null &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;False&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-8"&gt;&lt;a href="#cb10-8"&gt;&lt;/a&gt;  , ea_newtype &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;False&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-9"&gt;&lt;a href="#cb10-9"&gt;&lt;/a&gt;  , ea_unwrap_unary &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;True&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-10"&gt;&lt;a href="#cb10-10"&gt;&lt;/a&gt;  }&lt;/span&gt;
&lt;span id="cb10-11"&gt;&lt;a href="#cb10-11"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-12"&gt;&lt;a href="#cb10-12"&gt;&lt;/a&gt;    fields &lt;span class="ot"&gt;=&lt;/span&gt; henumerateFor&lt;/span&gt;
&lt;span id="cb10-13"&gt;&lt;a href="#cb10-13"&gt;&lt;/a&gt;      (&lt;span class="dt"&gt;Proxy&lt;/span&gt; &lt;span class="op"&gt;@&lt;/span&gt; (&lt;span class="dt"&gt;KeyTargetAre&lt;/span&gt; &lt;span class="dt"&gt;KnownSymbol&lt;/span&gt; &lt;span class="dt"&gt;IsElmType&lt;/span&gt;))&lt;/span&gt;
&lt;span id="cb10-14"&gt;&lt;a href="#cb10-14"&gt;&lt;/a&gt;      (&lt;span class="dt"&gt;Proxy&lt;/span&gt; &lt;span class="op"&gt;@&lt;/span&gt; xs)&lt;/span&gt;
&lt;span id="cb10-15"&gt;&lt;a href="#cb10-15"&gt;&lt;/a&gt;      (\m acc &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; (stringKeyOf m, compileElmType &lt;span class="op"&gt;$&lt;/span&gt; proxyTargetOf m) &lt;span class="op"&gt;:&lt;/span&gt; acc)&lt;/span&gt;
&lt;span id="cb10-16"&gt;&lt;a href="#cb10-16"&gt;&lt;/a&gt;      []&lt;/span&gt;
&lt;span id="cb10-17"&gt;&lt;a href="#cb10-17"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb10-18"&gt;&lt;a href="#cb10-18"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- ここから下は利用者側で定義する&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-19"&gt;&lt;a href="#cb10-19"&gt;&lt;/a&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;IsElmDefinition&lt;/span&gt; &lt;span class="dt"&gt;User&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-20"&gt;&lt;a href="#cb10-20"&gt;&lt;/a&gt;  compileElmDef &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;ETypeAlias&lt;/span&gt; &lt;span class="op"&gt;.&lt;/span&gt; compileElmRecordAliasWith &lt;span class="st"&gt;&amp;quot;User&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;多少ボイラーテンプレートができてしまったが，まぁ個人的には許容範囲．&lt;/p&gt;
&lt;h2 id="おまけ-普通のレコードに対応する"&gt;おまけ: 普通のレコードに対応する&lt;/h2&gt;
&lt;p&gt;僕はほとんど使わないからいいんだけど，普通のレコード型も &lt;code&gt;IsElmType&lt;/code&gt; に対応しやすいようなヘルパー関数を定義しておこう:&lt;/p&gt;
&lt;div class="sourceCode" id="cb11"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb11-1"&gt;&lt;a href="#cb11-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;toElmAlias ::&lt;/span&gt; &lt;span class="kw"&gt;forall&lt;/span&gt; a&lt;span class="op"&gt;.&lt;/span&gt; (&lt;span class="dt"&gt;GIsElmFields&lt;/span&gt; (&lt;span class="dt"&gt;Rep&lt;/span&gt; a), &lt;span class="dt"&gt;IsElmType&lt;/span&gt; a) &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Proxy&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;EAlias&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-2"&gt;&lt;a href="#cb11-2"&gt;&lt;/a&gt;toElmAlias proxy &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;EAlias&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-3"&gt;&lt;a href="#cb11-3"&gt;&lt;/a&gt;  { ea_name &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;ETypeName&lt;/span&gt; (renderElm &lt;span class="op"&gt;$&lt;/span&gt; compileElmType proxy) []&lt;/span&gt;
&lt;span id="cb11-4"&gt;&lt;a href="#cb11-4"&gt;&lt;/a&gt;  , ea_fields &lt;span class="ot"&gt;=&lt;/span&gt; gcompileElmFields (&lt;span class="dt"&gt;Proxy&lt;/span&gt; &lt;span class="op"&gt;@&lt;/span&gt; (&lt;span class="dt"&gt;Rep&lt;/span&gt; a))&lt;/span&gt;
&lt;span id="cb11-5"&gt;&lt;a href="#cb11-5"&gt;&lt;/a&gt;  , ea_omit_null &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;False&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-6"&gt;&lt;a href="#cb11-6"&gt;&lt;/a&gt;  , ea_newtype &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;False&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-7"&gt;&lt;a href="#cb11-7"&gt;&lt;/a&gt;  , ea_unwrap_unary &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;True&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-8"&gt;&lt;a href="#cb11-8"&gt;&lt;/a&gt;  }&lt;/span&gt;
&lt;span id="cb11-9"&gt;&lt;a href="#cb11-9"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb11-10"&gt;&lt;a href="#cb11-10"&gt;&lt;/a&gt;&lt;span class="kw"&gt;class&lt;/span&gt; &lt;span class="dt"&gt;GIsElmFields&lt;/span&gt; (&lt;span class="ot"&gt;rep ::&lt;/span&gt; &lt;span class="dt"&gt;Type&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Type&lt;/span&gt;) &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-11"&gt;&lt;a href="#cb11-11"&gt;&lt;/a&gt;&lt;span class="ot"&gt;  gcompileElmFields ::&lt;/span&gt; &lt;span class="dt"&gt;Proxy&lt;/span&gt; rep &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; [(&lt;span class="dt"&gt;String&lt;/span&gt;, &lt;span class="dt"&gt;EType&lt;/span&gt;)]&lt;/span&gt;
&lt;span id="cb11-12"&gt;&lt;a href="#cb11-12"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb11-13"&gt;&lt;a href="#cb11-13"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- ここから下は利用者側で定義する&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-14"&gt;&lt;a href="#cb11-14"&gt;&lt;/a&gt;&lt;span class="kw"&gt;data&lt;/span&gt; &lt;span class="dt"&gt;User&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;User&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-15"&gt;&lt;a href="#cb11-15"&gt;&lt;/a&gt;    {&lt;span class="ot"&gt; userId   ::&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-16"&gt;&lt;a href="#cb11-16"&gt;&lt;/a&gt;    ,&lt;span class="ot"&gt; userName ::&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-17"&gt;&lt;a href="#cb11-17"&gt;&lt;/a&gt;    } &lt;span class="kw"&gt;deriving&lt;/span&gt; (&lt;span class="dt"&gt;Generic&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb11-18"&gt;&lt;a href="#cb11-18"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb11-19"&gt;&lt;a href="#cb11-19"&gt;&lt;/a&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;IsElmType&lt;/span&gt; &lt;span class="dt"&gt;Book&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-20"&gt;&lt;a href="#cb11-20"&gt;&lt;/a&gt;  compileElmType _ &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;ETyCon&lt;/span&gt; &lt;span class="op"&gt;$&lt;/span&gt; &lt;span class="dt"&gt;ETCon&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;Book&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-21"&gt;&lt;a href="#cb11-21"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb11-22"&gt;&lt;a href="#cb11-22"&gt;&lt;/a&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;IsElmDefinition&lt;/span&gt; &lt;span class="dt"&gt;Book&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-23"&gt;&lt;a href="#cb11-23"&gt;&lt;/a&gt;  compileElmDef &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;ETypeAlias&lt;/span&gt; &lt;span class="op"&gt;.&lt;/span&gt; toElmAlias&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;toElmAlias&lt;/code&gt; 関数では，Haskell の総称プログラミング(Generics)という機能を利用している． Generics では Haskell 内での型や値のメタ情報を Haskell の型や値として取得できる． これと型クラスを組み合わせることで，型の構造毎に関数の実装を分岐することができる:&lt;/p&gt;
&lt;div class="sourceCode" id="cb12"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb12-1"&gt;&lt;a href="#cb12-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- `M1 D` はデータ型を表現&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-2"&gt;&lt;a href="#cb12-2"&gt;&lt;/a&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;GIsElmFields&lt;/span&gt; a &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;GIsElmFields&lt;/span&gt; (&lt;span class="dt"&gt;M1&lt;/span&gt; &lt;span class="dt"&gt;D&lt;/span&gt; x a) &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-3"&gt;&lt;a href="#cb12-3"&gt;&lt;/a&gt;  gcompileElmFields _ &lt;span class="ot"&gt;=&lt;/span&gt; gcompileElmFields (&lt;span class="dt"&gt;Proxy&lt;/span&gt; &lt;span class="op"&gt;@&lt;/span&gt; a)&lt;/span&gt;
&lt;span id="cb12-4"&gt;&lt;a href="#cb12-4"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb12-5"&gt;&lt;a href="#cb12-5"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- `M1 C` はコンストラクタを表現&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-6"&gt;&lt;a href="#cb12-6"&gt;&lt;/a&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; &lt;span class="dt"&gt;GIsElmFields&lt;/span&gt; a &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;GIsElmFields&lt;/span&gt; (&lt;span class="dt"&gt;M1&lt;/span&gt; &lt;span class="dt"&gt;C&lt;/span&gt; x a) &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-7"&gt;&lt;a href="#cb12-7"&gt;&lt;/a&gt;  gcompileElmFields _ &lt;span class="ot"&gt;=&lt;/span&gt; gcompileElmFields (&lt;span class="dt"&gt;Proxy&lt;/span&gt; &lt;span class="op"&gt;@&lt;/span&gt; a)&lt;/span&gt;
&lt;span id="cb12-8"&gt;&lt;a href="#cb12-8"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb12-9"&gt;&lt;a href="#cb12-9"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- `M1 S` はレコードのセレクタを表現(`K1` はカインドの情報)&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-10"&gt;&lt;a href="#cb12-10"&gt;&lt;/a&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; (&lt;span class="dt"&gt;Selector&lt;/span&gt; x, &lt;span class="dt"&gt;IsElmType&lt;/span&gt; a) &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;GIsElmFields&lt;/span&gt; (&lt;span class="dt"&gt;M1&lt;/span&gt; &lt;span class="dt"&gt;S&lt;/span&gt; x (&lt;span class="dt"&gt;K1&lt;/span&gt; &lt;span class="dt"&gt;R&lt;/span&gt; a)) &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-11"&gt;&lt;a href="#cb12-11"&gt;&lt;/a&gt;  gcompileElmFields _ &lt;span class="ot"&gt;=&lt;/span&gt; [(selName (&lt;span class="fu"&gt;undefined&lt;/span&gt;&lt;span class="ot"&gt; ::&lt;/span&gt; &lt;span class="dt"&gt;S1&lt;/span&gt; x (&lt;span class="dt"&gt;K1&lt;/span&gt; &lt;span class="dt"&gt;R&lt;/span&gt; a) ()), compileElmType (&lt;span class="dt"&gt;Proxy&lt;/span&gt; &lt;span class="op"&gt;@&lt;/span&gt; a))]&lt;/span&gt;
&lt;span id="cb12-12"&gt;&lt;a href="#cb12-12"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb12-13"&gt;&lt;a href="#cb12-13"&gt;&lt;/a&gt;&lt;span class="co"&gt;--- `:*:` は型の直積を表現&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-14"&gt;&lt;a href="#cb12-14"&gt;&lt;/a&gt;&lt;span class="kw"&gt;instance&lt;/span&gt; (&lt;span class="dt"&gt;GIsElmFields&lt;/span&gt; a, &lt;span class="dt"&gt;GIsElmFields&lt;/span&gt; b) &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;GIsElmFields&lt;/span&gt; (a &lt;span class="op"&gt;:*:&lt;/span&gt; b) &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb12-15"&gt;&lt;a href="#cb12-15"&gt;&lt;/a&gt;  gcompileElmFields _ &lt;span class="ot"&gt;=&lt;/span&gt; gcompileElmFields (&lt;span class="dt"&gt;Proxy&lt;/span&gt; &lt;span class="op"&gt;@&lt;/span&gt; a) &lt;span class="op"&gt;++&lt;/span&gt; gcompileElmFields (&lt;span class="dt"&gt;Proxy&lt;/span&gt; &lt;span class="op"&gt;@&lt;/span&gt; b)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="おしまい"&gt;おしまい&lt;/h2&gt;
&lt;p&gt;もう少し簡単に解決する方法もあったような気もするけど，Haskell のメタプログラミングを色々味わえたのでまぁいいや． どうせ，僕ぐらいしか使わないだろうし(笑)&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/07/30/200423</id><title type="text">今日は Roppongi.rs #1 の日です</title><updated>2019-07-30T20:38:11+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/07/30/200423"/><summary type="html">職場から近いので Roppoingi.rs に来ました。自分のためにメモを残しておきます。ハッシュタグは #roppongirs 。 Rustがいかにエンジニアの脳を楽にさせているかをC++初心者が語る〜関数篇〜 / @natsu_no_yuki さん C++歴15年の初心者 rvalue reference, template特殊化などが使えるのは初心者らしい rust歴は3日 プログラミングの歴史からrustの良さを考える C言語: メモリ管理を何もしてくれない プログラマが明示的にメモリを確保したり・・・ (C、C++のことです) C++ と rust の比較 C++で関数呼び出しをする…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/07/29/%E9%96%A2%E6%95%B0%E3%81%AE%E3%83%A1%E3%83%A2%E5%8C%96</id><title type="text">関数のメモ化</title><updated>2019-07-30T13:06:40+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/07/29/%E9%96%A2%E6%95%B0%E3%81%AE%E3%83%A1%E3%83%A2%E5%8C%96"/><summary type="html">ブログに書いてみるとよく分からなくなってきました 🙃 Haskell-jp で回答をもらいました。 @lotz84_ さんの記事や GHC のプロファイルに出てくる CAF がよく分かってなかったのをまとめる。 qiita.com fact のメモ化 lotz さんの記事の階乗 fact 関数を題材にする。 fact :: Int -&gt; Integer fact 0 = 1 fact n = fromIntegral n * fact (n-1) lotz さんの記事よれば、次の実装だとメモ化されるとのこと。 -- | 関数をメモ化する関数 memoize :: (Int -&gt; a) -&gt; I…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/07/30/112634</id><title type="text">CloudNative Days Tokyo 2019 登壇こぼれ話 #CNDT2019</title><updated>2019-07-30T11:26:34+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/07/30/112634"/><summary type="html">先日行われた CloudNative Days Tokyo 2019 で、Kubernetes のスケジューリングについて発表してきました。公募 CFP 枠です。 今回の発表は、実は技術的に目新しい内容をほとんど含んでいません。各トピックは今までいくつかの勉強会で LT として発表しているものがほとんどです。 ただし、普段の発表では時間が短いこともあって断片的になりがちだった内容を 40 分の枠で再構成し、スケジューリングについて初めて聞く人にとっても入り口のギャップを少なく、できるだけ学習曲線がなだらかになるようにすることを念頭に置いてプレゼンを組み立てました。 当日の Twitter でも…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/07/27/195704</id><title type="text">Strassen の行列積を求めるアルゴリズム</title><updated>2019-07-27T21:57:53+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/07/27/195704"/><summary type="html">アルゴリズムイントロダクションで、行列積を求める奇妙なアルゴリズムを見つけたので rust で実装した。簡単のため、行列の表現には ndarray を用いている。 #[macro_use] extern crate ndarray; use ndarray::prelude::*; type Matrix = Array2&lt;i32&gt;; type MatrixView&lt;'a&gt; = ArrayView2&lt;'a, i32&gt;; type MatrixViewMut&lt;'a&gt; = ArrayViewMut2&lt;'a, i32&gt;; fn strassen_multiply_inner (a: MatrixVi…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/07/23/225523</id><title type="text">rustのsliceとlen()</title><updated>2019-07-23T22:55:53+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/07/23/225523"/><summary type="html">こう書くと、 fn main() { let mut a = [1, 2, 3, 4, 5]; let x = &amp;mut a[3..a.len()]; println!("{:?}", x); } こう怒られる。 error[E0502]: cannot borrow `a` as immutable because it is also borrowed as mutable --&gt; src/main.rs:3:23 | 3 | let x = &amp;mut a[3..a.len()]; | -----^------- | | | | | immutable borrow occurs here…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/07/06/151347</id><title type="text">rust の perl-xs を触る</title><updated>2019-07-19T16:30:43+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/07/06/151347"/><summary type="html">rust の perl-xs なるリポジトリを見つけたので触ってみた。 Perl の carton と rust の cargo が動く環境1であれば、 README に書かれている通りリポジトリを clone してきて以下で簡単に試せる。 $ carton install $ carton exec -- 'cd t &amp;&amp; perl Makefile.PL &amp;&amp; make test' perl-xs は Perl API を rust から使いやすいようにラップしたものという位置づけになる。 Perl API への低レベルなバインディングは perl-sys で提供され、 Rust のコード…</summary></entry><entry><id>https://kurokawh.blogspot.com/2019/07/mac-el-capitan.html</id><title type="text">[mac] El Capitanへのアップグレード関連作業まとめ</title><updated>2019-07-13T19:19:56.684+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2019/07/mac-el-capitan.html"/><summary type="text">YosemiteからEl Capitan（10.11.2）へアップグレードしました。旧環境で起動できていたアプリケーションが起動できなくなったり、コマンドが見つからなくなる、といった問題が発生しましたが一通り解決できたので、その内容をまとめておきます。

＃ポストし忘れてた･･･。今更な情報ですが自分の備忘録の意味もあるので公開。


El Capitanの新機能に伴う問題・設定の修正

OS X El Capitan：日本語入力のライブ変換モードをオフにする

[システム環境設定] - [キーボード]を開く
[入力ソース]タブを選択
「ライブ変換」のチェックを外す





MacPortsのアップデート

Yosemite環境でインストールしたMacPortsはそのままでは利用できない。以下のようなエラーメッセージが表示される。
% port qv installed
Error: </summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/07/07/215220</id><title type="text">rustで「サイコロを転がす」を解く</title><updated>2019-07-07T21:52:20+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/07/07/215220"/><summary type="html">最近 rust を勉強し始めたので、オフラインリアルタイムどう書くで一番簡単な問題（と思っている） サイコロを転がす を解いた。破壊的更新を戦略的に使えるのは、この程度の難易度のサンプルであれば書いてて大変気持ちがいい。 yhpg-rs/lib.rs at ord12rotdice · hiratara/yhpg-rs · GitHub</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/07/06/213029</id><title type="text">Docker Meetup Tokyo #31 で Kubernetes 1.15 について話してきました</title><updated>2019-07-06T21:30:29+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/07/06/213029"/><summary type="html">先日行われた Docker Meetup Tokyo #31 で、Kubernetes 1.15 の Scheduler 周りの新機能について発表してきました。 Kubernetes の Pod Preemption を利用すると、より重要な Pod にノードの計算リソースを割り当てる優先的に割り当てることができ、コストの最適化につながります。しかし優先度の低い Pod は実行中に強制的に終了されることとなり、長時間かかるバッチ処理が途中で中断されてしまうという弊害もあります。 本スライドでは、Kubernetes 1.15 から Alpha 機能として導入された NonPreemptingP…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/07/05/155146</id><title type="text">Kubernetes 1.15: SIG Scheduling の変更内容</title><updated>2019-07-05T15:51:46+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/07/05/155146"/><summary type="html">はじめに 本記事では、Kubernetes 1.15 のリリースノート からスケジューリングに関する内容をまとめました。 なお、SIG Scheduling の変更内容については既に他の方から翻訳記事が出ていますが、本記事は後発ということもあり、すべての機能を実際に触ってみた上でサンプルコードを添えて解説していきます。 Kubernetes 1.15: SIG Scheduling の変更内容 1.15 の新着情報 (1.15 What’s New) 今回、完全な変更ログは https://relnotes.k8s.io/ で、絞り込み可能なフォーマットで公開されています。確認とフィードバック…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/06/24/222657</id><title type="text">トレイト境界の F: FnMut(u8) -&gt; bool という記法について</title><updated>2019-06-24T22:26:57+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/06/24/222657"/><summary type="html">rust で where の中でトレイト境界を書ける。そして、クロージャはトレイトで実現されている。ってことなんだけど、クロージャを表す型変数のトレイト境界の書き方はなんとも気持ちが悪い。 struct Cacher&lt;T&gt; where T: Fn(u32) -&gt; u32 { calculation: T, value: Option&lt;u32&gt;, } Closures: Anonymous Functions that Can Capture Their Environment - The Rust Programming Language トレイト境界と言えば T: Display + Clo…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/06/22/101608</id><title type="text">VSCodeからWSL上のRLSを使うメモ (2)</title><updated>2019-06-22T10:16:08+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/06/22/101608"/><summary type="html">ある朝突然、 cargo test が VSCode Insiders から呼べなくなった。これを踏んでた。どうやら昨日の夕方に 1.36.0-insider がアップデートされて壊れたようだ（アップデートされた記憶はあまりない）。 github.com 以下に従って5月のビルド 1.35.0-insider に戻したら問題なく動いた。 Insider らしくてとてもよい（よくない）。 Access older Insider builds · Issue #46089 · microsoft/vscode · GitHub</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/06/19/104356</id><title type="text">VSCodeからWSL上のRLSを使うメモ</title><updated>2019-06-19T10:50:33+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/06/19/104356"/><summary type="html">悲しいことにうまく動せていない。時間が解決してくれる気はする。 その1. Remote WSL環境 開発者版 VSCode insiders が必要。 VSCode とは別のアプリとしてインストールできるので気にせず入れて良い。Remote WSL 拡張を入れればそれで終わり。 その2 で使う useWSL は使わない。ほぼうまく動くが、なぜか rustfmt による整形が動かない上に、 Output View へログを一行も吐いてくれない*1ので調査もできなくて困る。 その2. RLS拡張のuseWSLを使う RLS拡張 が想定しているのはおそらくこちらの使い方。 しかし、まず rustup…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/06/13/155557</id><title type="text">Traversable API</title><updated>2019-06-15T15:54:35+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/06/13/155557"/><summary type="html">与えられたConnectionを通じて、指定したKeyに対応するByteStringを取り出すような、シンプルなKey-ValueストアのAPIを考えてみよう。 type Key = ByteString fetchOne :: Connection -&gt; Key -&gt; IO ByteString ネットワーク越しにたくさんのデータを取得したいとき、何度もこれを呼び出していては効率が悪い。一度にまとめて取り出せるように拡張するなら、このように書ける。 fetchMany :: Connection -&gt; [Key] -&gt; IO [ByteString] 悪くはないが、この型はたとえば「["fo…</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-06-10-build-haskell-app-docker-image-without-stack-image-cmd.html</id><title type="text">stack image コマンドなしに Haskell アプリの Docker イメージを作る</title><updated>2019-06-10T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-06-10-build-haskell-app-docker-image-without-stack-image-cmd.html"/><summary type="html">&lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;自分は Haskell アプリケーションの Docker イメージを作るのに &lt;code&gt;stack image&lt;/code&gt; コマンドを愛用している． しかし悲しいことに &lt;strong&gt;stack v2 からはこの機能が無くなってしまう&lt;/strong&gt; のだ． ということで代替方法を考えてみた，というお話．&lt;/p&gt;
&lt;h2 id="tldr"&gt;tl;dr&lt;/h2&gt;
&lt;p&gt;matsubara0507/whoami というリポジトリで試したので，その PR を見ると良い:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matsubara0507/whoami/pull/6"&gt;Build docker image without stack image command by matsubara0507 · Pull Request #6 · matsubara0507/whoami&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;結論としては stack の &lt;code&gt;--local-bin-path&lt;/code&gt; オプションと Docker Integration を使って Docker イメージ用の実行ファイルをワークディレクトリに置いて，&lt;code&gt;docker build&lt;/code&gt; でコピーしているだけ．&lt;/p&gt;
&lt;h2 id="stack-image-コマンド"&gt;stack image コマンド&lt;/h2&gt;
&lt;p&gt;簡単に今は亡き &lt;code&gt;stack image&lt;/code&gt; コマンドを説明する． このコマンドは &lt;code&gt;stack image container&lt;/code&gt; というサブコマンドにより，stack.yaml の設定を元にして実行ファイルだけを含んだ Docker イメージを作ってくれる． &lt;code&gt;docker&lt;/code&gt; コマンドで普通にイメージを作るのと違い，&lt;code&gt;.stack-work&lt;/code&gt; のビルドキャッシュをホストマシンのローカルに保存し，利用してくれる． そのおかげで2回目以降のビルドも高速に行える(&lt;code&gt;stack&lt;/code&gt; による初回ビルドはとても時間がかかる…)．&lt;/p&gt;
&lt;p&gt;使い方は簡単で，次のようなのを stack.yaml に記述し &lt;code&gt;stack --docker image container&lt;/code&gt; とするだけ:&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;span id="cb1-1"&gt;&lt;a href="#cb1-1"&gt;&lt;/a&gt;&lt;span class="fu"&gt;docker&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-2"&gt;&lt;a href="#cb1-2"&gt;&lt;/a&gt;&lt;span class="at"&gt;  &lt;/span&gt;&lt;span class="fu"&gt;repo&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; fpco/stack-build&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-3"&gt;&lt;a href="#cb1-3"&gt;&lt;/a&gt;&lt;span class="at"&gt;  &lt;/span&gt;&lt;span class="fu"&gt;enable&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="ch"&gt;false&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-4"&gt;&lt;a href="#cb1-4"&gt;&lt;/a&gt;&lt;span class="fu"&gt;image&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-5"&gt;&lt;a href="#cb1-5"&gt;&lt;/a&gt;&lt;span class="at"&gt;  &lt;/span&gt;&lt;span class="fu"&gt;container&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-6"&gt;&lt;a href="#cb1-6"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;name&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; matsubara0507/whoami&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-7"&gt;&lt;a href="#cb1-7"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;base&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; matsubara0507/ubuntu-for-haskell:git&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;docker&lt;/code&gt; の方の設定は Docker Integration と呼ばれるもので，&lt;code&gt;repo&lt;/code&gt; で設定したイメージのコンテナ内で stack のビルドをしてくれる(こいつがローカルの &lt;code&gt;.stack-work&lt;/code&gt; を利用する)． &lt;code&gt;image&lt;/code&gt; の方の設定が &lt;code&gt;stack image&lt;/code&gt; の設定で，&lt;code&gt;base&lt;/code&gt; が作成するイメージのベースイメージだ． やってることは実行ファイルを &lt;code&gt;.stack-work&lt;/code&gt; からコピーしてくるだけで，ベースイメージが Docker Integration のイメージと同じ OS であればちゃんと動作する．&lt;/p&gt;
&lt;h2 id="section"&gt;&lt;/h2&gt;
&lt;p&gt;さて，冒頭に書いた通り，&lt;a href="https://github.com/commercialhaskell/stack/blob/c0c6510741a0f3e2f687a4fecf9b0ae625fca12a/ChangeLog.md#v2101-release-candidate"&gt;&lt;strong&gt;この機能は stack の新しいバージョンでは無くなってしまう&lt;/strong&gt;&lt;/a&gt;．&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Remove the stack image command. With the advent of Docker multistage builds, this functionality is no longer useful. For an example, please see Building Haskell Apps with Docker.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;マルチステージビルドができたし，あんまりこれもう便利じゃないよね，とのこと． 代わりに「&lt;a href="https://www.fpcomplete.com/blog/2017/12/building-haskell-apps-with-docker"&gt;Building Haskell Apps with Docker&lt;/a&gt;」という記事を読むと良いらしい．&lt;/p&gt;
&lt;h2 id="マルチステージビルドする"&gt;マルチステージビルドする&lt;/h2&gt;
&lt;p&gt;上記リンクではマルチステージビルドを使えと書いてある． 多分こんな感じ(試してない):&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode dockerfile"&gt;&lt;code class="sourceCode dockerfile"&gt;&lt;span id="cb2-1"&gt;&lt;a href="#cb2-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;FROM&lt;/span&gt; fpco/stack-build:lts-13.21 as bin&lt;/span&gt;
&lt;span id="cb2-2"&gt;&lt;a href="#cb2-2"&gt;&lt;/a&gt;&lt;span class="kw"&gt;RUN&lt;/span&gt; mkdir -p /root/work&lt;/span&gt;
&lt;span id="cb2-3"&gt;&lt;a href="#cb2-3"&gt;&lt;/a&gt;&lt;span class="kw"&gt;COPY&lt;/span&gt; . /root/work&lt;/span&gt;
&lt;span id="cb2-4"&gt;&lt;a href="#cb2-4"&gt;&lt;/a&gt;&lt;span class="kw"&gt;RUN&lt;/span&gt; cd /root/work &amp;amp;&amp;amp; stack install --system-ghc&lt;/span&gt;
&lt;span id="cb2-5"&gt;&lt;a href="#cb2-5"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-6"&gt;&lt;a href="#cb2-6"&gt;&lt;/a&gt;&lt;span class="kw"&gt;FROM&lt;/span&gt; matsubara0507/ubuntu-for-haskell&lt;/span&gt;
&lt;span id="cb2-7"&gt;&lt;a href="#cb2-7"&gt;&lt;/a&gt;&lt;span class="kw"&gt;RUN&lt;/span&gt; mkdir -p /root/.local/bin &amp;amp;&amp;amp; mkdir -p /root/work&lt;/span&gt;
&lt;span id="cb2-8"&gt;&lt;a href="#cb2-8"&gt;&lt;/a&gt;&lt;span class="kw"&gt;ENV&lt;/span&gt; PATH /root/.local/bin:$PATH&lt;/span&gt;
&lt;span id="cb2-9"&gt;&lt;a href="#cb2-9"&gt;&lt;/a&gt;&lt;span class="kw"&gt;WORKDIR&lt;/span&gt; /root/work&lt;/span&gt;
&lt;span id="cb2-10"&gt;&lt;a href="#cb2-10"&gt;&lt;/a&gt;&lt;span class="kw"&gt;COPY&lt;/span&gt; --from=bin /root/.local/bin /root/.local/bin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;stack の Docker Integration は残ってるので &lt;code&gt;stack --docker build&lt;/code&gt; とすることで Docker コンテナ内でのビルド自体は実行される(これによってローカルにキャッシュが作られる)． 一つ目のステージでは &lt;code&gt;stack install&lt;/code&gt; により &lt;code&gt;.stack-work&lt;/code&gt; 内の実行ファイルを &lt;code&gt;/root/.local/bin&lt;/code&gt; にコピーし，二つ目のステージではさらにこの実行ファイルだけを最終的に作られるイメージにコピーしている． ちなみに，&lt;code&gt;/root/.local/bin&lt;/code&gt; は stack が決めてるローカル実行ファイルを置くパスで，&lt;code&gt;stack path&lt;/code&gt; で確認できる(OS によって違うはず)．&lt;/p&gt;
&lt;p&gt;でもこれ一つ欠点があって． &lt;code&gt;docker build&lt;/code&gt; するときに，肥大化しがちな &lt;code&gt;.stack-work&lt;/code&gt; をいちいち上げる必要があるので，だんだん &lt;code&gt;docker build&lt;/code&gt; の時間が長くなる(最近作ってたアプリケーションは4GBになってしまって…)． &lt;code&gt;.dockerignore&lt;/code&gt; で無視できれば良いのだが，それだと &lt;code&gt;stack insatll&lt;/code&gt; できない(&lt;code&gt;.stack-work&lt;/code&gt; 内の実行ファイルのパスは resolver や GHC のバージョンなどで変わるので，これをイチイチ &lt;code&gt;.dockerignore&lt;/code&gt; に書くのはめんどくさい)．&lt;/p&gt;
&lt;h2 id="local-bin-path-オプション"&gt;local-bin-path オプション&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;docker build&lt;/code&gt; する時は &lt;code&gt;.stack-work&lt;/code&gt; を無視したい． じゃぁどうするか． 一つ目のステージでやっているのは既に出来上がった実行ファイルを &lt;code&gt;stack install&lt;/code&gt; を使って分かりやすいパスに持ってきてるだけだ． そこで気づく，それを上書きするオプションがあるのではないかと． あった:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/commercialhaskell/stack/issues/730"&gt;Specify local-bin-path · Issue #730 · commercialhaskell/stack · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;stack --local-bin-path=any_path install&lt;/code&gt; とすることで任意のパスに実行ファイルをコピーできる！ 知らなかった． あとはここから &lt;code&gt;docker build&lt;/code&gt; で実行ファイルコピーしてくるように Dockerfile を書くだけ:&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode dockerfile"&gt;&lt;code class="sourceCode dockerfile"&gt;&lt;span id="cb3-1"&gt;&lt;a href="#cb3-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;FROM&lt;/span&gt; matsubara0507/ubuntu-for-haskell&lt;/span&gt;
&lt;span id="cb3-2"&gt;&lt;a href="#cb3-2"&gt;&lt;/a&gt;&lt;span class="kw"&gt;ARG&lt;/span&gt; local_bin_path&lt;/span&gt;
&lt;span id="cb3-3"&gt;&lt;a href="#cb3-3"&gt;&lt;/a&gt;&lt;span class="kw"&gt;RUN&lt;/span&gt; mkdir -p /root/.local/bin &amp;amp;&amp;amp; mkdir -p /root/work&lt;/span&gt;
&lt;span id="cb3-4"&gt;&lt;a href="#cb3-4"&gt;&lt;/a&gt;&lt;span class="kw"&gt;ENV&lt;/span&gt; PATH /root/.local/bin:$PATH&lt;/span&gt;
&lt;span id="cb3-5"&gt;&lt;a href="#cb3-5"&gt;&lt;/a&gt;&lt;span class="kw"&gt;WORKDIR&lt;/span&gt; /root/work&lt;/span&gt;
&lt;span id="cb3-6"&gt;&lt;a href="#cb3-6"&gt;&lt;/a&gt;&lt;span class="kw"&gt;COPY&lt;/span&gt; ${local_bin_path} /root/.local/bin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;ARG&lt;/code&gt; を使ったので次のように &lt;code&gt;docker build&lt;/code&gt; コマンドのオプションで指定する:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ stack --local-bin-path=./bin --docker install
$ docker build -t matsubara0507/whoami . --build-arg local_bin_path=./bin&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;いい感じ！ もちろん &lt;code&gt;.dockerignore&lt;/code&gt; に &lt;code&gt;.stack-work&lt;/code&gt; が書いてあるのでイメージのビルドも速い．&lt;/p&gt;
&lt;h2 id="おしまい"&gt;おしまい&lt;/h2&gt;
&lt;p&gt;これで心置き無く新しい stack のバージョンを使うことができる．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/05/29/194539</id><title type="text">Fun Fun Functional (1) で Haskell と Firebase を使ってライブコーディングしてきました</title><updated>2019-05-29T19:45:39+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/05/29/194539"/><summary type="html">先日行われた Fun Fun Functional (1) で、Haskell と Firebase を使った Web アプリの作り方について発表してきました。 使用した要素技術は、GHCJS 上のフレームワーク Miso と、Fireabse SDK を呼び出すための DSL である JSaddle です。 GHCJS は Haskell のソースコードを JavaScript に変換するコンパイラで、GHC をフォークすることによって開発されています。 github.com Miso は GHCJS 上で The Elm Architecture を実装するためのフレームワークです。Mis…</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-05-27-create-mix-libs.html</id><title type="text">rio + extensible なフレームワーク: mix</title><updated>2019-05-27T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-05-27-create-mix-libs.html"/><summary type="html">&lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;最近はよく &lt;a href="https://hackage.haskell.org/package/rio"&gt;rio&lt;/a&gt; + &lt;a href="https://hackage.haskell.org/package/extensible"&gt;extensible&lt;/a&gt; で Haskell アプリケーションを書きます(趣味の)． 前々から何となくパターン化できそうだなぁと思っていたのが，それをついにパターン化し mix パッケージとして形にしましたというお話です．&lt;/p&gt;
&lt;p&gt;ちなみに，それぞれのパッケージを軽く説明すると:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;rio : Haskell のビルドツール Stack を開発しているチームが作っている Reader パターンをベースにした Alt. Prelude&lt;/li&gt;
&lt;li&gt;extensible : 拡張可能レコードを始めとして様々な拡張可能なデータ構造を同一の形式で利用できるようになるパッケージ&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="mix-パッケージ"&gt;mix パッケージ&lt;/h2&gt;
&lt;p&gt;リポジトリはこれ:&lt;/p&gt;
&lt;h5 id="section"&gt;&lt;iframe width="426" height="183" scrolling="no" frameborder="0" src="https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/mix.hs"&gt;&lt;/iframe&gt;&lt;/h5&gt;
&lt;p&gt;mix パッケージの目的は rio パッケージの &lt;code&gt;RIO env a&lt;/code&gt; モナドの &lt;code&gt;env&lt;/code&gt; の部分を extensible パッケージを用いて簡単に構築することであり，&lt;code&gt;env&lt;/code&gt; をプラグインとして構築する． プラグインで構築という部分は &lt;a href="https://hackage.haskell.org/package/tonatona"&gt;tonatona&lt;/a&gt; から着想を得た(tonatona も rio のラッパーパッケージなはず)． 例えば，&lt;code&gt;rio&lt;/code&gt; パッケージのロガーを利用して次のような簡易的なプログラムをかける:&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb1-1"&gt;&lt;a href="#cb1-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;module&lt;/span&gt; &lt;span class="dt"&gt;Main&lt;/span&gt; &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-2"&gt;&lt;a href="#cb1-2"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb1-3"&gt;&lt;a href="#cb1-3"&gt;&lt;/a&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;RIO&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-4"&gt;&lt;a href="#cb1-4"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb1-5"&gt;&lt;a href="#cb1-5"&gt;&lt;/a&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;Data.Extensible&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-6"&gt;&lt;a href="#cb1-6"&gt;&lt;/a&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;Mix&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-7"&gt;&lt;a href="#cb1-7"&gt;&lt;/a&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;Mix.Plugin.Logger&lt;/span&gt; &lt;span class="kw"&gt;as&lt;/span&gt; &lt;span class="dt"&gt;MixLogger&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-8"&gt;&lt;a href="#cb1-8"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb1-9"&gt;&lt;a href="#cb1-9"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Env&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Record&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-10"&gt;&lt;a href="#cb1-10"&gt;&lt;/a&gt;  &amp;#39;[ &lt;span class="st"&gt;&amp;quot;logger&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;MixLogger.LogFunc&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-11"&gt;&lt;a href="#cb1-11"&gt;&lt;/a&gt;   , &lt;span class="st"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;   &lt;span class="op"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-12"&gt;&lt;a href="#cb1-12"&gt;&lt;/a&gt;   ]&lt;/span&gt;
&lt;span id="cb1-13"&gt;&lt;a href="#cb1-13"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb1-14"&gt;&lt;a href="#cb1-14"&gt;&lt;/a&gt;&lt;span class="ot"&gt;main ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id="cb1-15"&gt;&lt;a href="#cb1-15"&gt;&lt;/a&gt;main &lt;span class="ot"&gt;=&lt;/span&gt; Mix.run plugin &lt;span class="op"&gt;$&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-16"&gt;&lt;a href="#cb1-16"&gt;&lt;/a&gt;  name &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; asks (view &lt;span class="op"&gt;#&lt;/span&gt;name)&lt;/span&gt;
&lt;span id="cb1-17"&gt;&lt;a href="#cb1-17"&gt;&lt;/a&gt;  MixLogger.logDebug &lt;span class="op"&gt;$&lt;/span&gt; display (&lt;span class="st"&gt;&amp;quot;This is debug: &amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; name)&lt;/span&gt;
&lt;span id="cb1-18"&gt;&lt;a href="#cb1-18"&gt;&lt;/a&gt;  MixLogger.logInfo  &lt;span class="op"&gt;$&lt;/span&gt; display (&lt;span class="st"&gt;&amp;quot;This is info: &amp;quot;&lt;/span&gt;  &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; name)&lt;/span&gt;
&lt;span id="cb1-19"&gt;&lt;a href="#cb1-19"&gt;&lt;/a&gt;  MixLogger.logWarn  &lt;span class="op"&gt;$&lt;/span&gt; display (&lt;span class="st"&gt;&amp;quot;This is warn: &amp;quot;&lt;/span&gt;  &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; name)&lt;/span&gt;
&lt;span id="cb1-20"&gt;&lt;a href="#cb1-20"&gt;&lt;/a&gt;  MixLogger.logError &lt;span class="op"&gt;$&lt;/span&gt; display (&lt;span class="st"&gt;&amp;quot;This is error: &amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; name)&lt;/span&gt;
&lt;span id="cb1-21"&gt;&lt;a href="#cb1-21"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-22"&gt;&lt;a href="#cb1-22"&gt;&lt;/a&gt;&lt;span class="ot"&gt;    plugin ::&lt;/span&gt; &lt;span class="dt"&gt;Plugin&lt;/span&gt; () &lt;span class="dt"&gt;IO&lt;/span&gt; &lt;span class="dt"&gt;Env&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-23"&gt;&lt;a href="#cb1-23"&gt;&lt;/a&gt;    plugin &lt;span class="ot"&gt;=&lt;/span&gt; hsequence&lt;/span&gt;
&lt;span id="cb1-24"&gt;&lt;a href="#cb1-24"&gt;&lt;/a&gt;        &lt;span class="op"&gt;$&lt;/span&gt; &lt;span class="op"&gt;#&lt;/span&gt;logger &lt;span class="op"&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; MixLogger.buildPlugin (&lt;span class="op"&gt;#&lt;/span&gt;handle &lt;span class="op"&gt;@=&lt;/span&gt; stdout &lt;span class="op"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="op"&gt;#&lt;/span&gt;verbose &lt;span class="op"&gt;@=&lt;/span&gt; &lt;span class="dt"&gt;True&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;:&lt;/span&gt; nil)&lt;/span&gt;
&lt;span id="cb1-25"&gt;&lt;a href="#cb1-25"&gt;&lt;/a&gt;       &lt;span class="op"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="op"&gt;#&lt;/span&gt;name   &lt;span class="op"&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;pure&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;Hoge&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-26"&gt;&lt;a href="#cb1-26"&gt;&lt;/a&gt;       &lt;span class="op"&gt;&amp;lt;:&lt;/span&gt; nil&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;tonatona との違いは &lt;code&gt;RIO env a&lt;/code&gt; の &lt;code&gt;env&lt;/code&gt; に当たる部分に対して，特別なインスタンス宣言がいらない点だ． 単純に，設定っぽい extensible の拡張可能レコード(&lt;code&gt;#logger &amp;lt;@=&amp;gt; ...&lt;/code&gt; とか)を記述するだけで良い． これの実行結果は次のようになる:&lt;/p&gt;
&lt;pre class="code"&gt;&lt;code&gt;$ stack runghc mix/sample/Main.hs
2019-05-21 22:33:49.378471: [debug] This is debug: Hoge
@(mix/sample/Main.hs:23:3)
2019-05-21 22:33:49.381893: [info] This is info: Hoge
@(mix/sample/Main.hs:24:3)
2019-05-21 22:33:49.381943: [warn] This is warn: Hoge
@(mix/sample/Main.hs:25:3)
2019-05-21 22:33:49.382005: [error] This is error: Hoge
@(mix/sample/Main.hs:26:3)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;なぜ mix ではインスタンス宣言などせずに自由にプラグインのオンオフや設定のカスタマイズをすることができるのだろうか？ 言わずもがな，&lt;code&gt;extensible&lt;/code&gt; の魔法によるものである．&lt;/p&gt;
&lt;h3 id="extensible-の魔法"&gt;extensible の魔法&lt;/h3&gt;
&lt;p&gt;もっとも鬼門になったのは rio のロガーだ． rio のロガーは次のように利用する必要がある:&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb3-1"&gt;&lt;a href="#cb3-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;newtype&lt;/span&gt; &lt;span class="dt"&gt;Env&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Env&lt;/span&gt; {&lt;span class="ot"&gt; logFunc ::&lt;/span&gt; &lt;span class="dt"&gt;LogFunc&lt;/span&gt; }&lt;/span&gt;
&lt;span id="cb3-2"&gt;&lt;a href="#cb3-2"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-3"&gt;&lt;a href="#cb3-3"&gt;&lt;/a&gt;&lt;span class="ot"&gt;main ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id="cb3-4"&gt;&lt;a href="#cb3-4"&gt;&lt;/a&gt;main &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-5"&gt;&lt;a href="#cb3-5"&gt;&lt;/a&gt;  opt &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; logOptionsHandle stdout &lt;span class="dt"&gt;False&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-6"&gt;&lt;a href="#cb3-6"&gt;&lt;/a&gt;  withLogFunc opt &lt;span class="op"&gt;$&lt;/span&gt; \logFunc &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; runRIO &lt;span class="dt"&gt;Env&lt;/span&gt;{&lt;span class="op"&gt;..&lt;/span&gt;} &lt;span class="op"&gt;$&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-7"&gt;&lt;a href="#cb3-7"&gt;&lt;/a&gt;    logInfo &lt;span class="st"&gt;&amp;quot;hoge&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-8"&gt;&lt;a href="#cb3-8"&gt;&lt;/a&gt;    logDebug &lt;span class="st"&gt;&amp;quot;fuga&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;withLogFunc opt&lt;/code&gt; の型は &lt;code&gt;MonadUnliftIO m =&amp;gt; (LogFunc -&amp;gt; m a) -&amp;gt; m a&lt;/code&gt; となっている． なぜこのような形になっているのかの秘密は(たぶん) &lt;code&gt;MonadUnliftIO&lt;/code&gt; にあるのだが今回は割愛する． この型，よく見ると継続になっているのがわかるだろうか？&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb4-1"&gt;&lt;a href="#cb4-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;withLogFunc ::&lt;/span&gt; &lt;span class="dt"&gt;MonadUnliftIO&lt;/span&gt; m &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;LogOptions&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; (&lt;span class="dt"&gt;LogFunc&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; m a) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; m a&lt;/span&gt;
&lt;span id="cb4-2"&gt;&lt;a href="#cb4-2"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-3"&gt;&lt;a href="#cb4-3"&gt;&lt;/a&gt;&lt;span class="co"&gt;-- 継続(Continuation)のモナドトランスフォーム仕様の型&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-4"&gt;&lt;a href="#cb4-4"&gt;&lt;/a&gt;&lt;span class="kw"&gt;newtype&lt;/span&gt; &lt;span class="dt"&gt;ContT&lt;/span&gt; r m a &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;ContT&lt;/span&gt; {&lt;span class="ot"&gt; runContT ::&lt;/span&gt; ((a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; m r) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; m r) }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;継続は &lt;code&gt;Monad&lt;/code&gt; 型クラスのインスタンスなのでモナディックに扱える． そして，extensible の拡張可能レコードの特徴として &lt;strong&gt;レコードのフィールドをモナディックに走査できる！&lt;/strong&gt; というのがある(正確には &lt;code&gt;Applicative&lt;/code&gt; ですが)． 例えば &lt;a href="http://hackage.haskell.org/package/extensible-0.5/docs/Data-Extensible-Product.html#v:hsequence"&gt;&lt;code&gt;hsequence&lt;/code&gt;&lt;/a&gt; という関数が走査する関数だ:&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb5-1"&gt;&lt;a href="#cb5-1"&gt;&lt;/a&gt;&lt;span class="ot"&gt;hsequence ::&lt;/span&gt; &lt;span class="dt"&gt;Applicative&lt;/span&gt; f &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; (&lt;span class="dt"&gt;Comp&lt;/span&gt; f h &lt;span class="op"&gt;:*&lt;/span&gt; xs) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; f (h &lt;span class="op"&gt;:*&lt;/span&gt; xs)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実は &lt;code&gt;Plugin&lt;/code&gt; という型はただの継続で，&lt;code&gt;Mix.run plugin&lt;/code&gt; は単純に &lt;code&gt;runContT&lt;/code&gt; した中で &lt;code&gt;runRIO env action&lt;/code&gt; しているだけだ:&lt;/p&gt;
&lt;div class="sourceCode" id="cb6"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb6-1"&gt;&lt;a href="#cb6-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Plugin&lt;/span&gt; a m env &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;ContT&lt;/span&gt; a m env&lt;/span&gt;
&lt;span id="cb6-2"&gt;&lt;a href="#cb6-2"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb6-3"&gt;&lt;a href="#cb6-3"&gt;&lt;/a&gt;&lt;span class="ot"&gt;run ::&lt;/span&gt; &lt;span class="dt"&gt;MonadIO&lt;/span&gt; m &lt;span class="ot"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Plugin&lt;/span&gt; a m env &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;RIO&lt;/span&gt; env a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; m a&lt;/span&gt;
&lt;span id="cb6-4"&gt;&lt;a href="#cb6-4"&gt;&lt;/a&gt;run plugin act &lt;span class="ot"&gt;=&lt;/span&gt; (&lt;span class="ot"&gt;`runRIO`&lt;/span&gt; act) &lt;span class="ot"&gt;`withPlugin`&lt;/span&gt; plugin&lt;/span&gt;
&lt;span id="cb6-5"&gt;&lt;a href="#cb6-5"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb6-6"&gt;&lt;a href="#cb6-6"&gt;&lt;/a&gt;&lt;span class="ot"&gt;withPlugin ::&lt;/span&gt; (env &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; m a) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Plugin&lt;/span&gt; a m env &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; m a&lt;/span&gt;
&lt;span id="cb6-7"&gt;&lt;a href="#cb6-7"&gt;&lt;/a&gt;withPlugin &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;flip&lt;/span&gt; runContT&lt;/span&gt;
&lt;span id="cb6-8"&gt;&lt;a href="#cb6-8"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb6-9"&gt;&lt;a href="#cb6-9"&gt;&lt;/a&gt;&lt;span class="ot"&gt;toPlugin ::&lt;/span&gt; ((env &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; m a) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; m a) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Plugin&lt;/span&gt; a m env&lt;/span&gt;
&lt;span id="cb6-10"&gt;&lt;a href="#cb6-10"&gt;&lt;/a&gt;toPlugin &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;ContT&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;思いついてしまえば極めて簡単な仕組みだ(なおパフォーマンスについては特に考えていません)．&lt;/p&gt;
&lt;h2 id="プラグイン"&gt;プラグイン&lt;/h2&gt;
&lt;p&gt;プラグインと言ったもののただの継続だ． 今あるのは:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Logger&lt;/li&gt;
&lt;li&gt;Config&lt;/li&gt;
&lt;li&gt;API Client (GitHub, Drone)&lt;/li&gt;
&lt;li&gt;Shell&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;だけで，ちょうど最近作ってたOSSで必要になった分だけ． そのうちDB系のやつを作ってもいいかもしれない． これらは全て mix と同じリポジトリに置いてある．&lt;/p&gt;
&lt;h3 id="logger-と-config"&gt;Logger と Config&lt;/h3&gt;
&lt;p&gt;この2つは mix ライブラリに入っている． Logger は上記に載せた rio の Logger のラッパー． Config というのは設定ファイルを指しているつもり． &lt;code&gt;&amp;quot;config&amp;quot;&lt;/code&gt; フィールドと任意の型と紐づかせている:&lt;/p&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb7-1"&gt;&lt;a href="#cb7-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="kw"&gt;qualified&lt;/span&gt; &lt;span class="dt"&gt;Mix.Plugin.Logger&lt;/span&gt; &lt;span class="kw"&gt;as&lt;/span&gt; &lt;span class="dt"&gt;MixLogger&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-2"&gt;&lt;a href="#cb7-2"&gt;&lt;/a&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="kw"&gt;qualified&lt;/span&gt; &lt;span class="dt"&gt;Mix.Plugin.Config&lt;/span&gt; &lt;span class="kw"&gt;as&lt;/span&gt; &lt;span class="dt"&gt;MixConfig&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-3"&gt;&lt;a href="#cb7-3"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb7-4"&gt;&lt;a href="#cb7-4"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Env&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Record&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-5"&gt;&lt;a href="#cb7-5"&gt;&lt;/a&gt;  &amp;#39;[ &lt;span class="st"&gt;&amp;quot;logger&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;MixLogger.LogFunc&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-6"&gt;&lt;a href="#cb7-6"&gt;&lt;/a&gt;   , &lt;span class="st"&gt;&amp;quot;config&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Config&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-7"&gt;&lt;a href="#cb7-7"&gt;&lt;/a&gt;   ]&lt;/span&gt;
&lt;span id="cb7-8"&gt;&lt;a href="#cb7-8"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb7-9"&gt;&lt;a href="#cb7-9"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Config&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Record&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-10"&gt;&lt;a href="#cb7-10"&gt;&lt;/a&gt;  &amp;#39;[ &lt;span class="st"&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;Text&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-11"&gt;&lt;a href="#cb7-11"&gt;&lt;/a&gt;   ]&lt;/span&gt;
&lt;span id="cb7-12"&gt;&lt;a href="#cb7-12"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb7-13"&gt;&lt;a href="#cb7-13"&gt;&lt;/a&gt;&lt;span class="ot"&gt;main ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id="cb7-14"&gt;&lt;a href="#cb7-14"&gt;&lt;/a&gt;main &lt;span class="ot"&gt;=&lt;/span&gt; Mix.run plugin &lt;span class="op"&gt;$&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-15"&gt;&lt;a href="#cb7-15"&gt;&lt;/a&gt;  config &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; MixConfig.askConfig&lt;/span&gt;
&lt;span id="cb7-16"&gt;&lt;a href="#cb7-16"&gt;&lt;/a&gt;  MixLogger.logInfo &lt;span class="op"&gt;$&lt;/span&gt; display (&lt;span class="st"&gt;&amp;quot;This is info: &amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; config &lt;span class="op"&gt;^.&lt;/span&gt; &lt;span class="op"&gt;#&lt;/span&gt;name)&lt;/span&gt;
&lt;span id="cb7-17"&gt;&lt;a href="#cb7-17"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-18"&gt;&lt;a href="#cb7-18"&gt;&lt;/a&gt;&lt;span class="ot"&gt;    plugin ::&lt;/span&gt; &lt;span class="dt"&gt;Plugin&lt;/span&gt; () &lt;span class="dt"&gt;IO&lt;/span&gt; &lt;span class="dt"&gt;Env&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-19"&gt;&lt;a href="#cb7-19"&gt;&lt;/a&gt;    plugin &lt;span class="ot"&gt;=&lt;/span&gt; hsequence&lt;/span&gt;
&lt;span id="cb7-20"&gt;&lt;a href="#cb7-20"&gt;&lt;/a&gt;        &lt;span class="op"&gt;$&lt;/span&gt; &lt;span class="op"&gt;#&lt;/span&gt;logger &lt;span class="op"&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; MixLogger.buildPlugin (&lt;span class="op"&gt;#&lt;/span&gt;handle &lt;span class="op"&gt;@=&lt;/span&gt; stdout &lt;span class="op"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="op"&gt;#&lt;/span&gt;verbose &lt;span class="op"&gt;@=&lt;/span&gt; &lt;span class="dt"&gt;True&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;:&lt;/span&gt; nil)&lt;/span&gt;
&lt;span id="cb7-21"&gt;&lt;a href="#cb7-21"&gt;&lt;/a&gt;       &lt;span class="op"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="op"&gt;#&lt;/span&gt;config &lt;span class="op"&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; MixConfig.buildPlugin (&lt;span class="op"&gt;#&lt;/span&gt;name &lt;span class="op"&gt;@=&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;hoge&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;:&lt;/span&gt; nil)&lt;/span&gt;
&lt;span id="cb7-22"&gt;&lt;a href="#cb7-22"&gt;&lt;/a&gt;       &lt;span class="op"&gt;&amp;lt;:&lt;/span&gt; nil&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Config は試しに作ってみたけど，いまいち使い道がない．&lt;/p&gt;
&lt;h3 id="api-client"&gt;API Client&lt;/h3&gt;
&lt;p&gt;API クライアントを利用するのに必要な情報(API トークンなど)を &lt;code&gt;env&lt;/code&gt; に載せて，クライアントを利用するときにほんの少しだけ簡単に利用できるプラグイン． GitHub と &lt;a href="https://drone.io/"&gt;Drone CI&lt;/a&gt; のものを作った． GitHub のクライアントは &lt;a href="https://hackage.haskell.org/package/github"&gt;github&lt;/a&gt; パッケージを Drone のクライアントは(僕が作った) &lt;a href="https://hackage.haskell.org/package/drone"&gt;drone&lt;/a&gt; パッケージを使う． 各プラグインのパッケージは &lt;a href="https://github.com/matsubara0507/mix.hs/tree/master/mix-plugin-github"&gt;mix-plugin-github&lt;/a&gt; と &lt;a href="https://github.com/matsubara0507/mix.hs/tree/master/mix-plugin-drone"&gt;mix-plugin-drone&lt;/a&gt; として matsubara0507/mix.hs リポジトリに置いてある．&lt;/p&gt;
&lt;p&gt;こんな感じに使える:&lt;/p&gt;
&lt;div class="sourceCode" id="cb8"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb8-1"&gt;&lt;a href="#cb8-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="kw"&gt;qualified&lt;/span&gt; &lt;span class="dt"&gt;Drone&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-2"&gt;&lt;a href="#cb8-2"&gt;&lt;/a&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="kw"&gt;qualified&lt;/span&gt; &lt;span class="dt"&gt;GitHub&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-3"&gt;&lt;a href="#cb8-3"&gt;&lt;/a&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="kw"&gt;qualified&lt;/span&gt; &lt;span class="dt"&gt;GitHub.Endpoints.Users&lt;/span&gt; &lt;span class="kw"&gt;as&lt;/span&gt; &lt;span class="dt"&gt;GitHub&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-4"&gt;&lt;a href="#cb8-4"&gt;&lt;/a&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="kw"&gt;qualified&lt;/span&gt; &lt;span class="dt"&gt;Mix.Plugin.Drone&lt;/span&gt;       &lt;span class="kw"&gt;as&lt;/span&gt; &lt;span class="dt"&gt;MixDrone&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-5"&gt;&lt;a href="#cb8-5"&gt;&lt;/a&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="kw"&gt;qualified&lt;/span&gt; &lt;span class="dt"&gt;Mix.Plugin.GitHub&lt;/span&gt;      &lt;span class="kw"&gt;as&lt;/span&gt; &lt;span class="dt"&gt;MixGitHub&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-6"&gt;&lt;a href="#cb8-6"&gt;&lt;/a&gt;&lt;span class="kw"&gt;import&lt;/span&gt;           &lt;span class="dt"&gt;System.Environment&lt;/span&gt;     (getEnv)&lt;/span&gt;
&lt;span id="cb8-7"&gt;&lt;a href="#cb8-7"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb8-8"&gt;&lt;a href="#cb8-8"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Env&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Record&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-9"&gt;&lt;a href="#cb8-9"&gt;&lt;/a&gt;  &amp;#39;[ &lt;span class="st"&gt;&amp;quot;logger&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;MixLogger.LogFunc&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-10"&gt;&lt;a href="#cb8-10"&gt;&lt;/a&gt;   , &lt;span class="st"&gt;&amp;quot;github&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;MixGitHub.Token&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-11"&gt;&lt;a href="#cb8-11"&gt;&lt;/a&gt;   , &lt;span class="st"&gt;&amp;quot;drone&amp;quot;&lt;/span&gt;  &lt;span class="op"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;MixDrone.Config&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-12"&gt;&lt;a href="#cb8-12"&gt;&lt;/a&gt;   ]&lt;/span&gt;
&lt;span id="cb8-13"&gt;&lt;a href="#cb8-13"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb8-14"&gt;&lt;a href="#cb8-14"&gt;&lt;/a&gt;&lt;span class="ot"&gt;main ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id="cb8-15"&gt;&lt;a href="#cb8-15"&gt;&lt;/a&gt;main &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-16"&gt;&lt;a href="#cb8-16"&gt;&lt;/a&gt;  gToken &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; liftIO &lt;span class="op"&gt;$&lt;/span&gt; fromString &lt;span class="op"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; getEnv &lt;span class="st"&gt;&amp;quot;GH_TOKEN&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-17"&gt;&lt;a href="#cb8-17"&gt;&lt;/a&gt;  dHost  &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; liftIO &lt;span class="op"&gt;$&lt;/span&gt; fromString &lt;span class="op"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; getEnv &lt;span class="st"&gt;&amp;quot;DRONE_HOST&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-18"&gt;&lt;a href="#cb8-18"&gt;&lt;/a&gt;  dToken &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; liftIO &lt;span class="op"&gt;$&lt;/span&gt; fromString &lt;span class="op"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; getEnv &lt;span class="st"&gt;&amp;quot;DRONE_TOKEN&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-19"&gt;&lt;a href="#cb8-19"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;let&lt;/span&gt; logConf &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="op"&gt;#&lt;/span&gt;handle &lt;span class="op"&gt;@=&lt;/span&gt; stdout &lt;span class="op"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="op"&gt;#&lt;/span&gt;verbose &lt;span class="op"&gt;@=&lt;/span&gt; &lt;span class="dt"&gt;False&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;:&lt;/span&gt; nil&lt;/span&gt;
&lt;span id="cb8-20"&gt;&lt;a href="#cb8-20"&gt;&lt;/a&gt;      dClient &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="op"&gt;#&lt;/span&gt;host &lt;span class="op"&gt;@=&lt;/span&gt; dHost &lt;span class="op"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="op"&gt;#&lt;/span&gt;port &lt;span class="op"&gt;@=&lt;/span&gt; &lt;span class="dt"&gt;Nothing&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="op"&gt;#&lt;/span&gt;token &lt;span class="op"&gt;@=&lt;/span&gt; dToken &lt;span class="op"&gt;&amp;lt;:&lt;/span&gt; nil&lt;/span&gt;
&lt;span id="cb8-21"&gt;&lt;a href="#cb8-21"&gt;&lt;/a&gt;      plugin &lt;span class="ot"&gt;=&lt;/span&gt; hsequence&lt;/span&gt;
&lt;span id="cb8-22"&gt;&lt;a href="#cb8-22"&gt;&lt;/a&gt;            &lt;span class="op"&gt;$&lt;/span&gt; &lt;span class="op"&gt;#&lt;/span&gt;logger &lt;span class="op"&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; MixLogger.buildPlugin logConf&lt;/span&gt;
&lt;span id="cb8-23"&gt;&lt;a href="#cb8-23"&gt;&lt;/a&gt;           &lt;span class="op"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="op"&gt;#&lt;/span&gt;github &lt;span class="op"&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; MixGitHub.buildPlugin gToken&lt;/span&gt;
&lt;span id="cb8-24"&gt;&lt;a href="#cb8-24"&gt;&lt;/a&gt;           &lt;span class="op"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="op"&gt;#&lt;/span&gt;drone  &lt;span class="op"&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; MixDrone.buildPlugin dClient &lt;span class="dt"&gt;True&lt;/span&gt;  &lt;/span&gt;
&lt;span id="cb8-25"&gt;&lt;a href="#cb8-25"&gt;&lt;/a&gt;           &lt;span class="op"&gt;&amp;lt;:&lt;/span&gt; nil&lt;/span&gt;
&lt;span id="cb8-26"&gt;&lt;a href="#cb8-26"&gt;&lt;/a&gt;  Mix.run plugin app&lt;/span&gt;
&lt;span id="cb8-27"&gt;&lt;a href="#cb8-27"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb8-28"&gt;&lt;a href="#cb8-28"&gt;&lt;/a&gt;&lt;span class="ot"&gt;app ::&lt;/span&gt; &lt;span class="dt"&gt;RIO&lt;/span&gt; &lt;span class="dt"&gt;Env&lt;/span&gt; ()&lt;/span&gt;
&lt;span id="cb8-29"&gt;&lt;a href="#cb8-29"&gt;&lt;/a&gt;app &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-30"&gt;&lt;a href="#cb8-30"&gt;&lt;/a&gt;  MixLogger.logInfo &lt;span class="st"&gt;&amp;quot;fetch GitHub user info:&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-31"&gt;&lt;a href="#cb8-31"&gt;&lt;/a&gt;  resp &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; MixGitHub.fetch GitHub.userInfoCurrent&amp;#39;&lt;/span&gt;
&lt;span id="cb8-32"&gt;&lt;a href="#cb8-32"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;case&lt;/span&gt; resp &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-33"&gt;&lt;a href="#cb8-33"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Left&lt;/span&gt; err   &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; logError &lt;span class="st"&gt;&amp;quot;GitHub fetch error....&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-34"&gt;&lt;a href="#cb8-34"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Right&lt;/span&gt; user &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; logInfo &lt;span class="op"&gt;$&lt;/span&gt; display (&lt;span class="st"&gt;&amp;quot;Hi &amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; ghLogin user &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;!!&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb8-35"&gt;&lt;a href="#cb8-35"&gt;&lt;/a&gt;  MixLogger.logInfo &lt;span class="st"&gt;&amp;quot;fetch Drone user info:&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-36"&gt;&lt;a href="#cb8-36"&gt;&lt;/a&gt;  tryAny (responseBody &lt;span class="op"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; MixDrone.fetch Drone.getSelf) &lt;span class="op"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; \&lt;span class="kw"&gt;case&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-37"&gt;&lt;a href="#cb8-37"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Left&lt;/span&gt; err   &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; logError &lt;span class="st"&gt;&amp;quot;Drone CI fetch error...&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-38"&gt;&lt;a href="#cb8-38"&gt;&lt;/a&gt;    &lt;span class="dt"&gt;Right&lt;/span&gt; user &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; logInfo &lt;span class="op"&gt;$&lt;/span&gt; display (&lt;span class="st"&gt;&amp;quot;Hi &amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; user &lt;span class="op"&gt;^.&lt;/span&gt; &lt;span class="op"&gt;#&lt;/span&gt;login &lt;span class="op"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;!!&amp;quot;&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb8-39"&gt;&lt;a href="#cb8-39"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb8-40"&gt;&lt;a href="#cb8-40"&gt;&lt;/a&gt;    ghLogin &lt;span class="ot"&gt;=&lt;/span&gt; GitHub.untagName &lt;span class="op"&gt;.&lt;/span&gt; GitHub.userLogin&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これを実行するとこんな感じ:&lt;/p&gt;
&lt;pre class="code"&gt;&lt;code&gt;$ GH_TOKEN=xxx DRONE_HOST=cloud.drone.io DRONE_TOKEN=yyy stack runghc -- Main.hs
fetch GitHub user info:
Hi matsubara0507!!
fetch Drone user info:
Hi matsubara0507!!&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;本来は &lt;code&gt;env&lt;/code&gt; を &lt;code&gt;Reader&lt;/code&gt; モナドから取ってきて使うのを省いているだけなので，まぁ対して変わらない． 試しに実験的に作ってみただけ． インターフェースを揃えるとか，もう少し手を加えてもいいかもしれない．&lt;/p&gt;
&lt;h3 id="shell-コマンド"&gt;Shell コマンド&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://hackage.haskell.org/package/shelly"&gt;shelly&lt;/a&gt; というパッケージを利用したシェルコマンドの実行を支援する． &lt;code&gt;env&lt;/code&gt; にはシェルコマンドを実行したいパスを保存し，与えたシェルコマンドを &lt;code&gt;cd&lt;/code&gt; した上で実行してくれる:&lt;/p&gt;
&lt;div class="sourceCode" id="cb10"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;span id="cb10-1"&gt;&lt;a href="#cb10-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="kw"&gt;qualified&lt;/span&gt; &lt;span class="dt"&gt;Mix.Plugin.Shell&lt;/span&gt;  &lt;span class="kw"&gt;as&lt;/span&gt; &lt;span class="dt"&gt;MixShell&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-2"&gt;&lt;a href="#cb10-2"&gt;&lt;/a&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="kw"&gt;qualified&lt;/span&gt; &lt;span class="dt"&gt;Shelly&lt;/span&gt;            &lt;span class="kw"&gt;as&lt;/span&gt; &lt;span class="dt"&gt;Shell&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-3"&gt;&lt;a href="#cb10-3"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb10-4"&gt;&lt;a href="#cb10-4"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Env&lt;/span&gt; &lt;span class="ot"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Record&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-5"&gt;&lt;a href="#cb10-5"&gt;&lt;/a&gt;  &amp;#39;[ &lt;span class="st"&gt;&amp;quot;logger&amp;quot;&lt;/span&gt; &lt;span class="op"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;MixLogger.LogFunc&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-6"&gt;&lt;a href="#cb10-6"&gt;&lt;/a&gt;   , &lt;span class="st"&gt;&amp;quot;work&amp;quot;&lt;/span&gt;   &lt;span class="op"&gt;&amp;gt;:&lt;/span&gt; &lt;span class="dt"&gt;FilePath&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-7"&gt;&lt;a href="#cb10-7"&gt;&lt;/a&gt;   ]&lt;/span&gt;
&lt;span id="cb10-8"&gt;&lt;a href="#cb10-8"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb10-9"&gt;&lt;a href="#cb10-9"&gt;&lt;/a&gt;&lt;span class="ot"&gt;main ::&lt;/span&gt; &lt;span class="dt"&gt;IO&lt;/span&gt; ()&lt;/span&gt;
&lt;span id="cb10-10"&gt;&lt;a href="#cb10-10"&gt;&lt;/a&gt;main &lt;span class="ot"&gt;=&lt;/span&gt; Mix.run plugin &lt;span class="op"&gt;$&lt;/span&gt; &lt;span class="kw"&gt;do&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-11"&gt;&lt;a href="#cb10-11"&gt;&lt;/a&gt;  paths &lt;span class="ot"&gt;&amp;lt;-&lt;/span&gt; MixShell.exec &lt;span class="op"&gt;$&lt;/span&gt; Shell.ls &lt;span class="st"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-12"&gt;&lt;a href="#cb10-12"&gt;&lt;/a&gt;  forM_ paths &lt;span class="op"&gt;$&lt;/span&gt; \path &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; MixLogger.logInfo (display &lt;span class="op"&gt;$&lt;/span&gt; Shell.toTextIgnore path)&lt;/span&gt;
&lt;span id="cb10-13"&gt;&lt;a href="#cb10-13"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;where&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-14"&gt;&lt;a href="#cb10-14"&gt;&lt;/a&gt;&lt;span class="ot"&gt;    plugin ::&lt;/span&gt; &lt;span class="dt"&gt;Plugin&lt;/span&gt; () &lt;span class="dt"&gt;IO&lt;/span&gt; &lt;span class="dt"&gt;Env&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-15"&gt;&lt;a href="#cb10-15"&gt;&lt;/a&gt;    plugin &lt;span class="ot"&gt;=&lt;/span&gt; hsequence&lt;/span&gt;
&lt;span id="cb10-16"&gt;&lt;a href="#cb10-16"&gt;&lt;/a&gt;        &lt;span class="op"&gt;$&lt;/span&gt; &lt;span class="op"&gt;#&lt;/span&gt;logger &lt;span class="op"&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; MixLogger.buildPlugin (&lt;span class="op"&gt;#&lt;/span&gt;handle &lt;span class="op"&gt;@=&lt;/span&gt; stdout &lt;span class="op"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="op"&gt;#&lt;/span&gt;verbose &lt;span class="op"&gt;@=&lt;/span&gt; &lt;span class="dt"&gt;False&lt;/span&gt; &lt;span class="op"&gt;&amp;lt;:&lt;/span&gt; nil)&lt;/span&gt;
&lt;span id="cb10-17"&gt;&lt;a href="#cb10-17"&gt;&lt;/a&gt;       &lt;span class="op"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="op"&gt;#&lt;/span&gt;work   &lt;span class="op"&gt;&amp;lt;@=&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;pure&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-18"&gt;&lt;a href="#cb10-18"&gt;&lt;/a&gt;       &lt;span class="op"&gt;&amp;lt;:&lt;/span&gt; nil&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="おしまい"&gt;おしまい&lt;/h2&gt;
&lt;p&gt;過去のツールをこれで mix で置き換えていきたい2019です． ちなみにパッケージの名前は現在(2019/5)所属してる社名から(せっかく入社したならって気分)．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-05-26-create-drone-slack-notify-log.html</id><title type="text">Drone Plugin を作ってみた: slack-notify-log</title><updated>2019-05-26T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-05-26-create-drone-slack-notify-log.html"/><summary type="html">&lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;とある事情で Drone CI のビルドログを Slack にスニペットとして通知したくなった． 公式の &lt;a href="https://github.com/drone-plugins/drone-slack"&gt;&lt;code&gt;plugin/slack&lt;/code&gt;&lt;/a&gt; では出来なそうだったので，Plugin を自作した，というお話．&lt;/p&gt;
&lt;h2 id="作ったもの"&gt;作ったもの&lt;/h2&gt;
&lt;iframe width="426" height="162" scrolling="no" frameborder="0" src="https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/drone-slack-notify-log"&gt;
&lt;/iframe&gt;
&lt;p&gt;色々調べてみたものの，同じビルド中の別のステップでのログを取得する方法がわからなかった… ので，最終手段として Drone API を使って引っ張ってくる方法をとった． ほぼほぼドキュメントは無いが，Drone API は &lt;a href="https://github.com/drone/drone-go"&gt;drone/drone-go&lt;/a&gt; を使うことで簡単に呼び出すことができる． ざっくりと次のような感じで呼び出している:&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode go"&gt;&lt;code class="sourceCode go"&gt;&lt;span id="cb1-1"&gt;&lt;a href="#cb1-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;import&lt;/span&gt; (&lt;/span&gt;
&lt;span id="cb1-2"&gt;&lt;a href="#cb1-2"&gt;&lt;/a&gt;	&lt;span class="st"&gt;&amp;quot;context&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-3"&gt;&lt;a href="#cb1-3"&gt;&lt;/a&gt;	&lt;span class="st"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-4"&gt;&lt;a href="#cb1-4"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb1-5"&gt;&lt;a href="#cb1-5"&gt;&lt;/a&gt;	&lt;span class="st"&gt;&amp;quot;github.com/drone/drone-go/drone&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-6"&gt;&lt;a href="#cb1-6"&gt;&lt;/a&gt;	&lt;span class="st"&gt;&amp;quot;github.com/pkg/errors&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-7"&gt;&lt;a href="#cb1-7"&gt;&lt;/a&gt;	log &lt;span class="st"&gt;&amp;quot;github.com/sirupsen/logrus&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-8"&gt;&lt;a href="#cb1-8"&gt;&lt;/a&gt;	&lt;span class="st"&gt;&amp;quot;golang.org/x/oauth2&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-9"&gt;&lt;a href="#cb1-9"&gt;&lt;/a&gt;)&lt;/span&gt;
&lt;span id="cb1-10"&gt;&lt;a href="#cb1-10"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb1-11"&gt;&lt;a href="#cb1-11"&gt;&lt;/a&gt;&lt;span class="kw"&gt;func&lt;/span&gt; (p Plugin) Exec() &lt;span class="dt"&gt;error&lt;/span&gt; {&lt;/span&gt;
&lt;span id="cb1-12"&gt;&lt;a href="#cb1-12"&gt;&lt;/a&gt;  config := &lt;span class="bu"&gt;new&lt;/span&gt;(oauth2.Config)&lt;/span&gt;
&lt;span id="cb1-13"&gt;&lt;a href="#cb1-13"&gt;&lt;/a&gt;  client := drone.NewClient(&lt;/span&gt;
&lt;span id="cb1-14"&gt;&lt;a href="#cb1-14"&gt;&lt;/a&gt;    p.Config.DroneHost,&lt;/span&gt;
&lt;span id="cb1-15"&gt;&lt;a href="#cb1-15"&gt;&lt;/a&gt;    config.Client(&lt;/span&gt;
&lt;span id="cb1-16"&gt;&lt;a href="#cb1-16"&gt;&lt;/a&gt;      context.Background(),&lt;/span&gt;
&lt;span id="cb1-17"&gt;&lt;a href="#cb1-17"&gt;&lt;/a&gt;      &amp;amp;oauth2.Token{&lt;/span&gt;
&lt;span id="cb1-18"&gt;&lt;a href="#cb1-18"&gt;&lt;/a&gt;        AccessToken: p.Config.DroneToken,&lt;/span&gt;
&lt;span id="cb1-19"&gt;&lt;a href="#cb1-19"&gt;&lt;/a&gt;      },&lt;/span&gt;
&lt;span id="cb1-20"&gt;&lt;a href="#cb1-20"&gt;&lt;/a&gt;    ),&lt;/span&gt;
&lt;span id="cb1-21"&gt;&lt;a href="#cb1-21"&gt;&lt;/a&gt;  )&lt;/span&gt;
&lt;span id="cb1-22"&gt;&lt;a href="#cb1-22"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb1-23"&gt;&lt;a href="#cb1-23"&gt;&lt;/a&gt;  logs, err := client.Logs(p.Repo.Owner, p.Repo.Name, p.Build.Number, p.Build.Stage, p.Config.StepNum)&lt;/span&gt;
&lt;span id="cb1-24"&gt;&lt;a href="#cb1-24"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;if&lt;/span&gt; err != &lt;span class="ot"&gt;nil&lt;/span&gt; {&lt;/span&gt;
&lt;span id="cb1-25"&gt;&lt;a href="#cb1-25"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;return&lt;/span&gt; errors.Wrapf(err, &lt;span class="st"&gt;&amp;quot;can&amp;#39;t fetch drone logs: builds/%d/logs/%d/%d&amp;quot;&lt;/span&gt;, p.Build.Number, p.Build.Stage, p.Config.StepNum)&lt;/span&gt;
&lt;span id="cb1-26"&gt;&lt;a href="#cb1-26"&gt;&lt;/a&gt;  }&lt;/span&gt;
&lt;span id="cb1-27"&gt;&lt;a href="#cb1-27"&gt;&lt;/a&gt;  log.Infof(&lt;span class="st"&gt;&amp;quot;Success: fetch drone logs (lines num is %d)&amp;quot;&lt;/span&gt;, &lt;span class="bu"&gt;len&lt;/span&gt;(logs))&lt;/span&gt;
&lt;span id="cb1-28"&gt;&lt;a href="#cb1-28"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb1-29"&gt;&lt;a href="#cb1-29"&gt;&lt;/a&gt;  ...&lt;/span&gt;
&lt;span id="cb1-30"&gt;&lt;a href="#cb1-30"&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;で，実際の Plugin の使い方はこんな感じ:&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;span id="cb2-1"&gt;&lt;a href="#cb2-1"&gt;&lt;/a&gt;&lt;span class="fu"&gt;steps&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-2"&gt;&lt;a href="#cb2-2"&gt;&lt;/a&gt;&lt;span class="at"&gt;  ...&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-3"&gt;&lt;a href="#cb2-3"&gt;&lt;/a&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="fu"&gt;name&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; notify drone log to slack&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-4"&gt;&lt;a href="#cb2-4"&gt;&lt;/a&gt;&lt;span class="at"&gt;  &lt;/span&gt;&lt;span class="fu"&gt;image&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; matsubara0507/slack-notify-log&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-5"&gt;&lt;a href="#cb2-5"&gt;&lt;/a&gt;&lt;span class="at"&gt;  &lt;/span&gt;&lt;span class="fu"&gt;settings&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-6"&gt;&lt;a href="#cb2-6"&gt;&lt;/a&gt;&lt;span class="fu"&gt;    template&lt;/span&gt;&lt;span class="kw"&gt;: &lt;/span&gt;&lt;span class="ch"&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-7"&gt;&lt;a href="#cb2-7"&gt;&lt;/a&gt;      {{#success build.status}}&lt;/span&gt;
&lt;span id="cb2-8"&gt;&lt;a href="#cb2-8"&gt;&lt;/a&gt;        {{repo.name}} is Success!&lt;/span&gt;
&lt;span id="cb2-9"&gt;&lt;a href="#cb2-9"&gt;&lt;/a&gt;      {{else}}&lt;/span&gt;
&lt;span id="cb2-10"&gt;&lt;a href="#cb2-10"&gt;&lt;/a&gt;        {{repo.name}} is Failure...&lt;/span&gt;
&lt;span id="cb2-11"&gt;&lt;a href="#cb2-11"&gt;&lt;/a&gt;      {{/success}}&lt;/span&gt;
&lt;span id="cb2-12"&gt;&lt;a href="#cb2-12"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;token&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-13"&gt;&lt;a href="#cb2-13"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;from_secret&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; slack_token&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-14"&gt;&lt;a href="#cb2-14"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;channel&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; bot-test&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-15"&gt;&lt;a href="#cb2-15"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;step_number&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="dv"&gt;2&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-16"&gt;&lt;a href="#cb2-16"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;drone_host&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-17"&gt;&lt;a href="#cb2-17"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;from_secret&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; drone_host&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-18"&gt;&lt;a href="#cb2-18"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;drone_token&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-19"&gt;&lt;a href="#cb2-19"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;from_secret&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; drone_token&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-20"&gt;&lt;a href="#cb2-20"&gt;&lt;/a&gt;&lt;span class="at"&gt;  &lt;/span&gt;&lt;span class="fu"&gt;when&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-21"&gt;&lt;a href="#cb2-21"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;status&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-22"&gt;&lt;a href="#cb2-22"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; success&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-23"&gt;&lt;a href="#cb2-23"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; failure&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;各 &lt;code&gt;settings&lt;/code&gt; は:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;template&lt;/code&gt; : スニペットのコメント&lt;/li&gt;
&lt;li&gt;&lt;code&gt;token&lt;/code&gt; : slack にポストするための API トークン
&lt;ul&gt;
&lt;li&gt;個人トークンや &lt;a href="https://slack.com/apps/A0F7YS25R-bots"&gt;Bots App&lt;/a&gt; などから生成する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;channel&lt;/code&gt; : 通知先チャンネル
&lt;ul&gt;
&lt;li&gt;無駄にテンプレートを利用できるようにした(ブランチやビルド結果によって通知先を変えるため)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;step_number&lt;/code&gt; : 何ステップ目のログを通知したいか
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;step_number: 1&lt;/code&gt; は git clone になる点に注意&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;drone_host&lt;/code&gt; : この CI を実行したい Drone のホスト
&lt;ul&gt;
&lt;li&gt;別にシークレットにする必要はないけど&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https://cloud.drone.io&lt;/code&gt; とか&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;drone_token&lt;/code&gt; : この CI を実行したい Drone の API トークン&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;実行結果はこんな感じ:&lt;/p&gt;
&lt;p&gt;&lt;img src="/assets/create-drone-slack-notify-log/example.jpg"&gt;&lt;/img&gt;&lt;/p&gt;
&lt;p&gt;これは matsubara0507/drone-slack-notify-log のビルドステップ．&lt;/p&gt;
&lt;h2 id="おしまい"&gt;おしまい&lt;/h2&gt;
&lt;p&gt;なんか他に良い方法が絶対にある気がするんだけどな…&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-05-16-minruby-with-patternmatch.html</id><title type="text">Ruby のパターンマッチング機能を MinRuby で試す</title><updated>2019-05-16T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-05-16-minruby-with-patternmatch.html"/><summary type="html">&lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;Ruby 2.7 で導入予定で，すでに &lt;a href="https://github.com/ruby/ruby"&gt;Ruby リポジトリ&lt;/a&gt;の trunk (いわゆる master ブランチのこと) にマージ済みの「パターンマッチング」機能を試してみたので，そのメモ書きです． 特に包括的に検証したわけではないので注意してください．&lt;/p&gt;
&lt;h2 id="パターンマッチング"&gt;パターンマッチング&lt;/h2&gt;
&lt;p&gt;(わざわざ解説することでもないけど)&lt;/p&gt;
&lt;p&gt;パターンマッチングは &lt;code&gt;if&lt;/code&gt; 文や &lt;code&gt;case&lt;/code&gt; 文のようなプログラムの分岐に使うプログラミング機能． &lt;code&gt;if&lt;/code&gt; 文が真偽値を返す条件式 (e.g. &lt;code&gt;a &amp;gt; 0 &amp;amp;&amp;amp; x == &amp;#39;hoge&amp;#39;&lt;/code&gt;) の結果により分岐し，&lt;code&gt;case&lt;/code&gt; 文が指定した変数の値によって分岐するのに対し，パターンマッチングは指定した変数のデータ構造によって分岐する．&lt;/p&gt;
&lt;p&gt;例えば Ruby に導入されたパターンマッチングだと次のようになる:&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode ruby"&gt;&lt;code class="sourceCode ruby"&gt;&lt;span id="cb1-1"&gt;&lt;a href="#cb1-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;case&lt;/span&gt; var &lt;span class="co"&gt;# var のデータ構造により分岐&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-2"&gt;&lt;a href="#cb1-2"&gt;&lt;/a&gt;&lt;span class="kw"&gt;in&lt;/span&gt; []&lt;/span&gt;
&lt;span id="cb1-3"&gt;&lt;a href="#cb1-3"&gt;&lt;/a&gt;  puts &lt;span class="st"&gt;&amp;quot;var is empty list&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-4"&gt;&lt;a href="#cb1-4"&gt;&lt;/a&gt;&lt;span class="kw"&gt;in&lt;/span&gt; [a]&lt;/span&gt;
&lt;span id="cb1-5"&gt;&lt;a href="#cb1-5"&gt;&lt;/a&gt;  puts &lt;span class="st"&gt;&amp;quot;var is singleton: &lt;/span&gt;&lt;span class="ot"&gt;#{&lt;/span&gt;a&lt;span class="ot"&gt;}&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;&lt;/span&gt; &lt;span class="co"&gt;# 変数 a に値を代入する&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-6"&gt;&lt;a href="#cb1-6"&gt;&lt;/a&gt;&lt;span class="kw"&gt;in&lt;/span&gt; [&lt;span class="st"&gt;:hoge&lt;/span&gt;, a, b]&lt;/span&gt;
&lt;span id="cb1-7"&gt;&lt;a href="#cb1-7"&gt;&lt;/a&gt;  puts &lt;span class="st"&gt;&amp;quot;var is hoge list: &lt;/span&gt;&lt;span class="ot"&gt;#{&lt;/span&gt;[a, b]&lt;span class="ot"&gt;}&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;&lt;/span&gt; &lt;span class="co"&gt;# 一要素目が :hoge の3要素リスト&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-8"&gt;&lt;a href="#cb1-8"&gt;&lt;/a&gt;&lt;span class="kw"&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-9"&gt;&lt;a href="#cb1-9"&gt;&lt;/a&gt;  puts &lt;span class="st"&gt;&amp;quot;No match: &lt;/span&gt;&lt;span class="ot"&gt;#{&lt;/span&gt;var&lt;span class="ot"&gt;}&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;&lt;/span&gt; &lt;span class="co"&gt;# else はどれにもマッチしないとき&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-10"&gt;&lt;a href="#cb1-10"&gt;&lt;/a&gt;&lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このようにデータ構造(例えば配列の要素数など)によって分岐かつ変数への代入が可能になる． パターンマッチングは様々なデータを扱うようなプログラミングを行う時に極めて簡潔にかつ直感的にプログラムを記述することができる．&lt;/p&gt;
&lt;p&gt;ちなみに，パターンマッチングがあれば基本的に &lt;code&gt;if&lt;/code&gt; 文も &lt;code&gt;case&lt;/code&gt; 文も要らない． どちらもパターンマッチングの糖衣構文として表現でき，現に Haskell ではそうなっている(たぶん)．&lt;/p&gt;
&lt;h3 id="ruby-のパターンマッチング"&gt;Ruby のパターンマッチング&lt;/h3&gt;
&lt;p&gt;ちょこちょこ既に記事があるが，RubyKaigi 2019 でも作者からの発表があり参考になる:&lt;/p&gt;
&lt;iframe class="embedly-embed" src="//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fspeakerdeck.com%2Fplayer%2Fa853a73bba9d48ae88860f7c9b068334&amp;amp;url=https%3A%2F%2Fspeakerdeck.com%2Fk_tsj%2Fpattern-matching-new-feature-in-ruby-2-dot-7&amp;amp;image=https%3A%2F%2Fspeakerd.s3.amazonaws.com%2Fpresentations%2Fa853a73bba9d48ae88860f7c9b068334%2Fslide_0.jpg%3F510667&amp;amp;key=internal&amp;amp;type=text%2Fhtml&amp;amp;schema=speakerdeck" width="500" height="299" scrolling="no" frameborder="0" allow="autoplay; fullscreen" allowfullscreen="true"&gt;
&lt;/iframe&gt;
&lt;p&gt;すでに &lt;a href="https://www.youtube.com/watch?v=paBlgsqoKk8"&gt;YouTube で動画も公開された&lt;/a&gt;． ちなみに，2012 ぐらいからずっと作っていたらしい．&lt;/p&gt;
&lt;p&gt;Elixir のピンパターン(&lt;code&gt;^var&lt;/code&gt;)など，数多くのパターンマッチング機能がある(後発の利点ですね)． ただし，変数のスコープが個人的には思ってたのと違った:&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode ruby"&gt;&lt;code class="sourceCode ruby"&gt;&lt;span id="cb2-1"&gt;&lt;a href="#cb2-1"&gt;&lt;/a&gt;irb(main):&lt;span class="dv"&gt;001&lt;/span&gt;:&lt;span class="dv"&gt;0&lt;/span&gt;&amp;gt; &lt;span class="kw"&gt;case&lt;/span&gt; [&lt;span class="dv"&gt;1&lt;/span&gt;, &lt;span class="dv"&gt;2&lt;/span&gt;]&lt;/span&gt;
&lt;span id="cb2-2"&gt;&lt;a href="#cb2-2"&gt;&lt;/a&gt;irb(main):&lt;span class="dv"&gt;002&lt;/span&gt;:&lt;span class="dv"&gt;1&lt;/span&gt;&amp;gt; &lt;span class="kw"&gt;in&lt;/span&gt; [a, &lt;span class="dv"&gt;3&lt;/span&gt;] &lt;span class="kw"&gt;then&lt;/span&gt; p a&lt;/span&gt;
&lt;span id="cb2-3"&gt;&lt;a href="#cb2-3"&gt;&lt;/a&gt;irb(main):&lt;span class="dv"&gt;003&lt;/span&gt;:&lt;span class="dv"&gt;1&lt;/span&gt;&amp;gt; &lt;span class="kw"&gt;in&lt;/span&gt; [b, c] &lt;span class="kw"&gt;then&lt;/span&gt; p c&lt;/span&gt;
&lt;span id="cb2-4"&gt;&lt;a href="#cb2-4"&gt;&lt;/a&gt;irb(main):&lt;span class="dv"&gt;004&lt;/span&gt;:&lt;span class="dv"&gt;1&lt;/span&gt;&amp;gt; &lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-5"&gt;&lt;a href="#cb2-5"&gt;&lt;/a&gt;&lt;span class="dv"&gt;2&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-6"&gt;&lt;a href="#cb2-6"&gt;&lt;/a&gt;=&amp;gt; &lt;span class="dv"&gt;2&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-7"&gt;&lt;a href="#cb2-7"&gt;&lt;/a&gt;irb(main):&lt;span class="dv"&gt;005&lt;/span&gt;:&lt;span class="dv"&gt;0&lt;/span&gt;&amp;gt; [a,b,c]&lt;/span&gt;
&lt;span id="cb2-8"&gt;&lt;a href="#cb2-8"&gt;&lt;/a&gt;=&amp;gt; [&lt;span class="dv"&gt;1&lt;/span&gt;, &lt;span class="dv"&gt;1&lt;/span&gt;, &lt;span class="dv"&gt;2&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;in ..&lt;/code&gt; ごとにスコープは閉じてるのが一般的な気がするけど Ruby でそれは難しいのだろうか(&lt;code&gt;if&lt;/code&gt; 文や &lt;code&gt;case&lt;/code&gt; 文でもこんな感じの挙動)．&lt;/p&gt;
&lt;h2 id="試す"&gt;試す&lt;/h2&gt;
&lt;h3 id="ruby2.7-dev"&gt;Ruby2.7-dev&lt;/h3&gt;
&lt;p&gt;前述した通り，パターンマッチングは trunk にマージされているので Ruby2.7-dev で試すことができる． trunk を試す方法はいくつかあると思うが，僕は手っ取り早く &lt;a href="https://github.com/rbenv/rbenv"&gt;rbenv&lt;/a&gt; を使った．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ rbenv install 2.7.0-dev&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="minruby"&gt;MinRuby&lt;/h3&gt;
&lt;p&gt;パターンマッチングを試す対象として，「&lt;a href="https://ascii.jp/elem/000/001/230/1230449/"&gt;Ruby で学ぶ Ruby&lt;/a&gt;」という連載で作っている，かなり簡易的な Ruby のサブセット処理系 MinRuby を利用する．&lt;/p&gt;
&lt;p&gt;最終的な処理系は &lt;a href="https://github.com/matsubara0507/MinRuby.rb/blob/dbe9891f916877fc3c260135696f48344bceb98a/interp.rb"&gt;Ruby コード一枚&lt;/a&gt;でできている(一番めんどくさい構文解析を &lt;a href="https://github.com/ruby/ruby/tree/970a25b10415bc3735e6e3c165e167e6abc3d7f4/ext/ripper"&gt;ripper&lt;/a&gt; とそのラッパー &lt;a href="https://github.com/mame/minruby"&gt;minruby&lt;/a&gt; というのに任せているので):&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode ruby"&gt;&lt;code class="sourceCode ruby"&gt;&lt;span id="cb4-1"&gt;&lt;a href="#cb4-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;# interp.rb&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-2"&gt;&lt;a href="#cb4-2"&gt;&lt;/a&gt;require &lt;span class="st"&gt;&amp;quot;minruby&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-3"&gt;&lt;a href="#cb4-3"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-4"&gt;&lt;a href="#cb4-4"&gt;&lt;/a&gt;&lt;span class="kw"&gt;def&lt;/span&gt; evaluate(tree, genv, lenv)&lt;/span&gt;
&lt;span id="cb4-5"&gt;&lt;a href="#cb4-5"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;case&lt;/span&gt; tree[&lt;span class="dv"&gt;0&lt;/span&gt;]&lt;/span&gt;
&lt;span id="cb4-6"&gt;&lt;a href="#cb4-6"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;when&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;lit&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-7"&gt;&lt;a href="#cb4-7"&gt;&lt;/a&gt;    tree[&lt;span class="dv"&gt;1&lt;/span&gt;]&lt;/span&gt;
&lt;span id="cb4-8"&gt;&lt;a href="#cb4-8"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;when&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;+&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-9"&gt;&lt;a href="#cb4-9"&gt;&lt;/a&gt;    evaluate(tree[&lt;span class="dv"&gt;1&lt;/span&gt;], genv, lenv) + evaluate(tree[&lt;span class="dv"&gt;2&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id="cb4-10"&gt;&lt;a href="#cb4-10"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;when&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-11"&gt;&lt;a href="#cb4-11"&gt;&lt;/a&gt;    evaluate(tree[&lt;span class="dv"&gt;1&lt;/span&gt;], genv, lenv) - evaluate(tree[&lt;span class="dv"&gt;2&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id="cb4-12"&gt;&lt;a href="#cb4-12"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;when&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-13"&gt;&lt;a href="#cb4-13"&gt;&lt;/a&gt;    evaluate(tree[&lt;span class="dv"&gt;1&lt;/span&gt;], genv, lenv) * evaluate(tree[&lt;span class="dv"&gt;2&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id="cb4-14"&gt;&lt;a href="#cb4-14"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;when&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-15"&gt;&lt;a href="#cb4-15"&gt;&lt;/a&gt;    evaluate(tree[&lt;span class="dv"&gt;1&lt;/span&gt;], genv, lenv) / evaluate(tree[&lt;span class="dv"&gt;2&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id="cb4-16"&gt;&lt;a href="#cb4-16"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;when&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;%&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-17"&gt;&lt;a href="#cb4-17"&gt;&lt;/a&gt;    evaluate(tree[&lt;span class="dv"&gt;1&lt;/span&gt;], genv, lenv) % evaluate(tree[&lt;span class="dv"&gt;2&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id="cb4-18"&gt;&lt;a href="#cb4-18"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;when&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;&amp;lt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-19"&gt;&lt;a href="#cb4-19"&gt;&lt;/a&gt;    evaluate(tree[&lt;span class="dv"&gt;1&lt;/span&gt;], genv, lenv) &amp;lt; evaluate(tree[&lt;span class="dv"&gt;2&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id="cb4-20"&gt;&lt;a href="#cb4-20"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;when&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;&amp;lt;=&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-21"&gt;&lt;a href="#cb4-21"&gt;&lt;/a&gt;    evaluate(tree[&lt;span class="dv"&gt;1&lt;/span&gt;], genv, lenv) &amp;lt;= evaluate(tree[&lt;span class="dv"&gt;2&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id="cb4-22"&gt;&lt;a href="#cb4-22"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;when&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;==&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-23"&gt;&lt;a href="#cb4-23"&gt;&lt;/a&gt;    evaluate(tree[&lt;span class="dv"&gt;1&lt;/span&gt;], genv, lenv) == evaluate(tree[&lt;span class="dv"&gt;2&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id="cb4-24"&gt;&lt;a href="#cb4-24"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;when&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;!=&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-25"&gt;&lt;a href="#cb4-25"&gt;&lt;/a&gt;    evaluate(tree[&lt;span class="dv"&gt;1&lt;/span&gt;], genv, lenv) != evaluate(tree[&lt;span class="dv"&gt;2&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id="cb4-26"&gt;&lt;a href="#cb4-26"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;when&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;&amp;gt;=&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-27"&gt;&lt;a href="#cb4-27"&gt;&lt;/a&gt;    evaluate(tree[&lt;span class="dv"&gt;1&lt;/span&gt;], genv, lenv) &amp;gt;= evaluate(tree[&lt;span class="dv"&gt;2&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id="cb4-28"&gt;&lt;a href="#cb4-28"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;when&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-29"&gt;&lt;a href="#cb4-29"&gt;&lt;/a&gt;    evaluate(tree[&lt;span class="dv"&gt;1&lt;/span&gt;], genv, lenv) &amp;gt; evaluate(tree[&lt;span class="dv"&gt;2&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id="cb4-30"&gt;&lt;a href="#cb4-30"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;when&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;stmts&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-31"&gt;&lt;a href="#cb4-31"&gt;&lt;/a&gt;    i = &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-32"&gt;&lt;a href="#cb4-32"&gt;&lt;/a&gt;    last = &lt;span class="dv"&gt;nil&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-33"&gt;&lt;a href="#cb4-33"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;while&lt;/span&gt; tree[i]&lt;/span&gt;
&lt;span id="cb4-34"&gt;&lt;a href="#cb4-34"&gt;&lt;/a&gt;      last = evaluate(tree[i], genv, lenv)&lt;/span&gt;
&lt;span id="cb4-35"&gt;&lt;a href="#cb4-35"&gt;&lt;/a&gt;      i = i + &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-36"&gt;&lt;a href="#cb4-36"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-37"&gt;&lt;a href="#cb4-37"&gt;&lt;/a&gt;    last&lt;/span&gt;
&lt;span id="cb4-38"&gt;&lt;a href="#cb4-38"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;when&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;var_assign&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-39"&gt;&lt;a href="#cb4-39"&gt;&lt;/a&gt;    lenv[tree[&lt;span class="dv"&gt;1&lt;/span&gt;]] = evaluate(tree[&lt;span class="dv"&gt;2&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id="cb4-40"&gt;&lt;a href="#cb4-40"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;when&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;var_ref&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-41"&gt;&lt;a href="#cb4-41"&gt;&lt;/a&gt;    lenv[tree[&lt;span class="dv"&gt;1&lt;/span&gt;]]&lt;/span&gt;
&lt;span id="cb4-42"&gt;&lt;a href="#cb4-42"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;when&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;if&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-43"&gt;&lt;a href="#cb4-43"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;if&lt;/span&gt; evaluate(tree[&lt;span class="dv"&gt;1&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id="cb4-44"&gt;&lt;a href="#cb4-44"&gt;&lt;/a&gt;      evaluate(tree[&lt;span class="dv"&gt;2&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id="cb4-45"&gt;&lt;a href="#cb4-45"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-46"&gt;&lt;a href="#cb4-46"&gt;&lt;/a&gt;      evaluate(tree[&lt;span class="dv"&gt;3&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id="cb4-47"&gt;&lt;a href="#cb4-47"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-48"&gt;&lt;a href="#cb4-48"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;when&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;while&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-49"&gt;&lt;a href="#cb4-49"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;while&lt;/span&gt; evaluate(tree[&lt;span class="dv"&gt;1&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id="cb4-50"&gt;&lt;a href="#cb4-50"&gt;&lt;/a&gt;      evaluate(tree[&lt;span class="dv"&gt;2&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id="cb4-51"&gt;&lt;a href="#cb4-51"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-52"&gt;&lt;a href="#cb4-52"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;when&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;func_def&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-53"&gt;&lt;a href="#cb4-53"&gt;&lt;/a&gt;    genv[tree[&lt;span class="dv"&gt;1&lt;/span&gt;]] = [&lt;span class="st"&gt;&amp;quot;user_defined&amp;quot;&lt;/span&gt;, tree[&lt;span class="dv"&gt;2&lt;/span&gt;], tree[&lt;span class="dv"&gt;3&lt;/span&gt;]]&lt;/span&gt;
&lt;span id="cb4-54"&gt;&lt;a href="#cb4-54"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;when&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;func_call&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-55"&gt;&lt;a href="#cb4-55"&gt;&lt;/a&gt;    args = []&lt;/span&gt;
&lt;span id="cb4-56"&gt;&lt;a href="#cb4-56"&gt;&lt;/a&gt;    i = &lt;span class="dv"&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-57"&gt;&lt;a href="#cb4-57"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;while&lt;/span&gt; tree[i + &lt;span class="dv"&gt;2&lt;/span&gt;]&lt;/span&gt;
&lt;span id="cb4-58"&gt;&lt;a href="#cb4-58"&gt;&lt;/a&gt;      args[i] = evaluate(tree[i + &lt;span class="dv"&gt;2&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id="cb4-59"&gt;&lt;a href="#cb4-59"&gt;&lt;/a&gt;      i = i + &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-60"&gt;&lt;a href="#cb4-60"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-61"&gt;&lt;a href="#cb4-61"&gt;&lt;/a&gt;    mhd = genv[tree[&lt;span class="dv"&gt;1&lt;/span&gt;]]&lt;/span&gt;
&lt;span id="cb4-62"&gt;&lt;a href="#cb4-62"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;if&lt;/span&gt; mhd[&lt;span class="dv"&gt;0&lt;/span&gt;] == &lt;span class="st"&gt;&amp;quot;builtin&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-63"&gt;&lt;a href="#cb4-63"&gt;&lt;/a&gt;      minruby_call(mhd[&lt;span class="dv"&gt;1&lt;/span&gt;], args)&lt;/span&gt;
&lt;span id="cb4-64"&gt;&lt;a href="#cb4-64"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-65"&gt;&lt;a href="#cb4-65"&gt;&lt;/a&gt;      new_lenv = {}&lt;/span&gt;
&lt;span id="cb4-66"&gt;&lt;a href="#cb4-66"&gt;&lt;/a&gt;      params = mhd[&lt;span class="dv"&gt;1&lt;/span&gt;]&lt;/span&gt;
&lt;span id="cb4-67"&gt;&lt;a href="#cb4-67"&gt;&lt;/a&gt;      i = &lt;span class="dv"&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-68"&gt;&lt;a href="#cb4-68"&gt;&lt;/a&gt;      &lt;span class="kw"&gt;while&lt;/span&gt; params[i]&lt;/span&gt;
&lt;span id="cb4-69"&gt;&lt;a href="#cb4-69"&gt;&lt;/a&gt;        new_lenv[params[i]] = args[i]&lt;/span&gt;
&lt;span id="cb4-70"&gt;&lt;a href="#cb4-70"&gt;&lt;/a&gt;        i = i + &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-71"&gt;&lt;a href="#cb4-71"&gt;&lt;/a&gt;      &lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-72"&gt;&lt;a href="#cb4-72"&gt;&lt;/a&gt;      evaluate(mhd[&lt;span class="dv"&gt;2&lt;/span&gt;], genv, new_lenv)&lt;/span&gt;
&lt;span id="cb4-73"&gt;&lt;a href="#cb4-73"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-74"&gt;&lt;a href="#cb4-74"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;when&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;ary_new&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-75"&gt;&lt;a href="#cb4-75"&gt;&lt;/a&gt;    ary = []&lt;/span&gt;
&lt;span id="cb4-76"&gt;&lt;a href="#cb4-76"&gt;&lt;/a&gt;    i = &lt;span class="dv"&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-77"&gt;&lt;a href="#cb4-77"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;while&lt;/span&gt; tree[i + &lt;span class="dv"&gt;1&lt;/span&gt;]&lt;/span&gt;
&lt;span id="cb4-78"&gt;&lt;a href="#cb4-78"&gt;&lt;/a&gt;      ary[i] = evaluate(tree[i + &lt;span class="dv"&gt;1&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id="cb4-79"&gt;&lt;a href="#cb4-79"&gt;&lt;/a&gt;      i = i + &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-80"&gt;&lt;a href="#cb4-80"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-81"&gt;&lt;a href="#cb4-81"&gt;&lt;/a&gt;    ary&lt;/span&gt;
&lt;span id="cb4-82"&gt;&lt;a href="#cb4-82"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;when&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;ary_ref&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-83"&gt;&lt;a href="#cb4-83"&gt;&lt;/a&gt;    ary = evaluate(tree[&lt;span class="dv"&gt;1&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id="cb4-84"&gt;&lt;a href="#cb4-84"&gt;&lt;/a&gt;    idx = evaluate(tree[&lt;span class="dv"&gt;2&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id="cb4-85"&gt;&lt;a href="#cb4-85"&gt;&lt;/a&gt;    ary[idx]&lt;/span&gt;
&lt;span id="cb4-86"&gt;&lt;a href="#cb4-86"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;when&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;ary_assign&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-87"&gt;&lt;a href="#cb4-87"&gt;&lt;/a&gt;    ary = evaluate(tree[&lt;span class="dv"&gt;1&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id="cb4-88"&gt;&lt;a href="#cb4-88"&gt;&lt;/a&gt;    idx = evaluate(tree[&lt;span class="dv"&gt;2&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id="cb4-89"&gt;&lt;a href="#cb4-89"&gt;&lt;/a&gt;    val = evaluate(tree[&lt;span class="dv"&gt;3&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id="cb4-90"&gt;&lt;a href="#cb4-90"&gt;&lt;/a&gt;    ary[idx] = val&lt;/span&gt;
&lt;span id="cb4-91"&gt;&lt;a href="#cb4-91"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;when&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;hash_new&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-92"&gt;&lt;a href="#cb4-92"&gt;&lt;/a&gt;    hsh = {}&lt;/span&gt;
&lt;span id="cb4-93"&gt;&lt;a href="#cb4-93"&gt;&lt;/a&gt;    i = &lt;span class="dv"&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-94"&gt;&lt;a href="#cb4-94"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;while&lt;/span&gt; tree[i + &lt;span class="dv"&gt;1&lt;/span&gt;]&lt;/span&gt;
&lt;span id="cb4-95"&gt;&lt;a href="#cb4-95"&gt;&lt;/a&gt;      key = evaluate(tree[i + &lt;span class="dv"&gt;1&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id="cb4-96"&gt;&lt;a href="#cb4-96"&gt;&lt;/a&gt;      val = evaluate(tree[i + &lt;span class="dv"&gt;2&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id="cb4-97"&gt;&lt;a href="#cb4-97"&gt;&lt;/a&gt;      hsh[key] = val&lt;/span&gt;
&lt;span id="cb4-98"&gt;&lt;a href="#cb4-98"&gt;&lt;/a&gt;      i = i + &lt;span class="dv"&gt;2&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-99"&gt;&lt;a href="#cb4-99"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-100"&gt;&lt;a href="#cb4-100"&gt;&lt;/a&gt;    hsh&lt;/span&gt;
&lt;span id="cb4-101"&gt;&lt;a href="#cb4-101"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-102"&gt;&lt;a href="#cb4-102"&gt;&lt;/a&gt;&lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-103"&gt;&lt;a href="#cb4-103"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-104"&gt;&lt;a href="#cb4-104"&gt;&lt;/a&gt;str = minruby_load()&lt;/span&gt;
&lt;span id="cb4-105"&gt;&lt;a href="#cb4-105"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-106"&gt;&lt;a href="#cb4-106"&gt;&lt;/a&gt;tree = minruby_parse(str)&lt;/span&gt;
&lt;span id="cb4-107"&gt;&lt;a href="#cb4-107"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-108"&gt;&lt;a href="#cb4-108"&gt;&lt;/a&gt;genv = {&lt;/span&gt;
&lt;span id="cb4-109"&gt;&lt;a href="#cb4-109"&gt;&lt;/a&gt;  &lt;span class="st"&gt;&amp;quot;p&amp;quot;&lt;/span&gt; =&amp;gt; [&lt;span class="st"&gt;&amp;quot;builtin&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;],&lt;/span&gt;
&lt;span id="cb4-110"&gt;&lt;a href="#cb4-110"&gt;&lt;/a&gt;  &lt;span class="st"&gt;&amp;quot;require&amp;quot;&lt;/span&gt; =&amp;gt; [&lt;span class="st"&gt;&amp;quot;builtin&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;require&amp;quot;&lt;/span&gt;],&lt;/span&gt;
&lt;span id="cb4-111"&gt;&lt;a href="#cb4-111"&gt;&lt;/a&gt;  &lt;span class="st"&gt;&amp;quot;minruby_parse&amp;quot;&lt;/span&gt; =&amp;gt; [&lt;span class="st"&gt;&amp;quot;builtin&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;minruby_parse&amp;quot;&lt;/span&gt;],&lt;/span&gt;
&lt;span id="cb4-112"&gt;&lt;a href="#cb4-112"&gt;&lt;/a&gt;  &lt;span class="st"&gt;&amp;quot;minruby_load&amp;quot;&lt;/span&gt; =&amp;gt; [&lt;span class="st"&gt;&amp;quot;builtin&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;minruby_load&amp;quot;&lt;/span&gt;],&lt;/span&gt;
&lt;span id="cb4-113"&gt;&lt;a href="#cb4-113"&gt;&lt;/a&gt;  &lt;span class="st"&gt;&amp;quot;minruby_call&amp;quot;&lt;/span&gt; =&amp;gt; [&lt;span class="st"&gt;&amp;quot;builtin&amp;quot;&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;minruby_call&amp;quot;&lt;/span&gt;],&lt;/span&gt;
&lt;span id="cb4-114"&gt;&lt;a href="#cb4-114"&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id="cb4-115"&gt;&lt;a href="#cb4-115"&gt;&lt;/a&gt;lenv = {}&lt;/span&gt;
&lt;span id="cb4-116"&gt;&lt;a href="#cb4-116"&gt;&lt;/a&gt;evaluate(tree, genv, lenv)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;コードを見て分かるように(?)，配列の一引数目のリテラルで &lt;code&gt;case&lt;/code&gt; 文による分岐をし，分岐先で配列の要素を引っ張っている． このようにデータ構造 + &lt;code&gt;case&lt;/code&gt; 文による分岐はパターンマッチングにうってつけのユースケースだ．&lt;/p&gt;
&lt;h3 id="minruby-パターンマッチング"&gt;MinRuby + パターンマッチング&lt;/h3&gt;
&lt;p&gt;作業リポジトリはこれ:&lt;/p&gt;
&lt;iframe width="426" height="162" scrolling="no" frameborder="0" src="https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/MinRuby.rb"&gt;
&lt;/iframe&gt;
&lt;p&gt;&lt;code&gt;pattern-match&lt;/code&gt; というブランチにパターンマッチングで書き換えたコードがある． パターンマッチングで書き換えたのは &lt;code&gt;evaluate&lt;/code&gt; 関数だけなのでそこだけ載せる:&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode ruby"&gt;&lt;code class="sourceCode ruby"&gt;&lt;span id="cb5-1"&gt;&lt;a href="#cb5-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;def&lt;/span&gt; evaluate(tree, genv, lenv)&lt;/span&gt;
&lt;span id="cb5-2"&gt;&lt;a href="#cb5-2"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;case&lt;/span&gt; tree&lt;/span&gt;
&lt;span id="cb5-3"&gt;&lt;a href="#cb5-3"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;in&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;lit&amp;quot;&lt;/span&gt;, lit&lt;/span&gt;
&lt;span id="cb5-4"&gt;&lt;a href="#cb5-4"&gt;&lt;/a&gt;    lit&lt;/span&gt;
&lt;span id="cb5-5"&gt;&lt;a href="#cb5-5"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;in&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;+&amp;quot;&lt;/span&gt;, exp1, exp2&lt;/span&gt;
&lt;span id="cb5-6"&gt;&lt;a href="#cb5-6"&gt;&lt;/a&gt;    evaluate(exp1, genv, lenv) + evaluate(exp2, genv, lenv)&lt;/span&gt;
&lt;span id="cb5-7"&gt;&lt;a href="#cb5-7"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;in&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;-&amp;quot;&lt;/span&gt;, exp1, exp2&lt;/span&gt;
&lt;span id="cb5-8"&gt;&lt;a href="#cb5-8"&gt;&lt;/a&gt;    evaluate(exp1, genv, lenv) - evaluate(exp2, genv, lenv)&lt;/span&gt;
&lt;span id="cb5-9"&gt;&lt;a href="#cb5-9"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;in&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;, exp1, exp2&lt;/span&gt;
&lt;span id="cb5-10"&gt;&lt;a href="#cb5-10"&gt;&lt;/a&gt;    evaluate(exp1, genv, lenv) * evaluate(exp2, genv, lenv)&lt;/span&gt;
&lt;span id="cb5-11"&gt;&lt;a href="#cb5-11"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;in&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;, exp1, exp2&lt;/span&gt;
&lt;span id="cb5-12"&gt;&lt;a href="#cb5-12"&gt;&lt;/a&gt;    evaluate(exp1, genv, lenv) / evaluate(exp2, genv, lenv)&lt;/span&gt;
&lt;span id="cb5-13"&gt;&lt;a href="#cb5-13"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;in&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;%&amp;quot;&lt;/span&gt;, exp1, exp2&lt;/span&gt;
&lt;span id="cb5-14"&gt;&lt;a href="#cb5-14"&gt;&lt;/a&gt;    evaluate(exp1, genv, lenv) % evaluate(exp2, genv, lenv)&lt;/span&gt;
&lt;span id="cb5-15"&gt;&lt;a href="#cb5-15"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;in&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;&amp;lt;&amp;quot;&lt;/span&gt;, exp1, exp2&lt;/span&gt;
&lt;span id="cb5-16"&gt;&lt;a href="#cb5-16"&gt;&lt;/a&gt;    evaluate(exp1, genv, lenv) &amp;lt; evaluate(exp2, genv, lenv)&lt;/span&gt;
&lt;span id="cb5-17"&gt;&lt;a href="#cb5-17"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;in&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;&amp;lt;=&amp;quot;&lt;/span&gt;, exp1, exp2&lt;/span&gt;
&lt;span id="cb5-18"&gt;&lt;a href="#cb5-18"&gt;&lt;/a&gt;    evaluate(exp1, genv, lenv) &amp;lt;= evaluate(exp2, genv, lenv)&lt;/span&gt;
&lt;span id="cb5-19"&gt;&lt;a href="#cb5-19"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;in&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;==&amp;quot;&lt;/span&gt;, exp1, exp2&lt;/span&gt;
&lt;span id="cb5-20"&gt;&lt;a href="#cb5-20"&gt;&lt;/a&gt;    evaluate(exp1, genv, lenv) == evaluate(exp2, genv, lenv)&lt;/span&gt;
&lt;span id="cb5-21"&gt;&lt;a href="#cb5-21"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;in&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;!=&amp;quot;&lt;/span&gt;, exp1, exp2&lt;/span&gt;
&lt;span id="cb5-22"&gt;&lt;a href="#cb5-22"&gt;&lt;/a&gt;    evaluate(exp1, genv, lenv) != evaluate(exp2, genv, lenv)&lt;/span&gt;
&lt;span id="cb5-23"&gt;&lt;a href="#cb5-23"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;in&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;&amp;gt;=&amp;quot;&lt;/span&gt;, exp1, exp2&lt;/span&gt;
&lt;span id="cb5-24"&gt;&lt;a href="#cb5-24"&gt;&lt;/a&gt;    evaluate(exp1, genv, lenv) &amp;gt;= evaluate(exp2, genv, lenv)&lt;/span&gt;
&lt;span id="cb5-25"&gt;&lt;a href="#cb5-25"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;in&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;, exp1, exp2&lt;/span&gt;
&lt;span id="cb5-26"&gt;&lt;a href="#cb5-26"&gt;&lt;/a&gt;    evaluate(exp1, genv, lenv) &amp;gt; evaluate(exp2, genv, lenv)&lt;/span&gt;
&lt;span id="cb5-27"&gt;&lt;a href="#cb5-27"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;in&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;stmts&amp;quot;&lt;/span&gt;, *stmts&lt;/span&gt;
&lt;span id="cb5-28"&gt;&lt;a href="#cb5-28"&gt;&lt;/a&gt;    last = &lt;span class="dv"&gt;nil&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-29"&gt;&lt;a href="#cb5-29"&gt;&lt;/a&gt;    i = &lt;span class="dv"&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-30"&gt;&lt;a href="#cb5-30"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;while&lt;/span&gt; stmts[i]&lt;/span&gt;
&lt;span id="cb5-31"&gt;&lt;a href="#cb5-31"&gt;&lt;/a&gt;      last = evaluate(stmts[i], genv, lenv)&lt;/span&gt;
&lt;span id="cb5-32"&gt;&lt;a href="#cb5-32"&gt;&lt;/a&gt;      i = i + &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-33"&gt;&lt;a href="#cb5-33"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-34"&gt;&lt;a href="#cb5-34"&gt;&lt;/a&gt;    last&lt;/span&gt;
&lt;span id="cb5-35"&gt;&lt;a href="#cb5-35"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;in&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;var_assign&amp;quot;&lt;/span&gt;, var_name, var_value&lt;/span&gt;
&lt;span id="cb5-36"&gt;&lt;a href="#cb5-36"&gt;&lt;/a&gt;    lenv[var_name] = evaluate(var_value, genv, lenv)&lt;/span&gt;
&lt;span id="cb5-37"&gt;&lt;a href="#cb5-37"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;in&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;var_ref&amp;quot;&lt;/span&gt;, var_name&lt;/span&gt;
&lt;span id="cb5-38"&gt;&lt;a href="#cb5-38"&gt;&lt;/a&gt;    lenv[var_name]&lt;/span&gt;
&lt;span id="cb5-39"&gt;&lt;a href="#cb5-39"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;in&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;if&amp;quot;&lt;/span&gt;, cond, exp1, exp2&lt;/span&gt;
&lt;span id="cb5-40"&gt;&lt;a href="#cb5-40"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;if&lt;/span&gt; evaluate(cond, genv, lenv)&lt;/span&gt;
&lt;span id="cb5-41"&gt;&lt;a href="#cb5-41"&gt;&lt;/a&gt;      evaluate(exp1, genv, lenv)&lt;/span&gt;
&lt;span id="cb5-42"&gt;&lt;a href="#cb5-42"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-43"&gt;&lt;a href="#cb5-43"&gt;&lt;/a&gt;      evaluate(exp2, genv, lenv)&lt;/span&gt;
&lt;span id="cb5-44"&gt;&lt;a href="#cb5-44"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-45"&gt;&lt;a href="#cb5-45"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;in&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;while&amp;quot;&lt;/span&gt;, cond, exp&lt;/span&gt;
&lt;span id="cb5-46"&gt;&lt;a href="#cb5-46"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;while&lt;/span&gt; evaluate(cond, genv, lenv)&lt;/span&gt;
&lt;span id="cb5-47"&gt;&lt;a href="#cb5-47"&gt;&lt;/a&gt;      evaluate(exp, genv, lenv)&lt;/span&gt;
&lt;span id="cb5-48"&gt;&lt;a href="#cb5-48"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-49"&gt;&lt;a href="#cb5-49"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;in&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;func_def&amp;quot;&lt;/span&gt;, func_name, func_args, func_body&lt;/span&gt;
&lt;span id="cb5-50"&gt;&lt;a href="#cb5-50"&gt;&lt;/a&gt;    genv[func_name] = [&lt;span class="st"&gt;&amp;quot;user_defined&amp;quot;&lt;/span&gt;, func_args, func_body]&lt;/span&gt;
&lt;span id="cb5-51"&gt;&lt;a href="#cb5-51"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;in&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;func_call&amp;quot;&lt;/span&gt;, func_name, *func_args&lt;/span&gt;
&lt;span id="cb5-52"&gt;&lt;a href="#cb5-52"&gt;&lt;/a&gt;    args = []&lt;/span&gt;
&lt;span id="cb5-53"&gt;&lt;a href="#cb5-53"&gt;&lt;/a&gt;    i = &lt;span class="dv"&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-54"&gt;&lt;a href="#cb5-54"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;while&lt;/span&gt; func_args[i]&lt;/span&gt;
&lt;span id="cb5-55"&gt;&lt;a href="#cb5-55"&gt;&lt;/a&gt;      args[i] = evaluate(func_args[i], genv, lenv)&lt;/span&gt;
&lt;span id="cb5-56"&gt;&lt;a href="#cb5-56"&gt;&lt;/a&gt;      i = i + &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-57"&gt;&lt;a href="#cb5-57"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-58"&gt;&lt;a href="#cb5-58"&gt;&lt;/a&gt;    mhd = genv[func_name]&lt;/span&gt;
&lt;span id="cb5-59"&gt;&lt;a href="#cb5-59"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;if&lt;/span&gt; mhd[&lt;span class="dv"&gt;0&lt;/span&gt;] == &lt;span class="st"&gt;&amp;quot;builtin&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-60"&gt;&lt;a href="#cb5-60"&gt;&lt;/a&gt;      minruby_call(mhd[&lt;span class="dv"&gt;1&lt;/span&gt;], args)&lt;/span&gt;
&lt;span id="cb5-61"&gt;&lt;a href="#cb5-61"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;else&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-62"&gt;&lt;a href="#cb5-62"&gt;&lt;/a&gt;      new_lenv = {}&lt;/span&gt;
&lt;span id="cb5-63"&gt;&lt;a href="#cb5-63"&gt;&lt;/a&gt;      params = mhd[&lt;span class="dv"&gt;1&lt;/span&gt;]&lt;/span&gt;
&lt;span id="cb5-64"&gt;&lt;a href="#cb5-64"&gt;&lt;/a&gt;      i = &lt;span class="dv"&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-65"&gt;&lt;a href="#cb5-65"&gt;&lt;/a&gt;      &lt;span class="kw"&gt;while&lt;/span&gt; params[i]&lt;/span&gt;
&lt;span id="cb5-66"&gt;&lt;a href="#cb5-66"&gt;&lt;/a&gt;        new_lenv[params[i]] = args[i]&lt;/span&gt;
&lt;span id="cb5-67"&gt;&lt;a href="#cb5-67"&gt;&lt;/a&gt;        i = i + &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-68"&gt;&lt;a href="#cb5-68"&gt;&lt;/a&gt;      &lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-69"&gt;&lt;a href="#cb5-69"&gt;&lt;/a&gt;      evaluate(mhd[&lt;span class="dv"&gt;2&lt;/span&gt;], genv, new_lenv)&lt;/span&gt;
&lt;span id="cb5-70"&gt;&lt;a href="#cb5-70"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-71"&gt;&lt;a href="#cb5-71"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;in&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;ary_new&amp;quot;&lt;/span&gt;, ary_values&lt;/span&gt;
&lt;span id="cb5-72"&gt;&lt;a href="#cb5-72"&gt;&lt;/a&gt;    ary = []&lt;/span&gt;
&lt;span id="cb5-73"&gt;&lt;a href="#cb5-73"&gt;&lt;/a&gt;    i = &lt;span class="dv"&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-74"&gt;&lt;a href="#cb5-74"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;while&lt;/span&gt; ary_values[i]&lt;/span&gt;
&lt;span id="cb5-75"&gt;&lt;a href="#cb5-75"&gt;&lt;/a&gt;      ary [i] = evaluate(ary_values[i], genv, lenv)&lt;/span&gt;
&lt;span id="cb5-76"&gt;&lt;a href="#cb5-76"&gt;&lt;/a&gt;      i = i + &lt;span class="dv"&gt;1&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-77"&gt;&lt;a href="#cb5-77"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-78"&gt;&lt;a href="#cb5-78"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;in&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;ary_ref&amp;quot;&lt;/span&gt;, ary_exp, idx_exp&lt;/span&gt;
&lt;span id="cb5-79"&gt;&lt;a href="#cb5-79"&gt;&lt;/a&gt;    ary = evaluate(ary_exp, genv, lenv)&lt;/span&gt;
&lt;span id="cb5-80"&gt;&lt;a href="#cb5-80"&gt;&lt;/a&gt;    idx = evaluate(idx_exp, genv, lenv)&lt;/span&gt;
&lt;span id="cb5-81"&gt;&lt;a href="#cb5-81"&gt;&lt;/a&gt;    ary[idx]&lt;/span&gt;
&lt;span id="cb5-82"&gt;&lt;a href="#cb5-82"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;in&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;ary_assign&amp;quot;&lt;/span&gt;, ary_exp, idx_exp, value_exp&lt;/span&gt;
&lt;span id="cb5-83"&gt;&lt;a href="#cb5-83"&gt;&lt;/a&gt;    ary = evaluate(ary_exp, genv, lenv)&lt;/span&gt;
&lt;span id="cb5-84"&gt;&lt;a href="#cb5-84"&gt;&lt;/a&gt;    idx = evaluate(idx_exp, genv, lenv)&lt;/span&gt;
&lt;span id="cb5-85"&gt;&lt;a href="#cb5-85"&gt;&lt;/a&gt;    val = evaluate(value_exp, genv, lenv)&lt;/span&gt;
&lt;span id="cb5-86"&gt;&lt;a href="#cb5-86"&gt;&lt;/a&gt;    ary[idx] = val&lt;/span&gt;
&lt;span id="cb5-87"&gt;&lt;a href="#cb5-87"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;in&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;hash_new&amp;quot;&lt;/span&gt;, *key_values&lt;/span&gt;
&lt;span id="cb5-88"&gt;&lt;a href="#cb5-88"&gt;&lt;/a&gt;    hsh = {}&lt;/span&gt;
&lt;span id="cb5-89"&gt;&lt;a href="#cb5-89"&gt;&lt;/a&gt;    i = &lt;span class="dv"&gt;0&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-90"&gt;&lt;a href="#cb5-90"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;while&lt;/span&gt; key_values[i]&lt;/span&gt;
&lt;span id="cb5-91"&gt;&lt;a href="#cb5-91"&gt;&lt;/a&gt;      key = evaluate(key_values[i], genv, lenv)&lt;/span&gt;
&lt;span id="cb5-92"&gt;&lt;a href="#cb5-92"&gt;&lt;/a&gt;      val = evaluate(key_values[i + &lt;span class="dv"&gt;1&lt;/span&gt;], genv, lenv)&lt;/span&gt;
&lt;span id="cb5-93"&gt;&lt;a href="#cb5-93"&gt;&lt;/a&gt;      hsh[key] = val&lt;/span&gt;
&lt;span id="cb5-94"&gt;&lt;a href="#cb5-94"&gt;&lt;/a&gt;      i = i + &lt;span class="dv"&gt;2&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-95"&gt;&lt;a href="#cb5-95"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-96"&gt;&lt;a href="#cb5-96"&gt;&lt;/a&gt;    hsh&lt;/span&gt;
&lt;span id="cb5-97"&gt;&lt;a href="#cb5-97"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-98"&gt;&lt;a href="#cb5-98"&gt;&lt;/a&gt;&lt;span class="kw"&gt;end&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;配列にマッチさせる場合，&lt;code&gt;in [a, b, c]&lt;/code&gt; の &lt;code&gt;[]&lt;/code&gt; を省くことができる． また，&lt;code&gt;in &amp;quot;hoge&amp;quot;, *rest&lt;/code&gt; は配列の残りの要素全てを &lt;code&gt;*rest&lt;/code&gt; にマッチさせる構文だ． 他は特別な機能を使ってないのできっと読めるでしょう．&lt;/p&gt;
&lt;h2 id="おまけ-minruby-パターンマッチング"&gt;おまけ: minruby + パターンマッチング&lt;/h2&gt;
&lt;p&gt;試しに &lt;code&gt;minruby&lt;/code&gt; もパターンマッチで書き換えてみた． 差分は&lt;a href="https://github.com/matsubara0507/minruby-gem/pull/1"&gt;これ&lt;/a&gt;． めちゃくちゃやっつけで作ったので穴があるかもしれない．&lt;/p&gt;
&lt;p&gt;ここでは新しく Alternative Pattern を使っている． こういうのだ:&lt;/p&gt;
&lt;div class="sourceCode" id="cb6"&gt;&lt;pre class="sourceCode ruby"&gt;&lt;code class="sourceCode ruby"&gt;&lt;span id="cb6-1"&gt;&lt;a href="#cb6-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;# Alternative Pattern: hoge | fuga&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb6-2"&gt;&lt;a href="#cb6-2"&gt;&lt;/a&gt;&lt;span class="kw"&gt;in&lt;/span&gt; (&lt;span class="st"&gt;:program&lt;/span&gt; | &lt;span class="st"&gt;:bodystmt&lt;/span&gt;), exp1, *_&lt;/span&gt;
&lt;span id="cb6-3"&gt;&lt;a href="#cb6-3"&gt;&lt;/a&gt;    make_stmts(exp1)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Alternative Pattern には注意点があって，このパターンでは変数へのマッチを利用することができない:&lt;/p&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre class="sourceCode ruby"&gt;&lt;code class="sourceCode ruby"&gt;&lt;span id="cb7-1"&gt;&lt;a href="#cb7-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;# Error: illegal variable in alternative pattern&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-2"&gt;&lt;a href="#cb7-2"&gt;&lt;/a&gt;&lt;span class="kw"&gt;in&lt;/span&gt; (&lt;span class="st"&gt;:program&lt;/span&gt; exp1, *_ | &lt;span class="st"&gt;:bodystmt&lt;/span&gt; exp1, *_),&lt;/span&gt;
&lt;span id="cb7-3"&gt;&lt;a href="#cb7-3"&gt;&lt;/a&gt;    make_stmts(exp1)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ここからは余談． MinRuby は &lt;code&gt;ruby interp.rb interp.rb fizzbuzz.rb&lt;/code&gt; のように自身を自身で評価することが可能だ(そのため &lt;code&gt;map&lt;/code&gt; や &lt;code&gt;foreach&lt;/code&gt; などを使わずに少し冗長なコードになっている)． しかし，パターンマッチングを導入しちゃうとこれができない． なんとかできないかなぁと思って &lt;code&gt;minruby&lt;/code&gt; をパターンマッチングで書き換えてみたけど，まぁ無理でした． いいアイデアあったら教えて．&lt;/p&gt;
&lt;h2 id="おしまい"&gt;おしまい&lt;/h2&gt;
&lt;p&gt;次は型検査も試したいですね．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-05-12-create-my-github-cards.html</id><title type="text">GitHub Card を生成する SPA を Elm で作った</title><updated>2019-05-12T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-05-12-create-my-github-cards.html"/><summary type="html">&lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;Qiita や自分のブログに GitHub のリポジトリのリンク貼ってもなんか寂しいからいい感じのカードっぽいやつ生成するやつを作ったって話です． iframe で埋め込むことができます。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;だがしかし！Qiita などに任意の iframe が埋め込めるわけないジャーーーン！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ということに，だいたい完成してから気づいた orz&lt;/p&gt;
&lt;h3 id="github-card"&gt;GitHub Card&lt;/h3&gt;
&lt;p&gt;特別定義はないけど，&lt;a href="https://lab.lepture.com/github-cards/"&gt;こんな感じ&lt;/a&gt;のを iframe で作りたかった．&lt;/p&gt;
&lt;h2 id="作る"&gt;作る&lt;/h2&gt;
&lt;p&gt;マイフェィバリット JS 系プログラミング言語 Elm を使った． だいたい半日ぐらいかかった．GWの最終日．GW最高． リポジトリはこれ:&lt;/p&gt;
&lt;h4 id="section"&gt;&lt;iframe width="426" height="162" scrolling="no" frameborder="0" src="https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/github-card"&gt;&lt;/iframe&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://matsubara0507.github.io/github-card"&gt;GitHub Pages に置いた&lt;/a&gt;ので誰でも試せる． ただし，裏では GitHub API v3 をトークンなしで叩いてる…&lt;/p&gt;
&lt;p&gt;こんな感じになる:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://matsubara0507.github.io/github-card/#matsubara0507"&gt;&lt;img src="/assets/create-my-github-cards/user-github-card.jpg" style="max-width: 500px;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://matsubara0507.github.io/github-card/#matsubara0507/github-card"&gt;&lt;img src="/assets/create-my-github-cards/repo-github-card.jpg" style="max-width: 500px;"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上がユーザーのカードで下がリポジトリのカード． &lt;code&gt;Embed:&lt;/code&gt; の下に書いてある iframe タグをコピペすることで埋め込める．&lt;/p&gt;
&lt;h3 id="ちょっとした工夫"&gt;ちょっとした工夫&lt;/h3&gt;
&lt;p&gt;Elm の &lt;code&gt;Browser.application&lt;/code&gt; の URL 機能を&lt;del&gt;わざわざ&lt;/del&gt;使って色々工夫してる:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https://xxxx#name&lt;/code&gt; とすることで直接任意ユーザー/リポジトリのカードのページを開ける
&lt;ul&gt;
&lt;li&gt;実は &lt;code&gt;Build&lt;/code&gt; ボタンで &lt;code&gt;#name&lt;/code&gt; にジャンプしてる笑&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;https://xxx?target=name&lt;/code&gt; とすることで &lt;code&gt;name&lt;/code&gt; のカードだけを表示
&lt;ul&gt;
&lt;li&gt;iframe にはこっちを使う&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getElementById&lt;/code&gt; とか&lt;del&gt;わざわざ&lt;/del&gt;してぴったりの &lt;code&gt;width&lt;/code&gt; と &lt;code&gt;height&lt;/code&gt; を iframe に生成してる&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="問題点"&gt;問題点&lt;/h3&gt;
&lt;p&gt;上述した通り，GitHub API をトークンなしで利用しているので rate limit がある(同一アドレスから60req/h)． 開いた人によってはページが見れないのは悲しい…&lt;/p&gt;
&lt;h2 id="作るパート2"&gt;作る(パート2)&lt;/h2&gt;
&lt;p&gt;ウンウン考えながら帰宅してたら気づいた． どーせ GitHub のユーザーやリポジトリのステータスなんてコロコロ変わるもんでもないし，&lt;strong&gt;適当に JSON で吐いておいて毎日更新する CI でも回しておけば良くない??&lt;/strong&gt; と．&lt;/p&gt;
&lt;p&gt;ということで、思いついてしまったので作ってしまった． 気づいたら朝4時．GW延長戦(????)．&lt;/p&gt;
&lt;h3 id="できたもの"&gt;できたもの&lt;/h3&gt;
&lt;p&gt;集める部分と表示する部分を分けた:&lt;/p&gt;
&lt;h4 id="section-1"&gt;&lt;iframe width="426" height="162" scrolling="no" frameborder="0" src="https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/selfcat"&gt;&lt;/iframe&gt;&lt;/h4&gt;
&lt;h4 id="section-2"&gt;&lt;iframe width="426" height="162" scrolling="no" frameborder="0" src="https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/my-github-cards"&gt;&lt;/iframe&gt;&lt;/h4&gt;
&lt;p&gt;前回の &lt;a href="https://github.com/matsubara0507/github-card"&gt;matsubara0507/github-card&lt;/a&gt; と違い自分専用． selfcat という CLI ツールで次のような設定ファイル &lt;code&gt;.selfcat.yaml&lt;/code&gt; にあるユーザーとリポジトリの情報を収集(GitHub API v3)し，JSON として保存する． もちろん Haskell 製．&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;span id="cb1-1"&gt;&lt;a href="#cb1-1"&gt;&lt;/a&gt;&lt;span class="fu"&gt;owner&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; matsubara0507&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-2"&gt;&lt;a href="#cb1-2"&gt;&lt;/a&gt;&lt;span class="fu"&gt;repos&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-3"&gt;&lt;a href="#cb1-3"&gt;&lt;/a&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; mix.hs&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-4"&gt;&lt;a href="#cb1-4"&gt;&lt;/a&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; selfcat&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;--compact&lt;/code&gt; オプションをつけることで一つの JSON にまとめてくれる． my-github-cards の方は selfcat を使って一つにまとめて生成した JSON ファイルを読み込んで GitHub Card を表示する． 表示した見た目は前回のと同じ．&lt;/p&gt;
&lt;h3 id="selfcat"&gt;selfcat&lt;/h3&gt;
&lt;p&gt;これはやってること単純:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;設定ファイルの YAML を読み込み (&lt;a href="http://hackage.haskell.org/package/yaml"&gt;yaml&lt;/a&gt; パッケージ)&lt;/li&gt;
&lt;li&gt;GitHub API を叩き (&lt;a href="http://hackage.haskell.org/package/github"&gt;github&lt;/a&gt; パッケージ)&lt;/li&gt;
&lt;li&gt;JSON を吐くだけ (&lt;a href="http://hackage.haskell.org/package/aeson"&gt;aeson&lt;/a&gt; パッケージ)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;例のごとく，&lt;a href="http://hackage.haskell.org/package/rio"&gt;rio&lt;/a&gt; + &lt;a href="http://hackage.haskell.org/package/extensible"&gt;extensible&lt;/a&gt; でサクッと作った．&lt;/p&gt;
&lt;p&gt;中身を見るとわかるのだが &lt;a href="https://github.com/matsubara0507/mix.hs"&gt;mix&lt;/a&gt; というパッケージを使っている． これは rio + extensible のいつも自分が使うパターンをパッケージ化したもの． そのうちまたまとめます．&lt;/p&gt;
&lt;h3 id="生成した-json-ファイルを読み込む"&gt;生成した JSON ファイルを読み込む&lt;/h3&gt;
&lt;p&gt;Elm で「生成した JSON ファイルを読み込む」というのは少し大変だった． Elm で初期値を与えるには &lt;code&gt;init&lt;/code&gt; 関数の &lt;code&gt;Flag&lt;/code&gt; というのを使う。&lt;a href="https://qiita.com/jinjor/items/245959d2da710eda18fa#browserelement"&gt;このあたりが参考になる&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;で，問題はどうやってローカルの JSON を読み込むか． &lt;a href="https://github.com/matsubara0507/git-plantation/blob/8b0c44e6e6e20bd23998f7df5e0817fcf17fb6a8/src/Git/Plantation/API.hs#L47-L48"&gt;git-plantation では Haskell で埋め込んでいた&lt;/a&gt;のだが，今回はサーバー側がないのでできない． ググったら出てきた:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codepen.io/KryptoniteDove/post/load-json-file-locally-using-pure-javascript"&gt;Load JSON file locally using pure Javascript by Rich on CodePen&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JS 詳しくないのでこれが良い方法なのかはわからないけど，これを参考にして次のような JS を書いて &lt;code&gt;index.html&lt;/code&gt; から読み込むようにした:&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode javascript"&gt;&lt;code class="sourceCode javascript"&gt;&lt;span id="cb2-1"&gt;&lt;a href="#cb2-1"&gt;&lt;/a&gt;&lt;span class="st"&gt;&amp;quot;use strict&amp;quot;&lt;/span&gt;&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-2"&gt;&lt;a href="#cb2-2"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-3"&gt;&lt;a href="#cb2-3"&gt;&lt;/a&gt;&lt;span class="kw"&gt;function&lt;/span&gt; &lt;span class="at"&gt;loadJSON&lt;/span&gt;(callback) &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-4"&gt;&lt;a href="#cb2-4"&gt;&lt;/a&gt;   &lt;span class="kw"&gt;var&lt;/span&gt; xobj &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;new&lt;/span&gt; &lt;span class="at"&gt;XMLHttpRequest&lt;/span&gt;()&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-5"&gt;&lt;a href="#cb2-5"&gt;&lt;/a&gt;       &lt;span class="va"&gt;xobj&lt;/span&gt;.&lt;span class="at"&gt;overrideMimeType&lt;/span&gt;(&lt;span class="st"&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-6"&gt;&lt;a href="#cb2-6"&gt;&lt;/a&gt;   &lt;span class="va"&gt;xobj&lt;/span&gt;.&lt;span class="at"&gt;open&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="st"&gt;&amp;#39;static/info.json&amp;#39;&lt;/span&gt;&lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="kw"&gt;true&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-7"&gt;&lt;a href="#cb2-7"&gt;&lt;/a&gt;   &lt;span class="va"&gt;xobj&lt;/span&gt;.&lt;span class="at"&gt;onreadystatechange&lt;/span&gt; &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="kw"&gt;function&lt;/span&gt; () &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-8"&gt;&lt;a href="#cb2-8"&gt;&lt;/a&gt;         &lt;span class="cf"&gt;if&lt;/span&gt; (&lt;span class="va"&gt;xobj&lt;/span&gt;.&lt;span class="at"&gt;readyState&lt;/span&gt; &lt;span class="op"&gt;==&lt;/span&gt; &lt;span class="dv"&gt;4&lt;/span&gt; &lt;span class="op"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="va"&gt;xobj&lt;/span&gt;.&lt;span class="at"&gt;status&lt;/span&gt; &lt;span class="op"&gt;==&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;200&amp;quot;&lt;/span&gt;) &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-9"&gt;&lt;a href="#cb2-9"&gt;&lt;/a&gt;           &lt;span class="at"&gt;callback&lt;/span&gt;(&lt;span class="va"&gt;xobj&lt;/span&gt;.&lt;span class="at"&gt;responseText&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-10"&gt;&lt;a href="#cb2-10"&gt;&lt;/a&gt;         &lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-11"&gt;&lt;a href="#cb2-11"&gt;&lt;/a&gt;   &lt;span class="op"&gt;};&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-12"&gt;&lt;a href="#cb2-12"&gt;&lt;/a&gt;   &lt;span class="va"&gt;xobj&lt;/span&gt;.&lt;span class="at"&gt;send&lt;/span&gt;(&lt;span class="kw"&gt;null&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-13"&gt;&lt;a href="#cb2-13"&gt;&lt;/a&gt;&lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-14"&gt;&lt;a href="#cb2-14"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-15"&gt;&lt;a href="#cb2-15"&gt;&lt;/a&gt;&lt;span class="at"&gt;loadJSON&lt;/span&gt;(&lt;span class="kw"&gt;function&lt;/span&gt;(response) &lt;span class="op"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-16"&gt;&lt;a href="#cb2-16"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;var&lt;/span&gt; json &lt;span class="op"&gt;=&lt;/span&gt; &lt;span class="va"&gt;JSON&lt;/span&gt;.&lt;span class="at"&gt;parse&lt;/span&gt;(response)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-17"&gt;&lt;a href="#cb2-17"&gt;&lt;/a&gt;  &lt;span class="va"&gt;Elm&lt;/span&gt;.&lt;span class="va"&gt;Main&lt;/span&gt;.&lt;span class="at"&gt;init&lt;/span&gt;(&lt;/span&gt;
&lt;span id="cb2-18"&gt;&lt;a href="#cb2-18"&gt;&lt;/a&gt;    &lt;span class="op"&gt;{&lt;/span&gt; &lt;span class="dt"&gt;node&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="va"&gt;document&lt;/span&gt;.&lt;span class="at"&gt;getElementById&lt;/span&gt;(&lt;span class="st"&gt;&amp;#39;main&amp;#39;&lt;/span&gt;)&lt;/span&gt;
&lt;span id="cb2-19"&gt;&lt;a href="#cb2-19"&gt;&lt;/a&gt;    &lt;span class="op"&gt;,&lt;/span&gt; &lt;span class="dt"&gt;flags&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; &lt;span class="op"&gt;{&lt;/span&gt; &lt;span class="dt"&gt;info&lt;/span&gt;&lt;span class="op"&gt;:&lt;/span&gt; json &lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-20"&gt;&lt;a href="#cb2-20"&gt;&lt;/a&gt;    &lt;span class="op"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-21"&gt;&lt;a href="#cb2-21"&gt;&lt;/a&gt;  )&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-22"&gt;&lt;a href="#cb2-22"&gt;&lt;/a&gt;&lt;span class="op"&gt;}&lt;/span&gt;)&lt;span class="op"&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;少なくとも，うまく動作はしている．&lt;/p&gt;
&lt;p&gt;いつも通り，GitHub Pages に置いたので&lt;a href="https://matsubara0507.github.io/my-github-cards/"&gt;ここ&lt;/a&gt;から見れる． というか，さっきから表示している GitHub Card がこれで埋め込んだものだ．&lt;/p&gt;
&lt;h3 id="daily-cron-on-travisci"&gt;Daily cron on TravisCI&lt;/h3&gt;
&lt;p&gt;更新は TravisCI の Daily cron を使う． &lt;a href="https://hub.docker.com/r/matsubara0507/selfcat/"&gt;selfcat は Docker Image にした&lt;/a&gt;ので selfcat をビルドする必要はない． &lt;code&gt;docker run&lt;/code&gt; で JSON を生成し，差分があったら GitHub に push する．&lt;/p&gt;
&lt;p&gt;知らぬ間に，TravisCI の設定方法に &lt;code&gt;deploy&lt;/code&gt; という設定が増えていたんですね:&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;span id="cb3-1"&gt;&lt;a href="#cb3-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;# .travis.yml&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-2"&gt;&lt;a href="#cb3-2"&gt;&lt;/a&gt;&lt;span class="fu"&gt;language&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; generic&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-3"&gt;&lt;a href="#cb3-3"&gt;&lt;/a&gt;&lt;span class="fu"&gt;services&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-4"&gt;&lt;a href="#cb3-4"&gt;&lt;/a&gt;&lt;span class="at"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; docker&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-5"&gt;&lt;a href="#cb3-5"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-6"&gt;&lt;a href="#cb3-6"&gt;&lt;/a&gt;&lt;span class="fu"&gt;before_install&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-7"&gt;&lt;a href="#cb3-7"&gt;&lt;/a&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; docker pull matsubara0507/selfcat&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-8"&gt;&lt;a href="#cb3-8"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-9"&gt;&lt;a href="#cb3-9"&gt;&lt;/a&gt;&lt;span class="fu"&gt;jobs&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-10"&gt;&lt;a href="#cb3-10"&gt;&lt;/a&gt;&lt;span class="at"&gt;  &lt;/span&gt;&lt;span class="fu"&gt;include&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-11"&gt;&lt;a href="#cb3-11"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="fu"&gt;stage&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; exec selfcat&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-12"&gt;&lt;a href="#cb3-12"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;if&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; branch = master&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-13"&gt;&lt;a href="#cb3-13"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;script&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; docker run --rm -e GH_TOKEN -v `pwd`:/app matsubara0507/selfcat bin/bash -c &amp;#39;cd app &amp;amp;&amp;amp; selfcat --output=docs/static/info.json --compact .selfcat.yaml&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-14"&gt;&lt;a href="#cb3-14"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb3-15"&gt;&lt;a href="#cb3-15"&gt;&lt;/a&gt;&lt;span class="fu"&gt;deploy&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-16"&gt;&lt;a href="#cb3-16"&gt;&lt;/a&gt;&lt;span class="at"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="fu"&gt;provider&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; script&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-17"&gt;&lt;a href="#cb3-17"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;skip_cleanup&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="ch"&gt;true&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-18"&gt;&lt;a href="#cb3-18"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;script&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; bash .travis/deploy.bash&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-19"&gt;&lt;a href="#cb3-19"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;on&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb3-20"&gt;&lt;a href="#cb3-20"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;branch&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; master&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;deploy&lt;/code&gt; のところで読んでいるスクリプトは以下:&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode bash"&gt;&lt;code class="sourceCode bash"&gt;&lt;span id="cb4-1"&gt;&lt;a href="#cb4-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;#!/bin/bash&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-2"&gt;&lt;a href="#cb4-2"&gt;&lt;/a&gt;&lt;span class="kw"&gt;set&lt;/span&gt; &lt;span class="ex"&gt;-eux&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-3"&gt;&lt;a href="#cb4-3"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-4"&gt;&lt;a href="#cb4-4"&gt;&lt;/a&gt;&lt;span class="co"&gt;# setup ssh-agent and provide the GitHub deploy key&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-5"&gt;&lt;a href="#cb4-5"&gt;&lt;/a&gt;&lt;span class="bu"&gt;eval&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;&lt;/span&gt;&lt;span class="va"&gt;$(&lt;/span&gt;&lt;span class="fu"&gt;ssh-agent&lt;/span&gt; -s&lt;span class="va"&gt;)&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-6"&gt;&lt;a href="#cb4-6"&gt;&lt;/a&gt;&lt;span class="ex"&gt;openssl&lt;/span&gt; aes-256-cbc -K &lt;span class="va"&gt;$encrypted_3b94903f5871_key&lt;/span&gt; -iv &lt;span class="va"&gt;$encrypted_3b94903f5871_iv&lt;/span&gt; -in .travis/id_rsa.enc -out .travis/id_rsa -d&lt;/span&gt;
&lt;span id="cb4-7"&gt;&lt;a href="#cb4-7"&gt;&lt;/a&gt;&lt;span class="fu"&gt;chmod&lt;/span&gt; 600 .travis/id_rsa&lt;/span&gt;
&lt;span id="cb4-8"&gt;&lt;a href="#cb4-8"&gt;&lt;/a&gt;&lt;span class="fu"&gt;ssh-add&lt;/span&gt; .travis/id_rsa&lt;/span&gt;
&lt;span id="cb4-9"&gt;&lt;a href="#cb4-9"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-10"&gt;&lt;a href="#cb4-10"&gt;&lt;/a&gt;&lt;span class="co"&gt;# commit the assets in docs/ if changed, and push to GitHub using SSH&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-11"&gt;&lt;a href="#cb4-11"&gt;&lt;/a&gt;&lt;span class="fu"&gt;git&lt;/span&gt; config user.name &lt;span class="st"&gt;&amp;quot;&lt;/span&gt;&lt;span class="va"&gt;${GIT_NAME}&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-12"&gt;&lt;a href="#cb4-12"&gt;&lt;/a&gt;&lt;span class="fu"&gt;git&lt;/span&gt; config user.email &lt;span class="st"&gt;&amp;quot;&lt;/span&gt;&lt;span class="va"&gt;${GIT_EMAIL}&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-13"&gt;&lt;a href="#cb4-13"&gt;&lt;/a&gt;&lt;span class="fu"&gt;git&lt;/span&gt; remote set-url origin git@github.com:&lt;span class="va"&gt;${TRAVIS_REPO_SLUG}&lt;/span&gt;.git&lt;/span&gt;
&lt;span id="cb4-14"&gt;&lt;a href="#cb4-14"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-15"&gt;&lt;a href="#cb4-15"&gt;&lt;/a&gt;&lt;span class="fu"&gt;git&lt;/span&gt; checkout master&lt;/span&gt;
&lt;span id="cb4-16"&gt;&lt;a href="#cb4-16"&gt;&lt;/a&gt;&lt;span class="fu"&gt;git&lt;/span&gt; status&lt;/span&gt;
&lt;span id="cb4-17"&gt;&lt;a href="#cb4-17"&gt;&lt;/a&gt;&lt;span class="fu"&gt;git&lt;/span&gt; add docs&lt;/span&gt;
&lt;span id="cb4-18"&gt;&lt;a href="#cb4-18"&gt;&lt;/a&gt;&lt;span class="fu"&gt;git&lt;/span&gt; diff --staged --quiet &lt;span class="kw"&gt;||&lt;/span&gt; &lt;span class="fu"&gt;git&lt;/span&gt; commit -m &lt;span class="st"&gt;&amp;quot;[skip ci] Update docs by selfcat&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-19"&gt;&lt;a href="#cb4-19"&gt;&lt;/a&gt;&lt;span class="fu"&gt;git&lt;/span&gt; push origin master&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;GitHub の Personal Access Token を使うのが嫌なので deploy key を登録して，暗号化したものをリポジトリに置き，それを CI の中で複合して使うという方法をとっている． ググったら下記の記事が出てきてそのまま使わせてもらった:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@simon.legner/deploy-to-github-pages-using-travis-ci-and-deploy-keys-db84fed7a929"&gt;Deploy to GitHub Pages using Travis CI and deploy keys - Medium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;暗号化/複合の部分は TravisCI の &lt;a href="https://docs.travis-ci.com/user/encrypting-files/"&gt;Encrypting Files&lt;/a&gt; を使うことで簡単に行える． 記事で1点，スクリプトの呼び出しが &lt;code&gt;script: ./.travis-deploy.sh&lt;/code&gt; では呼べなかった． ググったら &lt;a href="https://github.com/travis-ci/travis-ci/issues/5538"&gt;Issue&lt;/a&gt; があり，&lt;code&gt;script: sh deploy.sh&lt;/code&gt; とすれば良いみたいだったのでそうしたらうまくいった．&lt;/p&gt;
&lt;h1 id="section-3"&gt;&lt;/h1&gt;
&lt;p&gt;ちなみに，&lt;a href="https://github.com/matsubara0507/my-github-cards"&gt;matsubara0507/my-github-cards&lt;/a&gt; をフォークして，selfcat と TravisCI の設定(&lt;code&gt;.travis/id_rsa.enc&lt;/code&gt; と環境変数など)を変えれば誰でも my-github-cards を使える． 気が向いたらドキュメントにしよ．&lt;/p&gt;
&lt;h2 id="todo"&gt;ToDo&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;入力してエンターキーで Build ボタン押したことにしたい&lt;/li&gt;
&lt;li&gt;Embed のところにクリップボードにコピーボタン欲しい&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;あと，特に Elm はやっつけで書いたので全体的にコードが汚い気がする．&lt;/p&gt;
&lt;h2 id="おしまい"&gt;おしまい&lt;/h2&gt;
&lt;p&gt;自分(self)の GitHub (Octocat)の情報を集めるから selfcat です(????)。&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/04/16/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_5_%E3%81%B5%E3%82%8A%E3%81%8B%E3%81%88%E3%82%8A</id><title type="text">技術書典 5 ふりかえり</title><updated>2019-04-16T00:44:52+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/04/16/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_5_%E3%81%B5%E3%82%8A%E3%81%8B%E3%81%88%E3%82%8A"/><summary type="html">え？6？いやいや 5 ですよ？ techbookfest.org 池袋 慣れ親しんだ秋葉原の地を飛び出して池袋にやってきました。 めちゃくちゃ広くてびっくりです。秋葉原通運会館からアキバスクエアにやってきたときも思いましたが、同じ感想がもう一度。 ガラス張りじゃなくなったので外の行列見てやばいやばい言えなくなったのはほんのちょっとだけ残念です。 か61 kakkun61 という名前でもろもろアカウントを取っているのですが、今回は卓番号が「か61」ということでまさに自分のための場所でした。覚えやすい！ そんな弊卓の様子です。 落 新刊落としました…… フィルムカメラに目覚めた結果土日をそれに使っ…</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-04-06-drone-1-0-in-gce.html</id><title type="text">Drone 1.0 を GCE 上に構築する</title><updated>2019-04-06T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-04-06-drone-1-0-in-gce.html"/><summary type="html">&lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;先月ついに &lt;a href="https://drone.io/"&gt;Drone CI&lt;/a&gt; のバージョン1.0がリリースされました(rc でも無い方)． まだドキュメントの方が追いついてないところもありますが，これで大手を振って本番導入できますね！&lt;/p&gt;
&lt;p&gt;で，別に本番導入したわけじゃ無いんですけど，とあるイベントで Drone CI を使いたかったので GCE 上に立てました． 本記事はそのメモ書きです．&lt;/p&gt;
&lt;h2 id="drone-ci"&gt;Drone CI&lt;/h2&gt;
&lt;p&gt;Jenkins のような OSS な CI/CD プラットフォーム． 使い勝手的には TravisCI や CircleCI に近く、&lt;code&gt;.drone.yml&lt;/code&gt; という設定ファイルにパイプラインを使って記述する:&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;span id="cb1-1"&gt;&lt;a href="#cb1-1"&gt;&lt;/a&gt;&lt;span class="fu"&gt;kind&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; pipeline&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-2"&gt;&lt;a href="#cb1-2"&gt;&lt;/a&gt;&lt;span class="fu"&gt;steps&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-3"&gt;&lt;a href="#cb1-3"&gt;&lt;/a&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="fu"&gt;name&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; test&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-4"&gt;&lt;a href="#cb1-4"&gt;&lt;/a&gt;&lt;span class="at"&gt;  &lt;/span&gt;&lt;span class="fu"&gt;image&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; node&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-5"&gt;&lt;a href="#cb1-5"&gt;&lt;/a&gt;&lt;span class="at"&gt;  &lt;/span&gt;&lt;span class="fu"&gt;commands&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-6"&gt;&lt;a href="#cb1-6"&gt;&lt;/a&gt;&lt;span class="at"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; npm install&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-7"&gt;&lt;a href="#cb1-7"&gt;&lt;/a&gt;&lt;span class="at"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; npm test&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-8"&gt;&lt;a href="#cb1-8"&gt;&lt;/a&gt;&lt;span class="fu"&gt;services&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-9"&gt;&lt;a href="#cb1-9"&gt;&lt;/a&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="fu"&gt;name&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; database&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-10"&gt;&lt;a href="#cb1-10"&gt;&lt;/a&gt;&lt;span class="at"&gt;  &lt;/span&gt;&lt;span class="fu"&gt;image&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; mysql&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-11"&gt;&lt;a href="#cb1-11"&gt;&lt;/a&gt;&lt;span class="at"&gt;  &lt;/span&gt;&lt;span class="fu"&gt;ports&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-12"&gt;&lt;a href="#cb1-12"&gt;&lt;/a&gt;&lt;span class="at"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="dv"&gt;3306&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Go言語製で，Docker との親和性がかなり高いという特徴を持っている． また，&lt;a href="https://cloud.drone.io/"&gt;Drone Cloud&lt;/a&gt; というクラウドサービスも提供されているので，とりあえず試したい人はぜひ．&lt;/p&gt;
&lt;h2 id="drone-on-gcp"&gt;Drone on GCP&lt;/h2&gt;
&lt;p&gt;Drone 自体は Docker で起動できる(&lt;a href="https://docs.drone.io/installation"&gt;公式ドキュメント&lt;/a&gt;)． docker-compose を次のように記述することで簡単に起動可能だ:&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;span id="cb2-1"&gt;&lt;a href="#cb2-1"&gt;&lt;/a&gt;&lt;span class="fu"&gt;version&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="st"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-2"&gt;&lt;a href="#cb2-2"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-3"&gt;&lt;a href="#cb2-3"&gt;&lt;/a&gt;&lt;span class="fu"&gt;services&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-4"&gt;&lt;a href="#cb2-4"&gt;&lt;/a&gt;&lt;span class="at"&gt;  &lt;/span&gt;&lt;span class="fu"&gt;drone&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-5"&gt;&lt;a href="#cb2-5"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;image&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; drone/drone:1&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-6"&gt;&lt;a href="#cb2-6"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;ports&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-7"&gt;&lt;a href="#cb2-7"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; 8000:80&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-8"&gt;&lt;a href="#cb2-8"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; 443:443&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-9"&gt;&lt;a href="#cb2-9"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;volumes&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-10"&gt;&lt;a href="#cb2-10"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; /var/run/docker.sock:/var/run/docker.sock&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-11"&gt;&lt;a href="#cb2-11"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; /var/lib/drone:/data&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-12"&gt;&lt;a href="#cb2-12"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;restart&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; always&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-13"&gt;&lt;a href="#cb2-13"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;environment&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-14"&gt;&lt;a href="#cb2-14"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; DRONE_GITHUB_SERVER=https://github.com&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-15"&gt;&lt;a href="#cb2-15"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; DRONE_GITHUB_CLIENT_ID=${DRONE_GITHUB_CLIENT}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-16"&gt;&lt;a href="#cb2-16"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; DRONE_GITHUB_CLIENT_SECRET=${DRONE_GITHUB_SECRET}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-17"&gt;&lt;a href="#cb2-17"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; DRONE_AGENTS_ENABLED=true&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-18"&gt;&lt;a href="#cb2-18"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; DRONE_RPC_SECRET=${DRONE_SECRET}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-19"&gt;&lt;a href="#cb2-19"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; DRONE_SERVER_HOST=${DRONE_HOST}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-20"&gt;&lt;a href="#cb2-20"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; DRONE_SERVER_PROTO=https&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-21"&gt;&lt;a href="#cb2-21"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; DRONE_TLS_AUTOCERT=true&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-22"&gt;&lt;a href="#cb2-22"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb2-23"&gt;&lt;a href="#cb2-23"&gt;&lt;/a&gt;&lt;span class="at"&gt;  &lt;/span&gt;&lt;span class="fu"&gt;agent&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-24"&gt;&lt;a href="#cb2-24"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;image&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; drone/agent:1&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-25"&gt;&lt;a href="#cb2-25"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;restart&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; always&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-26"&gt;&lt;a href="#cb2-26"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;depends_on&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-27"&gt;&lt;a href="#cb2-27"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; drone&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-28"&gt;&lt;a href="#cb2-28"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;volumes&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-29"&gt;&lt;a href="#cb2-29"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; /var/run/docker.sock:/var/run/docker.sock&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-30"&gt;&lt;a href="#cb2-30"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;environment&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-31"&gt;&lt;a href="#cb2-31"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; DRONE_RPC_SERVER=http://drone&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-32"&gt;&lt;a href="#cb2-32"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; DRONE_RPC_SECRET=${DRONE_SECRET}&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-33"&gt;&lt;a href="#cb2-33"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; DRONE_RUNNER_CAPACITY=2&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-34"&gt;&lt;a href="#cb2-34"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; DRONE_RUNNER_NAME=${HOSTNAME}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(&lt;a href="/posts/2019-01-05-docker-compose-up-drone-1-0.html"&gt;ローカルで試す話は前に書いた&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;今回はこれを GCE 上でやることにした(GKE を試そうとも思ったが，まだ時期尚早って感じだったのでやめた)．&lt;/p&gt;
&lt;h3 id="gcpでの準備"&gt;GCPでの準備&lt;/h3&gt;
&lt;p&gt;HTTPS 通信をやりたいのでドメインの取得をし，HTTP(S) LB と Managed SSL を使って簡単に証明書を発行することにした． この仕組みは下記の記事を参考にした:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/koshilife/items/a75a69d03e2524f33c8e"&gt;GCP managed SSL(β版)を利用したhttpsサーバ構築 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;β版だったためか，ところどころ違った気がするけど概ね記事の通りできた．&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;GCEインスタンスを立てる
&lt;ul&gt;
&lt;li&gt;スペックは &lt;code&gt;n1-standard-1（vCPU x 1、メモリ 3.75 GB）+ 10GB disk&lt;/code&gt; にした&lt;/li&gt;
&lt;li&gt;HTTPアクセスを許可しておく&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;インスタンスグループを作成&lt;/li&gt;
&lt;li&gt;HTTP(S) LB を作成
&lt;ul&gt;
&lt;li&gt;バックエンド: (2)のインスタンスグループを選んで他はデフォルト値&lt;/li&gt;
&lt;li&gt;ホストとパスのルール: 特になし&lt;/li&gt;
&lt;li&gt;フロントエンド: エフェラメルIPでHTTP/HTTPSの2つを作成&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;DNSのAレコードを作成
&lt;ul&gt;
&lt;li&gt;有効化されるのに長いと1時間ぐらいかかる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ドメインは Google Domain で取得したのだが，そっちの DNS 設定を切っておくのを忘れて有効化に失敗していた．&lt;/p&gt;
&lt;h3 id="drone-の準備と起動"&gt;Drone の準備と起動&lt;/h3&gt;
&lt;p&gt;上記手順の(1)で以下のプログラムをインストール:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker-compose&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nginx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;nginx の設定は雑に次のような感じ(&lt;a href="https://angristan.xyz/host-your-own-ci-cd-server-with-drone/"&gt;参考&lt;/a&gt;):&lt;/p&gt;
&lt;pre class="conf"&gt;&lt;code&gt;server {
  listen 80 default_server;
  listen [::]:80 default_server;
  server_name _;
  return 444;
}

server {
  listen 80;
  server_name [(4)で設定するドメイン];

  if ($http_x_forwarded_proto = &amp;#39;http&amp;#39;) {
    return 301 https://$server_name$request_uri;
  }

  location / {
    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_pass http://localhost:8000;
    proxy_redirect off;
    proxy_buffering off;
    chunked_transfer_encoding off;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これで (4) で設定したドメインの HTTPS 通信のみ許可するようになった． あとは適当なところで &lt;code&gt;docker-compose up -d&lt;/code&gt; とすれば良い．&lt;/p&gt;
&lt;p&gt;&lt;img src="/assets/drone-1-0-in-gce/my-drone-example.jpg"&gt;&lt;/img&gt;&lt;/p&gt;
&lt;h2 id="おまけ"&gt;おまけ&lt;/h2&gt;
&lt;h3 id="drone-起動時の環境変数"&gt;Drone 起動時の環境変数&lt;/h3&gt;
&lt;p&gt;このあたりのを適宜使った:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DRONE_USER_FILTER
&lt;ul&gt;
&lt;li&gt;認証後に閲覧できるユーザーを絞る&lt;/li&gt;
&lt;li&gt;ただし Public は誰でも見れる(はず)&lt;/li&gt;
&lt;li&gt;ちなみに Internal はここで指定したユーザー全員が見れる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;DRONE_USER_CREATE
&lt;ul&gt;
&lt;li&gt;Admin ユーザーみたいな感じ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;DRONE_LOGS_DEBUG,DRONE_LOGS_TRACE
&lt;ul&gt;
&lt;li&gt;この二つをオンにしておくと &lt;code&gt;docker logs&lt;/code&gt; でだいたいログを追える&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="drone-の情報"&gt;Drone の情報&lt;/h3&gt;
&lt;p&gt;冒頭で述べた通り，Drone の公式情報は綺麗にまとまってるとは言い難い． 基本は以下の公式ドキュメント:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.drone.io/"&gt;Drone Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;.drone.yml&lt;/code&gt; の書き方はここにまとまってるので Drone CI を使うってだけならここで概ね問題ないでしょう． API を使ったり，drone-cli を使ったり，コンテナ起動時の設定を調べたりは情報が足りない時がちょくちょくある． Drone は &lt;a href="https://github.com/search?q=org%3Adrone&amp;amp;type=Issues"&gt;GitHub Issue&lt;/a&gt; の他に &lt;a href="https://discourse.org/"&gt;Discourse&lt;/a&gt; というサービスを使っている:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://discourse.drone.io/"&gt;Drone&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体的なエラーなんかは StackOverflow よりここを検索した方が見つかる． またチャットサービスとして Gitter も用意しているので，そこに聞きに行ってもいいかもしれない:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gitter.im/drone/home"&gt;drone/home - Gitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;まぁあとは OSS なので直接コードを観に行けばだいたい仕様はわかる． 特に，API に関する情報は 0.8 以前の古いものしかなく，&lt;a href="https://github.com/matsubara0507/drone-haskell"&gt;Haskell の Drone クライアント&lt;/a&gt;を作るときは直接ソースコードを見ていた:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/drone/drone"&gt;drone/drone - GitHub&lt;/a&gt;: &lt;code&gt;handler/api&lt;/code&gt; とか見ると良い&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/drone/drone-go"&gt;drone/drone-go - GitHub&lt;/a&gt;: Drone API の Go クライアント&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="おしまい"&gt;おしまい&lt;/h1&gt;
  &lt;/div&gt;</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/04/01/185927</id><title type="text">楽園へ行きたい</title><updated>2019-04-01T19:01:12+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/04/01/185927"/><summary type="html">楽園へ行きたい。 森と平原に囲まれた、街のはずれの小屋に住みたい。 朝は、小鳥たちのさえずりと窓から射し込む陽の光で目覚めたい。 昼は、コーヒーと焼き菓子を用意して一服したい。 夜は、天の河の向こうに思いを馳せながら眠りたい。 月曜日は大学に行き、エルフの先生の下で言語学を学びたい。 火曜日は研究室にこもり、ドラゴンの教授と研究に没頭したい。 水、木曜日は道具鍛治と修繕の仕事をしたい。 金曜日は都に向かい、品を売って食材と情報を仕入れたい。 土曜日は酒場に集まり、仲間たちと杯を交わしたい。 日曜日は使い魔を連れ、公園をゆったり散歩したい。 春は、花々を眺めながら、渡り鳥たちにしばしの別れを告げ…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/03/30/131932</id><title type="text">dockerで古いバージョンのperlを使う</title><updated>2019-03-30T19:05:32+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/03/30/131932"/><summary type="html">Docker Hub に perlのイメージ が上がっていて便利なのだけど、残念ながら 5.24 までしかない。検索してみたけど他に良さげなイメージもなかった。 仕方がないので 自分でビルド をして上げておいた（自分で使う用）。幸い、以下のリポジトリにいい感じの Dockerfile が落ちてるので、これを落としてきて自前でビルドするだけで済んだ。 github.com 追記 5.14 と 5.16 はビルドできなかった。</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/03/30/131344</id><title type="text">LTSのubuntuを16.04から18.04へアップグレードした</title><updated>2019-03-30T13:13:44+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/03/30/131344"/><summary type="html">以下に書いてあるとおり。 wiki.ubuntu.com 基本的に sudo do-release-upgrade を叩いただけ。sshd の config を置き換えていいかみたいなことを聞かれたので、触った覚えがないので不安を覚えつつ置き換えた。後は、質問に答えながら延べで数時間放置していたら終わっていた。 たしかに新しくはなったが、何が変わったかわからないレベル。 emacs がなぜか無くなっていたようなので、 $ sudo apt install emacs25-nox した。今のとこそのくらい。</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/06/12/090000</id><title type="text">コマンドラインがさらに便利になるfillinコマンドを作りました！</title><updated>2019-03-22T00:59:05+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/06/12/090000"/><summary type="html">fillinというコマンドラインツールを作成しました。 コマンドの一部を変数化して、別の履歴に保存しておけるツールです。 ステージング環境と本番環境のように、同じコマンドで複数の環境を切り替えるのに便利です。 zshの本 (エッセンシャルソフトウェアガイドブック)作者: 広瀬雄二,A5出版社/メーカー: 技術評論社発売日: 2009/06/17メディア: 単行本（ソフトカバー）購入: 11人 クリック: 126回この商品を含むブログ (37件) を見る どうして作ったの コマンド履歴って便利ですよね。 私はよくコマンド履歴からコマンドを選んで実行しています。 シェルに付属しているデフォルトの履…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/03/21/172101</id><title type="text">特級シリアライズライブラリ、winery 1.0解禁</title><updated>2019-03-21T18:06:56+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/03/21/172101"/><summary type="html">fumieval.hatenablog.com あれから9ヶ月…wineryのバージョン1.0をついにリリースした。 前回までのあらすじ データの保存や通信に直列化は不可欠の概念である。 binaryなどの直列化ライブラリは、レコードのフィールド名などの情報が欠けており、構造が変わると互換性を持たせることができない。 一方、JSONやCBORなどのフォーマットで愚直にフィールド名などを残すと極めて冗長になり、時間・空間効率が悪い。 コード生成が前提のProtobufなどはHaskellの既存のデータ構造との相性がよくない。 そんな現状に殴り込みをかけたのがwineryだ。値を「スキーマ」と「デ…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2019/03/15/090000</id><title type="text">joのGo実装 gojo を作りました！</title><updated>2019-03-20T17:50:02+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2019/03/15/090000"/><summary type="html">joというJSONを組み立てるコマンドがあって、これは2016年からある便利なCLIツールなのですが、昨日急に思い立ってGo実装を作りました。 go get -u github.com/itchyny/gojo/cmd/gojo brewでもインストールできます。 brew install itchyny/tap/gojo 使い方はこんな感じ。 $ gojo foo=bar qux=quux {"foo":"bar","qux":"quux"} $ gojo -p foo=bar qux=quux { "foo": "bar", "qux": "quux" } $ gojo -a foo ba…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/03/14/159265</id><title type="text">円周率の16進数表現100億桁目を求めてみた！ ― 円周率の世界記録をどのように検証するか ―</title><updated>2019-03-15T16:17:18+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/03/14/159265"/><summary type="html">あなたは円周率を何桁言えますか。3.14159…という、あの数字です。 円周率の小数部分は無限に続き、循環することもありません。 古来より、数学者は円周率の値を様々な幾何学的な近似や公式を用いて計算してきました。 その桁数は計算機の発明により飛躍的に伸び、収束の速い公式の発見や効率の良いアルゴリズムの発明などによって加速してきました *1。 5年前、私がまだ学生だった頃、円周率1億桁の計算に挑んだことがありました。 私にとって高精度計算の初めての挑戦で、様々な試行錯誤で苦労したのをよく覚えています。 itchyny.hatenablog.com 2017年現在、円周率計算の世界記録は22兆桁で…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/03/15/123532</id><title type="text">minillaは便利</title><updated>2019-03-15T12:35:32+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/03/15/123532"/><summary type="html">songmu さんの WEB+DB の記事を読むのが良い。 gihyo.jp リリーステストで、 Hoge.pm requires 5.010 due to explicit requirement で死んだときは Perl version 指定が正しいか確認する。 // とか使ってると 5.8 系はサポートできないというか、流石に 5.8 系は平成半ばにしてすでに終わっているのではないか。 xt/minilla/spelling.t ......... skipped: no ~/.spellunker.en が出てたときは touch ~/.spellunker.en するとPODのスペル…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/03/15/114042</id><title type="text">CircleCIのsave_caheするPATHとdocker imageの相違</title><updated>2019-03-15T11:40:42+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/03/15/114042"/><summary type="html">.circleci/config.yml に以下のように書いておいたら、ある時からキャッシュが効かなくなってハマった。 version: 2 jobs: build: docker: - image: perl:5.28 steps: - checkout - restore_cache: key: cacheminil-v1 - run: name: Install Minilla command: | cpanm Minilla - save_cache: key: cacheminil-v1 paths: - "/usr/local/bin" - "/usr/local/lib/perl…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/03/02/161800</id><title type="text">mariadbのdokcer imageの10.2と10.3でmysql.dbが違う</title><updated>2019-03-02T16:18:00+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/03/02/161800"/><summary type="html">https://hub.docker.com/_/mariadb 10.2 の方では、 MYSQL_USER で test_ データベースを作れない。 mariadb:10.2 の mysql.db 。 MariaDB [mysql]&gt; SELECT Host, Db, User, Create_priv FROM db; +------+--------------+----------+-------------+ | Host | Db | User | Create_priv | +------+--------------+----------+-------------+ | % …</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2019/03/01/090000</id><title type="text">gore 0.4.0をリリースしました！</title><updated>2019-03-01T09:00:03+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2019/03/01/090000"/><summary type="html">Go言語のREPL、goreの0.4.0をリリースしました。 id:motemenさんに連絡をとって、goreのコミット権をいただきました。 最初はpull requestが溜まっていたので片付けて、細かいバグ修正などを行いました。 しばらく触っていると慣れてきたので、新機能も実装して入れました。 かなり便利になっているので、ぜひアップデートして (またはインストールして) お使いください。 go get -u github.com/motemen/gore/cmd/gore バグ修正 特定のケースで Evaluated but not used というエラーが出ることがあるのを修正しました …</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/02/26/Servant_%E3%81%A8_Relational_Record_%E3%81%A7%E3%82%A6%E3%82%A7%E3%83%96%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E9%96%8B%E7%99%BA</id><title type="text">Servant と Relational Record でウェブアプリケーション開発</title><updated>2019-02-27T15:29:35+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/02/26/Servant_%E3%81%A8_Relational_Record_%E3%81%A7%E3%82%A6%E3%82%A7%E3%83%96%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E9%96%8B%E7%99%BA"/><summary type="html">Servant とは Servant は型レベルプログラミングによって、ウェブアプリとしてのインターフェースと実装との差異を防ぐことのできるウェブアプリフレームワークです。 haskell-servant.readthedocs.io 日本語記事としては lotz さんのこちらが分かりやすいので、参考にしてください。 qiita.com Haskell Relational Record とは Haskell Relational Record は言語内 DSL によって SQL を生成するもので、正しくない SQL に相当するものは型エラーとなります。 khibino.github.io こ…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/01/05/201505</id><title type="text">WSL上でcircleci local executeをするための試行錯誤</title><updated>2019-02-27T08:23:02+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/01/05/201505"/><summary type="html">ハマったのでメモ。 大前提として、 WSL と Docker for Windows をうまく連携しておく必要がある。 以下のような手順。 qiita.com ただし、 Bash on WindowsでDockerを使えて便利になったけど相対パスを指定すると不具合が出る についてはもっと楽な解決法がある。 WSL 上に /etc/wsl.conf というファイルをおけば WSL 側のマウントポイントを変えられるので、これを Docker for Windows に合わせてしまえば良い。 Automatically Configuring WSL – Windows Command Line T…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/02/27/032421</id><title type="text">Docker Meetup Tokyo #28 で Scheduler のカスタマイズについて話してきました</title><updated>2019-02-27T03:24:21+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/02/27/032421"/><summary type="html">先日行われた Docker Meetup Tokyo #28で、Kubernetes Scheduler の挙動をカスタマイズする方法について発表してきました。 なお Scheduler のカスタマイズについては、つい最近 Kubernetes Meetup Tokyo #16 でも発表しています。ドキュメント類へのリンクも含めてまとめたものが以下の記事です。 ccvanishing.hateblo.jp 両方のスライドを見比べて頂ければ分かる通り、内容としてはオーバラップしている部分がかなりあります。 ただし、前回はあくまでも Scheduling Framework の解説であったのに対し…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/02/15/181806</id><title type="text">旅のチェックリスト</title><updated>2019-02-25T15:44:26+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/02/15/181806"/><summary type="html">筆者が旅に出る際に確認する項目をまとめた。 事前の準備 渡航ビザ: 必要な場合もあるので事前に確かめよう。 ESTA(アメリカの場合): どんな理由であれUSに入国する場合申請する必要がある。大抵すぐ承認されるが、遅くとも出発の72時間前に済ませるべきである。 宿: 好みに応じてホテルでもAirBnBなどで民泊を予約しても。後者はキッチンが用意されているところもある。 交通手段: 電車は大抵の場合当日で大丈夫だが、もちろん船舶や航空機の場合は予約が必須である。 冷蔵庫の整理: 日持ちしないものは消費してしまおう。 携帯するもの 財布: 財布は現金やカードを収納する。リスク回避の観点から財布は省…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/02/22/193916</id><title type="text">Kubernetes Meetup Tokyo #16 で Scheduling Framework について話してきました</title><updated>2019-02-22T19:39:16+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/02/22/193916"/><summary type="html">先日行われた Kubernetes Meetup Tokyo #16 で、現在 Scheduling SIG で進められているプロジェクト Scheduling Framework について発表してきました。 Kubernetes では、Pod をどの Node に配置するかを決める手続きをスケジューリングと呼びます。 古典的な Kubernetes の用途、すなわち通常の long-running なサーバ群の管理においては、Pod のスケジューリングは比較的シンプルな問題でした。すなわち、Node の障害時でも可用性が保てるように Pod を複数の Node に散らし、一度立ち上がった P…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/02/12/191002</id><title type="text">ある期間内に更新されたデータを素早く検索できるモデル</title><updated>2019-02-13T15:49:35+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/02/12/191002"/><summary type="html">特定の技術とは関係ない、誰でも思いつきそうな、でも便利なお話。 こんなケースを考えてみよう。 人気のトレーディングカードゲームAugur Unlimitedを扱うショップ「しらさぎ商店」では、1000種類にも及ぶカードの買い取り・販売をしている。記録のため、カードごとに日時、価格、在庫数などをまとめたレコードを毎日データベースに書き込んでいる。 新着・売り切れや、価格の変化などを、指定された期間について一覧で表示するようなWebページを作りたいとオーナーは考えた。しかし、ユーザーからの要求ごとに全データの差分を取るのは、あまり効率的な手段とはいえない。レアなカードでもない限り価格は一定であるこ…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/02/12/214858</id><title type="text">【朗報】健康になるために酒を辞める必要はなかった</title><updated>2019-02-12T21:48:58+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/02/12/214858"/><summary type="html">前回の健康診断で、高脂血症のため要治療というショッキングな結果が出た。どうせ医者に行けば禁酒しろと言われると思い、2018年は完全に酒を絶った。本当に一滴たりとも酒は飲んでいない。 そして一年後の健康診断の結果がこちら。 健康診断の結果 変わってないよ！ 禁酒しても健康にはならないという貴重な実験結果である。 辞めるべきだったのは酒や食物 1 ではなく人生だったようだ。病院へ行きます。 同様の理由で肉類を経って7年、毎朝納豆を摂るようにしている。平日の昼食を COMP に変えて1年。カフェインも秋頃から摂るのを止めた。↩</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/02/11/165919</id><title type="text">django.urlsのコードリーディング</title><updated>2019-02-11T16:59:19+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/02/11/165919"/><summary type="html">django ではURLのルーティングを django.urls パッケージで処理している。このパッケージのソースはなかなか読みにくいので、読むための手がかりを記しておく。 バージョンは2.1を仮定していることに注意1。 クラス階層 django.urls パッケージでは継承もインタフェースも使っていないダックタイピングの見本のようなコードになっており 2 、この点が読みにくくしている一番の要因である。しかも、歴史的な都合なのか、クラスの命名規則にも致命的なわかりにくさが存在している。まずは主要なクラスの構造を説明することで見通しを良くする。 リゾルバ いちばん重要な概念はリゾルバである。リゾ…</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-02-04-re-recommend-marp.html</id><title type="text">Re: Marp のすゝめ</title><updated>2019-02-04T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-02-04-re-recommend-marp.html"/><summary type="html">&lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;&lt;strong&gt;2019.4.6 Marp-core-0.6.0 での更新を反映した&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id="section"&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://yhatt.github.io/marp/"&gt;Marp&lt;/a&gt; というのは Markdown 記法で書けるスライド作成ツールです．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Markdown 記法で手軽に書ける&lt;/li&gt;
&lt;li&gt;見た目が綺麗&lt;/li&gt;
&lt;li&gt;画像の拡縮が可能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;などの特徴から個人的にかなり重宝しています． その辺りは昔&lt;a href="/posts/2016-12-14-recommend-marp.html"&gt;記事にしました&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;しかし，現在 Marp は今後メンテナンスをしないという明言をし，新しくゼロから &lt;a href="https://github.com/marp-team/marp"&gt;Marp Next&lt;/a&gt; というのを作っているようです． そのあたりの話は作者の記事にすこーしずつ書いてあります:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://yhatt.hatenablog.jp/entry/2017/02/27/markdown-it-incremental-dom_というプラグインを作ってます"&gt;markdown-it-incremental-dom というプラグインを作ってます - YHATT (わいはっと)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/yhatt/items/874d5bfa919c32728403"&gt;Puppeteer &amp;amp; Carlo を Markdown スライド作成 CLI ツール (Marp CLI) で活用する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;時折，リポジトリをチェックして更新がないかを見ていたのですが，いよいよ Web UI まで出来上がっているので，現状のを試しに使ってみることにしました，というメモです．&lt;/p&gt;
&lt;h1 id="section-1"&gt;&lt;/h1&gt;
&lt;p&gt;ちなみに，本記事での Marp Next のバージョンは &lt;code&gt;marp-cli-0.6&lt;/code&gt; ぐらいを想定しています(現在開発が活発なので既に古くなっているかも)．&lt;/p&gt;
&lt;h2 id="marp-next"&gt;Marp Next&lt;/h2&gt;
&lt;p&gt;新しい Marp の大きな目的は，よりメンテナブルな設計になることのようで，旧 Marp と異なり，機能ごとに個別の JS パッケージとなっている:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class="header"&gt;
&lt;th style="text-align: center;"&gt;リポジトリ&lt;/th&gt;
&lt;th&gt;備考&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="odd"&gt;
&lt;td style="text-align: center;"&gt;&lt;a href="https://github.com/marp-team/marp"&gt;marp-team/marp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Marp 全体を取りまとめるリポジトリ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td style="text-align: center;"&gt;&lt;a href="https://github.com/marp-team/marpit"&gt;Marpit&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Markdown からスライドの HTML へ変換する部分 (画像の拡縮などもココ)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td style="text-align: center;"&gt;&lt;a href="https://github.com/marp-team/marp-core"&gt;Marp Core&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Markdown 以外の拡張構文 (e.g. LaTeX, Emoji, Embed HTML)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td style="text-align: center;"&gt;&lt;a href="https://github.com/marp-team/marp-cli"&gt;Marp CLI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Marp の CLI ツール&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td style="text-align: center;"&gt;&lt;a href="https://github.com/marp-team/marp-web"&gt;Marp Web&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Marp の Web UI (まだベータっぽい)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td style="text-align: center;"&gt;Marp Desktop&lt;/td&gt;
&lt;td&gt;Marp Web を Electron でラップして Desktop アプリにしたいらしい (まだ無い)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;(どうでも良いですが，モノリポにした方良かったと思う… Marpit で更新があると全てのリポジトリで PR を出して更新する必要があるので…)&lt;/p&gt;
&lt;p&gt;ちなみに，&lt;a href="https://github.com/yhatt/marp/issues?q=is%3Aopen+is%3Aissue+label%3A%22Supports+in+Marp+Next%22"&gt;旧 Marp のリポジトリの Issue ラベルに &lt;code&gt;Marp Next&lt;/code&gt; や &lt;code&gt;Supports in Marp Next&lt;/code&gt; というのができている&lt;/a&gt;． 旧 Marp の Issue には，かなり要望っぽい Issue がたくさんあり，その中でも Marp Next では対応する予定のものには &lt;code&gt;Support in Marp Next&lt;/code&gt; を付けたようだ．&lt;/p&gt;
&lt;h3 id="旧-marp-との非互換な機能"&gt;旧 Marp との非互換な機能&lt;/h3&gt;
&lt;p&gt;これらは旧 Marp ユーザーしか意味ないが，適当に書き連ねていおく:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;code&gt;==AAA==&lt;/code&gt; というハイライト機能がない（辛い）&lt;/li&gt;
&lt;li&gt;打ち消し線記法 &lt;code&gt;~~AAA~~&lt;/code&gt; もない&lt;/li&gt;
&lt;li&gt;画像の拡縮ルール (Marpit)
&lt;ul&gt;
&lt;li&gt;より&lt;a href="https://marpit.marp.app/image-syntax"&gt;細かいルールができて&lt;/a&gt;書きやすくなった&lt;/li&gt;
&lt;li&gt;しかし前のは記法は非互換&lt;/li&gt;
&lt;li&gt;&lt;code&gt;center&lt;/code&gt; がないので中央寄せができない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;!-- *template: xxx --&amp;gt;&lt;/code&gt; のようなそのページだけ機能追加 (Marpit)
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;!-- _class: xxx --&amp;gt;&lt;/code&gt; のように先頭にアンダースコア &lt;code&gt;_&lt;/code&gt; を付けるスタイルになった&lt;/li&gt;
&lt;li&gt;ちなみに &lt;code&gt;&amp;lt;!-- $theme: xxx --&amp;gt;&lt;/code&gt; はあるっぽい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマの取り扱い (Marpit ??)
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#&lt;/code&gt; だけだと中央寄せなどになっていた機能がなくなった&lt;/li&gt;
&lt;li&gt;それらはテーマのイチ &lt;code&gt;class&lt;/code&gt; となっている&lt;/li&gt;
&lt;li&gt;前の &lt;code&gt;template&lt;/code&gt; も &lt;code&gt;class&lt;/code&gt; なので組み合わせれない&lt;/li&gt;
&lt;li&gt;明示的に指定できるようになったのは嬉しい&lt;/li&gt;
&lt;li&gt;class を複数設定できるようになった！ (&lt;a href="https://github.com/marp-team/marp-core/pull/69"&gt;marp-core-0.6.0~&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;KaTeX のバージョンアップ (Marp Core)
&lt;ul&gt;
&lt;li&gt;0.6.0 =&amp;gt; 0.10.0&lt;/li&gt;
&lt;li&gt;0.6.0 だと全然 LaTeX 記法をサポートしていないので&lt;a href="https://katex.org/docs/supported.html"&gt;助かる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;まぁ僕はフォークしてバージョンをあげてたけど&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;スライドのサイズ・縦横比 (Marpit)
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/marp-team/marpit/blob/9ab8e153e66db3a55e8edf9fec1356dd60ddf9e6/docs/theme-css.md#slide-size"&gt;テーマごとになったぽい&lt;/a&gt;？&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marpit.marp.app/directives?id=tweak-theme-style"&gt;&lt;code&gt;style&lt;/code&gt;&lt;/a&gt; で上書きすると変な余白ができる&lt;/li&gt;
&lt;li&gt;どっちにせよ前の &lt;code&gt;&amp;lt;!-- size: 4:3 --&amp;gt;&lt;/code&gt; みたいなのはできないっぽい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ちなみに，コードが全部 CoffeScript から TypeScript になってた．&lt;/p&gt;
&lt;h2 id="cli-を試す"&gt;CLI を試す&lt;/h2&gt;
&lt;p&gt;リッチすぎてビビる&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;README の通りで動いた (Mac, npx)
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;npx @marp-team/marp-cli slide.md&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hub.docker.com/r/marpteam/marp-cli/"&gt;Docker もサポートされてる&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;ただし一部機能に制限があるっぽい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Markdown から HTML を生成する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--pdf&lt;/code&gt; オプションで PDF を生成する
&lt;ul&gt;
&lt;li&gt;ただし &lt;strong&gt;&lt;a href="https://github.com/marp-team/marp-cli/pull/10"&gt;セキュリティの関係&lt;/a&gt;でデフォルトではローカルファイルの画像などを埋め込めない&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;そのためローカル画像を使うには &lt;code&gt;--allow-local-files&lt;/code&gt; をつける&lt;/li&gt;
&lt;li&gt;日本語フォントも変になっている気がする&lt;/li&gt;
&lt;li&gt;日本語検索もダメっぽい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--watch&lt;/code&gt; オプションで Markdown の変更を検知し再生成する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--server&lt;/code&gt; オプションで &lt;code&gt;localhost:8080&lt;/code&gt; で閲覧やPDFの生成ができる (watch もされます)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--preview&lt;/code&gt; でプレビューモード
&lt;ul&gt;
&lt;li&gt;待望の！！&lt;/li&gt;
&lt;li&gt;ブラウザの全画面モードを使ってるみたい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--theme&lt;/code&gt; でカスタムテーマを設定可能 (CSS)&lt;/li&gt;
&lt;li&gt;CLI のオプションを使わずに&lt;a href="https://github.com/marp-team/marp-cli#configuration-file"&gt;設定ファイルでも設定可能&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;package.json&lt;/code&gt; &lt;code&gt;.marprc.yml&lt;/code&gt; &lt;code&gt;marp.config.js&lt;/code&gt; のどれでも&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="cli-netlify-を試す"&gt;CLI + Netlify を試す&lt;/h2&gt;
&lt;p&gt;試した:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matsubara0507/pub-slides"&gt;matsubara0507/pub-slides - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://matsubara0507-slides.netlify.com/"&gt;&lt;img src="/assets/re-recommend-marp/pub-slides-with-marp.jpg" alt="image.png"&gt;&lt;/img&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;試し方: Marp の作者の&lt;a href="https://github.com/yhatt/marp-cli-example"&gt;リポジトリ&lt;/a&gt;の &lt;code&gt;Deploy to netlify&lt;/code&gt; をクリックするだけ．&lt;/p&gt;
&lt;p&gt;この方法の場合，リポジトリの &lt;code&gt;PITCHME.md&lt;/code&gt; を &lt;code&gt;index.html&lt;/code&gt; に変換する． marp-cli の設定は &lt;code&gt;package.yml&lt;/code&gt; に書いてある． &lt;a href="https://github.com/marp-team/marp-cli#options"&gt;設定方法&lt;/a&gt;はこれを参照．&lt;/p&gt;
&lt;p&gt;僕はできれば，複数のスライドを一つのリポジトリに置きたかった． ので，僕のリポジトリでは:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;slides&lt;/code&gt; 以下の &lt;code&gt;*.md&lt;/code&gt; を全部変換
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;index.md&lt;/code&gt; が &lt;code&gt;index.html&lt;/code&gt; のスライドになる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;後述する自作テーマをサブモジュールで設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;slides/assets&lt;/code&gt; にある画像を &lt;code&gt;public&lt;/code&gt; にコピーしてる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;のように少しだけ設定を書き換えた．&lt;/p&gt;
&lt;h2 id="web-ui-を試す"&gt;Web UI を試す&lt;/h2&gt;
&lt;p&gt;すでに&lt;a href="https://web.marp.app/"&gt;ここ&lt;/a&gt;から試せる． 手元で試すなら:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/marp-team/marp-web.git
cd marp-web
yarn install
yarn start&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;でできた．&lt;/p&gt;
&lt;p&gt;&lt;img src="/assets/re-recommend-marp/editing_marp_next.jpg"&gt;&lt;/img&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ファイルの読み込みや保存が可能&lt;/li&gt;
&lt;li&gt;プレゼンテーションモードは(まだ)なかった&lt;/li&gt;
&lt;li&gt;PDFのエクスポートはブラウザの印刷機能を使うようだった&lt;/li&gt;
&lt;li&gt;カスタムテーマの設定などはまだできない？？&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="テーマを移植する"&gt;テーマを移植する&lt;/h2&gt;
&lt;p&gt;オリジナルテーマを作ってたので Marp Next にも移植した:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;olive&lt;/li&gt;
&lt;li&gt;colors&lt;/li&gt;
&lt;li&gt;haskell&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://github.com/matsubara0507/marp-themes"&gt;marp-themes&lt;/a&gt; というリポジトリを作り，そこに置いてある． やったことは:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/marp-team/marp-core/blob/26f2402d443d26af387adb0ee86cafa1149beb34/themes/gaia.scss"&gt;gaia の scss&lt;/a&gt; を持ってきて主に色を変更
&lt;ul&gt;
&lt;li&gt;カスタムテーマとして指定できるのは CSS だけなので &lt;code&gt;scss&lt;/code&gt; コマンドで手動変換する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;画像の中央寄せをできるようにした
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;# ![](path/to/image.jpg)&lt;/code&gt; とすると中央寄せになるようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;h1&lt;/code&gt; から &lt;code&gt;h6&lt;/code&gt; のどれでも良いです&lt;/li&gt;
&lt;li&gt;ただし，雑に &lt;code&gt;img&lt;/code&gt; タグに適用してるので emoji を含ませるとずれる…&lt;/li&gt;
&lt;li&gt;marpit に修正入れてもらった方が良いかな&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lead&lt;/code&gt; + &lt;code&gt;invert&lt;/code&gt; などの class を作っておいた
&lt;ul&gt;
&lt;li&gt;scss で書いてるので &lt;code&gt;lead&lt;/code&gt; を適当に mixi-in にして include するだけ&lt;/li&gt;
&lt;li&gt;これもできれば &lt;code&gt;class&lt;/code&gt; の組み合わせができるようになって欲しい&lt;/li&gt;
&lt;li&gt;marp-core-0.6.0 から class を複数設定できるようになったので、これはいらない ;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="olive"&gt;Olive&lt;/h3&gt;
&lt;iframe src="//www.slideshare.net/slideshow/embed_code/key/797Uraln5Fo9gD" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen&gt;
&lt;/iframe&gt;
&lt;h3 id="colors"&gt;Colors&lt;/h3&gt;
&lt;iframe src="//www.slideshare.net/slideshow/embed_code/key/2kOvCIcUpOzKRg" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen&gt;
&lt;/iframe&gt;
&lt;h3 id="haskell"&gt;Haskell&lt;/h3&gt;
&lt;iframe src="//www.slideshare.net/slideshow/embed_code/key/kJqmkk54SJnaky" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen&gt;
&lt;/iframe&gt;
&lt;h2 id="おしまい"&gt;おしまい&lt;/h2&gt;
&lt;p&gt;もう既に十分使える状態になっていました． すごい！&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/01/30/Haskell_Ctrl-C_%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D</id><title type="text">Haskell Windows Ctrl-C 動作確認</title><updated>2019-01-30T23:53:07+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/01/30/Haskell_Ctrl-C_%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D"/><summary type="html">コード コードは前回記事と同じです（再掲）。 Git リポジトリーはこちら。 import Control.Concurrent import Control.Monad import System.Exit import System.IO import System.Win32.Console.CtrlHandler main :: IO () main = do tid &lt;- myThreadId let handler event = do if event == cTRL_C_EVENT then do putStrLn "goodbye!" killThread tid pure …</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/01/26/101913</id><title type="text">今日は YAPC::Tokyo 2019 の日です</title><updated>2019-01-26T18:59:20+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/01/26/101913"/><summary type="html">YAPC::Tokyo 2019 に来ましたので、自分用のメモを残します。 オープニング / @magnolia_k_ さん 拍手の練習 普段は 吉祥寺.pm してます Hokkaido, Kansai, Fkuoka, Okinawa と回ってきた Tokyo に戻ってきた 「報恩謝徳」 恩送り：誰かから受けた恩を他の人に送ること 報い方は人それぞれ 自由なイベント トーク、交流、出会い、もくもく ランチセッション、懇親会 会場の空気を感じるのが大事 空気感を持ち帰って下さい ランチセッションは 150 名まで 聞くだけもO.K. 電源は3Fオープンスペースを wi-fi はフライヤーを見て…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/01/25/185945</id><title type="text">今日は YAPC::Tokyo 2019 前夜祭 の日です</title><updated>2019-01-25T20:52:09+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/01/25/185945"/><summary type="html">YAPC::Tokyo 2019 前夜祭 LTソン presented by 吉祥寺.pm に参加予定ですので、自分用のメモを残します。 吉祥寺.pm 提供です トーク4本、LT6本 懇親会参加率が高い 4年続いている #yapcjapan と #kichijojipm 飛び入り歓迎 技術イベントスポンサーやっていこう / micchie さん なぜ？ → 応援したい Perlは20年前に書いていて、今はgo好き イベントのことを知る ターゲット層、来場者数は調べたかった 年間予算の確保 イベントの費用は毎回違う Twitter公式アカウント、代表アカウントでキャッチ 会社のロゴを用意 配布物…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/01/25/Haskell_%E3%81%A7_Ctrl-C_%E3%82%92%E5%88%B6%E5%BE%A1%E3%81%99%E3%82%8B%EF%BC%88Windows%EF%BC%89</id><title type="text">Haskell で Ctrl-C を制御する（Windows）</title><updated>2019-01-25T11:26:15+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/01/25/Haskell_%E3%81%A7_Ctrl-C_%E3%82%92%E5%88%B6%E5%BE%A1%E3%81%99%E3%82%8B%EF%BC%88Windows%EF%BC%89"/><summary type="html">Ctrl-C 等の割り込みの扱い方です。 tl;dr System.Win32.Console.CtrlHandler を使います。 Ctrl-C が押されたらクロージングの処理を伴って終了するプログラムを書いてみます。 import Control.Concurrent import Control.Monad import System.Exit import System.IO import System.Win32.Console.CtrlHandler main :: IO () main = do tid &lt;- myThreadId let handler event = do i…</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-01-20-create-drone-git-with-ssh.html</id><title type="text">Drone Plugin を作ってみた: git-with-ssh</title><updated>2019-01-20T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-01-20-create-drone-git-with-ssh.html"/><summary type="html">&lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;最近 &lt;a href="https://drone.io"&gt;Drone&lt;/a&gt; という CI プラットフォームを試しています． Drone は Plugin という形で拡張機能を提供するので Plugin を自作してみた，という話です．&lt;/p&gt;
&lt;h2 id="作ったもの"&gt;作ったもの&lt;/h2&gt;
&lt;p&gt;表題の通り，git-with-ssh という Plugin を作った:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matsubara0507/drone-git-with-ssh"&gt;matsubara0507/drone-git-with-ssh - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この Plugin は SSH による git コマンドの利用を可能にする． 例えば，Drone で GitHub へのプッシュをしたいとき，パーソナル API トークンを使うのではなく Deploy Key を使いたい場合は次のように書くと良い:&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;span id="cb1-1"&gt;&lt;a href="#cb1-1"&gt;&lt;/a&gt;&lt;span class="fu"&gt;steps&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-2"&gt;&lt;a href="#cb1-2"&gt;&lt;/a&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="fu"&gt;name&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; clone gh-pages&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-3"&gt;&lt;a href="#cb1-3"&gt;&lt;/a&gt;&lt;span class="at"&gt;  &lt;/span&gt;&lt;span class="fu"&gt;image&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; docker:git&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-4"&gt;&lt;a href="#cb1-4"&gt;&lt;/a&gt;&lt;span class="at"&gt;  &lt;/span&gt;&lt;span class="fu"&gt;environment&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-5"&gt;&lt;a href="#cb1-5"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;SSH_KEY&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-6"&gt;&lt;a href="#cb1-6"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;from_secret&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; deploy_key&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-7"&gt;&lt;a href="#cb1-7"&gt;&lt;/a&gt;&lt;span class="at"&gt;  &lt;/span&gt;&lt;span class="fu"&gt;commands&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-8"&gt;&lt;a href="#cb1-8"&gt;&lt;/a&gt;&lt;span class="at"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; mkdir /root/.ssh &amp;amp;&amp;amp; echo &amp;quot;$SSH_KEY&amp;quot; &amp;gt; /root/.ssh/id_rsa &amp;amp;&amp;amp; chmod 0600 /root/.ssh/id_rsa&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-9"&gt;&lt;a href="#cb1-9"&gt;&lt;/a&gt;&lt;span class="at"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; echo -e &amp;quot;Host github.com\n\tStrictHostKeyChecking no\n&amp;quot; &amp;gt; /root/.ssh/config&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb1-10"&gt;&lt;a href="#cb1-10"&gt;&lt;/a&gt;&lt;span class="at"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; git clone -b gh-pages git@github.com:haskell-jp/antenna.git temp&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この方法は &lt;a href="https://github.com/drone/drone/issues/1891#issuecomment-269629929"&gt;Issue で作者本人が提案している&lt;/a&gt;ため，おそらく推奨されている方法なのだろう． 二行追加するだけだから特別な機能は提供しない，と述べてるので CircleCI のような Deploy key を追加する機能は実装されないだろう(少なくとも当分は)．&lt;/p&gt;
&lt;p&gt;しかし，実際に使い始めてボイラーテンプレート化してしまったので，せっかくだからこれを Plugin にしてみようと考えた． 結果として，自作した Plugin を使うと次のようにかける:&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;span id="cb2-1"&gt;&lt;a href="#cb2-1"&gt;&lt;/a&gt;&lt;span class="fu"&gt;steps&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-2"&gt;&lt;a href="#cb2-2"&gt;&lt;/a&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="fu"&gt;name&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; clone gh-pages&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-3"&gt;&lt;a href="#cb2-3"&gt;&lt;/a&gt;&lt;span class="at"&gt;  &lt;/span&gt;&lt;span class="fu"&gt;image&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; matsubara0507/git-with-ssh&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-4"&gt;&lt;a href="#cb2-4"&gt;&lt;/a&gt;&lt;span class="at"&gt;  &lt;/span&gt;&lt;span class="fu"&gt;settings&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-5"&gt;&lt;a href="#cb2-5"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;ssh_private_key&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-6"&gt;&lt;a href="#cb2-6"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;from_secret&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; deploy_key&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-7"&gt;&lt;a href="#cb2-7"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;ssh_hosts&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-8"&gt;&lt;a href="#cb2-8"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; github.com&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-9"&gt;&lt;a href="#cb2-9"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;commands&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb2-10"&gt;&lt;a href="#cb2-10"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; git clone -b gh-pages git@github.com:haskell-jp/antenna.git temp&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;行数は大してかわらないけど，なんか綺麗になったでしょ？(笑)&lt;/p&gt;
&lt;h2 id="作る"&gt;作る&lt;/h2&gt;
&lt;p&gt;だいたい&lt;a href="https://docs.drone.io/plugins"&gt;公式ドキュメント&lt;/a&gt;と，&lt;a href="https://github.com/drone-plugins"&gt;drone-plugin 組織アカウント&lt;/a&gt;にある公式のリポジトリのコードとにらめっこすればなんとかなった．&lt;/p&gt;
&lt;h3 id="drone-plugin"&gt;Drone Plugin&lt;/h3&gt;
&lt;p&gt;Drone Plugin の中身はただの Docker イメージだ． 仕組みは簡単で，単純に ENTRYPOINT を設定し，&lt;code&gt;.drone.yml&lt;/code&gt; の &lt;code&gt;settings&lt;/code&gt; 以下の値を &lt;code&gt;PLUGIN_&lt;/code&gt; というプレフィックスをつけて環境変数としておくだけだ． 例えば上記の &lt;code&gt;git-with-ssh&lt;/code&gt; の例だと:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PLUGIN_SSH_PRIVATE_KEY
PLUGIN_SSH_HOSTS
PLUGIN_COMMANDS&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;という環境変数にそれぞれの値が代入される． なのであとは ENTRYPOINT を設定する Dockerfile を定義すれば良い． 公式ドキュメントにはシェルスクリプトと Go 言語で作る場合の方法が載っている． が，別に Docker の ENTRYPOINT として実行できればなんでも良いので Haskell でも Ruby でも作れるだろう．&lt;/p&gt;
&lt;p&gt;今回は本家のを参考にするために Go 言語で作った．&lt;/p&gt;
&lt;h3 id="main.go-と-plugin.go"&gt;main.go と plugin.go&lt;/h3&gt;
&lt;p&gt;Go で作る場合，main.go と plugin.go に分けるのがデファクトスタンダートみたいだ． main.go には ENTRYPOINT に設定する CLI アプリのインターフェースを記述し，plugin.go には処理のロジックを記述するようだ． ざっくりと雰囲気だけ書くと:&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode go"&gt;&lt;code class="sourceCode go"&gt;&lt;span id="cb4-1"&gt;&lt;a href="#cb4-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;// main.go&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-2"&gt;&lt;a href="#cb4-2"&gt;&lt;/a&gt;&lt;span class="kw"&gt;package&lt;/span&gt; main&lt;/span&gt;
&lt;span id="cb4-3"&gt;&lt;a href="#cb4-3"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-4"&gt;&lt;a href="#cb4-4"&gt;&lt;/a&gt;&lt;span class="kw"&gt;import&lt;/span&gt; (&lt;/span&gt;
&lt;span id="cb4-5"&gt;&lt;a href="#cb4-5"&gt;&lt;/a&gt;  &lt;span class="st"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-6"&gt;&lt;a href="#cb4-6"&gt;&lt;/a&gt;  &lt;span class="st"&gt;&amp;quot;os&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-7"&gt;&lt;a href="#cb4-7"&gt;&lt;/a&gt;  &lt;span class="st"&gt;&amp;quot;strings&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-8"&gt;&lt;a href="#cb4-8"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-9"&gt;&lt;a href="#cb4-9"&gt;&lt;/a&gt;  &lt;span class="st"&gt;&amp;quot;github.com/joho/godotenv&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-10"&gt;&lt;a href="#cb4-10"&gt;&lt;/a&gt;  log &lt;span class="st"&gt;&amp;quot;github.com/sirupsen/logrus&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-11"&gt;&lt;a href="#cb4-11"&gt;&lt;/a&gt;  &lt;span class="st"&gt;&amp;quot;github.com/urfave/cli&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-12"&gt;&lt;a href="#cb4-12"&gt;&lt;/a&gt;)&lt;/span&gt;
&lt;span id="cb4-13"&gt;&lt;a href="#cb4-13"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-14"&gt;&lt;a href="#cb4-14"&gt;&lt;/a&gt;&lt;span class="kw"&gt;var&lt;/span&gt; build = &lt;span class="st"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-15"&gt;&lt;a href="#cb4-15"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-16"&gt;&lt;a href="#cb4-16"&gt;&lt;/a&gt;&lt;span class="kw"&gt;func&lt;/span&gt; main() {&lt;/span&gt;
&lt;span id="cb4-17"&gt;&lt;a href="#cb4-17"&gt;&lt;/a&gt;  app := cli.NewApp()&lt;/span&gt;
&lt;span id="cb4-18"&gt;&lt;a href="#cb4-18"&gt;&lt;/a&gt;  app.Name = &lt;span class="st"&gt;&amp;quot;git-with-ssh plugin&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-19"&gt;&lt;a href="#cb4-19"&gt;&lt;/a&gt;  app.Usage = &lt;span class="st"&gt;&amp;quot;git-with-ssh plugin&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-20"&gt;&lt;a href="#cb4-20"&gt;&lt;/a&gt;  app.Action = run&lt;/span&gt;
&lt;span id="cb4-21"&gt;&lt;a href="#cb4-21"&gt;&lt;/a&gt;  app.Version = fmt.Sprintf(&lt;span class="st"&gt;&amp;quot;1.0.0+%s&amp;quot;&lt;/span&gt;, build)&lt;/span&gt;
&lt;span id="cb4-22"&gt;&lt;a href="#cb4-22"&gt;&lt;/a&gt;  app.Flags = []cli.Flag{&lt;/span&gt;
&lt;span id="cb4-23"&gt;&lt;a href="#cb4-23"&gt;&lt;/a&gt;    cli.StringFlag{&lt;/span&gt;
&lt;span id="cb4-24"&gt;&lt;a href="#cb4-24"&gt;&lt;/a&gt;      Name:   &lt;span class="st"&gt;&amp;quot;ssh_private_key&amp;quot;&lt;/span&gt;,&lt;/span&gt;
&lt;span id="cb4-25"&gt;&lt;a href="#cb4-25"&gt;&lt;/a&gt;      Usage:  &lt;span class="st"&gt;&amp;quot;SSH private key for git&amp;quot;&lt;/span&gt;,&lt;/span&gt;
&lt;span id="cb4-26"&gt;&lt;a href="#cb4-26"&gt;&lt;/a&gt;      EnvVar: &lt;span class="st"&gt;&amp;quot;PLUGIN_SSH_PRIVATE_KEY&amp;quot;&lt;/span&gt;,&lt;/span&gt;
&lt;span id="cb4-27"&gt;&lt;a href="#cb4-27"&gt;&lt;/a&gt;    },&lt;/span&gt;
&lt;span id="cb4-28"&gt;&lt;a href="#cb4-28"&gt;&lt;/a&gt;    ...&lt;/span&gt;
&lt;span id="cb4-29"&gt;&lt;a href="#cb4-29"&gt;&lt;/a&gt;    &lt;span class="co"&gt;// ここに CLI の引数を定義&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-30"&gt;&lt;a href="#cb4-30"&gt;&lt;/a&gt;  }&lt;/span&gt;
&lt;span id="cb4-31"&gt;&lt;a href="#cb4-31"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-32"&gt;&lt;a href="#cb4-32"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;if&lt;/span&gt; err := app.Run(os.Args); err != &lt;span class="ot"&gt;nil&lt;/span&gt; {&lt;/span&gt;
&lt;span id="cb4-33"&gt;&lt;a href="#cb4-33"&gt;&lt;/a&gt;    log.Fatal(err)&lt;/span&gt;
&lt;span id="cb4-34"&gt;&lt;a href="#cb4-34"&gt;&lt;/a&gt;  }&lt;/span&gt;
&lt;span id="cb4-35"&gt;&lt;a href="#cb4-35"&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id="cb4-36"&gt;&lt;a href="#cb4-36"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb4-37"&gt;&lt;a href="#cb4-37"&gt;&lt;/a&gt;&lt;span class="kw"&gt;func&lt;/span&gt; run(c *cli.Context) &lt;span class="dt"&gt;error&lt;/span&gt; {&lt;/span&gt;
&lt;span id="cb4-38"&gt;&lt;a href="#cb4-38"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;if&lt;/span&gt; c.String(&lt;span class="st"&gt;&amp;quot;env-file&amp;quot;&lt;/span&gt;) != &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt; {&lt;/span&gt;
&lt;span id="cb4-39"&gt;&lt;a href="#cb4-39"&gt;&lt;/a&gt;    _ = godotenv.Load(c.String(&lt;span class="st"&gt;&amp;quot;env-file&amp;quot;&lt;/span&gt;))&lt;/span&gt;
&lt;span id="cb4-40"&gt;&lt;a href="#cb4-40"&gt;&lt;/a&gt;  }&lt;/span&gt;
&lt;span id="cb4-41"&gt;&lt;a href="#cb4-41"&gt;&lt;/a&gt;  plugin := Plugin{&lt;/span&gt;
&lt;span id="cb4-42"&gt;&lt;a href="#cb4-42"&gt;&lt;/a&gt;    SSHKey: c.String(&lt;span class="st"&gt;&amp;quot;ssh_private_key&amp;quot;&lt;/span&gt;),&lt;/span&gt;
&lt;span id="cb4-43"&gt;&lt;a href="#cb4-43"&gt;&lt;/a&gt;    ...&lt;/span&gt;
&lt;span id="cb4-44"&gt;&lt;a href="#cb4-44"&gt;&lt;/a&gt;    &lt;span class="co"&gt;// ここで CLI の引数からロジックへ橋渡し&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-45"&gt;&lt;a href="#cb4-45"&gt;&lt;/a&gt;    &lt;span class="co"&gt;// Plugin 型とかは plugin.go に書いてある&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb4-46"&gt;&lt;a href="#cb4-46"&gt;&lt;/a&gt;  }&lt;/span&gt;
&lt;span id="cb4-47"&gt;&lt;a href="#cb4-47"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;return&lt;/span&gt; plugin.Exec()&lt;/span&gt;
&lt;span id="cb4-48"&gt;&lt;a href="#cb4-48"&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;CLI には &lt;a href="https://github.com/urfave/cli"&gt;&lt;code&gt;urfave/cli&lt;/code&gt;&lt;/a&gt; を使っている． 理由は特に知らない． &lt;code&gt;go build&lt;/code&gt; することで実行ファイルが生成される．&lt;/p&gt;
&lt;h3 id="脱線-vs.-改行"&gt;脱線: vs. 改行&lt;/h3&gt;
&lt;p&gt;少し Drone Plugin とは本質的に関係ない話． &lt;code&gt;plugin.go&lt;/code&gt; では &lt;code&gt;id_rsa&lt;/code&gt; を次のように生成している:&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode go"&gt;&lt;code class="sourceCode go"&gt;&lt;span id="cb5-1"&gt;&lt;a href="#cb5-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;// plugin.go&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-2"&gt;&lt;a href="#cb5-2"&gt;&lt;/a&gt;...&lt;/span&gt;
&lt;span id="cb5-3"&gt;&lt;a href="#cb5-3"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb5-4"&gt;&lt;a href="#cb5-4"&gt;&lt;/a&gt;&lt;span class="kw"&gt;type&lt;/span&gt; Plugin &lt;span class="kw"&gt;struct&lt;/span&gt; {&lt;/span&gt;
&lt;span id="cb5-5"&gt;&lt;a href="#cb5-5"&gt;&lt;/a&gt;  Home     &lt;span class="dt"&gt;string&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-6"&gt;&lt;a href="#cb5-6"&gt;&lt;/a&gt;  SSHKey   &lt;span class="dt"&gt;string&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-7"&gt;&lt;a href="#cb5-7"&gt;&lt;/a&gt;  Hosts    []&lt;span class="dt"&gt;string&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-8"&gt;&lt;a href="#cb5-8"&gt;&lt;/a&gt;  Commands []&lt;span class="dt"&gt;string&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb5-9"&gt;&lt;a href="#cb5-9"&gt;&lt;/a&gt;}&lt;/span&gt;
&lt;span id="cb5-10"&gt;&lt;a href="#cb5-10"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb5-11"&gt;&lt;a href="#cb5-11"&gt;&lt;/a&gt;&lt;span class="kw"&gt;func&lt;/span&gt; (p Plugin) Exec() &lt;span class="dt"&gt;error&lt;/span&gt; {&lt;/span&gt;
&lt;span id="cb5-12"&gt;&lt;a href="#cb5-12"&gt;&lt;/a&gt;  sshDir := fmt.Sprintf(&lt;span class="st"&gt;&amp;quot;%s/.ssh&amp;quot;&lt;/span&gt;, p.Home)&lt;/span&gt;
&lt;span id="cb5-13"&gt;&lt;a href="#cb5-13"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;if&lt;/span&gt; err := os.MkdirAll(sshDir, &lt;span class="dv"&gt;0700&lt;/span&gt;); err != &lt;span class="ot"&gt;nil&lt;/span&gt; {&lt;/span&gt;
&lt;span id="cb5-14"&gt;&lt;a href="#cb5-14"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;return&lt;/span&gt; errors.Wrapf(err, &lt;span class="st"&gt;&amp;quot;Exec cmd: mkdir -p %s&amp;quot;&lt;/span&gt;, sshDir)&lt;/span&gt;
&lt;span id="cb5-15"&gt;&lt;a href="#cb5-15"&gt;&lt;/a&gt;  }&lt;/span&gt;
&lt;span id="cb5-16"&gt;&lt;a href="#cb5-16"&gt;&lt;/a&gt;  log.Infof(&lt;span class="st"&gt;&amp;quot;Exec cmd: mkdir -p %s&amp;quot;&lt;/span&gt;, sshDir)&lt;/span&gt;
&lt;span id="cb5-17"&gt;&lt;a href="#cb5-17"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb5-18"&gt;&lt;a href="#cb5-18"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;if&lt;/span&gt; err := ioutil.WriteFile(fmt.Sprintf(&lt;span class="st"&gt;&amp;quot;%s/id_rsa&amp;quot;&lt;/span&gt;, sshDir), []&lt;span class="dt"&gt;byte&lt;/span&gt;(p.SSHKey), &lt;span class="dv"&gt;0600&lt;/span&gt;); err != &lt;span class="ot"&gt;nil&lt;/span&gt; {&lt;/span&gt;
&lt;span id="cb5-19"&gt;&lt;a href="#cb5-19"&gt;&lt;/a&gt;    &lt;span class="kw"&gt;return&lt;/span&gt; errors.Wrapf(err, &lt;span class="st"&gt;&amp;quot;Write file: %s/id_rsa&amp;quot;&lt;/span&gt;, sshDir)&lt;/span&gt;
&lt;span id="cb5-20"&gt;&lt;a href="#cb5-20"&gt;&lt;/a&gt;  }&lt;/span&gt;
&lt;span id="cb5-21"&gt;&lt;a href="#cb5-21"&gt;&lt;/a&gt;  log.Infof(&lt;span class="st"&gt;&amp;quot;Write file: %s/id_rsa&amp;quot;&lt;/span&gt;, sshDir)&lt;/span&gt;
&lt;span id="cb5-22"&gt;&lt;a href="#cb5-22"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb5-23"&gt;&lt;a href="#cb5-23"&gt;&lt;/a&gt;  ...&lt;/span&gt;
&lt;span id="cb5-24"&gt;&lt;a href="#cb5-24"&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;そして，&lt;code&gt;id_rsa&lt;/code&gt; の中身をオプションないしは環境変数として Go アプリに渡したい． しかし，次のように単純に渡してみてもうまく動作しない:&lt;/p&gt;
&lt;div class="sourceCode" id="cb6"&gt;&lt;pre class="sourceCode sh"&gt;&lt;code class="sourceCode bash"&gt;&lt;span id="cb6-1"&gt;&lt;a href="#cb6-1"&gt;&lt;/a&gt;$ &lt;span class="ex"&gt;./drone-git-with-ssh&lt;/span&gt; --ssh_private_key=&lt;span class="st"&gt;&amp;#39;aaa\nbbb&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これだと &lt;code&gt;id_rsa&lt;/code&gt; の中身は &lt;code&gt;aaa\nbbb&lt;/code&gt; となる． &lt;code&gt;--ssh_private_key=$&amp;#39;aaa\nbbb&amp;#39;&lt;/code&gt; としたら一応動作するが環境変数などが使えなくなるので，&lt;a href="https://blog.konboi.com/post/2018/05/01/225336/"&gt;内部で明示的に置換すると良い&lt;/a&gt;ようだ:&lt;/p&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre class="sourceCode go"&gt;&lt;code class="sourceCode go"&gt;&lt;span id="cb7-1"&gt;&lt;a href="#cb7-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;// main.go&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb7-2"&gt;&lt;a href="#cb7-2"&gt;&lt;/a&gt;...&lt;/span&gt;
&lt;span id="cb7-3"&gt;&lt;a href="#cb7-3"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb7-4"&gt;&lt;a href="#cb7-4"&gt;&lt;/a&gt;&lt;span class="kw"&gt;func&lt;/span&gt; run(c *cli.Context) &lt;span class="dt"&gt;error&lt;/span&gt; {&lt;/span&gt;
&lt;span id="cb7-5"&gt;&lt;a href="#cb7-5"&gt;&lt;/a&gt;  ...&lt;/span&gt;
&lt;span id="cb7-6"&gt;&lt;a href="#cb7-6"&gt;&lt;/a&gt;  plugin := Plugin{&lt;/span&gt;
&lt;span id="cb7-7"&gt;&lt;a href="#cb7-7"&gt;&lt;/a&gt;    SSHKey: strings.Replace(c.String(&lt;span class="st"&gt;&amp;quot;ssh_private_key&amp;quot;&lt;/span&gt;), &lt;span class="st"&gt;`&lt;/span&gt;&lt;span class="ch"&gt;\n&lt;/span&gt;&lt;span class="st"&gt;`&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;&lt;/span&gt;&lt;span class="ch"&gt;\n&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;&lt;/span&gt;, &lt;span class="dv"&gt;-1&lt;/span&gt;),&lt;/span&gt;
&lt;span id="cb7-8"&gt;&lt;a href="#cb7-8"&gt;&lt;/a&gt;    ...&lt;/span&gt;
&lt;span id="cb7-9"&gt;&lt;a href="#cb7-9"&gt;&lt;/a&gt;  }&lt;/span&gt;
&lt;span id="cb7-10"&gt;&lt;a href="#cb7-10"&gt;&lt;/a&gt;  &lt;span class="kw"&gt;return&lt;/span&gt; plugin.Exec()&lt;/span&gt;
&lt;span id="cb7-11"&gt;&lt;a href="#cb7-11"&gt;&lt;/a&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="docker-イメージ"&gt;Docker イメージ&lt;/h3&gt;
&lt;p&gt;他の Drone Plugin のリポジトリを参考にすると，次のような Dockerfile を書くと良い:&lt;/p&gt;
&lt;div class="sourceCode" id="cb8"&gt;&lt;pre class="sourceCode dockerfile"&gt;&lt;code class="sourceCode dockerfile"&gt;&lt;span id="cb8-1"&gt;&lt;a href="#cb8-1"&gt;&lt;/a&gt;&lt;span class="kw"&gt;FROM&lt;/span&gt; docker:git&lt;/span&gt;
&lt;span id="cb8-2"&gt;&lt;a href="#cb8-2"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb8-3"&gt;&lt;a href="#cb8-3"&gt;&lt;/a&gt;&lt;span class="kw"&gt;ADD&lt;/span&gt; release/linux/amd64/drone-git-with-ssh /bin/&lt;/span&gt;
&lt;span id="cb8-4"&gt;&lt;a href="#cb8-4"&gt;&lt;/a&gt;&lt;span class="kw"&gt;ENTRYPOINT&lt;/span&gt; [&lt;span class="st"&gt;&amp;quot;/bin/drone-git-with-ssh&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;FROM&lt;/code&gt; で指定するベースイメージには普通，&lt;a href="https://hub.docker.com/r/plugins/base/"&gt;&lt;code&gt;plugins/base&lt;/code&gt;&lt;/a&gt; を使うようだが，これは &lt;code&gt;scratch&lt;/code&gt; にちょっとだけ毛が生えた程度のイメージで &lt;code&gt;git&lt;/code&gt; がない． なので &lt;a href="https://hub.docker.com/_/docker"&gt;&lt;code&gt;docker:git&lt;/code&gt;&lt;/a&gt; をベースイメージにした． 次のコマンドを実行することで Docker イメージを作成できる:&lt;/p&gt;
&lt;div class="sourceCode" id="cb9"&gt;&lt;pre class="sourceCode sh"&gt;&lt;code class="sourceCode bash"&gt;&lt;span id="cb9-1"&gt;&lt;a href="#cb9-1"&gt;&lt;/a&gt;$ &lt;span class="va"&gt;GOOS=&lt;/span&gt;linux &lt;span class="va"&gt;GOARCH=&lt;/span&gt;amd64 &lt;span class="va"&gt;CGO_ENABLED=&lt;/span&gt;0 &lt;span class="ex"&gt;go&lt;/span&gt; build -a -tags netgo -o release/linux/amd64/drone-git-with-ssh&lt;/span&gt;
&lt;span id="cb9-2"&gt;&lt;a href="#cb9-2"&gt;&lt;/a&gt;$ &lt;span class="ex"&gt;docker&lt;/span&gt; build --rm -t matsubara0507/git-with-ssh .&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="drone-を設定する"&gt;Drone を設定する&lt;/h3&gt;
&lt;p&gt;せっかくなので Drone で Docker イメージのビルドなどを CI してみる． &lt;a href="https://cloud.drone.io/"&gt;Drone Cloud&lt;/a&gt; という OSS は無料で使える Drone のクラウドサービスがあるのでこれに設定する．&lt;/p&gt;
&lt;p&gt;テストはあとで考えるとして，Go のビルドと Docker イメージのビルドを CI で回す． また，master のプッシュだけは Docker イメージの自動プッシュも実現したい． Drone は他の CI サービスみたいに YAML ファイルで設定ファイルを記述する:&lt;/p&gt;
&lt;div class="sourceCode" id="cb10"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;span id="cb10-1"&gt;&lt;a href="#cb10-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;# .drone.yml&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-2"&gt;&lt;a href="#cb10-2"&gt;&lt;/a&gt;&lt;span class="fu"&gt;kind&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; pipeline&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-3"&gt;&lt;a href="#cb10-3"&gt;&lt;/a&gt;&lt;span class="fu"&gt;name&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; default&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-4"&gt;&lt;a href="#cb10-4"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb10-5"&gt;&lt;a href="#cb10-5"&gt;&lt;/a&gt;&lt;span class="fu"&gt;steps&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-6"&gt;&lt;a href="#cb10-6"&gt;&lt;/a&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="fu"&gt;name&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; build go&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-7"&gt;&lt;a href="#cb10-7"&gt;&lt;/a&gt;&lt;span class="at"&gt;  &lt;/span&gt;&lt;span class="fu"&gt;image&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; golang:1.11&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-8"&gt;&lt;a href="#cb10-8"&gt;&lt;/a&gt;&lt;span class="at"&gt;  &lt;/span&gt;&lt;span class="fu"&gt;commands&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-9"&gt;&lt;a href="#cb10-9"&gt;&lt;/a&gt;&lt;span class="at"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -a -tags netgo -o release/linux/amd64/drone-git-with-ssh&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-10"&gt;&lt;a href="#cb10-10"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb10-11"&gt;&lt;a href="#cb10-11"&gt;&lt;/a&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="fu"&gt;name&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; build docker image (dry_run)&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-12"&gt;&lt;a href="#cb10-12"&gt;&lt;/a&gt;&lt;span class="at"&gt;  &lt;/span&gt;&lt;span class="fu"&gt;image&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; plugins/docker&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-13"&gt;&lt;a href="#cb10-13"&gt;&lt;/a&gt;&lt;span class="at"&gt;  &lt;/span&gt;&lt;span class="fu"&gt;settings&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-14"&gt;&lt;a href="#cb10-14"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;username&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; matsubara0507&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-15"&gt;&lt;a href="#cb10-15"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;password&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-16"&gt;&lt;a href="#cb10-16"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;from_secret&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; docker_hub_password&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-17"&gt;&lt;a href="#cb10-17"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;repo&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; matsubara0507/git-with-ssh&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-18"&gt;&lt;a href="#cb10-18"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;dry-run&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="ch"&gt;true&lt;/span&gt;&lt;span class="co"&gt; # Push をしないフラグ&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-19"&gt;&lt;a href="#cb10-19"&gt;&lt;/a&gt;&lt;span class="at"&gt;  &lt;/span&gt;&lt;span class="fu"&gt;when&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-20"&gt;&lt;a href="#cb10-20"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;event&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-21"&gt;&lt;a href="#cb10-21"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;exclude&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-22"&gt;&lt;a href="#cb10-22"&gt;&lt;/a&gt;&lt;span class="at"&gt;        &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; pull_request&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-23"&gt;&lt;a href="#cb10-23"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb10-24"&gt;&lt;a href="#cb10-24"&gt;&lt;/a&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="fu"&gt;name&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; push docker image&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-25"&gt;&lt;a href="#cb10-25"&gt;&lt;/a&gt;&lt;span class="at"&gt;  &lt;/span&gt;&lt;span class="fu"&gt;image&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; plugins/docker&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-26"&gt;&lt;a href="#cb10-26"&gt;&lt;/a&gt;&lt;span class="at"&gt;  &lt;/span&gt;&lt;span class="fu"&gt;settings&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-27"&gt;&lt;a href="#cb10-27"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;username&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; matsubara0507&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-28"&gt;&lt;a href="#cb10-28"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;password&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-29"&gt;&lt;a href="#cb10-29"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;from_secret&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; docker_hub_password&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-30"&gt;&lt;a href="#cb10-30"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;repo&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; matsubara0507/git-with-ssh&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-31"&gt;&lt;a href="#cb10-31"&gt;&lt;/a&gt;&lt;span class="at"&gt;  &lt;/span&gt;&lt;span class="fu"&gt;when&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-32"&gt;&lt;a href="#cb10-32"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;branch&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-33"&gt;&lt;a href="#cb10-33"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; master&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-34"&gt;&lt;a href="#cb10-34"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;event&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-35"&gt;&lt;a href="#cb10-35"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;exclude&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb10-36"&gt;&lt;a href="#cb10-36"&gt;&lt;/a&gt;&lt;span class="at"&gt;        &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; pull_request&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Docker Hub への操作には &lt;a href="https://github.com/drone-plugins/drone-docker"&gt;&lt;code&gt;docker&lt;/code&gt;&lt;/a&gt; という Plugin を用いた． パスワードのような，ハードコーディングすべきではない文字列は Drone の Secret という仕組みをを用いる． &lt;code&gt;from_secret: key&lt;/code&gt; とすることで，Drone の Web UI で設定した &lt;code&gt;key&lt;/code&gt; という名の Secret を参照してくれる． 僕はパスワード系の Secret を PR では参照できないようにしているので，&lt;code&gt;when.event.exclude.pull_request&lt;/code&gt; とすることで PR の CI では Secret を参照しているステップが動作しないようにしている．&lt;/p&gt;
&lt;h3 id="テストをどうするか"&gt;テストをどうするか&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;plugin.go&lt;/code&gt; はただ単にファイルを作ってるだけなのでユニットテストなどはしてもしょうがない． 悩んだ末，最初のシェルコマンドで実行して生成されるファイルと自作 Plugin で生成されるを比較することにした:&lt;/p&gt;
&lt;div class="sourceCode" id="cb11"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;span id="cb11-1"&gt;&lt;a href="#cb11-1"&gt;&lt;/a&gt;&lt;span class="co"&gt;# .drone.yml&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-2"&gt;&lt;a href="#cb11-2"&gt;&lt;/a&gt;&lt;span class="fu"&gt;kind&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; pipeline&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-3"&gt;&lt;a href="#cb11-3"&gt;&lt;/a&gt;&lt;span class="fu"&gt;name&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; default&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-4"&gt;&lt;a href="#cb11-4"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb11-5"&gt;&lt;a href="#cb11-5"&gt;&lt;/a&gt;&lt;span class="fu"&gt;steps&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-6"&gt;&lt;a href="#cb11-6"&gt;&lt;/a&gt;&lt;span class="at"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="fu"&gt;name&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; build go&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-7"&gt;&lt;a href="#cb11-7"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;image&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; golang:1.11&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-8"&gt;&lt;a href="#cb11-8"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;commands&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-9"&gt;&lt;a href="#cb11-9"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; go build&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-10"&gt;&lt;a href="#cb11-10"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -a -tags netgo -o release/linux/amd64/drone-git-with-ssh&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-11"&gt;&lt;a href="#cb11-11"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb11-12"&gt;&lt;a href="#cb11-12"&gt;&lt;/a&gt;&lt;span class="at"&gt;  &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="fu"&gt;name&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; test&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-13"&gt;&lt;a href="#cb11-13"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;image&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; golang:1.11&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-14"&gt;&lt;a href="#cb11-14"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;environment&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-15"&gt;&lt;a href="#cb11-15"&gt;&lt;/a&gt;&lt;span class="at"&gt;      &lt;/span&gt;&lt;span class="fu"&gt;SSH_KEY&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="st"&gt;&amp;#39;aaa\nbbb&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-16"&gt;&lt;a href="#cb11-16"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="fu"&gt;commands&lt;/span&gt;&lt;span class="kw"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-17"&gt;&lt;a href="#cb11-17"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; printf $SSH_KEY &amp;gt; ./test/expected/.ssh/id_rsa &amp;amp;&amp;amp; chmod 600 ./test/expected/.ssh/id_rsa&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-18"&gt;&lt;a href="#cb11-18"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; ./drone-git-with-ssh --home ./test/result --ssh_private_key $SSH_KEY --ssh_hosts github.com --ssh_hosts bitbucket.org  --commands &amp;#39;pwd&amp;#39; --commands &amp;#39;ls&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-19"&gt;&lt;a href="#cb11-19"&gt;&lt;/a&gt;&lt;span class="at"&gt;    &lt;/span&gt;&lt;span class="kw"&gt;-&lt;/span&gt;&lt;span class="at"&gt; diff ./test/result/.ssh ./test/expected/.ssh&lt;/span&gt;&lt;/span&gt;
&lt;span id="cb11-20"&gt;&lt;a href="#cb11-20"&gt;&lt;/a&gt;&lt;/span&gt;
&lt;span id="cb11-21"&gt;&lt;a href="#cb11-21"&gt;&lt;/a&gt;&lt;span class="at"&gt;  ...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;expected な &lt;code&gt;id_rsa&lt;/code&gt; をわざわざ test ステップで生成するのではなく，GitHub に直接おいても良いが，なんか &lt;code&gt;id_rsa&lt;/code&gt; という名前のファイルをパブリックリポジトリに置くのはどうなのかなぁと思ってやめた． このテストのために &lt;code&gt;--home&lt;/code&gt; というオプションで任意のディレクトリに SSH の設定 &lt;code&gt;.ssh&lt;/code&gt; を生成してくれるようにした． デフォルトは &lt;code&gt;/root&lt;/code&gt; だが．&lt;/p&gt;
&lt;h3 id="おまけ-バッチ"&gt;おまけ: バッチ&lt;/h3&gt;
&lt;p&gt;公式の Drone Plugin のリポジトリをみると README にいろんなバッジがあった． ので，真似して git-with-ssh にも設定してみた:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/matsubara0507/drone-git-with-ssh/blob/aee8928379453d89aedba010a1664ca6adf1ee72/README.md"&gt;&lt;img src="/assets/create-drone-git-with-ssh/badges.jpg"&gt;&lt;/img&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;付けたのは4つ:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Drone のビルド結果&lt;/li&gt;
&lt;li&gt;&lt;a href="https://godoc.org/"&gt;Go Doc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://goreportcard.com/"&gt;Go Report Card&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://microbadger.com/"&gt;MicroBadger&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;1つ目は Drone のビルド結果のバッジ． Drone のバッジは settings の一番下から取得できる．&lt;/p&gt;
&lt;h2 id="section"&gt;&lt;/h2&gt;
&lt;p&gt;Go Doc は指定した Go のリポジトリからドキュメントを生成してくれるサービスである． 依存パッケージとかも解析していい感じに表示してくれる． すごい．&lt;/p&gt;
&lt;p&gt;Go Report Card も同様に Go のリポジトリを指定することで動作する． こっちは go fmt がちゃんとかかってるかや linter の結果などをチェックしてくれる． すごい．&lt;/p&gt;
&lt;h2 id="section-1"&gt;&lt;/h2&gt;
&lt;p&gt;MicroBadger は Docker Hub にあるイメージを静的検査してくれる． イメージサイズや生成時間はもちろん，Docker イメージのレイヤ構造も出してくれる． これで Dockerfile をわざわざ探さなくても良いのですごい助かる．&lt;/p&gt;
&lt;h2 id="おしまい"&gt;おしまい&lt;/h2&gt;
&lt;p&gt;久しぶりにサンプルじゃない Go のアプリケーションを作ってみた． 楽しかった〜．&lt;/p&gt;
  &lt;/div&gt;</summary></entry><entry><id>http://syocy.hatenablog.com/entry/try-linear-types</id><title type="text">GHCの線形型プロトタイプを試すだけ</title><updated>2019-01-08T02:01:09+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/try-linear-types"/><summary type="html">GHCに線形型を導入すると以下のような良い事があるらしい。 リソース安全性: ファイルハンドル、ソケット、DBコネクションのようなリソースについて、これらを提供するAPIの設計者が安全な使用を強制できる。リソース解放後のアクセス、二重解放、解放忘れを防止することができる。 レイテンシ: リソースAPIの実装をうまくやるとoff-heap(GCの対象外)でリソースを確保・解放できる。GC対象が少なくなることによりGCによってプログラムが停止する時間を減らせる。 並列性: 過剰な直列化を強要しない。リソース安全性を保ちつつもできる限り並列化できる。 詳しくはproposal。 この記事では線形型G…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/01/01/111657</id><title type="text">2018年までのまとめ</title><updated>2019-01-01T12:14:48+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/01/01/111657"/><summary type="html">年末に書こうと思ってたけど、ニンテンドースイッチで遊んでたら書くの面倒になって書かなかったのだけど、まとめておかないと数年後には忘れてしまいそうなのでメモっておく。 2016年 子守 Haskell入門の執筆開始 12月に Surface Studio を買う 2017年 子守 KIRINホームタップで夢のビールが出る蛇口を獲得 Haskell入門 を出版 Docker を触る 自宅サーバ hiratara.dyndns.org を停止 12月 Surface Book 2 を買う NISA 、 iDeCo を始める 高熱で通院したら女医に健康診断の結果について激詰めされたことに腹を立て、禁酒…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/01/01/104714</id><title type="text">python3のmapはリストを返さない</title><updated>2019-01-01T10:47:14+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/01/01/104714"/><summary type="html">cols_upper = map(str.upper, "a,B,c".split(",")) cols_lower = map(str.lower, cols_upper) for c in cols_lower: print(c) for c in cols_upper: print(c) python2 だと動く。 A B C a b c python3だと動かない。 A B C python3では戻り値がイテレータに変わっているため。 Return an iterator that applies function to every item of iterable, yielding…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2018/12/31/210000</id><title type="text">2018年を振り返って</title><updated>2018-12-31T21:00:02+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2018/12/31/210000"/><summary type="html">今年は仕事を淡々とこなしつつ、自分の技術の方向性に悩みながらも、ずいぶんとだらけてしまった一年だったと思います。技術面での成長に伸び悩んでいます。 Mackerelのコードの整理や改善は無限にやることがあるのですが、平日夜や休日をそれで潰す生活をしていると、頭の切り替えがうまく行かなくなり仕事中に集中できなくなってしまいました。フロントエンドはかなりコードの整理が進み、SPA化できたのはよかったですね。コンテナ周りはチョットワカルと言えるようになりたいですね。 春先にバイナリエディタをリリースしました。まだ実装したい機能はたくさんありますが、リリースしたら燃え尽きてしまってあまりコードを触れて…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/12/27/213853</id><title type="text">戊戌の追憶</title><updated>2018-12-28T09:01:05+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/12/27/213853"/><summary type="html">この記事は、筆者が過ごした2018年を簡潔に振り返り、その経験を糧とすることを狙う。 1月 第二鰓弓由来側頸嚢胞という先天異常が原因で首が化膿し、激痛に苦しんでいた。対人関係のトラブルなどもあり軽い錯乱状態にあったのか、自分が知らない間に高い買い物をすることがあった。 drinkery: Boozy streaming library というストリーム処理ライブラリを作った。当初はすべて酒関係の用語を用いていたが、批判を受けてそこはやめた。今思えばそれで正解だった気がする。 パフォーマンスはモナディックなAPIを持つライブラリの中ではトップクラスで、双方向性や多入力多出力のような発展的な機能も…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/12/21/201108</id><title type="text">Elias-Fano encoding: 単調増加する数列をほぼ簡潔に表現する</title><updated>2018-12-22T01:15:08+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/12/21/201108"/><summary type="html">Haskell Advent Calendar 2018 20日目 単調増加する自然数の列を、最低限のビット数で表現するための興味深いテクニックと、Haskellによる実装を紹介する。 Elias-Fano encoding この手法は、簡潔データ構造に分類されるもの一つであるが、厳密には条件を満たさないため疑似簡潔データ構造と呼ばれる。1970年代、Peter EliasとRobert Mario Fanoによって独立して発見された。 例題として1, 1, 4, 10, 17, 22, 23, 30という列をエンコードしてみよう。まず、それぞれの数を上位3ビットと下位2ビットに分割する。列の…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/01/cygwin-cygwin.html</id><title type="text">[cygwin] cygwinセットアップ・環境構築手順メモ</title><updated>2018-12-16T14:31:09.194+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/01/cygwin-cygwin.html"/><summary type="text">

主に自分向けの防備録です。windows10上で確認。インストーラーはここからDLする。





&lt;&lt;設定&gt;&gt;

ssh-agentの重複起動を防ぐ


ユーザーのアカウント名、ホームディレクトリの変更



/etc/passwdを編集する（最新バージョンでは自動生成されない？）
Cygwinを移動したら/etc/passwdの再生成を
巨大ドメインに参加している PC での /etc/passwd, /etc/group ファイルのつくりかた 

ssh-agentのために秘密鍵セットアップ



~/.ssh/


※group/otherの権限を削除する必要がある

% chmod 700 ~/.ssh 


less, lv, manコマンド終了時に画面をクリアしない

[linux][cygwin] less, manの終了直前の画面をクリアしないで端末上に残す方法 
</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2018/12/15/163609</id><title type="text">MariaDBでPythonのmysqlclientモジュールをビルド</title><updated>2018-12-15T16:36:09+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2018/12/15/163609"/><summary type="html">昔はそうではなかったようだが、最近は MariaDB のパッケージに mysql_config が入っておらず、そのままでは mysqlclient モジュールがビルドできない。 Mac の場合の対処法はここに書いてある。 stackoverflow.com Ubuntu (on WSL) の場合も基本は一緒。 $ sudo apt install libmariadb-client-lgpl-dev $ sudo ln -s /usr/bin/mariadb_config /usr/bin/mysql_config $ pipenv install (ここは、 mysqlclient をイン…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/12/06/195433</id><title type="text">Kubernetes 1.13: SIG Scheduling の変更内容</title><updated>2018-12-06T19:54:33+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/12/06/195433"/><summary type="html">はじめに 本記事では、Kubernetes 1.13 の CHANGELOG からスケジューリングに関する内容をまとめました。 主な変更点 https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.13.md#sig-scheduling 1.13 における SIG Scheduling の取り組みは主に安定性に焦点を当てており、いくつかの大きな機能の導入は次のバージョンまで延期することになりました。特記すべき変更として次に挙げる 2 点があります。 #69824: Taint based Eviction の有効化 Ta…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2018/11/26/191201</id><title type="text">今日は "GO GLOBAL" meetup #1 の日です</title><updated>2018-11-26T21:20:41+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2018/11/26/191201"/><summary type="html">"GO GLOBAL" meetup #1 に参加していますので、自分用のメモを残しておきます。 コーディング試験Codility運用の実態と実績 / @k0000i さん コーディング試験とは : コンピュータサイエンスの理解度を見る amazon, Intel, EA など 多数の言語に対応。VBとか 応募すると、コーディング試験を受けるようメールが来る 2時間で2問を回答する IDEは使用可能 デモテストや練習問題がある 受けておくとスコアを上げられるでしょう 正確性とパフォーマンスのスコアの平均 正確性 : バグがないか パフォーマンススコア : 大きいデータを突っ込んだ場合 コードテ…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/11/24/232705</id><title type="text">We Are JavaScripters! @26th で Elm と Firebase の連携について話してきました</title><updated>2018-11-24T23:27:05+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/11/24/232705"/><summary type="html">先日行われた We Are JavaScripters! @19th で Elm と JavaScript ライブラリの連携について発表してきました。 Elm の初心者向けの解説としてよく Msg, Model, update からなるアーキテクチャが挙げられていますが、今回の発表ではもう一歩だけ進んで、Cmd と Sub を使って Elm から JavaScript のライブラリを呼ぶ方法について解説しました。 サーバとしての JS ライブラリ 他の AltJS では JavaScript を呼び出す際、ソースコードの内部に埋め込む形になるのが普通です。 例えば Haskell を Java…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/11/19/Windows_%E3%81%A7_Haskell_iconv_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B</id><title type="text">Windows で Haskell iconv をビルドする</title><updated>2018-11-19T19:13:49+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/11/19/Windows_%E3%81%A7_Haskell_iconv_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B"/><summary type="html">GHC 8.0 以前についてはこちらを参考に。 teratail.com GHC 8.2 以降で stack を使う場合をここではとりあげる。 確信はないのだが、GHC 8.2 から GHC 自体が iconv に依存しなくなったのか、$(stack path --programs)\ghc-8.0.2\mingw\lib から libiconv.a と libiconv.dll.a がなくなっているため GHC 8.0 以前のようにビルドができなくなっている。 なので、まず libiconv を取得する。 stack exec -- pacman -S libiconv-devel インスト…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/09/30/Leica_M3</id><title type="text">Leica M3</title><updated>2018-11-15T10:47:47+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/09/30/Leica_M3"/><summary type="html">Lomography Konstruktor F・Diana Mini から始まったフィルムカメラ熱ですが一瞬で行くところまで行ってしまった感じです。 Leica M3。 現在まで続く M 型 Leica の始祖を買ってしまいました。1962年製の56歳です。 （この写真を撮ったレンズも Asahi Super Takumar 55mm F1.8 なので60年代のレンズです。） Leica 意識前 初めはフィルムカメラの入門機としていくつかの記事に紹介されていた Asahi Pentax SP か Olympus OM-1（M-1）かと考えて中古カメラ屋めぐりをしていました。 このころはひたす…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2018/11/10/101541</id><title type="text">今日は Haskell Day 2018 の日です</title><updated>2018-11-10T18:01:57+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2018/11/10/101541"/><summary type="html">Haskell Day 2018 に来ましたので、自分用のメモを残しておきます。タグは #HaskellDay です。 作りながら学ぶHaskell入門 / @igrep さん 会場、懇親会のスポンサーは IIJ 様 (ありがとうございます！) mmlh コマンドで各自進める 課題の自動添削、たまにヒントを出してくれる わからなかったらメンターへ聞く Haskellを導入した話とHRRの紹介 / @khibinoさん 2008年 PerlからJavaを呼び出していた メンテナがいない、型検査がない Java, UNIXとの親和性があまりない 検討 =&gt; Common Lisp, OCaml, …</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/10/31/150056</id><title type="text">「名前の束縛」という名の束縛</title><updated>2018-10-31T18:20:45+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/10/31/150056"/><summary type="html">実用的なプログラミングにおいて、名前と概念を結びつける「束縛」はほぼ必須の概念である。しかし、その言葉には大きな誤解と混乱が根付いていた。 事の発端となったのは「Haskellにおいては、変数は値を代入するものではなく、値に束縛するものである」という議論である*1 *2。しかし、これは大きな誤解を孕んでいる。言葉の定義に立ち返ってその誤解を解いていこう。 束縛とバインディング 実は「束縛」には二つの意味がある。一つは、数学的な意味での変数の束縛*3、もう一つは、識別子と実体の結合という意味での束縛*4だ。 前者は変数の導入と言い換えることもできる。ラムダ計算におけるラムダ抽象と変数の関係もこれ…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/05/17/180426</id><title type="text">Kubernetes Meetup Tokyo #10 で Pod の Preemption について話してきました</title><updated>2018-10-23T16:31:12+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/05/17/180426"/><summary type="html">だいぶ日が空いてしまって今更ですが、先日行われた Kubernetes Meetup Tokyo #10 で、v1.8*1 から導入された新機能 Preemption について発表してきました。 Preemption は、Kubernetes クラスタのリソースが不足した際に、優先度が低い Pod を追い出して優先度が高い Pod の稼働を保証する仕組みです。 当日は時間が不足気味だったので、説明不十分だったかなと思われる点についていくつか補足しておきます。 Priority の指定について スライド中では詳しく説明しませんでしたが、ユーザは直接 Pod（や Deployment 中の Pod…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2018/10/15/100000</id><title type="text">Mackerelのグラフを端末で描画するコマンドmkrgを作りました</title><updated>2018-10-17T23:52:07+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2018/10/15/100000"/><summary type="html">Mackerelのグラフを端末で見れたらいいなと思ったので作ってみました。 github.com 使い方 $ go get -u github.com/itchyny/mkrg/cmd/mkrg $ mkrg コマンドを叩くと、そのホストのメトリックを取ってきてグラフを表示します。 何も考えずにコマンドを叩けば、システムメトリックのグラフを表示してくれます。 私はiTerm2を使っているので、とりあえずiTerm2では画像を表示できるようにしています。それ以外の端末では点字を使って頑張って表示します。 Mackerel サーバ監視[実践]入門作者: 井上大輔,粕谷大輔,杉山広通,田中慎司,坪内…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/10/02/203205</id><title type="text">猫でもわかる Vertical Pod Autoscaler</title><updated>2018-10-02T20:32:05+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/10/02/203205"/><summary type="html">先日行われた Kubernetes Meetup Tokyo #13 で、Vertical Pod Autoscaler (VPA) について発表してきました。 VPA は、各コンテナの Resource Request の値を自動的に調整してくれるコンポーネント群です。必要とするリソース（CPU、メモリ）量があらかじめ推測しにくいアプリケーションに対して、実績に基づいてそれらしい値を決めたい場合に効果を発揮します。 本記事ではスライドの補足として、VPA が動作する流れをクラスタ上での実際の挙動を通じて確認し、また内部実装についても踏み込んで解説します。 なお、本記事中で引用している仕様やソ…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/09/26/191231</id><title type="text">elm/time の使い方</title><updated>2018-09-26T19:12:31+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/09/26/191231"/><summary type="html">はじめに 先日、Elm v0.19 がリリースされました。公式ライブラリのリポジトリが elm-lang から elm に変更され、その中身も大きく再構成されています。 本記事では、これらの変更のうち特に時刻や日付の扱いに関する部分について、新しい API の使い方を含めて簡単に解説します。 v0.18 における時刻の扱い v0.18 では、時刻を扱う機能は標準パッケージ elm-lang/core の中で提供されていました。時刻を扱う Time モジュールと日付を扱う Date モジュールで、それぞれデータ型や関数が定義されているのが特徴です。 なお、旧バージョンのライブラリは現在 Elm …</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2018/09/15/113101</id><title type="text">inline-java パッケージを WSL へインストール</title><updated>2018-09-15T11:31:01+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2018/09/15/113101"/><summary type="html">ハマってガチャガチャしたので間違いあるかもしれないけどメモ。 まずjavaをインストール。入れるのは default-jdk のほうがいい気もする。 $ sudo apt install openjdk-9-jre-headless $ sudo apt install openjdk-9-jdk-headless jvm パッケージを入れるのに必要と思われる環境変数。 $ export JAVA_HOME=/usr/lib/jvm/java-9-openjdk-amd64 $ export LD_LIBRARY_PATH=/usr/lib/jvm/java-9-openjdk-amd64/l…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2018/09/14/195301</id><title type="text">今日は Roppongi.pm #1 の日です</title><updated>2018-09-14T21:20:56+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2018/09/14/195301"/><summary type="html">六本木.pm に来ていますので、適当にメモします。 オープニング 吉祥寺.pm + Okinawa.pm = 六本木.pm 六本木で Okinawa.pm やればいいや 飲食自由、フリードリンク ハッシュタグは #roppongipm ラクダがピンクだった頃の思い出 / @yoshiyuki_kondo さん Cプログラマのためのアルゴリズムとデータ構造、 Javaプログラマのためのアルゴリズムとデータ構造、yaccによるCコンパイラプログラミング なども書いてます Perl4の時代はラクダ本もリャマ本もピンク 訳本には Larry Wall のサインが入っている 1994年の 5.0 で青い…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/konstruktor-f</id><title type="text">プラモデルカメラ Lomography Konstruktor F</title><updated>2018-09-13T16:25:09+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/konstruktor-f"/><summary type="html">本来はフジヤカメラに行くことが目的だった。 「カメラバカにつける薬 in デジカメ Watch」でも取り上げられてて、その前から気になってたのもあって中野に行った。 特に買うつもりもなかったので雰囲気だけ知れればいいやというようにそそくさと出たのだが、ジャンク館が中野ブロードウェイにあるということで行ってみた。 そういえば中野ブロードウェイも気になってたんだし一石二鳥だった。 するとコイデカメラがあった。Lomography Konstruktor F があった。 動くしくみを理解しながら自分で組み立てるのが好きでカメラも好きな自分が惹かれるのは当然という感じだった。 そのときは散財する予定は…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/04/27/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_4_%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%9F</id><title type="text">技術書典 4 にサークル参加した</title><updated>2018-09-12T13:03:31+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/04/27/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_4_%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%9F"/><summary type="html">4月22日に開催された『技術書典 4』にサークル参加してきました。 techbookfest.org 技術書典は1と2に個人で参加して3は会社として参加して今回の4は会社と個人と2サークルにかかわっていました。 超技術書典を抜くと皆勤です。 個人サークル 既刊として『遠回りして学ぶ Yesod 入門』を増刷し、新刊は『手続き Haskell』を持っていきました。 doujin.kakkun61.com doujin.kakkun61.com 数字 売り上げ部数は、どんぶり勘定ですが（特に Yesod 本のダウンロードカードが完全に記憶による）下記の通りとなりました。 Yesod 本 紙 + P…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2018/09/12/102822</id><title type="text">"アルゴリズムクイックリファレンス" のノート (2)</title><updated>2018-09-12T10:28:22+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2018/09/12/102822"/><summary type="html">p.4 の貪欲法。素朴なアルゴリズムよりこちらの実装のほうが楽に思える。 github.com 前回の遅いアルゴリズムとの速度比較。 variance introduced by outliers が大きくていいのかは気になる。貪欲法の方が 2,000 倍以上速いので、むしろ前回の slow の実装に問題がありそう。 $ stack exec bench-convexhulls -- --output=convexhull.html points generated fromList [Point 2.1377835882015472e-2 0.37675969687894406,Point …</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/09/01/%E3%80%8EYesod_%E5%85%A5%E9%96%80%E3%80%8F%E5%95%86%E6%A5%AD%E8%AA%8C%E5%8C%96</id><title type="text">『Yesod 入門』商業誌化</title><updated>2018-09-01T08:26:27+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/09/01/%E3%80%8EYesod_%E5%85%A5%E9%96%80%E3%80%8F%E5%95%86%E6%A5%AD%E8%AA%8C%E5%8C%96"/><summary type="html">同人誌で発売していた『遠回りして学ぶ Yesod 入門』がこのたびインプレス R&amp;D より『Haskell で作る Web アプリケーション 遠回りして学ぶ Yesod 入門』として商業誌化されることになりました。 www.impressrd.jp 同人誌版からの変更点は主に、 日本語が読みやすくなった 対応バージョンが上がった 点です。章が増えたり減ったりはしていません。あと、表紙がかわいくなりました。かわいい。 商業誌では Amazon と honto にてオンデマンド印刷の紙の書籍も購入できるようになっています。紙はこれまで即売会でしか販売していなかったので初めて通信販売で買えるようにな…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/09/01/%E5%88%9D%E3%83%95%E3%82%A3%E3%83%AB%E3%83%A0</id><title type="text">初フィルム</title><updated>2018-09-01T07:50:07+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/09/01/%E5%88%9D%E3%83%95%E3%82%A3%E3%83%AB%E3%83%A0"/><summary type="html">厳密にいうと小学校の旅行などで「写ルンです」を使ったりしたことがあるので、初フィルムじゃないんだけど自分で装填するものとしては初ということで。 中野のコイデカメラで自分でプラモデルのように組み立てるカメラを見つけて「なんだこれは！？」と調べていたら Lomography にあてられてどうしても自分でも撮りたくなって中古の Lomography Diana Mini を買った。 それで2本撮ったので現像・スキャンしてもらってきた。（本当はもう1本もあったんだけどダメにした。） 70枚撮った中で奇跡的に手ぶれもなくピントも合っている1枚。 鏡筒の向かって左のレバーがシャッターボタンなんだけどこれが…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/08/23/211858</id><title type="text">詳解！ Elm における Fuzzing</title><updated>2018-08-23T21:18:58+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/08/23/211858"/><summary type="html">先日行われた We Are JavaScripters! @23rd で、Elm のテストフレームワーク elm-test に搭載されている Fuzzing 機能について発表してきました。 Fuzzing を利用するとテストデータを自動で生成することができるため、例えば「encode と decode を行うと元に戻る」といった、入力に依存しない 関数の性質に関するテスト をより簡単かつ効率的に実装することができます。 さらに、後で詳しく解説する通り、elm-test の Fuzzer にはバグが起こりやすいエッジケースを集中的に生成してくれるというメリットもあります。 elm-test の使…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/08/16/Windows_%E3%81%A7_haskell-ide-engine_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B</id><title type="text">Windows で haskell-ide-engine をビルドする</title><updated>2018-08-16T17:34:50+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/08/16/Windows_%E3%81%A7_haskell-ide-engine_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B"/><summary type="html">手順 1. ソースコード取得。 git clone git@github.com:haskell/haskell-ide-engine.git 2. Unicode を扱う ICU の古いバージョンが要るので取得。 自分の使うバージョンの text-icu の changelog を見て、必要な ICU のバージョンを探す。執筆時点では 53 だった。 http://site.icu-project.org/download/53#TOC-ICU4C-Download 任意の場所に展開する。以降、展開先の箇所を $icu と表記する。 $icu\bin64 にある dll の名前を変える。（要…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/08/01/055608</id><title type="text">July Tech Festa 2018 で分散システムの検証について話してきました / #JTF2018</title><updated>2018-08-01T13:56:39+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/08/01/055608"/><summary type="html">先日行われた July Tech Festa 2018 で、モデル検査を使った分散アルゴリズムの検証について発表してきました。 前半はオートマトンによるシステムの記述と検査の基礎について、後半は三種類のツール SPIN、TLA+、P による記述方法の紹介、といった内容です。 後半のソースコード紹介が散文的な感じになってしまって、いまいちメリットが伝わらない感じだったので、次回があればもっとエモいスライドにしようと思います。 分散アルゴリズムの形式化 定理証明による検証 今回の話の流れとして「分散システムにはモデル検査が有効」と述べていますが、必ずしも定理証明が分散システムの検証に向かないという…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/08/01/%E5%85%A5%E7%A4%BE</id><title type="text">入社</title><updated>2018-08-01T00:00:56+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/08/01/%E5%85%A5%E7%A4%BE"/><summary type="html">本日付けで IIJ に入社します。 職業 Haskeller になる……はず。</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/07/31/%E9%80%80%E8%81%B7</id><title type="text">退職</title><updated>2018-07-31T22:30:05+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/07/31/%E9%80%80%E8%81%B7"/><summary type="html">2013年に新卒で入社した KLab を今日付けで退職しました。</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2018/07/14/195255</id><title type="text">Dhallによるリッチな設定ファイル体験</title><updated>2018-07-14T19:52:55+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2018/07/14/195255"/><summary type="html">(この記事のレギュレーション: lts-11.9) Dhall という設定記述用言語があり、使ってみたところ良い感じだったので紹介します。 なお、この記事は先日某所で発表したものの拡大版になります。 speakerdeck.com Dhallとは何か Dhallについて短かく表現するなら公式サイトの以下の説明が分かりやすいです。 You can think of Dhall as: JSON + functions + types + imports データ表現にプログラマブルさと静的な検査とファイルのインポートを加えたものというわけです。 まだ開発中のためかあまりアピールされていませんがツー…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/11/17/090000</id><title type="text">zshの標準エラー出力の色を赤くする</title><updated>2018-06-29T14:22:55+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/11/17/090000"/><summary type="html">[追記]以下の方法は良くないようです。必ず、このエントリー最後の「stderredを使う」を参照してください[/追記] 最近stderrを赤くするように設定したら、コマンドの出力がかなり見やすくなりました。 設定はこんな感じに書いてます。 zmodload zsh/terminfo zsh/system color_stderr() { while sysread std_err_color; do syswrite -o 2 "${fg_bold[red]}${std_err_color}${terminfo[sgr0]}" done } exec 2&gt; &gt;(color_stderr) fg…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2016/12/04/120000</id><title type="text">珍しいSHA1ハッシュを追い求めて</title><updated>2018-06-29T08:55:02+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2016/12/04/120000"/><summary type="html">「SHA1ハッシュってあるだろう？」 放課後、いつものように情報処理室に行くと、高山先輩が嬉しそうな顔でそう言った。 「ええ、SHA1、ありますね」 「SHA1って何桁か覚えているかい？」 「えっと…」 一年下の後輩、岡村が口を開いた。 「50桁くらいはありましたっけ…？」 先輩はパソコンに向かって何かを打ちはじめた。 現在、情報部の部員は三人しかいない。部長の高山先輩と、二年の自分と、後輩の岡村だ。いや、正確に言うと、先輩の学年にはもう少しいたのだが、もうほとんど部室に来ることはなくなってしまった。無理もない、この季節になると先輩たちは受験勉強で忙しくなる。 「例えば、こういうふうに… 適当…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2018/06/25/130000</id><title type="text">はてな・ペパボ技術大会 #4 〜DevOps〜 @京都 で登壇しました</title><updated>2018-06-25T13:40:55+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2018/06/25/130000"/><summary type="html">先日 6/23 に技術イベント「はてな・ペパボ技術大会 #4 〜DevOps〜 @京都」で登壇・トークセッションに参加しました。 hatena.connpass.com 普段の業務でDevOpsという言葉を使うことはありません。 しかし、DevOpsのあり方を見直した結果が現状の体制や仕事のフローであったり、あるいはこれからやろうとしていることにつながっているのだと思います。 技術の進歩によりDockerやGraphQLといった、レイヤー間の共通言語が発達する中で、ソフトウェア間あるいはチーム間が疎結合になっていくことはよいです。 一方でそういう技術で解決できない場面も残っていくのだろうなと思…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/06/linuxcygwin-unzip-error-invalid.html</id><title type="text">[linux][cygwin] unzipコマンドで "error:  invalid compressed data to inflate" というエラーメッセージがでたら？</title><updated>2018-06-06T01:11:48.468+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/06/linuxcygwin-unzip-error-invalid.html"/><summary type="text">zipアーカイブの中に長さが0のファイルが含まれていると、unzipコマンドでは以下のようなエラーメッセージが表示されて、解凍することができません。アーカイブが壊れていなくてもエラーになります。
% unzip hoge.zip
  error:  invalid compressed data to inflate

このような場合には、-tzipオプションを指定して7zコマンドを実行することで、エラーを回避して解凍できます。パスワード保護されているzipアーカイブも問題なく解凍できました。

% 7z x -tzip hoge.zip


manページによると、以下のフォーマットがサポートされていて、デフォルトは7zとのこと。

The program supports 7z (that implements  LZMA  compression  algorithm),  
ZIP</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/06/03/195024</id><title type="text">日持ちする直列化のためのライブラリ「winery」</title><updated>2018-06-04T00:57:20+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/06/03/195024"/><summary type="html">人類は、酒と共に発展してきたと言っても過言ではない。穀物や果実などを酒に変換することにより、糖を除く栄養を保ったまま、高い保存性を持たせることができる。酒は人々の喉を潤し、時に薬として使われた。 プログラミングにおいても、終了したら消えてしまうデータを、保存性の高いバイト列に変えたい場面がよくある。そのような操作を直列化(シリアライズ)と呼び、いくつかのアプローチが存在する。 コード生成タイプ Protocol Buffers、cap'n'protoなど データの構造を記述する言語(スキーマ)から、データ構造およびシリアライザ・デシリアライザをコードごと生成する。幅広い言語で使える一方、作れる…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/05/24/213324</id><title type="text">We Are JavaScripters! @19th で Haskell 製フレームワーク Miso について話してきました</title><updated>2018-05-24T21:33:24+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/05/24/213324"/><summary type="html">先日行われた We Are JavaScripters! @19th で Haskell によるフロントエンド開発について発表してきました。 Elm の代わりにフレームワーク Miso を使うことで、クライアントサイドとサーバサイドの両方を Haskell で実装することができる、という内容です。 github.com なお今回のプレゼンでは、参加者のほとんどは Haskell に馴染みがないだろう*1ということもあって、実装上の詳細にはほとんど触れませんでした。 Elm と Miso の詳しい比較、さらに Servant と組み合わせた Isomorphic なアプリの作り方については、記事…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/05/18/205101</id><title type="text">JAWS DAYS 2018 で形式手法による IAM の検証について話してきました</title><updated>2018-05-18T20:51:01+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/05/18/205101"/><summary type="html">だいぶ日が空いてしまって今更ですが、先日行われた JAWS DAYS 2018 で登壇してきました*1。モデル検査器 Alloy を使って AWS の IAM を検証してみるという内容です。 形式手法 × AWS というテーマではこれまでにもいくつかのイベントで発表していますが、題材はネットワーク関連の検証がメインでした。 ccvanishing.hateblo.jp ccvanishing.hateblo.jp ccvanishing.hateblo.jp さすがに同じことばかり話していても芸がないので、今回は新ネタとして IAM を投入してみました。CFP も Security Slot …</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/07/31/090000</id><title type="text">ptraceシステムコール入門 ― プロセスの出力を覗き見してみよう！</title><updated>2018-05-14T18:45:57+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/07/31/090000"/><summary type="html">他のプロセスを中断せずに、その出力をミラーリングして新しくパイプで繋ぐ、そんなことはできるのでしょうか。 straceやgdbといったコマンドは一体どういう仕組みで動いているのでしょうか。 ptraceシステムコールを使い、プロセスが呼ぶシステムコールを調べて出力を覗き見するコマンドを実装してみたいと思います。 ptraceシステムコール Linuxを触っていると、いかにプロセスを組み合わせるか、組み合わせる方法をどれだけ知っているかが重要になってきます。 パイプやリダイレクトを使ってプロセスの出力結果を制御したり、コードの中からコマンドを実行して、終了ステータスを取得したりします。 プロセス…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2018/04/10/100000</id><title type="text">バイナリエディタを作りました！</title><updated>2018-04-15T17:59:13+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2018/04/10/100000"/><summary type="html">バイナリエディタを作りました。 インストールは go get -u github.com/itchyny/bed/cmd/bed でできると思います。 なぜ作ったのか 私は昔からファイルフォーマットに興味があり、画像ファイルやPDFファイルのフォーマットを調べるのが好きでした。 最近も圧縮ファイルのフォーマットを趣味で調べたりしています。 コンパイラ技術にも興味があり、ゆくゆくは実行ファイルを生成したりしたいなという思いもあります。 バイナリファイルをエディットするにはバイナリエディタが必要となるわけですが、自分の手に馴染むUIを持つエディタがありませんでした。 私は実はVimというエディタが…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2016/12/31/210000</id><title type="text">2016年を振り返って</title><updated>2018-03-28T10:48:21+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2016/12/31/210000"/><summary type="html">会社は二年目に入り業務にも慣れ、ある程度まとまった仕事を任せられるようになりました。 携わっているサービスのコードに詳しくなり、リファクタリングの方向性を示して改善を進めてきました。 難しい障害も乗り越えながら、引き継いだ手綱を何とか制御できるようになってきたという所感です。 今年は18記事書きました。特に反響の大きかったエントリーは次の3つの記事でした。 内容の方向性もバラバラであまり何したいかよく分からなくなっていますね。どういう技術を学んでいくか悩んでいた一年だったと思います。ブログには書いていませんが、Vimのソースコードをいじったりmrubyのコードを読み込んだりしていた時期もありま…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/03/06/100000</id><title type="text">LLVM APIを使ってみよう！ 〜 Brainf**kコンパイラをIRBuilderで書き直してみた 〜</title><updated>2018-03-28T10:44:28+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/03/06/100000"/><summary type="html">先日LLVMの入門記事を書きました。 clangが吐くLLVM IR (Intermediate representation, 中間表現) を頼りに、Brainf**kのコンパイラを書いてみました。 itchyny.hatenablog.com この記事で書いたコードでは、直接printfでLLVM IRの命令を出力していました。 このステップを踏むことで、LLVM IRの命令をどう調べればいいかについて身についたと思います。 しかし、この「コンパイラ」は次のような問題がありました。 bf2llvmコマンドが出力するのがLLVM IRのために、lliやllcといったLLVM IRのランタイム…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/02/27/100000</id><title type="text">LLVMを始めよう！ 〜 LLVM IRの基礎はclangが教えてくれた・Brainf**kコンパイラを作ってみよう 〜</title><updated>2018-03-28T10:33:19+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/02/27/100000"/><summary type="html">コンパイラを作ってみたいと思っていても、アセンブリ言語はよくわからない。 パーサーみたいなコードは書いたことがあるけれど、コード生成の処理はさっぱりだ。 実行ファイルをバイナリエディターで見るとかなにそれ怖い。 そんな私なのですが、LLVMに興味を持ち始めています。 SwiftやRust、あるいはEmscriptenなど、近年注目されている言語やコンパイラ技術の中枢にはLLVMがあります。 アセンブリはよく分からなくてもLLVMを使いこなせるようになれば、マルチプラットフォームで実行ファイルを生成できる言語処理系を作るのではないか。 コンパイラ作ってみたいな、LLVMを使ってみようかなと思って…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/04/21/200000</id><title type="text">VimプラグインのTravis CIテストを複数のVimのバージョンで動かそう</title><updated>2018-03-28T10:30:13+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/04/21/200000"/><summary type="html">Vimプラグインにテストがあるのはあたりまえ。 そういう空気になってきたのはここ3年くらいのことでしょうか。 私自身、昔はあまりテスト文化に慣れておらず、「Vimプラグインみたいな小さなスクリプトにテストなんているのか？自分のプラグインは普段から使う、バグっていたらすぐ気がつくからテストなんていらないでしょ」と思っていました。 しかし、そういうテストのない自作プラグインがどんどん増えていき、3年4年と経ってしまうと自分のプラグインのコードを触りにくくなってきました。 昔はあまりVimプラグインの書き方に慣れていなかったので、酷いコードが絡み合っているのだけど、普段使う分には普通に便利なプラグイ…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/05/30/223000</id><title type="text">lightline.vimのREADME.mdを書き直しました</title><updated>2018-03-28T10:29:32+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/05/30/223000"/><summary type="html">lightline.vimはVimのステータスラインをいい感じにしてくれるプラグインです。 作って四年弱経つんですね。 おかげさまで多くのユーザーさまに使っていただいています。 itchyny.hatenablog.com github.com このREADME.mdを最近書き換えました。 ……… それだけかいな！って感じなのですが、いろいろと大変でした… 主に精神的に… つらい… プラグインを作った勢いと使って欲しいという強い思いで、プラグインを作ってすぐにREADME.mdをかなり詳しく書いていた そのために当初の設計や実装時の思いが強く出ていたが、初めてプラグインを触る人にとっては読みに…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/12/31/170000</id><title type="text">2017年を振り返って</title><updated>2018-03-28T10:27:47+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/12/31/170000"/><summary type="html">今年は仕事で関わっているプロダクトが大きな転換期を迎えて、様々な経験ができました。 ミドルウェアを自ら作り上げ、データをオンラインで移行し、運用を始めるというのはなかなか経験できないことだと思います。 サービスは以前より安定し、穏やかな年末を過ごしています。 今年は初めてカンファレンスで登壇しました。 慣れないことばかりで色々と戸惑いましたが、沢山の方に発表を聞きに来ていただいて嬉しかったです。 マネージドサービスを組み合わせて1つのソフトウェアを作り、それをサーバーレスミドルウェアとして抽象度を上げて捉えることができるようになったもの、このカンファレンスに参加してよかったことでした。 今年は…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/02/11/185306</id><title type="text">HaskellでDiscordのBotを作る</title><updated>2018-03-09T13:45:13+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/02/11/185306"/><summary type="html">Discordはゲーミング向けのテキストチャットと音声通話を兼ねるプラットフォームであり、「テキストチャンネル」と「ボイスチャンネル」の二種を好きなだけ作ることができる。もちろん音声を全チャンネルに常時垂れ流すわけには行かないので、通話するにはボイスチャンネルに参加するという手順を踏む必要がある。しかし、例えば誰かがやっているゲームに混ざろうとしてボイスチャンネルに参加しても、チャンネル外のユーザーにはいかなる通知も発生しないため、気づかれないままのことがよくある。 そこで、ボイスチャンネルに参加したとき、テキストチャンネルにその旨を投稿するボットを用意すれば、気軽に通話の合図を送れる。全員に…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/03/haskell-http-clienthaskellhttp.html</id><title type="text">[haskell] http-clientライブラリを利用してHaskellでHTTPクライアント機能を実装する</title><updated>2018-03-05T09:34:57.715+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/03/haskell-http-clienthaskellhttp.html"/><summary type="text">Haskellでは、http-clientライブラリを用いることで、HTTPクライアント機能を簡単に実装できます。http-client以外にも何種類かライブラリがありますが、今回はhttp-client, http-client-tlsの機能と使い方をまとめておきます。

本エントリで紹介するhttp-client, http-client-tlsライブラリの機能：

単純なHTTP GETリクエスト

主要な型の説明 

Managerのカスタマイズ 

https
proxy設定 
タイムアウト値の設定

Requestのカスタマイズ

ベーシック認証 
リクエストヘッダ 

Responseの操作

ストリーミング受信 
レスポンスヘッダの参照 

エラーハンドリング 






単純なHTTP GETリクエスト
{-# LANGUAGE OverloadedStrings #</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/12/13/170000</id><title type="text">Go言語のsyscall.Sysctlは最後のNULを落とす</title><updated>2018-03-02T17:07:49+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/12/13/170000"/><summary type="html">カーネルのパラメータを引いたり設定したりする時に便利なのが sysctl コマンドです。 $ sysctl kern.ostype kern.ostype: Darwin このコマンドのシステムコールをGo言語から叩いて、OSの種類を引いてみましょう。 func main() { ret, _ := syscall.Sysctl("kern.ostype") fmt.Printf("%s\n", ret) } Darwin 問題ないですね。 数字を返すものを叩いてみましょう。 $ sysctl machdep.cpu.feature_bits machdep.cpu.feature_bits:…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/12/23/082635</id><title type="text">猫でもわかる rkt + Kubernetes</title><updated>2018-02-28T00:36:58+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/12/23/082635"/><summary type="html">このエントリは Kubernetes Advent Calendar 2017 の 23 日目の記事です。ちなみに昨日は takezaki さんの「GCBを利用したContinuous Delivery環境」でした。 LT で使用したスライド 先日、市ヶ谷Geek★Night #16 の 10 分 LT 枠で、CoreOS 社によるコンテナ実装 rkt とその Kubernetes 連携について発表してきました。今回のエントリはこの LT の内容を補足しつつ、実際に手を動かして rkt を試せるような構成にしてあります。 Hello, rkt! rkt は、Docker の対抗馬として Cor…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/02/haskell-stack-install-cryptoniteno-such.html</id><title type="text">[haskell] stack install cryptoniteがno such instruction: `rdrand %r8'エラーで失敗する問題の対処方法</title><updated>2018-02-25T15:34:07.378+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/02/haskell-stack-install-cryptoniteno-such.html"/><summary type="text">手許の環境（mac）で、cryptoniteライブラリのビルドがエラーになる問題が発生したが、ネットの情報を元に解決できたので、その症状と手順をblogに残しておく。



エラーの症状：
stack install cryptoniteで以下のようなエラーが発生。
% stack install cryptonite
--  While building custom Setup.hs for package cryptonite-0.24 using:
      /Users/xxx/.stack/setup-exe-cache/x86_64-osx/Cabal-simple_mPHDZzAJ_2.0.1.0_ghc-8.2.2 --builddir=.stack-work/dist/x86_64-osx/Cabal-2.0.1.0 build --ghc-options " </summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/12/25/%E3%81%AA%E3%81%9C_Haskell_%E3%81%8C%E5%A5%BD%E3%81%8D%E3%81%AA%E3%81%AE%E3%81%8B</id><title type="text">なぜ Haskell が好きなのか</title><updated>2018-02-25T14:53:18+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/12/25/%E3%81%AA%E3%81%9C_Haskell_%E3%81%8C%E5%A5%BD%E3%81%8D%E3%81%AA%E3%81%AE%E3%81%8B"/><summary type="html">自分は Haskell が好きで休日は Haskell を書いています。そういうことを言うと関数型が好きなんですねと言われるのですが、Haskell のよさはそこじゃないと感じているので書き起こそうかと、筆を執りました。 というわけで、この記事は技術的文書というよりもお話です。Haskell を知らない人向けです。 この記事は Haskell Advent Calendar 2017 その3の6日めの記事です。6日が過ぎても担当のいない日だったため担当します。 関数型プログラミングだから Haskell が好きというわけではない まず、「Haskell というと手続き型とは全然違う関数型なんで…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2018/02/14/160833</id><title type="text">Haskellの実行バイナリにファイルを埋め込む</title><updated>2018-02-14T16:12:25+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2018/02/14/160833"/><summary type="html">コンパイルしてできる実行バイナリにファイルを埋め込みたいことがある。
アプリのGUIで使うアイコンとか機械学習の学習済みモデルとか。
Go では (現在では非推奨らしいが) go-bindata を使う場面だろうか。

Haskell ではそういうときには [file-embed](https://hackage.haskell.org/package/file-embed) パッケージが使える。
たとえば `[project root]/resources/lorem.txt` に置かれた [lorem ipsum](https://ja.wikipedia.org/wiki/Lorem_ipsum) テキストを埋め込む場合:</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/01/27/%E5%BC%8A%E5%90%8C%E4%BA%BA%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E3%81%AE%E3%82%A6%E3%82%A7%E3%83%96%E3%82%B5%E3%82%A4%E3%83%88%E3%82%92%E4%BD%9C%E3%82%8A%E3%81%BE%E3%81%97%E3%81%9F</id><title type="text">弊同人サークルのウェブサイトを作りました</title><updated>2018-01-28T12:39:56+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/01/27/%E5%BC%8A%E5%90%8C%E4%BA%BA%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E3%81%AE%E3%82%A6%E3%82%A7%E3%83%96%E3%82%B5%E3%82%A4%E3%83%88%E3%82%92%E4%BD%9C%E3%82%8A%E3%81%BE%E3%81%97%E3%81%9F"/><summary type="html">がんばった。 doujin.kakkun61.com GitHub Pages だからと Jekyll にしたけど、生成したものを置けばいいんだから Hakyll でもよかったな。変えようかなというところ。 後はレスポンシブ対応したい。</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/12/24/202404</id><title type="text">ガバガバAltJSを作った(言語実装 Advent Calendar 2017)</title><updated>2017-12-24T20:27:10+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/12/24/202404"/><summary type="html">qiita.com JavaScriptを書いていると、頻出する継続渡しのリフレインにうんざりさせられる。 foo.bar(function(result){ qux.baz(function(data){ hoge(function(r){ ... }); }); }); そこで、腕試しに継続モナドをベースにしたAltJS、jatkoを作った。フィンランド語で「継続」という意味だ(継続戦争から知った人も多いだろう)。しかし、なんの考えもなしに653行Haskellを書いた結果ガバガバな言語になってしまった。 Hello, world Haskellにだいぶ近いのでなんとなく読めるはず。 in…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/12/19/203500</id><title type="text">HaskellのABC(Haskell Advent Calendar 6th)</title><updated>2017-12-19T20:35:00+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/12/19/203500"/><summary type="html">Haskellといえば一文字変数名、一文字変数名といえばHaskellという{{要出典}}ほどにHaskellでは一文字の変数名がよく使われている。これは名前を考えるのをサボっているとは限らない。多相性によって変数が具体的な性質を持たないがゆえに、具体的な名前がつけられないというのが主な理由だ。あるいは、適切な名前があっても、既存の名前と被っているという場合もある。かといって完全なランダムというわけでもないので、一文字変数名はどのように選べばいいか考察していこう。 a よくある種: * アルファベットの最初であるaは汎用性が高い。型変数に使うのが王道だ。値レベルの変数として単体で使うことは意外…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/12/12/170000</id><title type="text">Go言語のHTTPリクエストのレスポンスボディーとEOF</title><updated>2017-12-12T18:16:42+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/12/12/170000"/><summary type="html">Reader interface の Read 関数は、どのタイミングで io.EOF を返すのでしょうか。 まずは strings.Reader で見てみましょう。 package main import ( "fmt" "strings" ) func main() { r := strings.NewReader("example\n") for { var b [1]byte n, err := r.Read(b[:]) fmt.Printf("%d %q %v\n", n, b, err) if err != nil { break } } } 結果 1 "e" &lt;nil&gt; 1 "x…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2016/07/02/174426</id><title type="text">Haskellの最近の例外ハンドリング</title><updated>2017-12-06T17:19:02+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2016/07/02/174426"/><summary type="html">どうもHaskellには標準のControl.Exceptionモジュールだけでなくmtlやexceptionsやexceptionalといった例外を扱うためのパッケージがあるらしいのだが、そのあたりのパッケージの選び方や使い方についてまとまった情報を見つけられなかった。 HaskellWiki例外のページも少々古いようで、deprecatedなものや統合される前のパッケージを書いていたりする。 調べた限り、mtlとexceptionsが今の主流っぽい。 その2つの使い方をまとめる。 なおバージョンはlts-6.1を基準としている。 mtl mtlパッケージのControl.Monad.Exc…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2016/08/28/175500</id><title type="text">続・Haskellの最近の例外ハンドリング</title><updated>2017-12-06T17:18:53+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2016/08/28/175500"/><summary type="html">前回 の記事ではHaskellの例外ハンドリングには exceptions パッケージを使えばいいのではないかと書いた。 ところが今年の6月に safe-exceptions という exceptions を拡張したようなパッケージがさる FPComplete から 発表 された。 そこでこの記事では safe-exceptions について調べてみる。 おそらくほぼ FPComplete の発表の受け売りになってしまうので英語を読める人は原文を読む方がいいかもしれない。 さすが FPComplete だけあってこれは既に LTS Haskell に入っている。 この記事では lts-6.14…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/haskell-library-2016</id><title type="text">Haskellライブラリ所感2016</title><updated>2017-12-06T17:18:40+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/haskell-library-2016"/><summary type="html">(これは Haskell Advent Calendar 2016 の7日目の記事です) 今年使ったり調べたりした Haskell ライブラリを広く紹介していく企画です。 あくまで今年使ったものなので新しいものばかりではないです。 また記事の性質上、紹介するものが偏っていてもご容赦ください。 Hackage にはすごい数のライブラリが登録されていて、 頼もしいことですが目が回りそうにもなってしまいます。 この記事が Haskell のライブラリを調べる上での指針になったら幸いです。 なおこの企画と方向性が似ているものとして State of the Haskell ecosystem ( 20…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2017/04/26/005415</id><title type="text">超技術書典でGHCJSの本を出します</title><updated>2017-12-06T17:18:31+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2017/04/26/005415"/><summary type="html">【告知】ニコニコ超会議2017と併催される超技術書典Day1(4/29)にて、GHCJSの入門的な本を出します。@y_taka_23 さんのスペースに委託する形になります。Haskell×JavaScriptに興味のある方はぜひA-04まで。 #技術書典 #超技術書典 pic.twitter.com/zUhiVc3CyX — しょしー 超技術書典A-04 (@syocy) 2017年4月25日 出します。 GHCJSの仕組みの話はほとんどなくて、あくまで使い方とか周辺事情の話になります。 GHCJSって昔は導入すること自体が難しくて、他のHaskell系AltJSに水をあけられている感があった…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2017/05/20/025021</id><title type="text">Haskellは真面目なアプリケーション開発に向いている</title><updated>2017-12-06T17:18:19+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2017/05/20/025021"/><summary type="html">qiita.com ↑の記事で（主題ではないと思うものの）Haskellの批判に結構な分量が割かれていて、その批判のなかに「ちょっと違うんじゃないかな」という点がいくつかあったので反論ぽいことを書きます。 "Haskell は真面目なアプリケーション開発には向いてない"について これには多分いくつか事例を挙げればよくて、 Facebook ではスパム等の攻撃と戦うためのシステムを Haskell で作っています。 Fighting spam with Haskell | Engineering Blog | Facebook Code | Facebook (この記事を書いている Simon …</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2017/08/14/235830</id><title type="text">HaskellとJSON、そしてレコード型</title><updated>2017-12-06T17:18:07+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2017/08/14/235830"/><summary type="html">HaskellのJSON周りについて、こうやるのがいいんじゃないかという私の現在のやり方を書きます。 題材としては、 Swagger Petstore に記されている REST API にリクエストを投げてレスポンスを取り出すというのをやります。 (Swagger ですが scaffold は使わず自分で HTTP クライアントライブラリを使います)。 基本方針は「出力は厳密に入力には寛容に」(出典失念) です。 もくじ JSONの前に: レコードのフィールドへのアクセス JSONの前に: レコードのデフォルト値 Haskellのデータ型→JSON JSONデータを含むHTTPリクエスト レス…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2017/08/27/003035</id><title type="text">GoのTickerみたいなやつをHaskellで作った</title><updated>2017-12-06T17:17:55+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2017/08/27/003035"/><summary type="html">github.com 作った。 GoのTickerはとてもシンプルな関数で、 指定した周期でチャネルに値を送るスレッドを生成する。 一定間隔で何かの処理を行いたいときに利用する。 今回作ったHaskell版もだいたい同じようなものを提供する。 実際のところパッケージにするには小さすぎる気もするけど、 Haskellパッケージ製作の練習をしたかったのでHackageのアカウントを取ってHackageに上げた。 練習のため、HaddockによるAPIドキュメントおよびhspecとdoctestによるテストも書いてある。 あとは何かCIを導入してGithubのページにCIのステータスを表示するような…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/a-tour-of-go-in-haskell</id><title type="text">A Tour of Go in Haskellを作ったのと、GoとHaskellの比較</title><updated>2017-12-06T17:17:38+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/a-tour-of-go-in-haskell"/><summary type="html">A Tour of Go in Haskell (日本語版/英語版) というサイトを作ったので、それの紹介をします。 https://a-tour-of-go-in-haskell.syocy.net/ja_JP/index.html Haskell は Go と同じく軽量スレッドやチャネルの機能があり、並行並列が得意な言語です。このサイトは A Tour of Go という Go のチュートリアルの並行性の章を題材として２つの言語を比較しています。</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/12/04/044908</id><title type="text">NGK2017B で Liquid Haskell について話してきました</title><updated>2017-12-04T04:49:08+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/12/04/044908"/><summary type="html">先日、毎年恒例のなごや LT 大会 NGK2017B / 名古屋合同懇親会 2017 忘年会 で発表してきました。 Liquid Haskell で普通の型システムの上を行け #NGK2017B from y_taka_23 www.slideshare.net 当日の動画は NGK2017B 第2部 - YouTube から見ることができます。 ちなみに NGK での発表は 5 年連続 5 回目です。前回まではモデル検査をテーマにしていましたが、今回はちょっと目先を変えて（とはいえ同じ形式手法の枠内ですが）もう少しプログラム寄りの題材として Liquid Haskell を選びました。 N…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/11/27/070558</id><title type="text">現在時刻をモックする Haskell ライブラリ time-machine を作ってみました</title><updated>2017-11-27T07:05:58+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/11/27/070558"/><summary type="html">主としてテスト時のために、現在時刻を操作する Haskell ライブラリを作成しました。Hackage にも登録済みです。 github.com 試しに次のコードを実行してみましょう。getCurrentTime しているはずなのに、返ってくる値が 1985 年 10 月 26 日になっているはずです。 module Main where import Control.Monad.TimeMachine import Control.Monad.Trans ( liftIO ) main :: IO () main = backTo (the future) $ do t &lt;- getCurr…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/11/06/090000</id><title type="text">Serverlessconf Tokyo 2017で『サーバレスアーキテクチャによる時系列データベースの構築と監視』という発表してきました</title><updated>2017-11-06T14:01:24+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/11/06/090000"/><summary type="html">先日開催されたServerlessconf Tokyo 2017にスピーカーとして参加しました。 2017.serverlessconf.tokyo Mackerelの今の時系列データベースは、マネージドサービスを組み合わせて作っています。 検証・実装・投入フェーズを終えて、運用・新機能開発フェーズに入っています。そんな中で、監視サービスを提供する私たちが、サーバーレスアーキテクチャで作ったミドルウェアをどのように監視しているかについてお話しました。 何かしら役に立つことや発想の元となるようなことをお伝えできていたらいいなと思います。 私も他の発表から様々なことを学びました。特に面白かった発表…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/10/25/033444</id><title type="text">技術書典 3 で新刊落としました</title><updated>2017-10-25T03:34:44+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/10/25/033444"/><summary type="html">先日、秋葉原で開催された技術系同人誌のオンリーイベント 技術書典 3 にサークル参加しました。 本当は新刊として Scala 用の静的解析ツール Stainless の入門書を頒布する予定で、サークルカットも完全にその線で準備していたのですが、残念ながら諸事情につき完成しませんでした。 事前にサークルチェックしてくださっていた 36 名の方々には大変申し訳ありませんでした。チェシャ猫先生の次回作にご期待ください。 何も並べるものがないのはちょっとどうかと思ったので、当日は 前回の技術書典 2 で頒布 した既刊『入門 LiquidHaskell』の PDF 版（ダウンロードカード）を持ち込みまし…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/10/18/202148</id><title type="text">Serverless Meetup Tokyo #6 で Kubernetes について話してきました</title><updated>2017-10-21T02:14:23+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/10/18/202148"/><summary type="html">先日行われた Serverless Meetup Tokyo #6 で、Kubernetes 上で動作する Serverless フレームワーク Fission について発表してきました。 Fission で 始める Containerless Kubernetes #serverlesstokyo from y_taka_23 www.slideshare.net 先週も 似たようなブログ を書いたような気がしなくもないですが、Kubeless と Fission を比較した前回の発表に対し、今回は話題を Fission に限定しています。一方で追加要素として、複数の Function を組…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/10/17/172322</id><title type="text">ステートマシン猛レース</title><updated>2017-10-19T18:19:14+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/10/17/172322"/><summary type="html">ストリーム処理ライブラリはHaskellにおいて競争の激しい分野の一つだ。ストリーム処理ライブラリとは大雑把に言うと、IOなどの作用を絡めながら値の列(ストリーム)を生成したり、処理したりする構造を提供するライブラリである。多くのライブラリは、以下の3種の構造を定義している。 生産者(プロデューサー): IOなどのアクションを伴いつつ値を生成する。 消費者(コンシューマー): 多くの場合モナド変換子になっており、await :: Consumer s m sのようなアクションを組み合わせ、値の列を処理するプログラムを書ける。 変換者(トランスデューサー): 入力を受け取りながら、出力もできる。…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/10/14/092409</id><title type="text">Kubernetes Meetup Tokyo #7 で Serverless について話してきました</title><updated>2017-10-14T09:24:09+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/10/14/092409"/><summary type="html">先日行われた Kubernetes Meetup Tokyo #7 で、Kubernetes 上で動作する Serverless フレームワークについて発表してきました。 Kubernetes でも Serverless したい！ #k8sjp from y_taka_23 www.slideshare.net Serverless on Kubernetes を謳うツールはいくつかありますが、今回はそのうち Kubeless と Fission に焦点を当て、それぞれのアーキテクチャの違いを比較してみました。 当日の補足 Twitter 上で反応をもらった点についていくつか補足します。 Fu…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/10/11/230117</id><title type="text">WindowsでのHaskell開発環境構築(2017年秋版)</title><updated>2017-10-13T23:20:39+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/10/11/230117"/><summary type="html">身の丈に合わないと形容されても仕方ないようなハイスペックなPCを買った。開発環境は当然作り直すことになるので、その軌跡を残しておく。 MSYS2 まずはMSYS2を入れる。これでツールチェーンが揃い、minttyというターミナルエミュレータもついてくる。 $ pacman -Syuu $ pacman -Sy git stack Haskellのビルドツールであるstackのインストーラを入手する。処理系から依存パッケージまで無難かつ自動的に用意してくれるので便利だ。 Home - The Haskell Tool Stack ただしstackはMSYS2上ではうまく動作しない。設定ファイル(…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/10/10/100000</id><title type="text">負荷を均すための『時間軸シャーディング』という考え方</title><updated>2017-10-10T10:46:10+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/10/10/100000"/><summary type="html">ウェブアプリケーションを作っていると、負荷を分散させるために「タイミングをばらけさせる」場面に時々遭遇します。 データの更新、キャッシュのフラッシュ、バッチ処理など様々な問題で、同じ構造が見られます。 例えば、スマホアプリからバックグラウンドで1時間ごとに何らかの情報をサーバーに送りたいとします。 愚直に毎時0分に更新処理を行うようにすると、すべてのユーザーから同じタイミングでリクエストが来てしまいます。 ですから、リクエストのタイミングをユーザーごとにばらして負荷を均す必要があります。 他のケースを考えます。 5分ごとにジョブを投入して何らかの更新を行うタスクがあるとします。 本来ならデータ…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/10/05/090000</id><title type="text">Mackerelのプラグインを書く楽しみ ― Rustでプラグインを書くためのライブラリを作りました！</title><updated>2017-10-07T14:43:39+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/10/05/090000"/><summary type="html">Mackerelは「エンジニアをワクワクさせる」ツールであることをサービスの大事な考え方の一つとして捉えています。 一体どういう場面でエンジニアはワクワクするのでしょうか。 簡単にインストールできるmackerel-agentや、直感的で触りやすい画面、チャットツールとの連携は大事な機能です。 しかし、監視ツールとしてもっと重要なのは、ミドルウェアのメトリックをどのように可視化し、何を監視するかということです。 Mackerelは公式のプラグインリポジトリに各種プラグインを揃えています (contributorの皆様ありがとうございます)。 これらはすべてGo言語で書かれています。 しかし、M…</summary></entry><entry><id>http://lotz84.github.io/posts/an-introduction-to-haskell-for-engineers.html</id><title type="text">エンジニアのための『Haskell入門』</title><updated>2017-10-03T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/an-introduction-to-haskell-for-engineers.html"/><summary type="html"></summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/08/15/C%23_%E3%81%A7%E3%83%A9%E3%83%B3%E3%82%AF_N_%E5%A4%9A%E7%9B%B8</id><title type="text">C# でランク N 多相</title><updated>2017-09-25T06:24:00+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/08/15/C%23_%E3%81%A7%E3%83%A9%E3%83%B3%E3%82%AF_N_%E5%A4%9A%E7%9B%B8"/><summary type="html">追記：これだと解決できていない。 C# に Sprache というパーサーコンビネーターがあるのだが、最近そいつを継続渡しスタイル（continuation passing style; CPS）にしてやろうと、Haskell のパーサーコンビネーター attoparsec を参考にいじっていた。 そこでこういう型があった。 newtype Parser i a = Parser { runParser :: forall r. State i -&gt; Pos -&gt; More -&gt; Failure i (State i) r -&gt; Success i (State i) a r -&gt; IResu…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/09/14/150435</id><title type="text">Haskell ライブラリにスターを送るツール thank-you-stars を作ってみました</title><updated>2017-09-14T15:04:35+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/09/14/150435"/><summary type="html">Haskell の GitHub レポジトリを眺めてみると、有名ライブラリであってもスター数が意外と少ないことがあります。かの Yesod ですら本記事執筆時点で 1,794 個であり、Rails の 36,933 個や Django の 28,165 個と比較すると文字通り桁違いです。 スター数は必ずしも OSS としての評価や価値を反映しませんし、そもそも Haskell ユーザの絶対数が少ないからと言ってしまえばそれまでなのですが、若干寂しい感じがしません？ 一方、先日 id:teppeis さんが 依存しているライブラリにスターを送る npm ツール を公開されていました。そこで真似し…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/08/06/154901</id><title type="text">FRPクライシス</title><updated>2017-08-06T18:18:29+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/08/06/154901"/><summary type="html">FRP(Functional Reactive Programming)は、リアクティブプログラミングと関数型プログラミングの性質を持つプログラミングパラダイムである。FRPは古典的FRPと矢矧のFRPに大別される。 古典的FRP 古典的(Classical)FRPは、非連続的な値の列Eventと、常に何らかの値を取るBehaviourの二種類の構造を導入したものである。 代表的な実装としてreactive-banana、euphoria、reflexなどが挙げられる。 Haskellにおいては、EventはIOを通じて非同期的に生成できる設計が多い。Eventはマップやフィルタリングができ、…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/08/02/230422</id><title type="text">快速のExtensible effects</title><updated>2017-08-03T08:52:52+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/08/02/230422"/><summary type="html">extensibleは拡張可能レコードだけでなく拡張可能作用(extensible effects)も用意している。拡張可能作用は一時期Haskell界隈で話題になったものの、今では人気も下火になってしまった。新しいバージョンをリリースした今、拡張可能作用の動機と使い方について改めて紹介しよう。 難行の一次関数 Haskellでモナドをカスタマイズする方法としては、transformersのモナド変換子がよく使われている。モナド変換子は、モナドをパラメータとして取り、新たな能力を付与したモナドにする構造だ。例えば、StateT sはモナド変換子の一つである。任意のアクションm aはliftを使…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/01/30/%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%E3%80%8F%E6%AD%A3%E8%AA%A4%E8%A1%A8</id><title type="text">『遠回りして学ぶ Yesod 入門』正誤表</title><updated>2017-07-25T03:40:10+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/01/30/%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%E3%80%8F%E6%AD%A3%E8%AA%A4%E8%A1%A8"/><summary type="html">kakkun61.booth.pm C91 版 電子版では修正済みです。 ページ 章節 誤 正 補足 3 はじめに Yesod の初歩的な解説が書かれた本の上巻です。 Yesod の初歩的な解説が書かれた本の上巻です。 7 1 リンク切れの検出や リンク切れの検出や 17 3.2 これは quasi quote（準引用）と呼ばれる これは quasi quotes（準引用）と呼ばれる 表記の統一 20 4.1 メモリーに文字のデータが メモリーに文字列のデータが 23 5.1 GHC Users Guidehttp://wiki.haskell.org/GHC GHC Users Guide …</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/07/08/%E2%80%9Cmeaningless_REX_prefix_used%E2%80%9D_%E2%80%9Cuse_of_REX.w_is_meaningless%E2%80%9D</id><title type="text">“meaningless REX prefix used” “use of REX.w is meaningless”</title><updated>2017-07-09T00:20:11+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/07/08/%E2%80%9Cmeaningless_REX_prefix_used%E2%80%9D_%E2%80%9Cuse_of_REX.w_is_meaningless%E2%80%9D"/><summary type="html">コマンドプロンプトや PowerShell でプログラムを実行したときに次のようなエラーが出て困っていた。 [0x7FFE822C2B00] ANOMALY : meaningless REX prefix used [0x7FFE85B3DDA0] ANOMALY : use of REX.w is meaningless (default operand size is 64) REX プレフィックスとは何ぞや。 ロングモードでは、64ビット化するにあたり、16ビット時代から存在した1バイトのinc/dec命令であるinc reg16/dec reg16命令(op 0x40〜0x4f)を廃…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/06/19/090000</id><title type="text">音量を調節できるCLIツールをGo言語で作りました！</title><updated>2017-06-19T09:01:35+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/06/19/090000"/><summary type="html">volumeコマンドを作りました。 音量の調整ってコマンドからどうやるんだろう、ポータブルな形でコマンドラインツールがあれば便利なのでは… と思ったので作りました。 macOSとUbuntuで動作確認をしています。 インストール go get -u github.com/itchyny/volume-go/cmd/volume getは今の音量を返します。set (0-100) で音量を設定できます。 $ volume get 25 $ volume set 20 $ volume get 20 up, down, mute, unmuteなど、直感的に使えるサブコマンドを揃えています。 $ …</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/06/07/210000</id><title type="text">Vimに自分の書いたパッチが取り込まれた！</title><updated>2017-06-08T15:33:13+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/06/07/210000"/><summary type="html">Vim 8.0.0623に私の書いたパッチが取り込まれました。 わーい ∩(＞◡＜*)∩ わーい！ もともとのきっかけは、自分のプラグインを開発している中で、[\u3000-\u4000]という正規表現に対する挙動がset re=1とset re=2で違うことに気がついたのです。 Vimは正規表現エンジンを2つ積んでいる恐ろしいエディターなのですが、この2つの正規表現エンジンの挙動に微妙な違いがあることに気がつきました。 新しいNFAエンジンではエラーは出ませんが、古いエンジンではエラーが出ます。 古い正規表現エンジンでは、[a-z] みたいなパターンで、[\u3000-\u4000]のように…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/05/22/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84</id><title type="text">関係と代数的データ型との相互変換についての妄想 その3</title><updated>2017-05-22T10:11:04+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/05/22/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84"/><summary type="html">思い付き その2 class QueryUser ? where queryUser :: (?) =&gt; Key -&gt; MonadDB User instance QueryUser ? where -- queryUser :: (HasFriends ?) =&gt; Key -&gt; MonadDB User query = … instance QueryUser ? where -- queryUser :: (HasName ?) =&gt; Key -&gt; MonadDB User query = … userFriends :: (HasFriends ?) =&gt; User -&gt; [User] …</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/05/21/120000</id><title type="text">Haskellで10を作るプログラムを書いてみたので動画で公開してみた</title><updated>2017-05-21T23:25:27+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/05/21/120000"/><summary type="html">最近Rui Ueyamaさんがコーディング動画をアップされているのを見て、私も動画を撮りたくなりました。題材をしばらく考えていたんですが、10を作るプログラムを書いてみることにしました。 www.youtube.com 後から見直すと色々ミスっていて、わりと焦っていることがわかります。なにかの癖で適当に bc -l とかやったのだけど、音声をあてる時は関係ないオプションだと勘違いしてしまいました。確かにglobされていたのはよくなかったけど、 echo '5 / (5 / (5 + 5))' | bc -l とかで考えてみると -l も必要なんですよね。2つの問題が起きていて混乱してしまった……</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/05/21/150903</id><title type="text">JJUG CCC 2017 Spring で Haskell on JVM について話してきました</title><updated>2017-05-21T15:14:00+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/05/21/150903"/><summary type="html">先日行われた JJUG CCC 2017 Spring で、JVM 上で動作する Haskell について発表してきました。 思ったほど怖くない！ Haskell on JVM 超入門 #jjug_ccc #ccc_l8 from y_taka_23 www.slideshare.net メインになるコンテンツはふたつの JVM 言語、Frege と Eta です。 今回はあくまでも Java のイベントなので、発表前半では Haskell の基本概念、特にモナドについてそれなりの時間を割いて説明してみました。さらにそれを踏まえて後半ではモナドを利用した Java ライブラリの呼び出しに焦点を…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/05/17/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84</id><title type="text">関係と代数的データ型との相互変換についての妄想 その2</title><updated>2017-05-17T15:13:55+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/05/17/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84"/><summary type="html">思い付き その1 型レベルのリストをクエリー函数に与えてやる。（DataKinds が有効） data Attr = Id | Name | Friends data User = User { id :: Int, name :: String, friends :: [User] } query :: Proxy '[??] -&gt; Key -&gt; MonadDB User userFriends :: Proxy '[Friends] -&gt; User -&gt; [User] リストだとダメだなーって気付いた。勝手に型の和が取られるわけじゃないからね。 それはそれとして、分からないところが2点。 …</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/05/16/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84</id><title type="text">関係と代数的データ型との相互変換についての妄想 その1</title><updated>2017-05-16T10:53:24+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/05/16/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84"/><summary type="html">OR マッパーみたいな、関係*1とデータ型との相互変換が機械的にできたら嬉しいなという話。 シンプルなのは簡単だしすでにできる。例えば次のような関係がある場合*2、 var user base relation { id integer, name string, } key { id }; var friends base relation { user1 integer, user2 integer }; これを単に次のようなデータ型に変換するのはいくらかのライブラリーで実現できる。 data User = User { id: Int, name: String } data Frien…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/05/07/100000</id><title type="text">gitのファイル変更日時をファイルのアクセス日時に設定</title><updated>2017-05-07T10:00:11+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/05/07/100000"/><summary type="html">普段使っているファイラーはファイルのアクセス日時でソートされるように設定しています。大きめのリポジトリをcloneしてコードを読む時に、意外とファイルの最終変更日時が参考になったりします。仕事で使うリポジトリや、定期的にpullしているなら、徐々に変更のないファイルはファイラーの下の方に移動していく (上の方からアクセス日時の降順として) のですが、cloneしたばかりだとこうは行きません。 要はgitリポジトリ内の各ファイルのアクセス日時を、そのファイルのgit履歴上での最終変更日時に戻したいという気持ちになるわけです。そうするとファイラー上でもいい感じにファイルがソートされるのです。 #!…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/05/06/060400</id><title type="text">超技術書典で同人誌『入門 LiquidHaskell』を頒布できませんでした</title><updated>2017-05-06T06:04:00+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/05/06/060400"/><summary type="html">先日、ニコニコ超会議内で行われた「超技術書典」にて、LiquidHaskell の同人誌でサークル参加してきました。 lh101.dodgsonlabs.com 技術書典 2 ではそこそこの部数が出た ので Haskell 同人誌の需要はゼロではないと踏んでいたのですが、びっくりするぐらい売れません でした。とりあえず後に続く人が同じ轍を踏まないように、今回の様子について記録しておきます。 頒布物 頒布した同人誌は以下の 2 種類です。前者は技術書典 2 で頒布したものの増刷、後者は id:kazeula さんから委託を受けた新刊です。 入門 LiquidHaskell −篩型による静的コード…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/02/28/Yesod_%E3%81%A8_HDBC-mysql_%E3%81%A8_haskell-relational-record_%E3%81%A7_%E2%80%9CCommands_out_of_sync%E2%80%9D</id><title type="text">Yesod と HDBC-mysql と haskell-relational-record で “Commands out of sync”</title><updated>2017-04-27T10:05:11+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/02/28/Yesod_%E3%81%A8_HDBC-mysql_%E3%81%A8_haskell-relational-record_%E3%81%A7_%E2%80%9CCommands_out_of_sync%E2%80%9D"/><summary type="html">Yesod と HDBC-mysql と haskell-relational-record を一緒に使っているのだが、MySQL サーバーに「Commands out of sync; you can’t run this command now」って言われてぐぬぬってなって、最近デバッグをがんばっている。とりあえず途中経過をメモしておく。 そもそも MySQL プロトコルの呼び出し順とか知らないので苦戦していた。 この辺でエラーが出ている。結合をしなければエラーは出ない。 import Import hiding (on) import Database.Relational.Query …</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/04/11/044041</id><title type="text">技術書典 2 で同人誌『入門 LiquidHaskell』を頒布しました</title><updated>2017-04-11T04:40:41+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/04/11/044041"/><summary type="html">先日、秋葉原で行われた技術書のオンリーイベント「技術書典 2」にて、LiquidHaskell の同人誌を頒布してきました。 lh101.dodgsonlabs.com LiquidHaskell は、SMT ソルバをバックエンドとして利用することで、Haskell の持つ型の表現力をより強化する仕組みです。通常の Haskell では型情報としてエンコードできない値レベルの制約を記述できるため、例えば「0 でない Int 型」を定義すればゼロ除算をコンパイル時に検知できます。以前の記事 にちょっとした解説があります。 当日は冊子版を 30 冊と PDF 版ダウンロードカードを 50 シリアル…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/03/30/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B82%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%BE%E3%81%99</id><title type="text">技術書典2にサークル参加します 「Haskell Yesod 本」</title><updated>2017-04-06T19:35:40+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/03/30/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B82%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%BE%E3%81%99"/><summary type="html">4月9日日曜日にアキバ・スクエアにて開催される技術書オンリー同人誌即売会「技術書典2」にサークル「趣味はデバッグ……」として参加します。 冬コミで頒布した『遠回りして学ぶ Yesod 入門』の誤字脱字等を修正して組版を改善したものを持っていきます。 新作はちょっと間に合うか…… 内容 内容は、下記となります。 ビルドツール Stack 効率のよい文字列の扱い Haskell の言語拡張 コンパイル時計算 Template Haskell Web Application Interface とは 簡単な Yesod の解説 ロガー用 Middleware を作る 詳しい内容は見本誌で確認ください…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2016/12/24/%E3%82%B3%E3%83%9F%E3%83%83%E3%82%AF%E3%83%9E%E3%83%BC%E3%82%B1%E3%83%83%E3%83%8891_%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%E3%80%8F</id><title type="text">コミックマーケット91 『遠回りして学ぶ Yesod 入門』</title><updated>2017-03-30T10:45:09+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2016/12/24/%E3%82%B3%E3%83%9F%E3%83%83%E3%82%AF%E3%83%9E%E3%83%BC%E3%82%B1%E3%83%83%E3%83%8891_%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%E3%80%8F"/><summary type="html">サークル「趣味はデバッグ……」の2冊目の頒布をコミックマーケット91にて行います！ 『遠回りして学ぶ Yesod 入門』 前回、技術書典で頒布した『遠回りして学ぶ Yesod 入門（上）』の増補改訂版という形になります。 対象読者 対象読者は前回通り、下記ような方になります。 Haskell の入門書は読み終わったよ Yesod のサンプルコード見たら知らない文法とかあって読めないよ 内容 内容は、下記となります。 ビルドツール Stack 効率のよい文字列の扱い Haskell の言語拡張 コンパイル時計算 Template Haskell Web Application Interface…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/03/28/Yesod_%E3%81%A71%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AB%E8%A4%87%E6%95%B0%E5%80%8B%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%81%8C%E3%81%82%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AF_identifyForm_%E3%82%92%E4%BD%BF</id><title type="text">Yesod で1ページに複数個フォームがある場合は identifyForm を使う</title><updated>2017-03-28T10:49:23+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/03/28/Yesod_%E3%81%A71%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AB%E8%A4%87%E6%95%B0%E5%80%8B%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%81%8C%E3%81%82%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AF_identifyForm_%E3%82%92%E4%BD%BF"/><summary type="html">resolver lts-5.4 で確認。 問題 1ページに複数個フォームがある場合、runFormPost はそれぞれのフォームの区別をしてくれません。どういうことかというと、例えば下記のような2つのフォームを利用するとします。 data AFormData = AFormData Text aForm :: Html -&gt; MForm Handler (FormResult AFormData, Widget) aForm = renderDivs $ AFormData &lt;$&gt; areq textField "A Text" Nothing data BFormData = BFormD…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/03/11/232319</id><title type="text">generateの罠</title><updated>2017-03-11T23:24:28+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/03/11/232319"/><summary type="html">vectorパッケージのData.Vectorにはgenerateという関数がある。 generate :: Int -&gt; (Int -&gt; a) -&gt; Vector a 型から全てを知ることはできないが、だいたい想像通りgenerate n fは[f 0, f 1, f 2, ...f (n - 1)]からなるVectorを生成する。しかし、これは要素を評価はしない。生成されるのはあくまでサンクのVectorだ。 Prelude &gt; import Data.Vector as V Prelude V&gt; V.length $ V.generate 5 (const undefined) 5 ve…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/02/12/%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%E3%80%8F%E8%AA%A4%E5%AD%97%E8%84%B1%E5%AD%97%E7%AD%89%E3%82%92%E4%BF%AE%E6%AD%A3%E3%81%97%E3%81%9F</id><title type="text">『遠回りして学ぶ Yesod 入門』誤字脱字等を修正した電子版を公開しました</title><updated>2017-02-12T01:49:25+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/02/12/%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%E3%80%8F%E8%AA%A4%E5%AD%97%E8%84%B1%E5%AD%97%E7%AD%89%E3%82%92%E4%BF%AE%E6%AD%A3%E3%81%97%E3%81%9F"/><summary type="html">先日の投稿で公開した正誤表の内容を反映した電子版を公開しました。 kakkun61.hatenablog.com コミックマーケット 91 で購入した方は対面電書で、オンラインで購入した方は BOOTH で更新後のファイルを入手することができます。</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2016/12/31/%E3%82%B3%E3%83%9F%E3%83%83%E3%82%AF%E3%83%9E%E3%83%BC%E3%82%B1%E3%83%83%E3%83%88_91_%E3%81%B5%E3%82%8A%E3%81%8B%E3%81%88%E3%82%8A</id><title type="text">コミックマーケット 91 ふりかえり</title><updated>2017-02-11T02:26:37+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2016/12/31/%E3%82%B3%E3%83%9F%E3%83%83%E3%82%AF%E3%83%9E%E3%83%BC%E3%82%B1%E3%83%83%E3%83%88_91_%E3%81%B5%E3%82%8A%E3%81%8B%E3%81%88%E3%82%8A"/><summary type="html">コミックマーケットお疲れさまでしたー。 Yesod 本 紙面版 完売！後は電子版のみ。電子版はいっぱいあります！ #C91 #Haskell #Yesod— kakkun61@技術書典2 う-04 (@kakkun61) 2016年12月29日 印刷分完売しました。ありがとうございますー。技術書典のときよりも早く売り切れたのはまさかという感じでした。技術書典が特別技術系が売れるのかと思っていたんですが、そうでもないんですね。もっと刷ればよかった。 スケジュール 8月 冬コミの申込セット、明日24時オンライン申込締切で、宅配が明日21時になったマン 不安しかない— kakkun61@技術書典2 …</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/01/23/100000</id><title type="text">二週間で簡単なインタープリタ言語を実装してみた (日記)</title><updated>2017-01-26T15:49:35+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/01/23/100000"/><summary type="html">私は昔から言語処理系に興味があり、自分で言語を作ることを夢見てきました。 しかし、いざ言語を実装しようと思って言語処理系に関する本を読んでも何から手を付けていいか分からず、アセンブラもまともに読めないまま、数年が経ってしまいました。 大学時代は情報系ではなかったため、コンパイラの実験がある情報系の学科のカリキュラムを羨ましく思い、情報系の授業の教科書を手にとって見ても読む気が起きず、自分に作れるのは所詮、構文木をちょこっといじって変換するレベルのもの (例えばsjspなど) にとどまっていました。 そんな中、去年のRebuild.fmで、とても感銘を受けた回がありました。 LLVMのlinke…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2016/12/31/Adobe_Typekit_%E3%81%AE%E3%83%95%E3%82%A9%E3%83%B3%E3%83%88%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E5%A0%B4%E6%89%80%EF%BC%88Windows%EF%BC%89</id><title type="text">Adobe Typekit のフォントファイルの場所（Windows）</title><updated>2016-12-31T18:00:02+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2016/12/31/Adobe_Typekit_%E3%81%AE%E3%83%95%E3%82%A9%E3%83%B3%E3%83%88%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E5%A0%B4%E6%89%80%EF%BC%88Windows%EF%BC%89"/><summary type="html">アプリがフォントをうまく認識しない場合にフォントファイルを直接インストールして対処したりできる。同一マシンならライセンス的にも大丈夫なはず。保証はしません。 環境 Adobe Photoshop CC 2017 Windows 10 場所 %appdata%\Adobe\Adobe Photoshop CC 2017\CT Font Cache にメタファイルがある。↓ のような項目が並んでいる。 %BeginFont Handler:DirectoryHandler FontType:Type1 FontName:AdobeDevanagari-Bold FamilyName:Adobe D…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2016/12/24/193038</id><title type="text">LiquidHaskell コトハジメ</title><updated>2016-12-25T15:06:06+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2016/12/24/193038"/><summary type="html">このエントリは Haskell Advent Calendar 2016 および Formal Method Advent Calendar 2016 の 23 日目の投稿です。のはずでしたがすでに日付が変わりました。謹んでお詫び申し上げます。 ちなみに 22 日目の担当者はそれぞれ Haskell Advent Calendar 2016 : heredocsの紹介 - Qiita Formal Method Advent Calendar 2016 : 農夫 山羊 キャベツ 狼 - Qiita です。偶然ですが同じ方が執筆担当ですね。 さて、本エントリでは Haskell の型の表現力をよ…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2016/12/19/060147</id><title type="text">NGK2016B で Kubernetes + Alloy について話してきました</title><updated>2016-12-19T06:01:47+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2016/12/19/060147"/><summary type="html">先日、毎年恒例のなごや LT 大会 NGK2016B / 名古屋合同懇親会 2016 忘年会 で発表してきました。 机上の Kubernetes - 形式手法で見るコンテナオーケストレーション #NGK2016B from y_taka_23 www.slideshare.net 当日の動画は NGK 2016B LT #2 - YouTube から見ることができます。 ちなみに NGK での発表は 4 年連続 4 回目です。今回も含めてすべてモデル検査が題材になっています。 NGK2013B : Alloy ではじめる簡単モデル検査 NGK2014B : 猫でもわかる！ モデル検査器 SPI…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/12/18/181540</id><title type="text">波打たせるものの正体(エクステンシブル・タングル)</title><updated>2016-12-18T18:15:40+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/12/18/181540"/><summary type="html">Haskell Advent Calendar 11日目 リアルワールドなHaskellerは、幾十ものフィールドを持つ大きなレコードをしばしば扱う羽目になる。モナディックにレコードを構築したい場合、RecordWildCards拡張を用いて以下のようにするのが定番だ。 import System.Random data Rec = Rec { foo :: String, bar :: Int, baz :: Double, qux :: Bool } makeRec = do foo &lt;- getLine bar &lt;- length &lt;$&gt; getLine baz &lt;- readLn qu…</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/12/haskellyesod-typedcontent.html</id><title type="text">[haskell][yesod] TypedContentを利用してクライアントが要求するフォーマットでレスポンスを返す</title><updated>2016-12-17T15:16:26.835+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/12/haskellyesod-typedcontent.html"/><summary type="text">Yesod Advent Calendar 2016の6日目の記事です。

RESTfulなAPIを提供する場合、クライアントの都合にあわせて、フォーマットを変えてレスポンスを返したいケースがあります。サーバー上で管理しているDBから、表現だけをHTML, JSON, XML, CSVなどに変更して返すイメージです。例えば、人物情報（名前、年齢、性別など）の一覧を返す際には以下のようなデータが返されることになります。

HTML
&lt;table border&gt;
  &lt;tr&gt;
    &lt;th&gt;name&lt;/th&gt;    &lt;th&gt;sex&lt;/th&gt;    &lt;th&gt;age&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Taro Yamada&lt;/td&gt;    &lt;td&gt;Male&lt;/td&gt;    &lt;td&gt;18&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Hanako Yamada&lt;/</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2016/12/11/%E5%B0%91%E5%A5%B3%E3%82%BB%E3%82%AF%E3%83%88</id><title type="text">少女セクト</title><updated>2016-12-11T00:01:06+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2016/12/11/%E5%B0%91%E5%A5%B3%E3%82%BB%E3%82%AF%E3%83%88"/><summary type="html">この記事は Krile Advent Calendar 11日目の記事です。 Krile いいですね。Wassr 民だったので Krile 2 のころから使ってました。 さて本題。 少女セクト 少女セクト (メガストアコミックス)作者: 玄鉄絢出版社/メーカー: コアマガジン発売日: 2005/08/19メディア: コミック購入: 24人 クリック: 440回この商品を含むブログ (177件) を見る なぜこれを買ったのかは正確には覚えてないのですが（おそらくなんらかの書評を読んだのだと思う）いわゆる「控えめに言って最高」というやつですね。 8日目の『星川銀座四丁目』と同じ作者の玄鉄絢さんです…</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/07/yesodhaskell-stack-new-xxx-project.html</id><title type="text">[haskell][yesod] stackのnewコマンドで指定できるyesod関連templateの説明</title><updated>2016-12-03T23:37:28.283+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/07/yesodhaskell-stack-new-xxx-project.html"/><summary type="text">現状、stackで指定できるyesod関連のtemplatesには以下のものがあります。どのtemplateに何が用意されているのか、知りたかったのですがどこにも説明されていないようなので、調べてまとめてみました。
% stack templates | grep yesod
yesod-hello-world （←現時点では削除されています）
yesod-minimal
yesod-mongo
yesod-mysql
yesod-postgres
yesod-postgres-fay
yesod-simple
yesod-sqlite


以下、各テンプレートの説明です。後に出てくるテンプレートほど内容が複雑になっています。テンプレートを指定して新しいプロジェクトを生成する場合は以下のコマンドを実行します。
% stack new プロジェクト名 yesod-???




</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/11/emacs-emacsgrep.html</id><title type="text">[emacs] emacs上のgrep関連機能、複数ファイルの一括置換手順のまとめ</title><updated>2016-11-30T10:03:25.873+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/11/emacs-emacsgrep.html"/><summary type="text">emacs上でgrep関連の機能を利用する際のTIPSをまとめておきます（よく忘れて調べ直すので…）。


grepコマンドのオプション

指定ディレクトリ以下のファイルを再帰的に検索

-R DIR    シンボリックリンクを辿る
-r  DIR    シンボリックリンクは辿らない

検索対象をファイル名でフィルタする

--include=GLOB    GLOBにファイル名を指定する。"*.cpp"のようにワイルドカード（*,?,[...]）を指定可能

検索対象から指定ファイル・ディレクトリを除外する

--exclude=GLOB   GLOBに除外するファイルのファイル名を指定する（ワイルドカード指定可能）。
--exclude-dir=DIR DIRに指定されたディレクトリをスキップ


使用例：

docディレクトリ以下の.txtを拡張子に持つ全てのファイルを対象に"</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/09/cygwin-cygwin64.html</id><title type="text">[cygwin] cygwin64セットアップメモ</title><updated>2016-11-28T00:47:36.358+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/09/cygwin-cygwin64.html"/><summary type="text">自分向け備忘録。cygwin64環境をセットアップする際の手順をまとめておきます。


設定


ssh-agent関連

ssh-agentの重複起動を防ぐ
ssh-agentのために秘密鍵セットアップ

~/.ssh/

※group/otherのrw権限は削除


ssh-agentがパスワードを覚えてくれなくなった問題への対処

pingのエラー回避
ユーザーのアカウント名、ホームディレクトリの変更

/etc/passwdを編集する

GNU screen でlessやvimの終了後に画面クリアをしない方法
改行コードにCR+LFが用いられているbashスクリプトを実行するための設定
tcshのデフォルト補完設定のイマイチな部分を修正




環境変数

HOME

ホームディレクトリを設定



SHELL

"/bin/tcsh"とすることでデフォルトのシェルが切り替わる
</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2016/11/20/163839</id><title type="text">Frege のチュートリアル集「Frege Goodness」を翻訳しました</title><updated>2016-11-20T16:38:39+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2016/11/20/163839"/><summary type="html">Frege のチュートリアル集を日本語に翻訳しました。原著は Dierk Koenig 氏による Frege Goodness · GitBook です。 www.gitbook.com 対象読者 まえがきでも述べられている通り、Frege の (すなわち Haskell の) 基本的な文法については既知のものとして扱われます。より具体的には「すごい Haskell」の前半部分を読んだ、ぐらいでしょうか。例えば型クラス自体は知っている必要がありますが、モナドに対する理解は要求しません。 ちなみに、目を通していただけるとすぐにわかりますが、実は Frege に特有な内容はさほど登場しません。どち…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2016/11/10/200000</id><title type="text">git grepで仕事してる</title><updated>2016-11-10T20:43:06+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2016/11/10/200000"/><summary type="html">私はコードを書く時に頻繁にgit grepを使っていて、一日に何回くらいgit grepを使っているのか気になったのでログを取ってみました。 2016 10/24 月: 61 2016 10/25 火: 36 2016 10/26 水: 19 2016 10/27 木: 80 2016 10/28 金: 51 2016 10/31 月: 96 2016 11/ 1 火: 47 2016 11/ 2 水: 53 2016 11/ 4 金: 84 2016 11/ 7 月: 56 2016 11/ 8 火: 33 2016 11/ 9 水: 19 2016 11/10 木: 71 これは私が会社の…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2016/10/31/025512</id><title type="text">HaskellのロガーKatipを試す</title><updated>2016-10-31T02:55:12+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2016/10/31/025512"/><summary type="html">モチベ Haskell の実行時ログ出力を行うライブラリは monad-logger が一番有名っぽい。 これは Yesod 陣営が開発しているから安心感があるし、バックエンドが fast-logger なので速度も信頼できる。 ただ (自分の調べ方が悪いのかもしれないが) ちょっと自分の用途には機能が足りなかった。 具体的には以下の機能: ログにタイムスタンプを付記したい。 ロガーに名前をつけたい。 ファイルサイズか日付でログローテーションしたい。 Katip という別のロガーライブラリは機能が豊富のようなので今回はそれを試してみる。 (この記事のHaskell環境: lts-6.23) K…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2016/10/30/155758</id><title type="text">Frege からメールが送信できるようになりました</title><updated>2016-10-30T17:31:40+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2016/10/30/155758"/><summary type="html">ちょっとした Web アプリを作成しようと思うと、メール送信機能がないと困ります。例えば、ログイン機能を持っていれば必然的にパスワードリセットとかも必要になりますからね。 Haskell 風の JVM 言語 Frege でもフレームワーク Chinook を使用して Web アプリが作れますが、メールを送信するライブラリが見当たらなかったので自作しました。 github.com なお、すでに Bintray に公開済みなので、各種ビルドツール経由で呼び出すことができます。現状、Frege のビルドは Gradle がデファクトスタンダードなので、以下でも Gradle で説明しましょう。 bi…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2016/10/23/201420</id><title type="text">JAWS FESTA 東海道 2016 で形式手法によるネットワーク設計について話してきました</title><updated>2016-10-23T20:14:20+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2016/10/23/201420"/><summary type="html">先日行われた JAWS FESTA 東海道 2016 で登壇してきました。 形式手法と AWS のおいしい関係。- モデル検査器 Alloy によるインフラ設計技法 #jawsfesta from y_taka_23 www.slideshare.net テーマは以前 AWS Summit で発表したものと同じですが、前回が 5 分の LT だったのに比べて今回は 25 分の枠を頂きました。そこで、形式手法を用いる動機を中心に据えた前回と比較して、以下のような実践的なトピックを充実させてあります。 Alloy を使うためにの最低限必要な言語機能を知る シンプルな Web サーバ周りのネットワー…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/10/10/000011</id><title type="text">割とすぐに始められるextensibleチュートリアル(レコード編)</title><updated>2016-10-10T00:50:06+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/10/10/000011"/><summary type="html">ごきげんよう諸君。今回はextensibleについて説明しよう。 extensibleはその名の通り、拡張可能なデータ構造を提供するライブラリである。具体的には、型レベルのリストによって特徴づけられる積と和を提供する。非常に残念なことに、GHC 8.0.1ではコンパイラのバグのせいでそもそもライブラリがビルドできない*1。来たる8.0.2では修正されているので、それを待つほかない。 とにかく、ここでは積の応用技である拡張可能レコードについて紹介する。使い方は簡単だ。まず使いたいフィールド名をスペースで区切ってmkFieldに渡す。 {-# LANGUAGE TemplateHaskell, D…</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/08/haskellyesod-yesodrestfuljson-api.html</id><title type="text">[haskell][yesod] YesodにおけるRESTfulなJSON API実装チュートリアル</title><updated>2016-08-28T17:53:43.356+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/08/haskellyesod-yesodrestfuljson-api.html"/><summary type="text">HaskellのwebフレームワークであるYesodにおいて、RESTful APIを実装する手順を紹介します。Haskell上のデータ構造をJSONテキストに変換する、逆に、JSONテキストをパースしてHaskell上のデータ構造を生成する、といった処理が非常に簡単に実現できます。加えて、コードを書かなくてもバックエンドのDBとのORマッピングが可能になっており、効率的に開発することができます。
ここで紹介しているコードはgithubにコミットしています。


準備：

json-sampleというプロジェクト名でYesodのscaffolding siteをセットアップする

空のプロジェクト生成

% stack new json-sample yesod-sqlite --system-ghc

"--system-ghc"は省略可能。インストール済みのghcを使うことを指示し</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/07/haskellyesod-stackyesod-tutorial.html</id><title type="text">[haskell][yesod] stack対応版Yesod tutorial</title><updated>2016-07-17T18:06:36.108+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/07/haskellyesod-stackyesod-tutorial.html"/><summary type="text">HaskellのwebサービスフレームワークにYesodというフレームワークがあります。Yesodに触れたことのない開発者向けに書かれたチュートリアルの一つにYesod tutorialがあり、手順に沿っていくだけで簡単なwebサービスを動作させることができ、Yesodで何ができるかを簡単に理解できるようになっています。
ただ残念なことに、このYesod tutorialの記載は内容が古く、stackを利用した現行の手順とマッチしなくなっています。stackに対応している最新環境（Yesod 1.4.x）における順があると役に立つと思い、書き起こしてみました。


Before the real start（はじめに）

Install（インストール手順）
stackをインストールする。以下のサイトが参考になります。

installation instructions for </summary></entry><entry><id>https://kurokawh.blogspot.com/2016/07/haskellyesod-stack-exec-yesod-devel.html</id><title type="text">[haskell][yesod] stack exec -- yesod devel で devel.hs: getAddrInfo: does not existというエラーになる問題の対処方法</title><updated>2016-07-17T17:39:43.279+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/07/haskellyesod-stack-exec-yesod-devel.html"/><summary type="text">
Widnwos環境での現象：
windows上でyesodのscafolding siteをセットアップし、さあ起動！ブラウザから接続確認してOKとなるはずが、なぜか「The application isn't built」という表示が出てしまいました。



このときターミナルには以下のようなログが出力されていました。
% stack exec -- yesod devel
Yesod devel server. Type 'quit' to quit
Application can be accessed at:

http://localhost:3000
https://localhost:3443
If you wish to test https capabilities, you should set the following variable:
  export </summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/05/03/211430</id><title type="text">写真の撮り方</title><updated>2016-06-14T23:59:05+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/05/03/211430"/><summary type="html">物体の発する光や反射した光を結像し、何らかの媒体に記録したものを写真と呼ぶ。カメラと呼ばれる道具には「撮影」という動作が必ず定義されており、撮影によって内部状態に画像を記録できる。内部状態を取り出して処理する(現像)ことで写真が得られる。大抵のカメラには以下のようなパラメータがあり、それらを最適化するのが撮影者の仕事になる。 焦点(Focus) はっきりとした像を得るには、光学系の焦点をそれに合わせる必要がある。最近のカメラは対象物の距離を測定し、自動で焦点を合わせる(オートフォーカス)機能を持っているものもある。 焦点距離(Focal length) 焦点距離が長いほど像は拡大されて見えるよ…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/04/08/215045</id><title type="text">今のところ比較的簡単なモナドの作り方</title><updated>2016-04-08T21:51:50+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/04/08/215045"/><summary type="html">準備 モナドを作るには、どんなモナドを作りたいか考える。モナドは一般に、どのようなアクションが使えるかによって特徴付けられる。その点ではオブジェクト指向におけるインターフェイスとよく似ている。 では、foo :: String -&gt; M Boolとbar :: M Intという二種類のアクションを持つモナドを作るとしよう。まず、どんなアクションが使えるかを表すデータ型を定義する。 {-# LANGUAGE GADTs #-} data MBase x where Foo :: String -&gt; MBase Bool Bar :: MBase Int GADT(一般化代数的データ型)の各データ…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/02/29/191740</id><title type="text">GHC 8.0.1/base-4.9.0.0の新機能まとめ</title><updated>2016-02-29T19:17:40+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/02/29/191740"/><summary type="html">GHC 8.0.1は、最上位の桁が変わるだけあって、かなり新しい機能が追加されている。 base-4.9.0.0 めっちゃインスタンスが増えた ghc/changelog.md at ghc-8.0 · ghc/ghc · GitHubを参照。あるべきインスタンスが存在することにより、孤児インスタンスを定義する必要がなくなるため、ぐっとストレスが減る。Monoid a =&gt; Monad ((,) a)、Traversable ZipListなど、いくつかは私がやった。 Semigroup ついにData.Semigroupが追加された。将来的にはこれはモノイドのスーパークラスになる。この変更に…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/04/haskell-cmdargs.html</id><title type="text">[haskell] cmdargsパッケージで楽々コマンドライン引数パース</title><updated>2016-02-11T01:10:46.307+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/04/haskell-cmdargs.html"/><summary type="text">コマンドラインツール実装時、オプション指定とか引数の並びとか考え始めると大変です。HaskellではSystem.EnvironmentモジュールからgetArgsという関数が提供されていますが、本エントリで紹介するcmdargsパッケージを利用すると以下のようなことが簡単にできます。

cmdargsパッケージの特徴：

データ構造を定義するだけで起動引数・オプションのパースができる
パース結果を型付きで参照することができる
パース失敗時には、原因がわかるエラーメッセージが表示される
--help, --versionオプションで表示される情報を自動で生成してくれる

Haskell版GNU getoptライブラリと比べて以下の2点が優れている、とHPには書かれています。

HLintコマンドラインのハンドリングが1/3の短さ
Cabal, darcsなどのmultiple mode</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/02/04/214714</id><title type="text">比を最適化する</title><updated>2016-02-04T21:47:14+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/02/04/214714"/><summary type="html">二つの負でない実数、を考える。比をある値に近づけたいといった条件が複数あり、それらを最適化したいとき、どうするのがよいだろうか。 序: 近道の階段 簡単な方法の一つとして考えられるのは、単純に比の差をとり、それらの平方の和を最適化の対象とするというものだ。 しかし、これは最適化の結果、しばしば、のどちらかが0にぶつかってしまう。これは目的関数として非常にいびつであり、直感的とも言いがたい。 破: バリアフリー化 0や1に近い比率は極端であり、望まれていない。境界に近づくほど目的関数が無限大に発散するようにできないだろうか。 そんなときに使えるのがロジットだ。ロジットは0より大きい1未満の実数を…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/11/haskellyesodsqlite-persistent.html</id><title type="text">[haskell][persistent][sqlite] Persistentパッケージ利用時にテーブルにインデックスを生成する方法</title><updated>2016-01-30T17:12:12.076+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/11/haskellyesodsqlite-persistent.html"/><summary type="text">PersistentパッケージにはMigration機能が備わっており、自動的にテーブルを生成してくれます。スキーマ変更を行った際にも、変換が可能な限りテーブル内のレコードを保持したまま新しいスキーマに変換してくれます（Migration機能については過去のエントリでまとめています）。

自分が利用する上で、インデックスやトリガーを生成する手順が紹介されておらず困っていたのですが、rawExecuteという関数を用いることで自由にDDLを発行できることがわかりました。以下その手順とサンプルを紹介しておきます。


サンプルコード：
以下は、personテーブルのnameカラムにインデックスをs生成するサンプルです。runMigration実行直後に、runExecuteを実行することでインデックスを生成しています。このサンプルではインデックスを生成しているだけですが、同じ手順でトリガーの</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/08/haskellyesodsqlite-persistentmigration.html</id><title type="text">[haskell][persistent][sqlite] Persistentパッケージのmigration機能のまとめ</title><updated>2016-01-30T17:11:40.032+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/08/haskellyesodsqlite-persistentmigration.html"/><summary type="text">HaskellでDB操作ができるPersistentパッケージの紹介をしましたが、このエントリではPersistentパッケージが提供しているmigration機能をまとめておきます。
DBを作って運用していると、機能追加や仕様変更に伴いスキーマ変更が必要になるケースが多々あります。このようなケースにおいてPersistentのmigration機能がどれくらい使えるのかを調べた結果です。


基本：
Persistetのmigration機構は（保守的なルールに沿って）スキーマ変更をある程度まで自動で処理してくれます。
ロードしたDB内のテーブル情報と、コードで定義されたEntity Definition（テーブル定義）を比較し、以下のケースにおいてスキーマの変更を行います。

カラムの型を変更した場合：

ただし、値の変換ができない場合には、DBによって拒否されることになります。

</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/01/haskellgccwin-windowshaskell.html</id><title type="text">[haskell][gcc][win] Windows版Haskell Platform付属のgccでC++11のコードをコンパイルする方法</title><updated>2016-01-15T00:45:37.692+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/01/haskellgccwin-windowshaskell.html"/><summary type="text">Windows版のHaskell Platformにはmingwが同梱されておりgccが含まれています。現在自分のPCにはHaskell Platform 2014.2.0.0をインストールしているのですが、これに付属されているgccでC++11のコードをコンパイルしようとすると、以下のようなエラーになってしまいました。
% gcc -std=c++11 cpp11.cpp
cc1plus.exe: error: unrecognized command line option '-std=c++11'


-stdオプションで"c++11"を指定しても、認識してくれません。
本家のサイトによると、'-std=c++11'オプションはgcc 4.7でサポートされたようです。これに対し、Haskell Platform 2014.2.0.0に付属されているgccのバージョンを確認したところ</summary></entry><entry><id>https://kurokawh.blogspot.com/2013/11/sqlite-sqlite.html</id><title type="text">[sqlite] SQLiteのロック・トランザクション関連仕様の整理</title><updated>2016-01-06T12:11:40.986+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2013/11/sqlite-sqlite.html"/><summary type="text">SQLiteは共有ロック・排他ロックの仕組みを備えており、プロセス内の複数スレッド、だけでなく、プロセスをまたぐ状態でSQLが同時に発行されても適切に処理されます。
トランザクションに複数のモードが存在し、指定するモードに依って取得されるロックが変わります。さらにSQLの内容に依存してロック状態が遷移するため、複数プロセスがアクセスしたときの挙動を正確に把握できるよう、仕様を整理してみました。
（文中の「プロセス」は、正確には「プロセス、もしくはスレッド」を意味します。）


DBのロック状態の種類：

UNLOCKED

ロックされていない状態。誰も読み書きしていない。DBの初期状態。

SHARED

read可、write不可な状態。複数プロセスが同時にSHAREDロックを取得可能。複数プロセスが同時にreadできることを意味する。DBがこの状態にあるとき、他のプロセスからの</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/12/30/220159</id><title type="text">デシリアライザとスキーマ</title><updated>2015-12-30T22:16:49+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/12/30/220159"/><summary type="html">盛大に遅れました… qiita.com 最近思いついたネタで実用性の高そうなものを紹介。 binaryやcerealのようなライブラリはデータを密にシリアライズするが、その際にフィールド名や型などの情報は失われてしまう。かといってそれらを一つ一つすべて含めるとひどく効率の悪いフォーマットになってしまう。そこで、スキーマを分離できるような仕組みを作れないかと考えて作ったのがこのクラスだ。 {-# LANGUAGE TypeFamilies, ScopedTypeVariables, FlexibleContexts, UndecidableInstances #-} import Data.Bi…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/07/cygwinhaskellemacs-mingwcygwincygdrivec.html</id><title type="text">[cygwin][haskell][emacs] MinGWでcygwinの"/cygdrive"パスにアクセスする裏技（cygwin環境のemacsでflycheckを動作させる方法）</title><updated>2015-12-27T23:55:24.842+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/07/cygwinhaskellemacs-mingwcygwincygdrivec.html"/><summary type="text">haskell関連のコマンドはMinGW上でビルドされているため、cygwin環境の"/cygdrive"から始まるパスには対応していません。haskell-hlintから呼び出されるhlintも当然この問題の影響を受けておりemacs関連の設定が適切にされていたとしても、以下のようなエラーが表示されてしまいます。



ミニバッファに表示されるエラー詳細：
Suspicious state from syntax checker haskell-hlint: Checker haskell-hlint returned non-zero exit code 1, but no errors from output: hlint.exe: Couldn't find file: /cygdrive/c/Users/Hiroyuki/tmp/flycheck_hello.hs



</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/12/10/200630</id><title type="text">正格フラグ、バンパターン、正格版関数・データ構造</title><updated>2015-12-10T20:06:30+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/12/10/200630"/><summary type="html">Haskellスペースリーク Advent Calendar 2015 9日目 Haskellerとて、時には厳しくならなければいけないこともある―― @fumieval, 2015 Haskellは遅延評価を基本としているため、場合によっては未評価の式が積もり非効率な状況に陥ることがある。これを防ぐため、部分的に正格評価にするための仕組みが用意されている。もちろんこれらは闇雲に使えばよいというものではない。使うべきポイントを把握し、これらを見逃さないようにしよう。 この記事では、それらの機能の正しい使い方、間違った使い方を紹介していこう。 カウンター・カウンターズ・サンクス 条件を満たす要素…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/11/haskellstack-stack-exec-ghcicouldnt.html</id><title type="text">[haskell][stack] stack exec ghciで”Couldn't match expected type"エラーが発生する問題の対処</title><updated>2015-11-08T15:09:21.187+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/11/haskellstack-stack-exec-ghcicouldnt.html"/><summary type="text">先日、haskellのパッケージ管理をcabalからstackに移行して「便利〜！」と感動していたところなのですが、stach exec ghciでソースをロードしようとすると"Couldn't match expected type: xxxxx"とエラーが発生する問題に遭遇しました。
ネットの情報を参考に解決することができたのでその手順をまとめておきます。


問題：
stack buildは成功するにもかかわらず、stack exec ghci xxx.hs（xxx.hsはbuild対象のファイル）がエラーになる。
stack exec ghci実行時のエラーログ：
% stack exec ghci FileToVec.hs
GHCi, version 7.10.2: http://www.haskell.org/ghc/  :? for help
[1 of 1] </summary></entry><entry><id>https://kurokawh.blogspot.com/2015/11/cygwin-cygwinpathusrbinusrlocalbin.html</id><title type="text">[cygwin] cygwinのシェル起動時にPATHの先頭に/usr/binと/usr/local/binが勝手に追加されないようにする</title><updated>2015-11-04T22:29:43.126+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/11/cygwin-cygwinpathusrbinusrlocalbin.html"/><summary type="text">cygwinのデフォルトの設定では、シェル起動時に以下の2つのディレクトリが自動的にPATHの先頭に追加されます。

/usr/local/bin
/usr/bin


cygwinでインストールされているコマンドと同名の別コマンドを優先して起動したい場合には、この設定が邪魔になります。
これを無効にするには以下の方法があります。お好みでどちらかを選択してください。

/etc/profileもしくは/etc/csh.loginの該当処理をコメントアウトする（bash / tcsh）

cygwinがPATHを上書きしているのは、/etc/profile（bashの場合）と/etc/csh.login（tcshの場合）です。これらのスクリプトを編集することで、/usr/binと/usr/local/binが勝手に追加されないようにできます。

ORIGINAL_PATHでPATHを上書き</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/10/27/234832</id><title type="text">動物、とくにヒトと性について</title><updated>2015-10-27T23:52:44+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/10/27/234832"/><summary type="html">我々脊椎動物は有性生殖をする。したがって、繁殖に寄与する性質が必然的に残り、そうでないものは消えてゆく。オスは精子、メスは卵を作り出すという非対称性があり、体つきや行動もそれに合わせるように決まるのは自然だ。一夫多妻制の種においては、オスはメスを取り合うためにより強靭で攻撃的な性質が要求される。日本では法律上一夫一妻制を取るが、その影響は強く残っているだろう。実際、オスとして生を受けた私も、コミュニティの中でそれを体感している。 生まれつきの体質か、育った環境のせいかは知らないが、幼いころは体が弱かった(3才のころ、両足飛びができなかったそうだ)。そのため、幼いころの私の趣味は読書、ままごとや…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/10/08/183215</id><title type="text">就職しました</title><updated>2015-10-08T18:32:15+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/10/08/183215"/><summary type="html">本日、Tsuru Capitalのポジションを得ました。 Tsuru Capitalはデリバティブの取引を行っている企業で、自動株取引の会社ではありません。取引に関わっている10人のメンバーのうち、創始者であるSimonを除く全員がHaskellerで、取引状況の分析や一部の取引の自動化など、あらゆるところにHaskellを使っているのが大きな特徴です。日本では数少ない、Haskellをメインに使っている企業の一つでもあります。 東京、シンガポール、バンクーバーにオフィスがあり、東京には私を含む5人の開発者と事務担当、Simonと愛犬テトがいます。 オフィスはオランダヒルズ森タワーRoPにあり…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/09/ssh-opensshssh-agent.html</id><title type="text">[ssh] OpenSSHのアップデートでssh-agentがパスワードを覚えてくれなくなった問題への対処</title><updated>2015-09-06T00:44:24.703+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/09/ssh-opensshssh-agent.html"/><summary type="text">ssh-agent/ssh-addを利用してsshを用いたサーバーへのログイン時のパスワード入力を省略している方、OpenSSHのアップデートにより、毎回パスワード入力を求められるようになった場合は以下の設定を疑ってみてください。


問題の症状：
OpenSSHパッケージを最新版にアップデートすると発生するようになった問題です。ssh-agentを起動してssh-addで鍵を正しく登録しているにも関わらず、sshコマンドを実行する度に"password:"というプロンプトが表示されてパスワードの入力を求められてしまいます。


環境：
問題に遭遇＆解決した私のcygwin環境では以下のバージョンで問題が発生することを確認しました。

OpenSSH_7.0p1, OpenSSL 1.0.2d 9 Jul 2015
OpenSSH_7.1p1, OpenSSL 1.0.2d 9 Jul </summary></entry><entry><id>https://kurokawh.blogspot.com/2015/09/cygwin-cygwinx-serverxwin.html</id><title type="text">[cygwin] cygwin版X server（XWin）にリモートクライアントから接続できない問題の対処方法</title><updated>2015-09-02T23:09:07.989+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/09/cygwin-cygwinx-serverxwin.html"/><summary type="text">cygwinを最新バージョンにアップデートしたところ、リモートのX clientからwindows上のcygwin版X serverに接続できなくなってしまいました。
対処方法は簡単でXWin起動時に"-listen tcp"オプションを付けてあげればよいだけです。cygwinバージョンアップ前にはオプション指定なしで接続できていたため、デフォルトの設定が変わったのだと思われます。


cygwin環境：
uname -aで表示されるcygwinバージョン情報です。

% uname -a
CYGWIN_NT-6.1 xxx 2.2.1(0.289/5/3) 2015-08-20 11:42 x86_64 Cygwin



問題発生時の症状：
クライアント側で起動したxtermをサーバー側で表示しようとすると、以下のようなエラーになっていました。
% xterm
xterm Xt </summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/08/30/210019</id><title type="text">カリー化</title><updated>2015-08-30T21:00:19+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/08/30/210019"/><summary type="html">鍋にオリーブオイルを入れる。 にんにくを細切りにし、入れる。しょうがを少しすりおろす。いつもの流れである。 玉ねぎの半分をみじん切りにし、鍋に入れ、しばらく炒める。 キャベツ、にんじん、ヒラタケ、残りの玉ねぎ、じゃがいも(皮ごと)を大き目に切り、蓋をしつつ少し間隔を置いて順に入れる。 しばらくしたあと、鶏肉を入れる。少量のクレイジーソルトとバターも入れた。 水は少しだけ加え、他は素材の水分に頼る。Vita Craftの性能に期待を寄せる。 ビタクラフトオフィシャルサイト｜全面多層鍋の無水調理で実証www.vitacraft.co.jp 市販のカレールウをある程度分割し、まぶすように入れる。6分…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/08/cygwinemacs-cygwinemacsgtags.html</id><title type="text">[cygwin][emacs] cygwin版emacsでgtagsを使えるようにする方法</title><updated>2015-08-17T00:49:02.649+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/08/cygwinemacs-cygwinemacsgtags.html"/><summary type="text">これまでタグジャンプにはctagsを用いていたのですが、gtagsの「呼び出し元も一覧できる」という機能に惹かれてセットアップしてみました。いくつかはまりポイントがあったのでその対応方法も含め、手順を残しておきます。
cgwin提供のパッケージにはgtagsは含まれていなかったため、自前でビルドすることにしました。


目次：

gatgsの特徴
gtagsのインストール手順
emacsの設定
gtagsの使い方




gtagsの特徴：

良い点！

関数の呼び出し元を一覧表示しジャンプできる（gtags-find-rtag）
関数だけでなく、ローカル変数を含む任意のシンボルをタグジャンプできる（gtags-find-symbol）

正規表現で一覧絞り込み可能（gtags-find-pattern）
開いているファイルで絞り込み可能（gtags-parsefiile）

特定文字列</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/06/subversion.html</id><title type="text">[subversion] 特定ディレクトリ以下をサーバーとの同期対象から除外する方法</title><updated>2015-06-26T13:55:24.651+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/06/subversion.html"/><summary type="text">subversionでチェックアウトした作業コピー内の特定ディレクトリ以下をサーバーとの同期対象から除外したい、ということを考えたことはないでしょうか。
例えば、リポジトリの特定ディレクトリ以下に自分にとって不要なファイルやアーカイブが多数コミットされていると、以下のような無駄が生じます。これらの無駄をなくしたい、というのが主なユースケースです。

不要なファイル・アーカイブによってディスクスペースが占有される
サーバー上に更新が発生した際にupdateに余計な時間がかかってしまう



単純に特定ディレクトリ以下の作業ファイルを削除してしまうと、コミット時に差分として検知されてしまう、また、次回以降のupdateコマンドで再ダウンロードされてしまう、という非常に残念な挙動になります。

このようなケースでは以下の方法を使えば、差分が検知されない状態で所定ディレクトリ以下のファイルを削除</summary></entry><entry><id>http://lotz84.github.io/posts/published_haskell_by_example.html</id><title type="text">Haskell by Exampleを公開しました</title><updated>2015-05-06T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/published_haskell_by_example.html"/><summary type="html"></summary></entry><entry><id>http://lotz84.github.io/posts/build-chat-server-on-haskell.html</id><title type="text">Haskellでチャットサーバーを建ててみた</title><updated>2015-04-27T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/build-chat-server-on-haskell.html"/><summary type="html"></summary></entry><entry><id>http://lotz84.github.io/posts/unity-hands-on-session-at-camphor.html</id><title type="text">Unityハンズオン勉強会に参加しました@CAMPHOR-</title><updated>2015-04-25T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/unity-hands-on-session-at-camphor.html"/><summary type="html"></summary></entry><entry><id>http://lotz84.github.io/posts/the-way-of-separate-compilation-in-swift.html</id><title type="text">Swift で分割コンパイルする方法</title><updated>2015-02-07T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/the-way-of-separate-compilation-in-swift.html"/><summary type="html"></summary></entry><entry><id>http://lotz84.github.io/posts/use-selenium-by-haskell.html</id><title type="text">HaskellでSeleniumを使ってみる＠勉強会</title><updated>2014-12-14T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/use-selenium-by-haskell.html"/><summary type="html"></summary></entry></feed>