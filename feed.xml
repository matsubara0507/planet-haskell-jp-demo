<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom"><title type="text">Planet Haskell (JP)</title><id>https://matsubara0507.github.io/planet-haskell-jp-demo/feed.xml</id><updated>2019-03-02T16:18:00+09:00</updated><link href="https://matsubara0507.github.io/planet-haskell-jp-demo"/><entry><id>http://hiratara.hatenadiary.jp/entry/2019/03/02/161800</id><title type="text">mariadbのdokcer imageの10.2と10.3でmysql.dbが違う</title><updated>2019-03-02T16:18:00+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/03/02/161800"/><summary type="html">https://hub.docker.com/_/mariadb 10.2 の方では、 MYSQL_USER で test_ データベースを作れない。 mariadb:10.2 の mysql.db 。 MariaDB [mysql]&gt; SELECT Host, Db, User, Create_priv FROM db; +------+--------------+----------+-------------+ | Host | Db | User | Create_priv | +------+--------------+----------+-------------+ | % …</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2019/03/01/090000</id><title type="text">gore 0.4.0をリリースしました！</title><updated>2019-03-01T09:00:03+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2019/03/01/090000"/><summary type="html">Go言語のREPL、goreの0.4.0をリリースしました。 id:motemenさんに連絡をとって、goreのコミット権をいただきました。 最初はpull requestが溜まっていたので片付けて、細かいバグ修正などを行いました。 しばらく触っていると慣れてきたので、新機能も実装して入れました。 かなり便利になっているので、ぜひアップデートして (またはインストールして) お使いください。 go get -u github.com/motemen/gore/cmd/gore バグ修正 特定のケースで Evaluated but not used というエラーが出ることがあるのを修正しました …</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/02/26/Servant_%E3%81%A8_Relational_Record_%E3%81%A7%E3%82%A6%E3%82%A7%E3%83%96%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E9%96%8B%E7%99%BA</id><title type="text">Servant と Relational Record でウェブアプリケーション開発</title><updated>2019-02-27T15:29:35+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/02/26/Servant_%E3%81%A8_Relational_Record_%E3%81%A7%E3%82%A6%E3%82%A7%E3%83%96%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E9%96%8B%E7%99%BA"/><summary type="html">Servant とは Servant は型レベルプログラミングによって、ウェブアプリとしてのインターフェースと実装との差異を防ぐことのできるウェブアプリフレームワークです。 haskell-servant.readthedocs.io 日本語記事としては lotz さんのこちらが分かりやすいので、参考にしてください。 qiita.com Haskell Relational Record とは Haskell Relational Record は言語内 DSL によって SQL を生成するもので、正しくない SQL に相当するものは型エラーとなります。 khibino.github.io こ…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/01/05/201505</id><title type="text">WSL上でcircleci local executeをするための試行錯誤</title><updated>2019-02-27T08:23:02+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/01/05/201505"/><summary type="html">ハマったのでメモ。 大前提として、 WSL と Docker for Windows をうまく連携しておく必要がある。 以下のような手順。 qiita.com ただし、 Bash on WindowsでDockerを使えて便利になったけど相対パスを指定すると不具合が出る についてはもっと楽な解決法がある。 WSL 上に /etc/wsl.conf というファイルをおけば WSL 側のマウントポイントを変えられるので、これを Docker for Windows に合わせてしまえば良い。 Automatically Configuring WSL – Windows Command Line T…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/02/27/032421</id><title type="text">Docker Meetup Tokyo #28 で Scheduler のカスタマイズについて話してきました</title><updated>2019-02-27T03:24:21+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/02/27/032421"/><summary type="html">先日行われた Docker Meetup Tokyo #28で、Kubernetes Scheduler の挙動をカスタマイズする方法について発表してきました。 なお Scheduler のカスタマイズについては、つい最近 Kubernetes Meetup Tokyo #16 でも発表しています。ドキュメント類へのリンクも含めてまとめたものが以下の記事です。 ccvanishing.hateblo.jp 両方のスライドを見比べて頂ければ分かる通り、内容としてはオーバラップしている部分がかなりあります。 ただし、前回はあくまでも Scheduling Framework の解説であったのに対し…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/02/15/181806</id><title type="text">旅のチェックリスト</title><updated>2019-02-25T15:44:26+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/02/15/181806"/><summary type="html">筆者が旅に出る際に確認する項目をまとめた。 事前の準備 渡航ビザ: 必要な場合もあるので事前に確かめよう。 ESTA(アメリカの場合): どんな理由であれUSに入国する場合申請する必要がある。大抵すぐ承認されるが、遅くとも出発の72時間前に済ませるべきである。 宿: 好みに応じてホテルでもAirBnBなどで民泊を予約しても。後者はキッチンが用意されているところもある。 交通手段: 電車は大抵の場合当日で大丈夫だが、もちろん船舶や航空機の場合は予約が必須である。 冷蔵庫の整理: 日持ちしないものは消費してしまおう。 携帯するもの 財布: 財布は現金やカードを収納する。リスク回避の観点から財布は省…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2019/02/22/193916</id><title type="text">Kubernetes Meetup Tokyo #16 で Scheduling Framework について話してきました</title><updated>2019-02-22T19:39:16+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2019/02/22/193916"/><summary type="html">先日行われた Kubernetes Meetup Tokyo #16 で、現在 Scheduling SIG で進められているプロジェクト Scheduling Framework について発表してきました。 Kubernetes では、Pod をどの Node に配置するかを決める手続きをスケジューリングと呼びます。 古典的な Kubernetes の用途、すなわち通常の long-running なサーバ群の管理においては、Pod のスケジューリングは比較的シンプルな問題でした。すなわち、Node の障害時でも可用性が保てるように Pod を複数の Node に散らし、一度立ち上がった P…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2019/02/12/191002</id><title type="text">ある期間内に更新されたデータを素早く検索できるモデル</title><updated>2019-02-13T15:49:35+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2019/02/12/191002"/><summary type="html">特定の技術とは関係ない、誰でも思いつきそうな、でも便利なお話。 こんなケースを考えてみよう。 人気のトレーディングカードゲームAugur Unlimitedを扱うショップ「しらさぎ商店」では、1000種類にも及ぶカードの買い取り・販売をしている。記録のため、カードごとに日時、価格、在庫数などをまとめたレコードを毎日データベースに書き込んでいる。 新着・売り切れや、価格の変化などを、指定された期間について一覧で表示するようなWebページを作りたいとオーナーは考えた。しかし、ユーザーからの要求ごとに全データの差分を取るのは、あまり効率的な手段とはいえない。レアなカードでもない限り価格は一定であるこ…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/02/12/214858</id><title type="text">【朗報】健康になるために酒を辞める必要はなかった</title><updated>2019-02-12T21:48:58+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/02/12/214858"/><summary type="html">前回の健康診断で、高脂血症のため要治療というショッキングな結果が出た。どうせ医者に行けば禁酒しろと言われると思い、2018年は完全に酒を絶った。本当に一滴たりとも酒は飲んでいない。 そして一年後の健康診断の結果がこちら。 健康診断の結果 変わってないよ！ 禁酒しても健康にはならないという貴重な実験結果である。 辞めるべきだったのは酒や食物 1 ではなく人生だったようだ。病院へ行きます。 同様の理由で肉類を経って7年、毎朝納豆を摂るようにしている。平日の昼食を COMP に変えて1年。カフェインも秋頃から摂るのを止めた。↩</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/02/11/165919</id><title type="text">django.urlsのコードリーディング</title><updated>2019-02-11T16:59:19+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/02/11/165919"/><summary type="html">django ではURLのルーティングを django.urls パッケージで処理している。このパッケージのソースはなかなか読みにくいので、読むための手がかりを記しておく。 バージョンは2.1を仮定していることに注意1。 クラス階層 django.urls パッケージでは継承もインタフェースも使っていないダックタイピングの見本のようなコードになっており 2 、この点が読みにくくしている一番の要因である。しかも、歴史的な都合なのか、クラスの命名規則にも致命的なわかりにくさが存在している。まずは主要なクラスの構造を説明することで見通しを良くする。 リゾルバ いちばん重要な概念はリゾルバである。リゾ…</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-02-04-re-recommend-marp.html</id><title type="text">Re: Marp のすゝめ</title><updated>2019-02-04T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-02-04-re-recommend-marp.html"/><summary type="html">&lt;article class="post card" itemscope itemtype="http://schema.org/BlogPosting"&gt;
 &lt;div class="card-content"&gt;
  &lt;header class="post-header"&gt;
    &lt;h1 class="post-title" itemprop="name headline"&gt;Re: Marp のすゝめ&lt;/h1&gt;
    &lt;p class="post-meta"&gt;
      &lt;time datetime="2019-02-04" itemprop="datePublished"&gt;
        Feb 4, 2019
      &lt;/time&gt;
      
      
      &lt;div class="tags"&gt;
          &lt;i class="fa fa-tags"&gt;&lt;/i&gt; &lt;a href="/tags/Marp.html"&gt;Marp&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;&lt;a href="https://yhatt.github.io/marp/"&gt;Marp&lt;/a&gt; というのは Markdown 記法で書けるスライド作成ツールです．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Markdown 記法で手軽に書ける&lt;/li&gt;
&lt;li&gt;見た目が綺麗&lt;/li&gt;
&lt;li&gt;画像の拡縮が可能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;などの特徴から個人的にかなり重宝しています． その辺りは昔&lt;a href="/posts/2016-12-14-recommend-marp.html"&gt;記事にしました&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;しかし，現在 Marp は今後メンテナンスをしないという明言をし，新しくゼロから &lt;a href="https://github.com/marp-team/marp"&gt;Marp Next&lt;/a&gt; というのを作っているようです． そのあたりの話は作者の記事にすこーしずつ書いてあります:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://yhatt.hatenablog.jp/entry/2017/02/27/markdown-it-incremental-dom_というプラグインを作ってます"&gt;markdown-it-incremental-dom というプラグインを作ってます - YHATT (わいはっと)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/yhatt/items/874d5bfa919c32728403"&gt;Puppeteer &amp;amp; Carlo を Markdown スライド作成 CLI ツール (Marp CLI) で活用する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;時折，リポジトリをチェックして更新がないかを見ていたのですが，いよいよ Web UI まで出来上がっているので，現状のを試しに使ってみることにしました，というメモです．&lt;/p&gt;
&lt;h1 id="section"&gt;&lt;/h1&gt;
&lt;p&gt;ちなみに，本記事での Marp Next のバージョンは &lt;code&gt;marp-cli-0.6&lt;/code&gt; ぐらいを想定しています(現在開発が活発なので既に古くなっているかも)．&lt;/p&gt;
&lt;h2 id="marp-next"&gt;Marp Next&lt;/h2&gt;
&lt;p&gt;新しい Marp の大きな目的は，よりメンテナブルな設計になることのようで，旧 Marp と異なり，機能ごとに個別の JS パッケージとなっている:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class="header"&gt;
&lt;th style="text-align: center;"&gt;リポジトリ&lt;/th&gt;
&lt;th&gt;備考&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class="odd"&gt;
&lt;td style="text-align: center;"&gt;&lt;a href="https://github.com/marp-team/marp"&gt;marp-team/marp&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Marp 全体を取りまとめるリポジトリ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td style="text-align: center;"&gt;&lt;a href="https://github.com/marp-team/marpit"&gt;Marpit&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Markdown からスライドの HTML へ変換する部分 (画像の拡縮などもココ)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td style="text-align: center;"&gt;&lt;a href="https://github.com/marp-team/marp-core"&gt;Marp Core&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Markdown 以外の拡張構文 (e.g. LaTeX, Emoji, Embed HTML)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td style="text-align: center;"&gt;&lt;a href="https://github.com/marp-team/marp-cli"&gt;Marp CLI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Marp の CLI ツール&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="odd"&gt;
&lt;td style="text-align: center;"&gt;&lt;a href="https://github.com/marp-team/marp-web"&gt;Marp Web&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Marp の Web UI (まだベータっぽい)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class="even"&gt;
&lt;td style="text-align: center;"&gt;Marp Desktop&lt;/td&gt;
&lt;td&gt;Marp Web を Electron でラップして Desktop アプリにしたいらしい (まだ無い)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;(どうでも良いですが，モノリポにした方良かったと思う… Marpit で更新があると全てのリポジトリで PR を出して更新する必要があるので…)&lt;/p&gt;
&lt;p&gt;ちなみに，&lt;a href="https://github.com/yhatt/marp/issues?q=is%3Aopen+is%3Aissue+label%3A%22Supports+in+Marp+Next%22"&gt;旧 Marp のリポジトリの Issue ラベルに &lt;code&gt;Marp Next&lt;/code&gt; や &lt;code&gt;Supports in Marp Next&lt;/code&gt; というのができている&lt;/a&gt;． 旧 Marp の Issue には，かなり要望っぽい Issue がたくさんあり，その中でも Marp Next では対応する予定のものには &lt;code&gt;Support in Marp Next&lt;/code&gt; を付けたようだ．&lt;/p&gt;
&lt;h3 id="旧-marp-との非互換な機能"&gt;旧 Marp との非互換な機能&lt;/h3&gt;
&lt;p&gt;これらは旧 Marp ユーザーしか意味ないが，適当に書き連ねていおく:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;&lt;code&gt;==AAA==&lt;/code&gt; というハイライト機能がない（辛い）&lt;/li&gt;
&lt;li&gt;打ち消し線記法 &lt;code&gt;~~AAA~~&lt;/code&gt; もない&lt;/li&gt;
&lt;li&gt;画像の拡縮ルール (Marpit)
&lt;ul&gt;
&lt;li&gt;より&lt;a href="https://marpit.marp.app/image-syntax"&gt;細かいルールができて&lt;/a&gt;書きやすくなった&lt;/li&gt;
&lt;li&gt;しかし前のは記法は非互換&lt;/li&gt;
&lt;li&gt;&lt;code&gt;center&lt;/code&gt; がないので中央寄せができない&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;!-- *template: xxx --&amp;gt;&lt;/code&gt; のようなそのページだけ機能追加 (Marpit)
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;!-- _class: xxx --&amp;gt;&lt;/code&gt; のように先頭にアンダースコア &lt;code&gt;_&lt;/code&gt; を付けるスタイルになった&lt;/li&gt;
&lt;li&gt;ちなみに &lt;code&gt;&amp;lt;!-- $theme: xxx --&amp;gt;&lt;/code&gt; はあるっぽい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;テーマの取り扱い (Marpit ??)
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#&lt;/code&gt; だけだと中央寄せなどになっていた機能がなくなった&lt;/li&gt;
&lt;li&gt;それらはテーマのイチ &lt;code&gt;class&lt;/code&gt; となっている&lt;/li&gt;
&lt;li&gt;前の &lt;code&gt;template&lt;/code&gt; も &lt;code&gt;class&lt;/code&gt; なので組み合わせれない&lt;/li&gt;
&lt;li&gt;明示的に指定できるようになったのは嬉しい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;KaTeX のバージョンアップ (Marp Core)
&lt;ul&gt;
&lt;li&gt;0.6.0 =&amp;gt; 0.10.0&lt;/li&gt;
&lt;li&gt;0.6.0 だと全然 LaTeX 記法をサポートしていないので&lt;a href="https://katex.org/docs/supported.html"&gt;助かる&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;まぁ僕はフォークしてバージョンをあげてたけど&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;スライドのサイズ・縦横比 (Marpit)
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/marp-team/marpit/blob/9ab8e153e66db3a55e8edf9fec1356dd60ddf9e6/docs/theme-css.md#slide-size"&gt;テーマごとになったぽい&lt;/a&gt;？&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marpit.marp.app/directives?id=tweak-theme-style"&gt;&lt;code&gt;style&lt;/code&gt;&lt;/a&gt; で上書きすると変な余白ができる&lt;/li&gt;
&lt;li&gt;どっちにせよ前の &lt;code&gt;&amp;lt;!-- size: 4:3 --&amp;gt;&lt;/code&gt; みたいなのはできないっぽい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ちなみに，コードが全部 CoffeScript から TypeScript になってた．&lt;/p&gt;
&lt;h2 id="cli-を試す"&gt;CLI を試す&lt;/h2&gt;
&lt;p&gt;リッチすぎてビビる&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;README の通りで動いた (Mac, npx)
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;npx @marp-team/marp-cli slide.md&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hub.docker.com/r/marpteam/marp-cli/"&gt;Docker もサポートされてる&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;ただし一部機能に制限があるっぽい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Markdown から HTML を生成する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--pdf&lt;/code&gt; オプションで PDF を生成する
&lt;ul&gt;
&lt;li&gt;ただし &lt;strong&gt;&lt;a href="https://github.com/marp-team/marp-cli/pull/10"&gt;セキュリティの関係&lt;/a&gt;でデフォルトではローカルファイルの画像などを埋め込めない&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;そのためローカル画像を使うには &lt;code&gt;--allow-local-files&lt;/code&gt; をつける&lt;/li&gt;
&lt;li&gt;日本語フォントも変になっている気がする&lt;/li&gt;
&lt;li&gt;日本語検索もダメっぽい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--watch&lt;/code&gt; オプションで Markdown の変更を検知し再生成する&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--server&lt;/code&gt; オプションで &lt;code&gt;localhost:8080&lt;/code&gt; で閲覧やPDFの生成ができる (watch もされます)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--preview&lt;/code&gt; でプレビューモード
&lt;ul&gt;
&lt;li&gt;待望の！！&lt;/li&gt;
&lt;li&gt;ブラウザの全画面モードを使ってるみたい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--theme&lt;/code&gt; でカスタムテーマを設定可能 (CSS)&lt;/li&gt;
&lt;li&gt;CLI のオプションを使わずに&lt;a href="https://github.com/marp-team/marp-cli#configuration-file"&gt;設定ファイルでも設定可能&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;package.json&lt;/code&gt; &lt;code&gt;.marprc.yml&lt;/code&gt; &lt;code&gt;marp.config.js&lt;/code&gt; のどれでも&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="cli-netlify-を試す"&gt;CLI + Netlify を試す&lt;/h2&gt;
&lt;p&gt;試した:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matsubara0507/pub-slides"&gt;matsubara0507/pub-slides - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://matsubara0507-slides.netlify.com/"&gt;&lt;img src="/assets/re-recommend-marp/pub-slides-with-marp.jpg" alt="image.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;試し方: Marp の作者の&lt;a href="https://github.com/yhatt/marp-cli-example"&gt;リポジトリ&lt;/a&gt;の &lt;code&gt;Deploy to netlify&lt;/code&gt; をクリックするだけ．&lt;/p&gt;
&lt;p&gt;この方法の場合，リポジトリの &lt;code&gt;PITCHME.md&lt;/code&gt; を &lt;code&gt;index.html&lt;/code&gt; に変換する． marp-cli の設定は &lt;code&gt;package.yml&lt;/code&gt; に書いてある． &lt;a href="https://github.com/marp-team/marp-cli#options"&gt;設定方法&lt;/a&gt;はこれを参照．&lt;/p&gt;
&lt;p&gt;僕はできれば，複数のスライドを一つのリポジトリに置きたかった． ので，僕のリポジトリでは:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;slides&lt;/code&gt; 以下の &lt;code&gt;*.md&lt;/code&gt; を全部変換
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;index.md&lt;/code&gt; が &lt;code&gt;index.html&lt;/code&gt; のスライドになる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;後述する自作テーマをサブモジュールで設定&lt;/li&gt;
&lt;li&gt;&lt;code&gt;slides/assets&lt;/code&gt; にある画像を &lt;code&gt;public&lt;/code&gt; にコピーしてる&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;のように少しだけ設定を書き換えた．&lt;/p&gt;
&lt;h2 id="web-ui-を試す"&gt;Web UI を試す&lt;/h2&gt;
&lt;p&gt;すでに&lt;a href="https://web.marp.app/"&gt;ここ&lt;/a&gt;から試せる． 手元で試すなら:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/marp-team/marp-web.git
cd marp-web
yarn install
yarn start&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;でできた．&lt;/p&gt;
&lt;p&gt;&lt;img src="/assets/re-recommend-marp/editing_marp_next.jpg" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ファイルの読み込みや保存が可能&lt;/li&gt;
&lt;li&gt;プレゼンテーションモードは(まだ)なかった&lt;/li&gt;
&lt;li&gt;PDFのエクスポートはブラウザの印刷機能を使うようだった&lt;/li&gt;
&lt;li&gt;カスタムテーマの設定などはまだできない？？&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="テーマを移植する"&gt;テーマを移植する&lt;/h2&gt;
&lt;p&gt;オリジナルテーマを作ってたので Marp Next にも移植した:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;olive&lt;/li&gt;
&lt;li&gt;colors&lt;/li&gt;
&lt;li&gt;haskell&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://github.com/matsubara0507/marp-themes"&gt;marp-themes&lt;/a&gt; というリポジトリを作り，そこに置いてある． やったことは:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/marp-team/marp-core/blob/26f2402d443d26af387adb0ee86cafa1149beb34/themes/gaia.scss"&gt;gaia の scss&lt;/a&gt; を持ってきて主に色を変更
&lt;ul&gt;
&lt;li&gt;カスタムテーマとして指定できるのは CSS だけなので &lt;code&gt;scss&lt;/code&gt; コマンドで手動変換する&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;画像の中央寄せをできるようにした
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;# ![](path/to/image.jpg)&lt;/code&gt; とすると中央寄せになるようにした&lt;/li&gt;
&lt;li&gt;&lt;code&gt;h1&lt;/code&gt; から &lt;code&gt;h6&lt;/code&gt; のどれでも良いです&lt;/li&gt;
&lt;li&gt;ただし，雑に &lt;code&gt;img&lt;/code&gt; タグに適用してるので emoji を含ませるとずれる…&lt;/li&gt;
&lt;li&gt;marpit に修正入れてもらった方が良いかな&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lead&lt;/code&gt; + &lt;code&gt;invert&lt;/code&gt; などの class を作っておいた
&lt;ul&gt;
&lt;li&gt;scss で書いてるので &lt;code&gt;lead&lt;/code&gt; を適当に mixi-in にして include するだけ&lt;/li&gt;
&lt;li&gt;これもできれば &lt;code&gt;class&lt;/code&gt; の組み合わせができるようになって欲しい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="olive"&gt;Olive&lt;/h3&gt;
&lt;iframe src="//www.slideshare.net/slideshow/embed_code/key/797Uraln5Fo9gD" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen&gt;
&lt;/iframe&gt;
&lt;h3 id="colors"&gt;Colors&lt;/h3&gt;
&lt;iframe src="//www.slideshare.net/slideshow/embed_code/key/2kOvCIcUpOzKRg" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen&gt;
&lt;/iframe&gt;
&lt;h3 id="haskell"&gt;Haskell&lt;/h3&gt;
&lt;iframe src="//www.slideshare.net/slideshow/embed_code/key/kJqmkk54SJnaky" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen&gt;
&lt;/iframe&gt;
&lt;h2 id="おしまい"&gt;おしまい&lt;/h2&gt;
&lt;p&gt;もう既に十分使える状態になっていました． すごい！&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/01/30/Haskell_Ctrl-C_%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D</id><title type="text">Haskell Windows Ctrl-C 動作確認</title><updated>2019-01-30T23:53:07+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/01/30/Haskell_Ctrl-C_%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D"/><summary type="html">コード コードは前回記事と同じです（再掲）。 Git リポジトリーはこちら。 import Control.Concurrent import Control.Monad import System.Exit import System.IO import System.Win32.Console.CtrlHandler main :: IO () main = do tid &lt;- myThreadId let handler event = do if event == cTRL_C_EVENT then do putStrLn "goodbye!" killThread tid pure …</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/01/26/101913</id><title type="text">今日は YAPC::Tokyo 2019 の日です</title><updated>2019-01-26T18:59:20+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/01/26/101913"/><summary type="html">YAPC::Tokyo 2019 に来ましたので、自分用のメモを残します。 オープニング / @magnolia_k_ さん 拍手の練習 普段は 吉祥寺.pm してます Hokkaido, Kansai, Fkuoka, Okinawa と回ってきた Tokyo に戻ってきた 「報恩謝徳」 恩送り：誰かから受けた恩を他の人に送ること 報い方は人それぞれ 自由なイベント トーク、交流、出会い、もくもく ランチセッション、懇親会 会場の空気を感じるのが大事 空気感を持ち帰って下さい ランチセッションは 150 名まで 聞くだけもO.K. 電源は3Fオープンスペースを wi-fi はフライヤーを見て…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/01/25/185945</id><title type="text">今日は YAPC::Tokyo 2019 前夜祭 の日です</title><updated>2019-01-25T20:52:09+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/01/25/185945"/><summary type="html">YAPC::Tokyo 2019 前夜祭 LTソン presented by 吉祥寺.pm に参加予定ですので、自分用のメモを残します。 吉祥寺.pm 提供です トーク4本、LT6本 懇親会参加率が高い 4年続いている #yapcjapan と #kichijojipm 飛び入り歓迎 技術イベントスポンサーやっていこう / micchie さん なぜ？ → 応援したい Perlは20年前に書いていて、今はgo好き イベントのことを知る ターゲット層、来場者数は調べたかった 年間予算の確保 イベントの費用は毎回違う Twitter公式アカウント、代表アカウントでキャッチ 会社のロゴを用意 配布物…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2019/01/25/Haskell_%E3%81%A7_Ctrl-C_%E3%82%92%E5%88%B6%E5%BE%A1%E3%81%99%E3%82%8B%EF%BC%88Windows%EF%BC%89</id><title type="text">Haskell で Ctrl-C を制御する（Windows）</title><updated>2019-01-25T11:26:15+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2019/01/25/Haskell_%E3%81%A7_Ctrl-C_%E3%82%92%E5%88%B6%E5%BE%A1%E3%81%99%E3%82%8B%EF%BC%88Windows%EF%BC%89"/><summary type="html">Ctrl-C 等の割り込みの扱い方です。 tl;dr System.Win32.Console.CtrlHandler を使います。 Ctrl-C が押されたらクロージングの処理を伴って終了するプログラムを書いてみます。 import Control.Concurrent import Control.Monad import System.Exit import System.IO import System.Win32.Console.CtrlHandler main :: IO () main = do tid &lt;- myThreadId let handler event = do i…</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-01-20-create-drone-git-with-ssh.html</id><title type="text">Drone Plugin を作ってみた: git-with-ssh</title><updated>2019-01-20T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-01-20-create-drone-git-with-ssh.html"/><summary type="html">&lt;article class="post card" itemscope itemtype="http://schema.org/BlogPosting"&gt;
 &lt;div class="card-content"&gt;
  &lt;header class="post-header"&gt;
    &lt;h1 class="post-title" itemprop="name headline"&gt;Drone Plugin を作ってみた: git-with-ssh&lt;/h1&gt;
    &lt;p class="post-meta"&gt;
      &lt;time datetime="2019-01-20" itemprop="datePublished"&gt;
        Jan 20, 2019
      &lt;/time&gt;
      
      
      &lt;div class="tags"&gt;
          &lt;i class="fa fa-tags"&gt;&lt;/i&gt; &lt;a href="/tags/Drone.html"&gt;Drone&lt;/a&gt; &lt;a href="/tags/Go.html"&gt;Go&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;最近 &lt;a href="https://drone.io"&gt;Drone&lt;/a&gt; という CI プラットフォームを試しています． Drone は Plugin という形で拡張機能を提供するので Plugin を自作してみた，という話です．&lt;/p&gt;
&lt;h2 id="作ったもの"&gt;作ったもの&lt;/h2&gt;
&lt;p&gt;表題の通り，git-with-ssh という Plugin を作った:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matsubara0507/drone-git-with-ssh"&gt;matsubara0507/drone-git-with-ssh - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;この Plugin は SSH による git コマンドの利用を可能にする． 例えば，Drone で GitHub へのプッシュをしたいとき，パーソナル API トークンを使うのではなく Deploy Key を使いたい場合は次のように書くと良い:&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;a class="sourceLine" id="cb1-1" title="1"&gt;&lt;span class="fu"&gt;steps:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-2" title="2"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;name:&lt;/span&gt;&lt;span class="at"&gt; clone gh-pages&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-3" title="3"&gt;  &lt;span class="fu"&gt;image:&lt;/span&gt;&lt;span class="at"&gt; docker:git&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-4" title="4"&gt;  &lt;span class="fu"&gt;environment:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-5" title="5"&gt;    &lt;span class="fu"&gt;SSH_KEY:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-6" title="6"&gt;      &lt;span class="fu"&gt;from_secret:&lt;/span&gt;&lt;span class="at"&gt; deploy_key&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-7" title="7"&gt;  &lt;span class="fu"&gt;commands:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-8" title="8"&gt;  &lt;span class="kw"&gt;-&lt;/span&gt; mkdir /root/.ssh &amp;amp;&amp;amp; echo &lt;span class="st"&gt;&amp;quot;$SSH_KEY&amp;quot;&lt;/span&gt; &amp;gt; /root/.ssh/id_rsa &amp;amp;&amp;amp; chmod 0600 /root/.ssh/id_rsa&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-9" title="9"&gt;  &lt;span class="kw"&gt;-&lt;/span&gt; echo -e &lt;span class="st"&gt;&amp;quot;Host github.com&lt;/span&gt;&lt;span class="sc"&gt;\n\t&lt;/span&gt;&lt;span class="st"&gt;StrictHostKeyChecking no&lt;/span&gt;&lt;span class="sc"&gt;\n&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;&lt;/span&gt; &amp;gt; /root/.ssh/config&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-10" title="10"&gt;  &lt;span class="kw"&gt;-&lt;/span&gt; git clone -b gh-pages git@github.com:haskell-jp/antenna.git temp&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この方法は &lt;a href="https://github.com/drone/drone/issues/1891#issuecomment-269629929"&gt;Issue で作者本人が提案している&lt;/a&gt;ため，おそらく推奨されている方法なのだろう． 二行追加するだけだから特別な機能は提供しない，と述べてるので CircleCI のような Deploy key を追加する機能は実装されないだろう(少なくとも当分は)．&lt;/p&gt;
&lt;p&gt;しかし，実際に使い始めてボイラーテンプレート化してしまったので，せっかくだからこれを Plugin にしてみようと考えた． 結果として，自作した Plugin を使うと次のようにかける:&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;a class="sourceLine" id="cb2-1" title="1"&gt;&lt;span class="fu"&gt;steps:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-2" title="2"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;name:&lt;/span&gt;&lt;span class="at"&gt; clone gh-pages&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-3" title="3"&gt;  &lt;span class="fu"&gt;image:&lt;/span&gt;&lt;span class="at"&gt; matsubara0507/git-with-ssh&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-4" title="4"&gt;  &lt;span class="fu"&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-5" title="5"&gt;    &lt;span class="fu"&gt;ssh_private_key:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-6" title="6"&gt;      &lt;span class="fu"&gt;from_secret:&lt;/span&gt;&lt;span class="at"&gt; deploy_key&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-7" title="7"&gt;    &lt;span class="fu"&gt;ssh_hosts:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-8" title="8"&gt;    &lt;span class="kw"&gt;-&lt;/span&gt; github.com&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-9" title="9"&gt;    &lt;span class="fu"&gt;commands:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-10" title="10"&gt;    &lt;span class="kw"&gt;-&lt;/span&gt; git clone -b gh-pages git@github.com:haskell-jp/antenna.git temp&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;行数は大してかわらないけど，なんか綺麗になったでしょ？(笑)&lt;/p&gt;
&lt;h2 id="作る"&gt;作る&lt;/h2&gt;
&lt;p&gt;だいたい&lt;a href="https://docs.drone.io/plugins"&gt;公式ドキュメント&lt;/a&gt;と，&lt;a href="https://github.com/drone-plugins"&gt;drone-plugin 組織アカウント&lt;/a&gt;にある公式のリポジトリのコードとにらめっこすればなんとかなった．&lt;/p&gt;
&lt;h3 id="drone-plugin"&gt;Drone Plugin&lt;/h3&gt;
&lt;p&gt;Drone Plugin の中身はただの Docker イメージだ． 仕組みは簡単で，単純に ENTRYPOINT を設定し，&lt;code&gt;.drone.yml&lt;/code&gt; の &lt;code&gt;settings&lt;/code&gt; 以下の値を &lt;code&gt;PLUGIN_&lt;/code&gt; というプレフィックスをつけて環境変数としておくだけだ． 例えば上記の &lt;code&gt;git-with-ssh&lt;/code&gt; の例だと:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PLUGIN_SSH_PRIVATE_KEY
PLUGIN_SSH_HOSTS
PLUGIN_COMMANDS&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;という環境変数にそれぞれの値が代入される． なのであとは ENTRYPOINT を設定する Dockerfile を定義すれば良い． 公式ドキュメントにはシェルスクリプトと Go 言語で作る場合の方法が載っている． が，別に Docker の ENTRYPOINT として実行できればなんでも良いので Haskell でも Ruby でも作れるだろう．&lt;/p&gt;
&lt;p&gt;今回は本家のを参考にするために Go 言語で作った．&lt;/p&gt;
&lt;h3 id="main.go-と-plugin.go"&gt;main.go と plugin.go&lt;/h3&gt;
&lt;p&gt;Go で作る場合，main.go と plugin.go に分けるのがデファクトスタンダートみたいだ． main.go には ENTRYPOINT に設定する CLI アプリのインターフェースを記述し，plugin.go には処理のロジックを記述するようだ． ざっくりと雰囲気だけ書くと:&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode go"&gt;&lt;code class="sourceCode go"&gt;&lt;a class="sourceLine" id="cb4-1" title="1"&gt;&lt;span class="co"&gt;// main.go&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-2" title="2"&gt;&lt;span class="kw"&gt;package&lt;/span&gt; main&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-3" title="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-4" title="4"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; (&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-5" title="5"&gt;  &lt;span class="st"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-6" title="6"&gt;  &lt;span class="st"&gt;&amp;quot;os&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-7" title="7"&gt;  &lt;span class="st"&gt;&amp;quot;strings&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-8" title="8"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-9" title="9"&gt;  &lt;span class="st"&gt;&amp;quot;github.com/joho/godotenv&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-10" title="10"&gt;  log &lt;span class="st"&gt;&amp;quot;github.com/sirupsen/logrus&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-11" title="11"&gt;  &lt;span class="st"&gt;&amp;quot;github.com/urfave/cli&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-12" title="12"&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-13" title="13"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-14" title="14"&gt;&lt;span class="kw"&gt;var&lt;/span&gt; build = &lt;span class="st"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-15" title="15"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-16" title="16"&gt;&lt;span class="kw"&gt;func&lt;/span&gt; main() {&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-17" title="17"&gt;  app := cli.NewApp()&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-18" title="18"&gt;  app.Name = &lt;span class="st"&gt;&amp;quot;git-with-ssh plugin&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-19" title="19"&gt;  app.Usage = &lt;span class="st"&gt;&amp;quot;git-with-ssh plugin&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-20" title="20"&gt;  app.Action = run&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-21" title="21"&gt;  app.Version = fmt.Sprintf(&lt;span class="st"&gt;&amp;quot;1.0.0+%s&amp;quot;&lt;/span&gt;, build)&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-22" title="22"&gt;  app.Flags = []cli.Flag{&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-23" title="23"&gt;    cli.StringFlag{&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-24" title="24"&gt;      Name:   &lt;span class="st"&gt;&amp;quot;ssh_private_key&amp;quot;&lt;/span&gt;,&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-25" title="25"&gt;      Usage:  &lt;span class="st"&gt;&amp;quot;SSH private key for git&amp;quot;&lt;/span&gt;,&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-26" title="26"&gt;      EnvVar: &lt;span class="st"&gt;&amp;quot;PLUGIN_SSH_PRIVATE_KEY&amp;quot;&lt;/span&gt;,&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-27" title="27"&gt;    },&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-28" title="28"&gt;    ...&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-29" title="29"&gt;    &lt;span class="co"&gt;// ここに CLI の引数を定義&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-30" title="30"&gt;  }&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-31" title="31"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-32" title="32"&gt;  &lt;span class="kw"&gt;if&lt;/span&gt; err := app.Run(os.Args); err != &lt;span class="ot"&gt;nil&lt;/span&gt; {&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-33" title="33"&gt;    log.Fatal(err)&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-34" title="34"&gt;  }&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-35" title="35"&gt;}&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-36" title="36"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-37" title="37"&gt;&lt;span class="kw"&gt;func&lt;/span&gt; run(c *cli.Context) &lt;span class="dt"&gt;error&lt;/span&gt; {&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-38" title="38"&gt;  &lt;span class="kw"&gt;if&lt;/span&gt; c.String(&lt;span class="st"&gt;&amp;quot;env-file&amp;quot;&lt;/span&gt;) != &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt; {&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-39" title="39"&gt;    _ = godotenv.Load(c.String(&lt;span class="st"&gt;&amp;quot;env-file&amp;quot;&lt;/span&gt;))&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-40" title="40"&gt;  }&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-41" title="41"&gt;  plugin := Plugin{&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-42" title="42"&gt;    SSHKey: c.String(&lt;span class="st"&gt;&amp;quot;ssh_private_key&amp;quot;&lt;/span&gt;),&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-43" title="43"&gt;    ...&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-44" title="44"&gt;    &lt;span class="co"&gt;// ここで CLI の引数からロジックへ橋渡し&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-45" title="45"&gt;    &lt;span class="co"&gt;// Plugin 型とかは plugin.go に書いてある&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-46" title="46"&gt;  }&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-47" title="47"&gt;  &lt;span class="kw"&gt;return&lt;/span&gt; plugin.Exec()&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-48" title="48"&gt;}&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;CLI には &lt;a href="https://github.com/urfave/cli"&gt;&lt;code&gt;urfave/cli&lt;/code&gt;&lt;/a&gt; を使っている． 理由は特に知らない． &lt;code&gt;go build&lt;/code&gt; することで実行ファイルが生成される．&lt;/p&gt;
&lt;h3 id="脱線-vs.改行"&gt;脱線: vs. 改行&lt;/h3&gt;
&lt;p&gt;少し Drone Plugin とは本質的に関係ない話． &lt;code&gt;plugin.go&lt;/code&gt; では &lt;code&gt;id_rsa&lt;/code&gt; を次のように生成している:&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode go"&gt;&lt;code class="sourceCode go"&gt;&lt;a class="sourceLine" id="cb5-1" title="1"&gt;&lt;span class="co"&gt;// plugin.go&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-2" title="2"&gt;...&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-3" title="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-4" title="4"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; Plugin &lt;span class="kw"&gt;struct&lt;/span&gt; {&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-5" title="5"&gt;  Home     &lt;span class="dt"&gt;string&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-6" title="6"&gt;  SSHKey   &lt;span class="dt"&gt;string&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-7" title="7"&gt;  Hosts    []&lt;span class="dt"&gt;string&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-8" title="8"&gt;  Commands []&lt;span class="dt"&gt;string&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-9" title="9"&gt;}&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-10" title="10"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-11" title="11"&gt;&lt;span class="kw"&gt;func&lt;/span&gt; (p Plugin) Exec() &lt;span class="dt"&gt;error&lt;/span&gt; {&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-12" title="12"&gt;  sshDir := fmt.Sprintf(&lt;span class="st"&gt;&amp;quot;%s/.ssh&amp;quot;&lt;/span&gt;, p.Home)&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-13" title="13"&gt;  &lt;span class="kw"&gt;if&lt;/span&gt; err := os.MkdirAll(sshDir, &lt;span class="dv"&gt;0700&lt;/span&gt;); err != &lt;span class="ot"&gt;nil&lt;/span&gt; {&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-14" title="14"&gt;    &lt;span class="kw"&gt;return&lt;/span&gt; errors.Wrapf(err, &lt;span class="st"&gt;&amp;quot;Exec cmd: mkdir -p %s&amp;quot;&lt;/span&gt;, sshDir)&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-15" title="15"&gt;  }&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-16" title="16"&gt;  log.Infof(&lt;span class="st"&gt;&amp;quot;Exec cmd: mkdir -p %s&amp;quot;&lt;/span&gt;, sshDir)&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-17" title="17"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-18" title="18"&gt;  &lt;span class="kw"&gt;if&lt;/span&gt; err := ioutil.WriteFile(fmt.Sprintf(&lt;span class="st"&gt;&amp;quot;%s/id_rsa&amp;quot;&lt;/span&gt;, sshDir), []&lt;span class="dt"&gt;byte&lt;/span&gt;(p.SSHKey), &lt;span class="dv"&gt;0600&lt;/span&gt;); err != &lt;span class="ot"&gt;nil&lt;/span&gt; {&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-19" title="19"&gt;    &lt;span class="kw"&gt;return&lt;/span&gt; errors.Wrapf(err, &lt;span class="st"&gt;&amp;quot;Write file: %s/id_rsa&amp;quot;&lt;/span&gt;, sshDir)&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-20" title="20"&gt;  }&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-21" title="21"&gt;  log.Infof(&lt;span class="st"&gt;&amp;quot;Write file: %s/id_rsa&amp;quot;&lt;/span&gt;, sshDir)&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-22" title="22"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-23" title="23"&gt;  ...&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-24" title="24"&gt;}&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;そして，&lt;code&gt;id_rsa&lt;/code&gt; の中身をオプションないしは環境変数として Go アプリに渡したい． しかし，次のように単純に渡してみてもうまく動作しない:&lt;/p&gt;
&lt;div class="sourceCode" id="cb6"&gt;&lt;pre class="sourceCode sh"&gt;&lt;code class="sourceCode bash"&gt;&lt;a class="sourceLine" id="cb6-1" title="1"&gt;$ &lt;span class="ex"&gt;./drone-git-with-ssh&lt;/span&gt; --ssh_private_key=&lt;span class="st"&gt;&amp;#39;aaa\nbbb&amp;#39;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これだと &lt;code&gt;id_rsa&lt;/code&gt; の中身は &lt;code&gt;aaa\nbbb&lt;/code&gt; となる． &lt;code&gt;--ssh_private_key=$'aaa\nbbb'&lt;/code&gt; としたら一応動作するが環境変数などが使えなくなるので，&lt;a href="https://blog.konboi.com/post/2018/05/01/225336/"&gt;内部で明示的に置換すると良い&lt;/a&gt;ようだ:&lt;/p&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre class="sourceCode go"&gt;&lt;code class="sourceCode go"&gt;&lt;a class="sourceLine" id="cb7-1" title="1"&gt;&lt;span class="co"&gt;// main.go&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-2" title="2"&gt;...&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-3" title="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-4" title="4"&gt;&lt;span class="kw"&gt;func&lt;/span&gt; run(c *cli.Context) &lt;span class="dt"&gt;error&lt;/span&gt; {&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-5" title="5"&gt;  ...&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-6" title="6"&gt;  plugin := Plugin{&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-7" title="7"&gt;    SSHKey: strings.Replace(c.String(&lt;span class="st"&gt;&amp;quot;ssh_private_key&amp;quot;&lt;/span&gt;), &lt;span class="st"&gt;`&lt;/span&gt;&lt;span class="ch"&gt;\n&lt;/span&gt;&lt;span class="st"&gt;`&lt;/span&gt;, &lt;span class="st"&gt;&amp;quot;&lt;/span&gt;&lt;span class="ch"&gt;\n&lt;/span&gt;&lt;span class="st"&gt;&amp;quot;&lt;/span&gt;, &lt;span class="dv"&gt;-1&lt;/span&gt;),&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-8" title="8"&gt;    ...&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-9" title="9"&gt;  }&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-10" title="10"&gt;  &lt;span class="kw"&gt;return&lt;/span&gt; plugin.Exec()&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-11" title="11"&gt;}&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="docker-イメージ"&gt;Docker イメージ&lt;/h3&gt;
&lt;p&gt;他の Drone Plugin のリポジトリを参考にすると，次のような Dockerfile を書くと良い:&lt;/p&gt;
&lt;div class="sourceCode" id="cb8"&gt;&lt;pre class="sourceCode dockerfile"&gt;&lt;code class="sourceCode dockerfile"&gt;&lt;a class="sourceLine" id="cb8-1" title="1"&gt;&lt;span class="kw"&gt;FROM&lt;/span&gt; docker:git&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-2" title="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-3" title="3"&gt;&lt;span class="kw"&gt;ADD&lt;/span&gt; release/linux/amd64/drone-git-with-ssh /bin/&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-4" title="4"&gt;&lt;span class="kw"&gt;ENTRYPOINT&lt;/span&gt; [&lt;span class="st"&gt;&amp;quot;/bin/drone-git-with-ssh&amp;quot;&lt;/span&gt;]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;FROM&lt;/code&gt; で指定するベースイメージには普通，&lt;a href="https://hub.docker.com/r/plugins/base/"&gt;&lt;code&gt;plugins/base&lt;/code&gt;&lt;/a&gt; を使うようだが，これは &lt;code&gt;scratch&lt;/code&gt; にちょっとだけ毛が生えた程度のイメージで &lt;code&gt;git&lt;/code&gt; がない． なので &lt;a href="https://hub.docker.com/_/docker"&gt;&lt;code&gt;docker:git&lt;/code&gt;&lt;/a&gt; をベースイメージにした． 次のコマンドを実行することで Docker イメージを作成できる:&lt;/p&gt;
&lt;div class="sourceCode" id="cb9"&gt;&lt;pre class="sourceCode sh"&gt;&lt;code class="sourceCode bash"&gt;&lt;a class="sourceLine" id="cb9-1" title="1"&gt;$ &lt;span class="va"&gt;GOOS=&lt;/span&gt;linux &lt;span class="va"&gt;GOARCH=&lt;/span&gt;amd64 &lt;span class="va"&gt;CGO_ENABLED=&lt;/span&gt;0 &lt;span class="ex"&gt;go&lt;/span&gt; build -a -tags netgo -o release/linux/amd64/drone-git-with-ssh&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-2" title="2"&gt;$ &lt;span class="ex"&gt;docker&lt;/span&gt; build --rm -t matsubara0507/git-with-ssh .&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="drone-を設定する"&gt;Drone を設定する&lt;/h3&gt;
&lt;p&gt;せっかくなので Drone で Docker イメージのビルドなどを CI してみる． &lt;a href="https://cloud.drone.io/"&gt;Drone Cloud&lt;/a&gt; という OSS は無料で使える Drone のクラウドサービスがあるのでこれに設定する．&lt;/p&gt;
&lt;p&gt;テストはあとで考えるとして，Go のビルドと Docker イメージのビルドを CI で回す． また，master のプッシュだけは Docker イメージの自動プッシュも実現したい． Drone は他の CI サービスみたいに YAML ファイルで設定ファイルを記述する:&lt;/p&gt;
&lt;div class="sourceCode" id="cb10"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;a class="sourceLine" id="cb10-1" title="1"&gt;&lt;span class="co"&gt;# .drone.yml&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-2" title="2"&gt;&lt;span class="fu"&gt;kind:&lt;/span&gt;&lt;span class="at"&gt; pipeline&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-3" title="3"&gt;&lt;span class="fu"&gt;name:&lt;/span&gt;&lt;span class="at"&gt; default&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-4" title="4"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-5" title="5"&gt;&lt;span class="fu"&gt;steps:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-6" title="6"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;name:&lt;/span&gt;&lt;span class="at"&gt; build go&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-7" title="7"&gt;  &lt;span class="fu"&gt;image:&lt;/span&gt;&lt;span class="at"&gt; golang:1.11&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-8" title="8"&gt;  &lt;span class="fu"&gt;commands:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-9" title="9"&gt;  &lt;span class="kw"&gt;-&lt;/span&gt; GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -a -tags netgo -o release/linux/amd64/drone-git-with-ssh&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-10" title="10"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-11" title="11"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;name:&lt;/span&gt;&lt;span class="at"&gt; build docker image (dry_run)&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-12" title="12"&gt;  &lt;span class="fu"&gt;image:&lt;/span&gt;&lt;span class="at"&gt; plugins/docker&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-13" title="13"&gt;  &lt;span class="fu"&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-14" title="14"&gt;    &lt;span class="fu"&gt;username:&lt;/span&gt;&lt;span class="at"&gt; matsubara0507&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-15" title="15"&gt;    &lt;span class="fu"&gt;password:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-16" title="16"&gt;      &lt;span class="fu"&gt;from_secret:&lt;/span&gt;&lt;span class="at"&gt; docker_hub_password&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-17" title="17"&gt;    &lt;span class="fu"&gt;repo:&lt;/span&gt;&lt;span class="at"&gt; matsubara0507/git-with-ssh&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-18" title="18"&gt;    &lt;span class="fu"&gt;dry-run:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="ch"&gt;true&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="co"&gt;# Push をしないフラグ&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-19" title="19"&gt;  &lt;span class="fu"&gt;when:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-20" title="20"&gt;    &lt;span class="fu"&gt;event:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-21" title="21"&gt;      &lt;span class="fu"&gt;exclude:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-22" title="22"&gt;        &lt;span class="kw"&gt;-&lt;/span&gt; pull_request&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-23" title="23"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-24" title="24"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;name:&lt;/span&gt;&lt;span class="at"&gt; push docker image&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-25" title="25"&gt;  &lt;span class="fu"&gt;image:&lt;/span&gt;&lt;span class="at"&gt; plugins/docker&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-26" title="26"&gt;  &lt;span class="fu"&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-27" title="27"&gt;    &lt;span class="fu"&gt;username:&lt;/span&gt;&lt;span class="at"&gt; matsubara0507&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-28" title="28"&gt;    &lt;span class="fu"&gt;password:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-29" title="29"&gt;      &lt;span class="fu"&gt;from_secret:&lt;/span&gt;&lt;span class="at"&gt; docker_hub_password&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-30" title="30"&gt;    &lt;span class="fu"&gt;repo:&lt;/span&gt;&lt;span class="at"&gt; matsubara0507/git-with-ssh&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-31" title="31"&gt;  &lt;span class="fu"&gt;when:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-32" title="32"&gt;    &lt;span class="fu"&gt;branch:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-33" title="33"&gt;    &lt;span class="kw"&gt;-&lt;/span&gt; master&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-34" title="34"&gt;    &lt;span class="fu"&gt;event:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-35" title="35"&gt;      &lt;span class="fu"&gt;exclude:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-36" title="36"&gt;        &lt;span class="kw"&gt;-&lt;/span&gt; pull_request&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Docker Hub への操作には &lt;a href="https://github.com/drone-plugins/drone-docker"&gt;&lt;code&gt;docker&lt;/code&gt;&lt;/a&gt; という Plugin を用いた． パスワードのような，ハードコーディングすべきではない文字列は Drone の Secret という仕組みをを用いる． &lt;code&gt;from_secret: key&lt;/code&gt; とすることで，Drone の Web UI で設定した &lt;code&gt;key&lt;/code&gt; という名の Secret を参照してくれる． 僕はパスワード系の Secret を PR では参照できないようにしているので，&lt;code&gt;when.event.exclude.pull_request&lt;/code&gt; とすることで PR の CI では Secret を参照しているステップが動作しないようにしている．&lt;/p&gt;
&lt;h3 id="テストをどうするか"&gt;テストをどうするか&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;plugin.go&lt;/code&gt; はただ単にファイルを作ってるだけなのでユニットテストなどはしてもしょうがない． 悩んだ末，最初のシェルコマンドで実行して生成されるファイルと自作 Plugin で生成されるを比較することにした:&lt;/p&gt;
&lt;div class="sourceCode" id="cb11"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;a class="sourceLine" id="cb11-1" title="1"&gt;&lt;span class="co"&gt;# .drone.yml&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-2" title="2"&gt;&lt;span class="fu"&gt;kind:&lt;/span&gt;&lt;span class="at"&gt; pipeline&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-3" title="3"&gt;&lt;span class="fu"&gt;name:&lt;/span&gt;&lt;span class="at"&gt; default&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-4" title="4"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-5" title="5"&gt;&lt;span class="fu"&gt;steps:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-6" title="6"&gt;  &lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;name:&lt;/span&gt;&lt;span class="at"&gt; build go&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-7" title="7"&gt;    &lt;span class="fu"&gt;image:&lt;/span&gt;&lt;span class="at"&gt; golang:1.11&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-8" title="8"&gt;    &lt;span class="fu"&gt;commands:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-9" title="9"&gt;    &lt;span class="kw"&gt;-&lt;/span&gt; go build&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-10" title="10"&gt;    &lt;span class="kw"&gt;-&lt;/span&gt; GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -a -tags netgo -o release/linux/amd64/drone-git-with-ssh&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-11" title="11"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-12" title="12"&gt;  &lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;name:&lt;/span&gt;&lt;span class="at"&gt; test&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-13" title="13"&gt;    &lt;span class="fu"&gt;image:&lt;/span&gt;&lt;span class="at"&gt; golang:1.11&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-14" title="14"&gt;    &lt;span class="fu"&gt;environment:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-15" title="15"&gt;      &lt;span class="fu"&gt;SSH_KEY:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="st"&gt;&amp;#39;aaa\nbbb&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-16" title="16"&gt;    &lt;span class="fu"&gt;commands:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-17" title="17"&gt;    &lt;span class="kw"&gt;-&lt;/span&gt; printf $SSH_KEY &amp;gt; ./test/expected/.ssh/id_rsa &amp;amp;&amp;amp; chmod 600 ./test/expected/.ssh/id_rsa&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-18" title="18"&gt;    &lt;span class="kw"&gt;-&lt;/span&gt; ./drone-git-with-ssh --home ./test/result --ssh_private_key $SSH_KEY --ssh_hosts github.com --ssh_hosts bitbucket.org  --commands &lt;span class="st"&gt;&amp;#39;pwd&amp;#39;&lt;/span&gt; --commands &lt;span class="st"&gt;&amp;#39;ls&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-19" title="19"&gt;    &lt;span class="kw"&gt;-&lt;/span&gt; diff ./test/result/.ssh ./test/expected/.ssh&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-20" title="20"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-21" title="21"&gt;  ...&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;expected な &lt;code&gt;id_rsa&lt;/code&gt; をわざわざ test ステップで生成するのではなく，GitHub に直接おいても良いが，なんか &lt;code&gt;id_rsa&lt;/code&gt; という名前のファイルをパブリックリポジトリに置くのはどうなのかなぁと思ってやめた． このテストのために &lt;code&gt;--home&lt;/code&gt; というオプションで任意のディレクトリに SSH の設定 &lt;code&gt;.ssh&lt;/code&gt; を生成してくれるようにした． デフォルトは &lt;code&gt;/root&lt;/code&gt; だが．&lt;/p&gt;
&lt;h3 id="おまけ-バッチ"&gt;おまけ: バッチ&lt;/h3&gt;
&lt;p&gt;公式の Drone Plugin のリポジトリをみると README にいろんなバッジがあった． ので，真似して git-with-ssh にも設定してみた:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/matsubara0507/drone-git-with-ssh/blob/aee8928379453d89aedba010a1664ca6adf1ee72/README.md"&gt;&lt;img src="/assets/create-drone-git-with-ssh/badges.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;付けたのは4つ:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;Drone のビルド結果&lt;/li&gt;
&lt;li&gt;&lt;a href="https://godoc.org/"&gt;Go Doc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://goreportcard.com/"&gt;Go Report Card&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://microbadger.com/"&gt;MicroBadger&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;1つ目は Drone のビルド結果のバッジ． Drone のバッジは settings の一番下から取得できる．&lt;/p&gt;
&lt;h2 id="section"&gt;&lt;/h2&gt;
&lt;p&gt;Go Doc は指定した Go のリポジトリからドキュメントを生成してくれるサービスである． 依存パッケージとかも解析していい感じに表示してくれる． すごい．&lt;/p&gt;
&lt;p&gt;Go Report Card も同様に Go のリポジトリを指定することで動作する． こっちは go fmt がちゃんとかかってるかや linter の結果などをチェックしてくれる． すごい．&lt;/p&gt;
&lt;h2 id="section-1"&gt;&lt;/h2&gt;
&lt;p&gt;MicroBadger は Docker Hub にあるイメージを静的検査してくれる． イメージサイズや生成時間はもちろん，Docker イメージのレイヤ構造も出してくれる． これで Dockerfile をわざわざ探さなくても良いのですごい助かる．&lt;/p&gt;
&lt;h2 id="おしまい"&gt;おしまい&lt;/h2&gt;
&lt;p&gt;久しぶりにサンプルじゃない Go のアプリケーションを作ってみた． 楽しかった〜．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>http://syocy.hatenablog.com/entry/try-linear-types</id><title type="text">GHCの線形型プロトタイプを試すだけ</title><updated>2019-01-08T02:01:09+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/try-linear-types"/><summary type="html">GHCに線形型を導入すると以下のような良い事があるらしい。 リソース安全性: ファイルハンドル、ソケット、DBコネクションのようなリソースについて、これらを提供するAPIの設計者が安全な使用を強制できる。リソース解放後のアクセス、二重解放、解放忘れを防止することができる。 レイテンシ: リソースAPIの実装をうまくやるとoff-heap(GCの対象外)でリソースを確保・解放できる。GC対象が少なくなることによりGCによってプログラムが停止する時間を減らせる。 並列性: 過剰な直列化を強要しない。リソース安全性を保ちつつもできる限り並列化できる。 詳しくはproposal。 この記事では線形型G…</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-01-06-use-drone-cache-with-gcs.html</id><title type="text">GCS で Drone 1.0 をキャッシュする</title><updated>2019-01-06T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-01-06-use-drone-cache-with-gcs.html"/><summary type="html">&lt;article class="post card" itemscope itemtype="http://schema.org/BlogPosting"&gt;
 &lt;div class="card-content"&gt;
  &lt;header class="post-header"&gt;
    &lt;h1 class="post-title" itemprop="name headline"&gt;GCS で Drone 1.0 をキャッシュする&lt;/h1&gt;
    &lt;p class="post-meta"&gt;
      &lt;time datetime="2019-01-06" itemprop="datePublished"&gt;
        Jan 6, 2019
      &lt;/time&gt;
      
      
      &lt;div class="tags"&gt;
          &lt;i class="fa fa-tags"&gt;&lt;/i&gt; &lt;a href="/tags/Drone.html"&gt;Drone&lt;/a&gt; &lt;a href="/tags/Haskell.html"&gt;Haskell&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;Drone ネタ2本目． せっかく drone-haskell を作ったので TravisCI でテストを回すのではなく，Drone で回そうかなと思ったのだが，Stack でフルビルドするとめっちゃ時間かかる． なので，Drone のキャッシュをやってみましたっていう小話です．&lt;/p&gt;
&lt;h2 id="cache-in-drone"&gt;Cache in Drone&lt;/h2&gt;
&lt;p&gt;Drone でキャッシュを利用するには次のような Plugin を使用する:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;drone-s3-cache: &lt;a href="https://github.com/drone-plugins/drone-s3-cache"&gt;GitHub&lt;/a&gt;・&lt;a href="http://plugins.drone.io/drone-plugins/drone-s3-cache/"&gt;Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;drone-volume-cache: &lt;a href="https://github.com/drone-plugins/drone-volume-cache"&gt;GitHub&lt;/a&gt;・&lt;a href="http://plugins.drone.io/drillster/drone-volume-cache/"&gt;Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;drone-gcs-cache: &lt;a href="https://github.com/hvalle/drone-gcs-cache"&gt;GitHub&lt;/a&gt;・&lt;a href="http://plugins.drone.io/hvalle/drone-gcs-cache/"&gt;Marketplace&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;s3-cache や gcs-cache は任意のフォルダを tar かなんかに固めて各種クラウドストレージに保存する． volume-cache はローカルに保存してくれるのだが，これを利用するためにはリポジトリの &lt;code&gt;Trusted&lt;/code&gt; フラグを立てる必要がある． ただし，これは Admin しかできないので，Drone Cloud では利用できない． なので s3-cache や gcs-cache を使うしかない．&lt;/p&gt;
&lt;p&gt;ちなみに公式で提供してくれてるのは s3-cache なので，そっちを使うべきなのだが，見事に AWS のパスワードやらを忘れてしまったので GCP の Cloud Storage の方を利用した(オイ)． ただ，gcs-cache は 0.8.x 時代の設定方法しか書いてない． いろいろ調べてみた結果，YAML の書き方を変えるだけでそのまま利用できそうだったのでそのまま drone-gcs-cache を利用する．&lt;/p&gt;
&lt;h2 id="drone-gcs-cache"&gt;Drone GCS Cache&lt;/h2&gt;
&lt;h3 id="認証鍵の設定"&gt;認証鍵の設定&lt;/h3&gt;
&lt;p&gt;GCS の認証にはサービスアカウントの JSON Key を使う． GCP コンソールの &lt;code&gt;APIとサービス&lt;/code&gt; の &lt;code&gt;認証情報&lt;/code&gt; からサービスアカウントを作成し(このときに JSON が DL される)，&lt;code&gt;IAMと管理&lt;/code&gt; の &lt;code&gt;IAM&lt;/code&gt; からさっき作ったアカウントに &lt;code&gt;ストレージ管理者&lt;/code&gt; を追加した IAM を作成する．&lt;/p&gt;
&lt;p&gt;この JSON を Drone のウェブコンソールから Secret として設定する． 改行込みでファイルの中身そのままコピペで大丈夫． もし PR を作成したときにも動作させたいなら &lt;code&gt;Allow Pull Requests&lt;/code&gt; にチェックする．&lt;/p&gt;
&lt;h3 id="yaml-の設定"&gt;YAML の設定&lt;/h3&gt;
&lt;p&gt;あとは YAML を設定するだけ． 例えば drone-gcs-cache の古い設定を書き直すと次のようになる:&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;a class="sourceLine" id="cb1-1" title="1"&gt;&lt;span class="fu"&gt;kind:&lt;/span&gt;&lt;span class="at"&gt; pipeline&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-2" title="2"&gt;&lt;span class="fu"&gt;name:&lt;/span&gt;&lt;span class="at"&gt; default&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-3" title="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-4" title="4"&gt;&lt;span class="fu"&gt;steps:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-5" title="5"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;name:&lt;/span&gt;&lt;span class="at"&gt; restore&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-6" title="6"&gt;  &lt;span class="fu"&gt;image:&lt;/span&gt;&lt;span class="at"&gt; homerovalle/drone-gcs-cache&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-7" title="7"&gt;  &lt;span class="fu"&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-8" title="8"&gt;    &lt;span class="fu"&gt;pull:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="ch"&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-9" title="9"&gt;    &lt;span class="fu"&gt;bucket:&lt;/span&gt;&lt;span class="at"&gt; gcs_bucket&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-10" title="10"&gt;    &lt;span class="fu"&gt;json_key:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-11" title="11"&gt;      &lt;span class="fu"&gt;from_secret:&lt;/span&gt;&lt;span class="at"&gt; gcs-access-json-key&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-12" title="12"&gt;    &lt;span class="fu"&gt;restore:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="ch"&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-13" title="13"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-14" title="14"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;name:&lt;/span&gt;&lt;span class="at"&gt; build&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-15" title="15"&gt;  &lt;span class="fu"&gt;image:&lt;/span&gt;&lt;span class="at"&gt; node&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-16" title="16"&gt;  &lt;span class="fu"&gt;commands:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-17" title="17"&gt;  &lt;span class="kw"&gt;-&lt;/span&gt; npm install&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-18" title="18"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-19" title="19"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;name:&lt;/span&gt;&lt;span class="at"&gt; rebuild&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-20" title="20"&gt;  &lt;span class="fu"&gt;image:&lt;/span&gt;&lt;span class="at"&gt; homerovalle/drone-gcs-cache&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-21" title="21"&gt;  &lt;span class="fu"&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-22" title="22"&gt;    &lt;span class="fu"&gt;pull:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="ch"&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-23" title="23"&gt;    &lt;span class="fu"&gt;bucket:&lt;/span&gt;&lt;span class="at"&gt; gcs_bucket&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-24" title="24"&gt;    &lt;span class="fu"&gt;json_key:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-25" title="25"&gt;      &lt;span class="fu"&gt;from_secret:&lt;/span&gt;&lt;span class="at"&gt; gcs-access-json-key&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-26" title="26"&gt;    &lt;span class="fu"&gt;rebuild:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="ch"&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-27" title="27"&gt;    &lt;span class="fu"&gt;mount:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-28" title="28"&gt;      &lt;span class="kw"&gt;-&lt;/span&gt; node_modules&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-29" title="29"&gt;    &lt;span class="fu"&gt;when:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-30" title="30"&gt;      &lt;span class="fu"&gt;event:&lt;/span&gt;&lt;span class="at"&gt; push&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-31" title="31"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-32" title="32"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;name:&lt;/span&gt;&lt;span class="at"&gt; flush&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-33" title="33"&gt;  &lt;span class="fu"&gt;image:&lt;/span&gt;&lt;span class="at"&gt; homerovalle/drone-gcs-cache&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-34" title="34"&gt;  &lt;span class="fu"&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-35" title="35"&gt;    &lt;span class="fu"&gt;pull:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="ch"&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-36" title="36"&gt;    &lt;span class="fu"&gt;bucket:&lt;/span&gt;&lt;span class="at"&gt; gcs_bucket&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-37" title="37"&gt;    &lt;span class="fu"&gt;json_key:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-38" title="38"&gt;      &lt;span class="fu"&gt;from_secret:&lt;/span&gt;&lt;span class="at"&gt; gcs-access-json-key&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-39" title="39"&gt;    &lt;span class="fu"&gt;flush:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="ch"&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-40" title="40"&gt;    &lt;span class="fu"&gt;flush_age:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="dv"&gt;14&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これは Drone の Secret に &lt;code&gt;gcs-access-json-key&lt;/code&gt; という名前で登録している場合である． ちなみに &lt;code&gt;flush_age&lt;/code&gt; は，ここで設定した日付よりも前のキャッシュを削除する設定のようだ(デフォルトは30)．&lt;/p&gt;
&lt;h2 id="haskell-で試す"&gt;Haskell で試す&lt;/h2&gt;
&lt;p&gt;ちなみに&lt;a href="https://github.com/matsubara0507/drone-haskell/pull/3"&gt;導入したPRはこれ&lt;/a&gt;． &lt;code&gt;.stack&lt;/code&gt; と &lt;code&gt;.stack-work&lt;/code&gt; をキャッシュする:&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;a class="sourceLine" id="cb2-1" title="1"&gt;&lt;span class="fu"&gt;kind:&lt;/span&gt;&lt;span class="at"&gt; pipeline&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-2" title="2"&gt;&lt;span class="fu"&gt;name:&lt;/span&gt;&lt;span class="at"&gt; default&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-3" title="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-4" title="4"&gt;&lt;span class="fu"&gt;steps:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-5" title="5"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;name:&lt;/span&gt;&lt;span class="at"&gt; restore&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-6" title="6"&gt;  &lt;span class="fu"&gt;image:&lt;/span&gt;&lt;span class="at"&gt; homerovalle/drone-gcs-cache&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-7" title="7"&gt;  &lt;span class="fu"&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-8" title="8"&gt;    ...&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-9" title="9"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-10" title="10"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;name:&lt;/span&gt;&lt;span class="at"&gt; test&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-11" title="11"&gt;  &lt;span class="fu"&gt;image:&lt;/span&gt;&lt;span class="at"&gt; haskell:8.6&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-12" title="12"&gt;  &lt;span class="fu"&gt;commands:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-13" title="13"&gt;  &lt;span class="kw"&gt;-&lt;/span&gt; stack --no-terminal --stack-root `pwd`/.stack --install-ghc test --bench --only-dependencies&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-14" title="14"&gt;  &lt;span class="kw"&gt;-&lt;/span&gt; stack --no-terminal --stack-root `pwd`/.stack test --bench --no-run-benchmarks --no-haddock-deps --pedantic&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-15" title="15"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-16" title="16"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;name:&lt;/span&gt;&lt;span class="at"&gt; rebuild&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-17" title="17"&gt;  &lt;span class="fu"&gt;image:&lt;/span&gt;&lt;span class="at"&gt; homerovalle/drone-gcs-cache&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-18" title="18"&gt;  &lt;span class="fu"&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-19" title="19"&gt;    &lt;span class="fu"&gt;pull:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="ch"&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-20" title="20"&gt;    &lt;span class="fu"&gt;bucket:&lt;/span&gt;&lt;span class="at"&gt; matsubara-drone-cache&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-21" title="21"&gt;    &lt;span class="fu"&gt;json_key:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-22" title="22"&gt;      &lt;span class="fu"&gt;from_secret:&lt;/span&gt;&lt;span class="at"&gt; gcs-access-json-key&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-23" title="23"&gt;    &lt;span class="fu"&gt;rebuild:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="ch"&gt;true&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-24" title="24"&gt;    &lt;span class="fu"&gt;mount:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-25" title="25"&gt;      &lt;span class="kw"&gt;-&lt;/span&gt; .stack&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-26" title="26"&gt;      &lt;span class="kw"&gt;-&lt;/span&gt; .stack-work&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-27" title="27"&gt;    &lt;span class="fu"&gt;when:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-28" title="28"&gt;      &lt;span class="fu"&gt;event:&lt;/span&gt;&lt;span class="at"&gt; push&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-29" title="29"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-30" title="30"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;name:&lt;/span&gt;&lt;span class="at"&gt; flush&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-31" title="31"&gt;  &lt;span class="fu"&gt;image:&lt;/span&gt;&lt;span class="at"&gt; homerovalle/drone-gcs-cache&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-32" title="32"&gt;  &lt;span class="fu"&gt;settings:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-33" title="33"&gt;    ...&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;restore&lt;/code&gt; と &lt;code&gt;flush&lt;/code&gt; は同じなので割愛． &lt;code&gt;$HOME/.stack&lt;/code&gt; だと動作しなかったので，いっそのことカレントディレクトリに &lt;code&gt;.stack&lt;/code&gt; を持ってくることにした． で，実際どれくらい早くなったのか． ビフォー:&lt;/p&gt;
&lt;p&gt;&lt;img src="/assets/use-drone-cache-with-gcs/before.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;9分は長い． そんでアフター:&lt;/p&gt;
&lt;p&gt;&lt;img src="/assets/use-drone-cache-with-gcs/after.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;4GB弱キャッシュされてるので，restore に結構かかってしまう． まぁ半分近くになったのでこれで良しとしましょう(GCS分のお金はかかるけど)．&lt;/p&gt;
&lt;h2 id="おしまい"&gt;おしまい&lt;/h2&gt;
&lt;p&gt;Drone は Crone を hourly で使えるから haskell-antenna を Drone に移行してみようかしら．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://matsubara0507.github.io/posts/2019-01-05-docker-compose-up-drone-1-0.html</id><title type="text">Drone 1.0 を docker-compose up する</title><updated>2019-01-05T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2019-01-05-docker-compose-up-drone-1-0.html"/><summary type="html">&lt;article class="post card" itemscope itemtype="http://schema.org/BlogPosting"&gt;
 &lt;div class="card-content"&gt;
  &lt;header class="post-header"&gt;
    &lt;h1 class="post-title" itemprop="name headline"&gt;Drone 1.0 を docker-compose up する&lt;/h1&gt;
    &lt;p class="post-meta"&gt;
      &lt;time datetime="2019-01-05" itemprop="datePublished"&gt;
        Jan 5, 2019
      &lt;/time&gt;
      
      
      &lt;div class="tags"&gt;
          &lt;i class="fa fa-tags"&gt;&lt;/i&gt; &lt;a href="/tags/Drone.html"&gt;Drone&lt;/a&gt; &lt;a href="/tags/Haskell.html"&gt;Haskell&lt;/a&gt; &lt;a href="/tags/library.html"&gt;library&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;新年一発目です． &lt;a href="https://drone.io/"&gt;Drone CI&lt;/a&gt; が，めでたくバージョン1.0(まだ rc だけど)をリリースしてドキュメントも刷新されたんですけど，&lt;a href="https://0-8-0.docs.drone.io/install-for-github/"&gt;0.8.x 時代にはあった &lt;code&gt;docker-compose&lt;/code&gt; でのやり方&lt;/a&gt;が書いてなかった(見つけられなかった)ので，そのメモ書きです． ちなみに経緯は，結構前に作っていた &lt;a href="https://github.com/matsubara0507/drone-haskell"&gt;drone-haskell&lt;/a&gt; と言う Drone CI の Haskell クライアントを Drone 1.0 に対応したくて，手元で Drone を起動しようとしたためです． めでたく，Haskell クライアントも 1.0 に対応したので，それの紹介もおまけでします．&lt;/p&gt;
&lt;h2 id="drone-ci"&gt;Drone CI&lt;/h2&gt;
&lt;p&gt;Drone.io, Inc. というアメリカ企業が開発している継続的デリバリーを支援するためのプラットフォームである． 同種のものに Jenkins や TravisCI，CircleCI などが挙げられます(多分)． 単純な利用者側(リポジトリにCIなどを設定する側)としては，TravisCI・CircleCI に似ているが，これらとの大きな違いとして，Drone は GitHub 上に OSS として公開されている点だ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/drone/drone"&gt;drone/drone - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;あと個人的に特徴的なのが Plugin という形で様々な機能を提供している点だ(このあたりは Jenkins に似ているのかな)． 公式のページより，組織アカウントを見た方が早い気がする(これに限らずドキュメントが色々追いついてない印象):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/drone-plugins"&gt;drone-plugins - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="docker-compose-する"&gt;docker-compose する&lt;/h2&gt;
&lt;p&gt;さて本題． ローカルで Drone サーバを &lt;code&gt;docker-compose up&lt;/code&gt; して GitHub で利用する． GitHub で利用するには Drone を &lt;a href="https://docs.drone.io/installation/github/multi-machine/#create-an-oauth-application"&gt;GitHub の OAuth App として登録する必要がある&lt;/a&gt;． OAuth App にするにはパブリックな URL が必要なので，&lt;a href="https://ngrok.com/"&gt;ngrok&lt;/a&gt; を利用する:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ngrok http 8000&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これで仮に &lt;code&gt;abcdef.ngrok.io&lt;/code&gt; と言うドメインを得たとする． 次のような OAuth App を登録する:&lt;/p&gt;
&lt;p&gt;&lt;img src="/assets/docker-compose-up-drone-1-0/oauth-app.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;注意点として，8.0.x のときは callback URL が &lt;code&gt;/authorize&lt;/code&gt; だったのに対し，1.0 では &lt;code&gt;/login&lt;/code&gt; となっている． あとは次のような &lt;code&gt;docker-compose.yml&lt;/code&gt; ファイルを書けば良い:&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;a class="sourceLine" id="cb2-1" title="1"&gt;&lt;span class="fu"&gt;version:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="st"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-2" title="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-3" title="3"&gt;&lt;span class="fu"&gt;services:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-4" title="4"&gt;  &lt;span class="fu"&gt;drone-server:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-5" title="5"&gt;    &lt;span class="fu"&gt;image:&lt;/span&gt;&lt;span class="at"&gt; drone/drone:1.0.0-rc.3&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-6" title="6"&gt;    &lt;span class="fu"&gt;ports:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-7" title="7"&gt;      &lt;span class="kw"&gt;-&lt;/span&gt; 8000:80&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-8" title="8"&gt;      &lt;span class="kw"&gt;-&lt;/span&gt; 443:443&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-9" title="9"&gt;      &lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="dv"&gt;9000&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-10" title="10"&gt;    &lt;span class="fu"&gt;volumes:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-11" title="11"&gt;      &lt;span class="kw"&gt;-&lt;/span&gt; /var/run/docker.sock:/var/run/docker.sock&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-12" title="12"&gt;      &lt;span class="kw"&gt;-&lt;/span&gt; .:/data&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-13" title="13"&gt;    &lt;span class="fu"&gt;restart:&lt;/span&gt;&lt;span class="at"&gt; always&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-14" title="14"&gt;    &lt;span class="fu"&gt;environment:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-15" title="15"&gt;      &lt;span class="kw"&gt;-&lt;/span&gt; DRONE_GITHUB_SERVER=https://github.com&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-16" title="16"&gt;      &lt;span class="kw"&gt;-&lt;/span&gt; DRONE_GITHUB_CLIENT_ID=XXX&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-17" title="17"&gt;      &lt;span class="kw"&gt;-&lt;/span&gt; DRONE_GITHUB_CLIENT_SECRET=YYY&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-18" title="18"&gt;      &lt;span class="kw"&gt;-&lt;/span&gt; DRONE_RPC_SECRET=ZZZ&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-19" title="19"&gt;      &lt;span class="kw"&gt;-&lt;/span&gt; DRONE_SERVER_HOST=abcdef.ngrok.io&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-20" title="20"&gt;      &lt;span class="kw"&gt;-&lt;/span&gt; DRONE_SERVER_PROTO=https&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-21" title="21"&gt;      &lt;span class="kw"&gt;-&lt;/span&gt; DRONE_TLS_AUTOCERT=true&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-22" title="22"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-23" title="23"&gt;  &lt;span class="fu"&gt;drone-agent:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-24" title="24"&gt;    &lt;span class="fu"&gt;image:&lt;/span&gt;&lt;span class="at"&gt; drone/agent:1.0.0-rc.3&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-25" title="25"&gt;    &lt;span class="fu"&gt;command:&lt;/span&gt;&lt;span class="at"&gt; agent&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-26" title="26"&gt;    &lt;span class="fu"&gt;restart:&lt;/span&gt;&lt;span class="at"&gt; always&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-27" title="27"&gt;    &lt;span class="fu"&gt;depends_on:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-28" title="28"&gt;      &lt;span class="kw"&gt;-&lt;/span&gt; drone-server&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-29" title="29"&gt;    &lt;span class="fu"&gt;volumes:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-30" title="30"&gt;      &lt;span class="kw"&gt;-&lt;/span&gt; /var/run/docker.sock:/var/run/docker.sock&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-31" title="31"&gt;    &lt;span class="fu"&gt;environment:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-32" title="32"&gt;      &lt;span class="kw"&gt;-&lt;/span&gt; DRONE_RPC_SERVER=drone-server:9000&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-33" title="33"&gt;      &lt;span class="kw"&gt;-&lt;/span&gt; DRONE_RPC_SECRET=ZZZ&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-34" title="34"&gt;      &lt;span class="kw"&gt;-&lt;/span&gt; DRONE_RUNNER_CAPACITY=2&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;XXX&lt;/code&gt; は GitHub OAuth App の Client ID を，&lt;code&gt;YYY&lt;/code&gt; には Client Secret を記述する． &lt;code&gt;DRONE_RPC_SECRET&lt;/code&gt; の &lt;code&gt;ZZZ&lt;/code&gt; は server と agent で同じであればなんでも良いのだが，&lt;a href="https://docs.drone.io/installation/github/multi-machine/#create-a-shared-secret"&gt;ここ&lt;/a&gt;に &lt;code&gt;openssl rand -hex 16&lt;/code&gt; で生成すると書いてあるので，それに従う． これであとは &lt;code&gt;docker-compose up&lt;/code&gt; をすれば無事起動完了だ．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl http://localhost:8000/version
{&amp;quot;source&amp;quot;:&amp;quot;https://github.com/drone/drone.git&amp;quot;,&amp;quot;version&amp;quot;:&amp;quot;latest&amp;quot;,&amp;quot;commit&amp;quot;:&amp;quot;ffe3ad2aa2a30d0ba4d848c1cd0f61238b73a21c&amp;quot;}&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="ちなみに"&gt;ちなみに&lt;/h3&gt;
&lt;p&gt;Drone ってクラウドのフリープランがあったのに記事を書いてる時に気づいた(遅い):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl https://cloud.drone.io/version
{&amp;quot;source&amp;quot;:&amp;quot;https://github.com/drone/drone.git&amp;quot;,&amp;quot;version&amp;quot;:&amp;quot;latest&amp;quot;,&amp;quot;commit&amp;quot;:&amp;quot;f16b67b54fb462d3a4b2cfa93f527d4f8d1e19af&amp;quot;}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;わざわざ検証用に立てる必要なかったな笑 ちなみにフリープランでは5リポジトリまでと書いてあったが，試しに6個 Activate したらできた． 謎．&lt;/p&gt;
&lt;h2 id="おまけ-drone-haskell"&gt;おまけ: drone-haskell&lt;/h2&gt;
&lt;p&gt;ここからおまけ． drone の Haskell クライアントを作った． ちゃんとバージョン 1.0 に対応させてます:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matsubara0507/drone-haskell"&gt;matsubara0507/drone-haskell - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Drone 1.0 の RESTful API に関するドキュメントは見つからなかったので，唯一公式から出ている Drone クライアントである &lt;a href="https://github.com/drone/drone-go"&gt;drone-go&lt;/a&gt; のコード読んで実装した． なので，drone-go が間違ってたらこっちも間違ってる．&lt;/p&gt;
&lt;h3 id="利用したパッケージ"&gt;利用したパッケージ&lt;/h3&gt;
&lt;p&gt;HTTP クライアントには &lt;a href="http://hackage.haskell.org/package/req"&gt;req&lt;/a&gt; を，レスポンス型には &lt;a href="http://hackage.haskell.org/package/extensible"&gt;extensible&lt;/a&gt; を利用した． このあたりの組み合わせについては昔記事に書いた:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/posts/2017-08-13-create-rest-api-package-with-extensible.html"&gt;extensible の拡張可能レコードを使って REST API Haskell パッケージを作る - ひげメモ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ちなみに，管理がめんどくさい(加えて extensible は今の LTS にはまだないし)ので，Stackage や Hackage には登録していない． なので Stack でビルドするには &lt;code&gt;extra-deps&lt;/code&gt; に書き加える必要がある:&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;a class="sourceLine" id="cb5-1" title="1"&gt;&lt;span class="fu"&gt;extra-deps:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-2" title="2"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; extensible-0.5&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-3" title="3"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;github:&lt;/span&gt;&lt;span class="at"&gt; matsubara0507/drone-haskell&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-4" title="4"&gt;  &lt;span class="fu"&gt;commit:&lt;/span&gt;&lt;span class="at"&gt; XXX&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="ちょっと工夫"&gt;ちょっと工夫&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;テストは Servant でモックサーバーを立てて行ってる
&lt;ul&gt;
&lt;li&gt;テストケースも drone-go から取ってきてる&lt;/li&gt;
&lt;li&gt;https://github.com/drone/drone-go/tree/master/drone/testdata&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;API のパスに &lt;a href="http://hackage.haskell.org/package/formatting"&gt;formatting&lt;/a&gt; を使ってみた
&lt;ul&gt;
&lt;li&gt;あくまで試しに&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matsubara0507/drone-haskell/blob/e735b77171eebedc35160346afec71cd7631b532/src/Drone/Client/Path.hs#L65-L102"&gt;こんな感じ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="おしまい"&gt;おしまい&lt;/h2&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/01/01/111657</id><title type="text">2018年までのまとめ</title><updated>2019-01-01T12:14:48+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/01/01/111657"/><summary type="html">年末に書こうと思ってたけど、ニンテンドースイッチで遊んでたら書くの面倒になって書かなかったのだけど、まとめておかないと数年後には忘れてしまいそうなのでメモっておく。 2016年 子守 Haskell入門の執筆開始 12月に Surface Studio を買う 2017年 子守 KIRINホームタップで夢のビールが出る蛇口を獲得 Haskell入門 を出版 Docker を触る 自宅サーバ hiratara.dyndns.org を停止 12月 Surface Book 2 を買う NISA 、 iDeCo を始める 高熱で通院したら女医に健康診断の結果について激詰めされたことに腹を立て、禁酒…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2019/01/01/104714</id><title type="text">python3のmapはリストを返さない</title><updated>2019-01-01T10:47:14+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2019/01/01/104714"/><summary type="html">cols_upper = map(str.upper, "a,B,c".split(",")) cols_lower = map(str.lower, cols_upper) for c in cols_lower: print(c) for c in cols_upper: print(c) python2 だと動く。 A B C a b c python3だと動かない。 A B C python3では戻り値がイテレータに変わっているため。 Return an iterator that applies function to every item of iterable, yielding…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2018/12/31/210000</id><title type="text">2018年を振り返って</title><updated>2018-12-31T21:00:02+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2018/12/31/210000"/><summary type="html">今年は仕事を淡々とこなしつつ、自分の技術の方向性に悩みながらも、ずいぶんとだらけてしまった一年だったと思います。技術面での成長に伸び悩んでいます。 Mackerelのコードの整理や改善は無限にやることがあるのですが、平日夜や休日をそれで潰す生活をしていると、頭の切り替えがうまく行かなくなり仕事中に集中できなくなってしまいました。フロントエンドはかなりコードの整理が進み、SPA化できたのはよかったですね。コンテナ周りはチョットワカルと言えるようになりたいですね。 春先にバイナリエディタをリリースしました。まだ実装したい機能はたくさんありますが、リリースしたら燃え尽きてしまってあまりコードを触れて…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/12/27/213853</id><title type="text">戊戌の追憶</title><updated>2018-12-28T09:01:05+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/12/27/213853"/><summary type="html">この記事は、筆者が過ごした2018年を簡潔に振り返り、その経験を糧とすることを狙う。 1月 第二鰓弓由来側頸嚢胞という先天異常が原因で首が化膿し、激痛に苦しんでいた。対人関係のトラブルなどもあり軽い錯乱状態にあったのか、自分が知らない間に高い買い物をすることがあった。 drinkery: Boozy streaming library というストリーム処理ライブラリを作った。当初はすべて酒関係の用語を用いていたが、批判を受けてそこはやめた。今思えばそれで正解だった気がする。 パフォーマンスはモナディックなAPIを持つライブラリの中ではトップクラスで、双方向性や多入力多出力のような発展的な機能も…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/12/21/201108</id><title type="text">Elias-Fano encoding: 単調増加する数列をほぼ簡潔に表現する</title><updated>2018-12-22T01:15:08+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/12/21/201108"/><summary type="html">Haskell Advent Calendar 2018 20日目 単調増加する自然数の列を、最低限のビット数で表現するための興味深いテクニックと、Haskellによる実装を紹介する。 Elias-Fano encoding この手法は、簡潔データ構造に分類されるもの一つであるが、厳密には条件を満たさないため疑似簡潔データ構造と呼ばれる。1970年代、Peter EliasとRobert Mario Fanoによって独立して発見された。 例題として1, 1, 4, 10, 17, 22, 23, 30という列をエンコードしてみよう。まず、それぞれの数を上位3ビットと下位2ビットに分割する。列の…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/02/windows-windows10.html</id><title type="text">[windows] Windows10セットアップ・設定項目のメモ</title><updated>2018-12-19T09:22:10.151+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/02/windows-windows10.html"/><summary type="text">Windows10セットアップ時の設定項目、インストールアプリの備忘録。


スタートメニュー・タスクバーの設定

タスクバーの設定 

小さいタスクバーボタンを使う：オン 
[スタート]ボタンを右クリックするかWindowsキー＋Xキーを押したときに表示されるメニューで、コマンドプロンプトをWindows PowerShellに置き換える：オフ
タスクバーボタンを結合する

「タスクバーに入りきらない場合」を選択

タスクバーをすべての ディスプレイに表示する：オフ



 Quick Launcherを表示する

クイック起動を復活する 
Windows 10 タスクバーにクイック起動を表示する

スタートメニューにコントロールパネルを表示する

「Windows 10」のコントロールパネルを表示する方法について

スタートメニューにピン止めするアプリ：

Windowsシステム</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-12-19-create-lifegame.html</id><title type="text">Elm 0.19 で作るライフゲーム</title><updated>2018-12-19T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-12-19-create-lifegame.html"/><summary type="html">&lt;article class="post card" itemscope itemtype="http://schema.org/BlogPosting"&gt;
 &lt;div class="card-content"&gt;
  &lt;header class="post-header"&gt;
    &lt;h1 class="post-title" itemprop="name headline"&gt;Elm 0.19 で作るライフゲーム&lt;/h1&gt;
    &lt;p class="post-meta"&gt;
      &lt;time datetime="2018-12-19" itemprop="datePublished"&gt;
        Dec 19, 2018
      &lt;/time&gt;
      
      
      &lt;div class="tags"&gt;
          &lt;i class="fa fa-tags"&gt;&lt;/i&gt; &lt;a href="/tags/Elm.html"&gt;Elm&lt;/a&gt; &lt;a href="/tags/application.html"&gt;application&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;本記事は &lt;a href="https://qiita.com/advent-calendar/2018/elm2"&gt;Elm2(完全版) Advent Calendar 2018&lt;/a&gt; の19日目の記事です．&lt;/p&gt;
&lt;h2 id="section"&gt;&lt;/h2&gt;
&lt;p&gt;ライフゲームを Elm で作りました。 ウェブアプリケーション(?)としては，鉄板中の鉄板ですね． 完全に一発ネタ+思いつきでやったのですが，Elm の最新バージョンによる違いもあり，いくつか躓いたのでそのメモ書きです(巷の資料の多くは旧バージョン)． まぁそれでも2日ぐらいでできるので Elm は便利ですね．&lt;/p&gt;
&lt;p&gt;完成品は&lt;a href="https://matsubara0507.github.io/lifegame"&gt;コレ&lt;/a&gt;で，コードは GitHub においてある．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matsubara0507/lifegame"&gt;matsubara0507/lifegame - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="ライフゲーム"&gt;ライフゲーム&lt;/h2&gt;
&lt;p&gt;ライフゲームのルールは:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;囲碁や将棋のような NxM マスの盤上（今回は正方形 NxN）&lt;/li&gt;
&lt;li&gt;マスの状態は「生」と「死」がある&lt;/li&gt;
&lt;li&gt;状態の更新の規則は以下の3つ
&lt;ol type="1"&gt;
&lt;li&gt;生の状態の回りに生の状態のマスが2つか3つならば生のまま&lt;/li&gt;
&lt;li&gt;死の状態の回りに生の状態のマスが3つならば生になる&lt;/li&gt;
&lt;li&gt;それ以外は死の状態になる&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ここでいう「回り」というのは，自身のマスの周囲８マスのことを指す．&lt;/p&gt;
&lt;h2 id="作ったもの"&gt;作ったもの&lt;/h2&gt;
&lt;p&gt;一般的なライフゲームに加えて，次のようなことを実現した．&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;レンジスライダーで盤面の粒度をコントロール&lt;/li&gt;
&lt;li&gt;レンジスライダーで盤面の更新間隔をコントロール&lt;/li&gt;
&lt;li&gt;URLのクエリから生と死の画像を上書き&lt;/li&gt;
&lt;li&gt;スマホでも動作するように Touch イベントをいい感じに&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="実装について"&gt;実装について&lt;/h2&gt;
&lt;p&gt;次の記事を参考にした:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/miyamo_madoka/items/2cad5473010292982303"&gt;[Elm]Life Gameで生命を生み出す - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;記憶に新しいのでステップバイステップにまとめる．&lt;/p&gt;
&lt;h3 id="盤面の描写"&gt;盤面の描写&lt;/h3&gt;
&lt;p&gt;まずはモデルを考える． 適当にパッケージを探して見たが， Elm 0.19 に対応している良さげなものはなかったので自作することにした:&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb1-1" title="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; alisa &lt;span class="dt"&gt;Board&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-2" title="2"&gt;    { size &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-3" title="3"&gt;    , cells &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Array&lt;/span&gt; &lt;span class="dt"&gt;Cell&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-4" title="4"&gt;    }&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-5" title="5"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-6" title="6"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Cell&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Alive&lt;/span&gt; &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Dead&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;今回は正方形を想定するので &lt;code&gt;size&lt;/code&gt; は一辺のマス数にする． つまり初期化関数は次のようになる．&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb2-1" title="1"&gt;initBoard &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Board&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-2" title="2"&gt;initBoard n &lt;span class="fu"&gt;=&lt;/span&gt; { size &lt;span class="fu"&gt;=&lt;/span&gt; n, cells &lt;span class="fu"&gt;=&lt;/span&gt; Array.repeat (n &lt;span class="fu"&gt;*&lt;/span&gt; n) &lt;span class="dt"&gt;Dead&lt;/span&gt; }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次に盤面をどうやって描写するかを考えた． テーブルでゴリゴリ書くのもいいかなと思ったが，あんまりエレガントではない気がした． ヒントを得るために GitHub をブラブラしてたら個人ページの左下の組織アカウント一覧に目が行った． HTMLを見てみると，これは直列に繋いだ &lt;code&gt;div&lt;/code&gt; を適当なタイミングで折り返しているようだ． このやり方なら &lt;code&gt;cells&lt;/code&gt; を &lt;code&gt;size&lt;/code&gt; 個ごとに行へとする必要がなく，完全にCSSだけでなんとかなる．&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb3-1" title="1"&gt;main &lt;span class="fu"&gt;=&lt;/span&gt; viewBoard (initBoard &lt;span class="dv"&gt;30&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-2" title="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-3" title="3"&gt;viewBoard &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Board&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt; msg&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-4" title="4"&gt;viewBoard board &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-5" title="5"&gt;    &lt;span class="kw"&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-6" title="6"&gt;        attr &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-7" title="7"&gt;            [ style &lt;span class="st"&gt;&amp;quot;width&amp;quot;&lt;/span&gt; (maxLength &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; vmin)&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-8" title="8"&gt;            , style &lt;span class="st"&gt;&amp;quot;height&amp;quot;&lt;/span&gt; (maxLength &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; vmin)&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-9" title="9"&gt;            ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-10" title="10"&gt;    &lt;span class="kw"&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-11" title="11"&gt;    concatMapWith (Html.div attr) (viewCell board) board&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-12" title="12"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-13" title="13"&gt;viewCell &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Board&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Cell&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt; msg&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-14" title="14"&gt;viewCell board cell &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-15" title="15"&gt;    &lt;span class="kw"&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-16" title="16"&gt;        styleAttrs &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-17" title="17"&gt;            [ style &lt;span class="st"&gt;&amp;quot;width&amp;quot;&lt;/span&gt; (maxLength &lt;span class="fu"&gt;/&lt;/span&gt; toFloat board&lt;span class="fu"&gt;.&lt;/span&gt;size &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; vmin)&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-18" title="18"&gt;            , style &lt;span class="st"&gt;&amp;quot;height&amp;quot;&lt;/span&gt; (maxLength &lt;span class="fu"&gt;/&lt;/span&gt; toFloat board&lt;span class="fu"&gt;.&lt;/span&gt;size &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; vmin)&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-19" title="19"&gt;            , style &lt;span class="st"&gt;&amp;quot;margin&amp;quot;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-20" title="20"&gt;            , style &lt;span class="st"&gt;&amp;quot;box-sizing&amp;quot;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;border-box&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-21" title="21"&gt;            , style &lt;span class="st"&gt;&amp;quot;border&amp;quot;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;0.2vmin solid gray&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-22" title="22"&gt;            ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-23" title="23"&gt;    &lt;span class="kw"&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-24" title="24"&gt;    Html.img (List.concat [ styleAttrs, [ src &lt;span class="st"&gt;&amp;quot;static/image/dead.png&amp;quot;&lt;/span&gt; ] ]) []&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-25" title="25"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-26" title="26"&gt;concatMapWith &lt;span class="fu"&gt;:&lt;/span&gt; (&lt;span class="dt"&gt;List&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; (&lt;span class="dt"&gt;Cell&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Board&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; b&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-27" title="27"&gt;concatMapWith f g board &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-28" title="28"&gt;    board&lt;span class="fu"&gt;.&lt;/span&gt;cells&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-29" title="29"&gt;        &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; Array.map g&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-30" title="30"&gt;        &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; Array.toList&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-31" title="31"&gt;        &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; f&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-32" title="32"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-33" title="33"&gt;maxLength &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Float&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-34" title="34"&gt;maxLength &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="fl"&gt;90.0&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-35" title="35"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-36" title="36"&gt;vmin &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Float&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-37" title="37"&gt;vmin n &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;span class="fu"&gt;.&lt;/span&gt;append (&lt;span class="dt"&gt;String&lt;/span&gt;&lt;span class="fu"&gt;.&lt;/span&gt;fromFloat n) &lt;span class="st"&gt;&amp;quot;vmin&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="https://ellie-app.com/4bx9X6b6S7Ma1"&gt;結果こんな感じ&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;プログラムの中で割り算を記述するのは気がひけるが，まぁ上手く描写されているのでよしとする．&lt;/p&gt;
&lt;h3 id="粒度スライダーの導入"&gt;粒度スライダーの導入&lt;/h3&gt;
&lt;p&gt;スライダーには次のパッケージを利用した:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://package.elm-lang.org/packages/carwow/elm-slider/6.0.1/"&gt;carwow/elm-slider - Elm Packages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今回は &lt;a href="https://package.elm-lang.org/packages/carwow/elm-slider/6.0.1/SingleSlider"&gt;SingleSlider&lt;/a&gt; を使いたい． SingleSlider の中に &lt;code&gt;Model&lt;/code&gt; や &lt;code&gt;Msg&lt;/code&gt; などが定義されているので，それらを適切に使えば良い．&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb4-1" title="1"&gt;main &lt;span class="fu"&gt;=&lt;/span&gt; Browser.element&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-2" title="2"&gt;  { &lt;span class="fu"&gt;init&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;init&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-3" title="3"&gt;  , view &lt;span class="fu"&gt;=&lt;/span&gt; view&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-4" title="4"&gt;  , update &lt;span class="fu"&gt;=&lt;/span&gt; update&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-5" title="5"&gt;  , subscriptions &lt;span class="fu"&gt;=&lt;/span&gt; always Sub.none&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-6" title="6"&gt;  }&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-7" title="7"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-8" title="8"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; alias &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-9" title="9"&gt;  { board &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Board&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-10" title="10"&gt;  , sizeSlider &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;SingleSlider.Model&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-11" title="11"&gt;  }&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-12" title="12"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-13" title="13"&gt;&lt;span class="fu"&gt;init&lt;/span&gt; &lt;span class="fu"&gt;:&lt;/span&gt; () &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; (&lt;span class="dt"&gt;Model&lt;/span&gt;, &lt;span class="dt"&gt;Cmd&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-14" title="14"&gt;&lt;span class="fu"&gt;init&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; always (initModel, Cmd.none)&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-15" title="15"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-16" title="16"&gt;initModel &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Model&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-17" title="17"&gt;initModel &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-18" title="18"&gt;    &lt;span class="kw"&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-19" title="19"&gt;        size &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-20" title="20"&gt;            &lt;span class="dv"&gt;30&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-21" title="21"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-22" title="22"&gt;        defaultSlider &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-23" title="23"&gt;            SingleSlider.defaultModel&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-24" title="24"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-25" title="25"&gt;        sizeSlider &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-26" title="26"&gt;            { defaultSlider&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-27" title="27"&gt;                &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="fu"&gt;min&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="fl"&gt;5.0&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-28" title="28"&gt;                , &lt;span class="fu"&gt;max&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="fl"&gt;50.0&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-29" title="29"&gt;                , step &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="fl"&gt;1.0&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-30" title="30"&gt;                , value &lt;span class="fu"&gt;=&lt;/span&gt; size&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-31" title="31"&gt;                , minFormatter &lt;span class="fu"&gt;=&lt;/span&gt; always &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-32" title="32"&gt;                , maxFormatter &lt;span class="fu"&gt;=&lt;/span&gt; always &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-33" title="33"&gt;                , currentValueFormatter &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-34" title="34"&gt;                    \n _ &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;span class="fu"&gt;.concat&lt;/span&gt; [ &lt;span class="st"&gt;&amp;quot;1列のマス数: &amp;quot;&lt;/span&gt;, &lt;span class="dt"&gt;String&lt;/span&gt;&lt;span class="fu"&gt;.&lt;/span&gt;fromFloat n ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-35" title="35"&gt;            }&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-36" title="36"&gt;    &lt;span class="kw"&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-37" title="37"&gt;    { board &lt;span class="fu"&gt;=&lt;/span&gt; initBoard size, sizeSlider &lt;span class="fu"&gt;=&lt;/span&gt; sizeSlider }&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-38" title="38"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-39" title="39"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-40" title="40"&gt;    &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;SizeSliderMsg&lt;/span&gt; &lt;span class="dt"&gt;SingleSlider.Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-41" title="41"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-42" title="42"&gt;update &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; (&lt;span class="dt"&gt;Model&lt;/span&gt;, &lt;span class="dt"&gt;Cmd&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-43" title="43"&gt;update msg model &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-44" title="44"&gt;    &lt;span class="kw"&gt;case&lt;/span&gt; msg &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-45" title="45"&gt;        &lt;span class="dt"&gt;SizeSliderMsg&lt;/span&gt; subMsg &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-46" title="46"&gt;            &lt;span class="kw"&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-47" title="47"&gt;                ( updatedSlider, cmd, _ ) &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-48" title="48"&gt;                    SingleSlider.update subMsg model&lt;span class="fu"&gt;.&lt;/span&gt;sizeSlider&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-49" title="49"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-50" title="50"&gt;                updatedBoard &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-51" title="51"&gt;                    initBoard (&lt;span class="fu"&gt;truncate&lt;/span&gt; updatedSlider&lt;span class="fu"&gt;.&lt;/span&gt;value)&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-52" title="52"&gt;            &lt;span class="kw"&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-53" title="53"&gt;            ( { model &lt;span class="fu"&gt;|&lt;/span&gt; board &lt;span class="fu"&gt;=&lt;/span&gt; updatedBoard, sizeSlider &lt;span class="fu"&gt;=&lt;/span&gt; updatedSlider }&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-54" title="54"&gt;            , Cmd.map &lt;span class="dt"&gt;SizeSliderMsg&lt;/span&gt; cmd&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-55" title="55"&gt;            )&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-56" title="56"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-57" title="57"&gt;view &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-58" title="58"&gt;view model &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-59" title="59"&gt;    &lt;span class="kw"&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-60" title="60"&gt;        sliderAttrs &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-61" title="61"&gt;            [ style &lt;span class="st"&gt;&amp;quot;margin-left&amp;quot;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;10px&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-62" title="62"&gt;            , style &lt;span class="st"&gt;&amp;quot;margin-right&amp;quot;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;10px&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-63" title="63"&gt;            ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-64" title="64"&gt;    &lt;span class="kw"&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-65" title="65"&gt;      &lt;span class="fu"&gt;div&lt;/span&gt; []&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-66" title="66"&gt;        [ &lt;span class="fu"&gt;div&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-67" title="67"&gt;            [ style &lt;span class="st"&gt;&amp;quot;text-align&amp;quot;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;center&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-68" title="68"&gt;            , style &lt;span class="st"&gt;&amp;quot;display&amp;quot;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;flex&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-69" title="69"&gt;            , style &lt;span class="st"&gt;&amp;quot;justify-content&amp;quot;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;center&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-70" title="70"&gt;            ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-71" title="71"&gt;            [ &lt;span class="fu"&gt;div&lt;/span&gt; sliderAttrs&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-72" title="72"&gt;                [ Html.map &lt;span class="dt"&gt;SizeSliderMsg&lt;/span&gt; (SingleSlider.view model&lt;span class="fu"&gt;.&lt;/span&gt;sizeSlider) ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-73" title="73"&gt;            ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-74" title="74"&gt;        , viewBoard model&lt;span class="fu"&gt;.&lt;/span&gt;board&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-75" title="75"&gt;        ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="https://ellie-app.com/4bXck9C58qFa1"&gt;結果こんな感じ&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Model&lt;/code&gt; の初期化関数，&lt;code&gt;update&lt;/code&gt; と &lt;code&gt;view&lt;/code&gt; メソッドがそれぞれあって，それを呼び出して &lt;code&gt;map&lt;/code&gt; するだけ． こういう風に細かいパーツを呼び出すだけでできるデザインいいですよね．&lt;/p&gt;
&lt;h3 id="状態と入力"&gt;状態と入力&lt;/h3&gt;
&lt;p&gt;現状はまだ全セルが死んでいる状態なので，何らかの入力を受け取って好きなセルを生きてる状態にできるようにする必要がある． まずはPCだけ考えるとして，できればセルを一個一個クリックして更新する形にはしたくない(めんどくさいから)． 生状態にできるかどうかのフラグと，オンの時だけマウスオーバーで生状態にするようにしたい． なので，まずはフラグを &lt;code&gt;Model&lt;/code&gt; に追加した:&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb5-1" title="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; alias &lt;span class="dt"&gt;Board&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-2" title="2"&gt;    { size &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-3" title="3"&gt;    , cells &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Array&lt;/span&gt; &lt;span class="dt"&gt;Cell&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-4" title="4"&gt;    , planting &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Bool&lt;/span&gt; &lt;span class="co"&gt;-- 状態の更新が可能か&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-5" title="5"&gt;    }&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-6" title="6"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-7" title="7"&gt;initBoard &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Board&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-8" title="8"&gt;initBoard n &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-9" title="9"&gt;    { size &lt;span class="fu"&gt;=&lt;/span&gt; n&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-10" title="10"&gt;    , cells &lt;span class="fu"&gt;=&lt;/span&gt; Array.repeat (n &lt;span class="fu"&gt;*&lt;/span&gt; n) &lt;span class="dt"&gt;Dead&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-11" title="11"&gt;    , planting &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;False&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-12" title="12"&gt;    }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;planting&lt;/code&gt; が真のときだけマウスオーバーでセルを生状態にできる(ようにする)． したがって「&lt;code&gt;planting&lt;/code&gt; のオンオフ」と「セルを生状態にする」の二つの &lt;code&gt;Msg&lt;/code&gt; が必要だ:&lt;/p&gt;
&lt;div class="sourceCode" id="cb6"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb6-1" title="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;BoardMsg&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-2" title="2"&gt;    &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Born&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="co"&gt;-- インデックスのセルを生状態にする&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-3" title="3"&gt;    &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Planting&lt;/span&gt; &lt;span class="co"&gt;-- 生状態への変更を可能にする&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-4" title="4"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-5" title="5"&gt;updateBoard &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;BoardMsg&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Board&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; ( &lt;span class="dt"&gt;Board&lt;/span&gt;, &lt;span class="dt"&gt;Cmd&lt;/span&gt; &lt;span class="dt"&gt;BoardMsg&lt;/span&gt; )&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-6" title="6"&gt;updateBoard msg board &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-7" title="7"&gt;    &lt;span class="kw"&gt;case&lt;/span&gt; msg &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-8" title="8"&gt;        &lt;span class="dt"&gt;Born&lt;/span&gt; idx &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-9" title="9"&gt;            ( born idx board, Cmd.none )&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-10" title="10"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-11" title="11"&gt;        &lt;span class="dt"&gt;Planting&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-12" title="12"&gt;            ( { board &lt;span class="fu"&gt;|&lt;/span&gt; planting &lt;span class="fu"&gt;=&lt;/span&gt; xor board&lt;span class="fu"&gt;.&lt;/span&gt;planting &lt;span class="dt"&gt;True&lt;/span&gt; }, Cmd.none )&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-13" title="13"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-14" title="14"&gt;born &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Board&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Board&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-15" title="15"&gt;born idx board &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-16" title="16"&gt;    { board &lt;span class="fu"&gt;|&lt;/span&gt; cells &lt;span class="fu"&gt;=&lt;/span&gt; Array.set idx &lt;span class="dt"&gt;Alive&lt;/span&gt; board&lt;span class="fu"&gt;.&lt;/span&gt;cells }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;そして，盤上をクリックして &lt;code&gt;planting&lt;/code&gt; のオンオフをし，マウスオーバーで生状態にするように &lt;code&gt;view&lt;/code&gt; へ &lt;code&gt;Msg&lt;/code&gt; を追加する:&lt;/p&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb7-1" title="1"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Html.Events.Extra.Pointer&lt;/span&gt; &lt;span class="kw"&gt;as&lt;/span&gt; &lt;span class="dt"&gt;Pointer&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-2" title="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-3" title="3"&gt;viewBoard &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Board&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt; &lt;span class="dt"&gt;BoardMsg&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-4" title="4"&gt;viewBoard board &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-5" title="5"&gt;    &lt;span class="kw"&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-6" title="6"&gt;        attr &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-7" title="7"&gt;            [ style &lt;span class="st"&gt;&amp;quot;width&amp;quot;&lt;/span&gt; (maxLength &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; vmin)&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-8" title="8"&gt;            , style &lt;span class="st"&gt;&amp;quot;height&amp;quot;&lt;/span&gt; (maxLength &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; vmin)&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-9" title="9"&gt;            ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-10" title="10"&gt;    &lt;span class="kw"&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-11" title="11"&gt;    concatIndexedMapWith (Html.div attr) (viewCell board) board&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-12" title="12"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-13" title="13"&gt;viewCell &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Board&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Cell&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-14" title="14"&gt;viewCell board idx cell &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-15" title="15"&gt;    &lt;span class="kw"&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-16" title="16"&gt;        styleAttrs &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-17" title="17"&gt;            [ style &lt;span class="st"&gt;&amp;quot;width&amp;quot;&lt;/span&gt; (maxLength &lt;span class="fu"&gt;/&lt;/span&gt; toFloat board&lt;span class="fu"&gt;.&lt;/span&gt;size &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; vmin)&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-18" title="18"&gt;            , style &lt;span class="st"&gt;&amp;quot;height&amp;quot;&lt;/span&gt; (maxLength &lt;span class="fu"&gt;/&lt;/span&gt; toFloat board&lt;span class="fu"&gt;.&lt;/span&gt;size &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; vmin)&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-19" title="19"&gt;            , style &lt;span class="st"&gt;&amp;quot;margin&amp;quot;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-20" title="20"&gt;            , style &lt;span class="st"&gt;&amp;quot;box-sizing&amp;quot;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;border-box&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-21" title="21"&gt;            , style &lt;span class="st"&gt;&amp;quot;border&amp;quot;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;0.2vmin solid gray&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-22" title="22"&gt;            ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-23" title="23"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-24" title="24"&gt;        bornAttr &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-25" title="25"&gt;            &lt;span class="kw"&gt;if&lt;/span&gt; board&lt;span class="fu"&gt;.&lt;/span&gt;planting &lt;span class="kw"&gt;then&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-26" title="26"&gt;                [ Pointer.onDown (always &lt;span class="dt"&gt;Planting&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-27" title="27"&gt;                , Pointer.onOver (always (&lt;span class="dt"&gt;Born&lt;/span&gt; idx))&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-28" title="28"&gt;                ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-29" title="29"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-30" title="30"&gt;            &lt;span class="kw"&gt;else&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-31" title="31"&gt;                [ Pointer.onDown (always &lt;span class="dt"&gt;Planting&lt;/span&gt;) ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-32" title="32"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-33" title="33"&gt;        imageLink &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-34" title="34"&gt;            &lt;span class="kw"&gt;case&lt;/span&gt; cell &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-35" title="35"&gt;                &lt;span class="dt"&gt;Dead&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-36" title="36"&gt;                    [ src &lt;span class="st"&gt;&amp;quot;static/image/dead.png&amp;quot;&lt;/span&gt; ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-37" title="37"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-38" title="38"&gt;                &lt;span class="dt"&gt;Alive&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-39" title="39"&gt;                    [ src &lt;span class="st"&gt;&amp;quot;static/image/alive.png&amp;quot;&lt;/span&gt; ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-40" title="40"&gt;    &lt;span class="kw"&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-41" title="41"&gt;    Html.img (List.concat [ styleAttrs, bornAttr, imageLink ]) []&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-42" title="42"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-43" title="43"&gt;concatIndexedMapWith &lt;span class="fu"&gt;:&lt;/span&gt; (&lt;span class="dt"&gt;List&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; (&lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Cell&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Board&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; b&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-44" title="44"&gt;concatIndexedMapWith f g board &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-45" title="45"&gt;    board&lt;span class="fu"&gt;.&lt;/span&gt;cells&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-46" title="46"&gt;        &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; Array.indexedMap g&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-47" title="47"&gt;        &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; Array.toList&lt;/a&gt;
&lt;a class="sourceLine" id="cb7-48" title="48"&gt;        &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; f&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;マウスイベントには，おいおいスマホ対応もできるように &lt;a href="https://package.elm-lang.org/packages/mpizenberg/elm-pointer-events/latest"&gt;&lt;code&gt;mpizenberg/elm-pointer-events&lt;/code&gt;&lt;/a&gt; パッケージを利用した． あとは &lt;code&gt;main&lt;/code&gt; 側を書き換えれば出来上がり:&lt;/p&gt;
&lt;div class="sourceCode" id="cb8"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb8-1" title="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-2" title="2"&gt;    &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;SizeSliderMsg&lt;/span&gt; &lt;span class="dt"&gt;SingleSlider.Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-3" title="3"&gt;    &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;BoardMsg&lt;/span&gt; &lt;span class="dt"&gt;BoardMsg&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-4" title="4"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-5" title="5"&gt;update &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; (&lt;span class="dt"&gt;Model&lt;/span&gt;, &lt;span class="dt"&gt;Cmd&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-6" title="6"&gt;update msg model &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-7" title="7"&gt;    &lt;span class="kw"&gt;case&lt;/span&gt; msg &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-8" title="8"&gt;        &lt;span class="dt"&gt;SizeSliderMsg&lt;/span&gt; subMsg &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-9" title="9"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-10" title="10"&gt;        &lt;span class="dt"&gt;BoardMsg&lt;/span&gt; subMsg &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-11" title="11"&gt;            &lt;span class="kw"&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-12" title="12"&gt;                ( updatedBoard, cmd ) &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-13" title="13"&gt;                    updateBoard subMsg model&lt;span class="fu"&gt;.&lt;/span&gt;board&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-14" title="14"&gt;            &lt;span class="kw"&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-15" title="15"&gt;            ( { model &lt;span class="fu"&gt;|&lt;/span&gt; board &lt;span class="fu"&gt;=&lt;/span&gt; updatedBoard }, Cmd.map &lt;span class="dt"&gt;BoardMsg&lt;/span&gt; cmd )&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-16" title="16"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-17" title="17"&gt;view &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-18" title="18"&gt;view model &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-19" title="19"&gt;    &lt;span class="kw"&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-20" title="20"&gt;        sliderAttrs &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-21" title="21"&gt;            [ style &lt;span class="st"&gt;&amp;quot;margin-left&amp;quot;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;10px&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-22" title="22"&gt;            , style &lt;span class="st"&gt;&amp;quot;margin-right&amp;quot;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;10px&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-23" title="23"&gt;            ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-24" title="24"&gt;    &lt;span class="kw"&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-25" title="25"&gt;      &lt;span class="fu"&gt;div&lt;/span&gt; []&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-26" title="26"&gt;        [ &lt;span class="fu"&gt;div&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-27" title="27"&gt;            [ style &lt;span class="st"&gt;&amp;quot;text-align&amp;quot;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;center&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-28" title="28"&gt;            , style &lt;span class="st"&gt;&amp;quot;display&amp;quot;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;flex&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-29" title="29"&gt;            , style &lt;span class="st"&gt;&amp;quot;justify-content&amp;quot;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;center&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-30" title="30"&gt;            ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-31" title="31"&gt;            [ &lt;span class="fu"&gt;div&lt;/span&gt; sliderAttrs&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-32" title="32"&gt;                [ Html.map &lt;span class="dt"&gt;SizeSliderMsg&lt;/span&gt; (SingleSlider.view model&lt;span class="fu"&gt;.&lt;/span&gt;sizeSlider) ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-33" title="33"&gt;            ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-34" title="34"&gt;        , Html.map &lt;span class="dt"&gt;BoardMsg&lt;/span&gt; (viewBoard model&lt;span class="fu"&gt;.&lt;/span&gt;board)&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-35" title="35"&gt;        ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="https://ellie-app.com/4c3qbgJmvZ8a1"&gt;結果こんな感じ&lt;/a&gt;．&lt;/p&gt;
&lt;h3 id="更新を追加"&gt;更新を追加&lt;/h3&gt;
&lt;p&gt;いよいよライフゲーム化． まず，上述した状態変化の定義を関数(&lt;code&gt;nextCell&lt;/code&gt;)にする:&lt;/p&gt;
&lt;div class="sourceCode" id="cb9"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb9-1" title="1"&gt;nextBoard &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Board&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Board&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-2" title="2"&gt;nextBoard board &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-3" title="3"&gt;    { board &lt;span class="fu"&gt;|&lt;/span&gt; cells &lt;span class="fu"&gt;=&lt;/span&gt; Array.indexedMap (nextCell board) board&lt;span class="fu"&gt;.&lt;/span&gt;cells }&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-4" title="4"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-5" title="5"&gt;nextCell &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Board&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Cell&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Cell&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-6" title="6"&gt;nextCell board idx cell &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-7" title="7"&gt;    &lt;span class="kw"&gt;case&lt;/span&gt; ( countAroundAliveCell board idx, cell ) &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-8" title="8"&gt;        ( &lt;span class="dv"&gt;2&lt;/span&gt;, &lt;span class="dt"&gt;Alive&lt;/span&gt; ) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-9" title="9"&gt;            &lt;span class="dt"&gt;Alive&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-10" title="10"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-11" title="11"&gt;        ( &lt;span class="dv"&gt;3&lt;/span&gt;, _ ) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-12" title="12"&gt;            &lt;span class="dt"&gt;Alive&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-13" title="13"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-14" title="14"&gt;        _ &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-15" title="15"&gt;            &lt;span class="dt"&gt;Dead&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-16" title="16"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-17" title="17"&gt;countAroundAliveCell &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Board&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-18" title="18"&gt;countAroundAliveCell board idx &lt;span class="fu"&gt;=&lt;/span&gt; Debug.todo &lt;span class="st"&gt;&amp;quot;todo&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;countAroundAliveCell&lt;/code&gt; は「回り」の生状態のセル数を返す想定． ここで少し大変． &lt;code&gt;cells&lt;/code&gt; を2次元配列ではなく，1次元配列にしてCSSで折りたたむようにしてしまったので，壁際にあるかどうかの判定をインデックスと盤面のサイズから導く必要があった:&lt;/p&gt;
&lt;div class="sourceCode" id="cb10"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb10-1" title="1"&gt;countAroundAliveCell &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Board&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-2" title="2"&gt;countAroundAliveCell board idx &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-3" title="3"&gt;    aroundCell board idx &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; List.filter ((&lt;span class="fu"&gt;==&lt;/span&gt;) &lt;span class="dt"&gt;Alive&lt;/span&gt;) &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; List.length&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-4" title="4"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-5" title="5"&gt;aroundCell &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Board&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt; &lt;span class="dt"&gt;Cell&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-6" title="6"&gt;aroundCell board idx &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-7" title="7"&gt;    [ &lt;span class="kw"&gt;if&lt;/span&gt; modBy board&lt;span class="fu"&gt;.&lt;/span&gt;size idx &lt;span class="fu"&gt;==&lt;/span&gt; &lt;span class="dv"&gt;0&lt;/span&gt; &lt;span class="kw"&gt;then&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-8" title="8"&gt;        [] &lt;span class="co"&gt;-- 左端にいる場合&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-9" title="9"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-10" title="10"&gt;      &lt;span class="kw"&gt;else&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-11" title="11"&gt;        [ idx &lt;span class="fu"&gt;-&lt;/span&gt; board&lt;span class="fu"&gt;.&lt;/span&gt;size &lt;span class="fu"&gt;-&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;, idx &lt;span class="fu"&gt;-&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;, idx &lt;span class="fu"&gt;+&lt;/span&gt; board&lt;span class="fu"&gt;.&lt;/span&gt;size &lt;span class="fu"&gt;-&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt; ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-12" title="12"&gt;    , [ idx &lt;span class="fu"&gt;-&lt;/span&gt; board&lt;span class="fu"&gt;.&lt;/span&gt;size, idx &lt;span class="fu"&gt;+&lt;/span&gt; board&lt;span class="fu"&gt;.&lt;/span&gt;size ] &lt;span class="co"&gt;-- 上下は `Array.get` で `Nothing` になる&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-13" title="13"&gt;    , &lt;span class="kw"&gt;if&lt;/span&gt; modBy board&lt;span class="fu"&gt;.&lt;/span&gt;size idx &lt;span class="fu"&gt;==&lt;/span&gt; board&lt;span class="fu"&gt;.&lt;/span&gt;size &lt;span class="fu"&gt;-&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt; &lt;span class="kw"&gt;then&lt;/span&gt;        &lt;/a&gt;
&lt;a class="sourceLine" id="cb10-14" title="14"&gt;        [] &lt;span class="co"&gt;-- 右端にいる場合&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-15" title="15"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-16" title="16"&gt;      &lt;span class="kw"&gt;else&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-17" title="17"&gt;        [ idx &lt;span class="fu"&gt;-&lt;/span&gt; board&lt;span class="fu"&gt;.&lt;/span&gt;size &lt;span class="fu"&gt;+&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;, idx &lt;span class="fu"&gt;+&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt;, idx &lt;span class="fu"&gt;+&lt;/span&gt; board&lt;span class="fu"&gt;.&lt;/span&gt;size &lt;span class="fu"&gt;+&lt;/span&gt; &lt;span class="dv"&gt;1&lt;/span&gt; ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-18" title="18"&gt;    ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-19" title="19"&gt;        &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; List.concat&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-20" title="20"&gt;        &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; List.filterMap (\n &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; Array.get n board&lt;span class="fu"&gt;.&lt;/span&gt;cells)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで更新部分はできた． 次に &lt;code&gt;nextBoard&lt;/code&gt; 関数を呼び出すタイミングを &lt;code&gt;subscriptions&lt;/code&gt; と &lt;code&gt;Msg&lt;/code&gt; で定義する:&lt;/p&gt;
&lt;div class="sourceCode" id="cb11"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb11-1" title="1"&gt;main &lt;span class="fu"&gt;=&lt;/span&gt; Browser.element&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-2" title="2"&gt;  { &lt;span class="fu"&gt;init&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;init&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-3" title="3"&gt;  , view &lt;span class="fu"&gt;=&lt;/span&gt; view&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-4" title="4"&gt;  , update &lt;span class="fu"&gt;=&lt;/span&gt; update&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-5" title="5"&gt;  , subscriptions &lt;span class="fu"&gt;=&lt;/span&gt; subscriptions&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-6" title="6"&gt;  }&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-7" title="7"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-8" title="8"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-9" title="9"&gt;    &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;SizeSliderMsg&lt;/span&gt; &lt;span class="dt"&gt;SingleSlider.Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-10" title="10"&gt;    &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;BoardMsg&lt;/span&gt; &lt;span class="dt"&gt;BoardMsg&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-11" title="11"&gt;    &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;NextTick&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-12" title="12"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-13" title="13"&gt;update &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; (&lt;span class="dt"&gt;Model&lt;/span&gt;, &lt;span class="dt"&gt;Cmd&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-14" title="14"&gt;update msg model &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-15" title="15"&gt;    &lt;span class="kw"&gt;case&lt;/span&gt; msg &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-16" title="16"&gt;        &lt;span class="dt"&gt;SizeSliderMsg&lt;/span&gt; subMsg &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-17" title="17"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-18" title="18"&gt;        &lt;span class="dt"&gt;BoardMsg&lt;/span&gt; subMsg &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-19" title="19"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-20" title="20"&gt;        &lt;span class="dt"&gt;NextTick&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-21" title="21"&gt;            ( { model &lt;span class="fu"&gt;|&lt;/span&gt; board &lt;span class="fu"&gt;=&lt;/span&gt; nextBoard model&lt;span class="fu"&gt;.&lt;/span&gt;board }, Cmd.none )&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-22" title="22"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-23" title="23"&gt;subscriptions &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Sub&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-24" title="24"&gt;subscriptions model &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-25" title="25"&gt;    &lt;span class="kw"&gt;if&lt;/span&gt; model&lt;span class="fu"&gt;.&lt;/span&gt;board&lt;span class="fu"&gt;.&lt;/span&gt;planting &lt;span class="kw"&gt;then&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-26" title="26"&gt;        Sub.none&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-27" title="27"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-28" title="28"&gt;    &lt;span class="kw"&gt;else&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-29" title="29"&gt;        Time.every &lt;span class="dv"&gt;100&lt;/span&gt; (always &lt;span class="dt"&gt;NextTick&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href="https://ellie-app.com/4c7ncvvgQVqa1"&gt;結果こんな感じ&lt;/a&gt;．&lt;/p&gt;
&lt;h3 id="時間スライダーの導入"&gt;時間スライダーの導入&lt;/h3&gt;
&lt;p&gt;ついでに更新間隔の時間もスライダーで設定できるようにした． やり方は簡単で，&lt;code&gt;Model&lt;/code&gt; にもう一つ &lt;code&gt;SingleSlider&lt;/code&gt; を生やせばいい:&lt;/p&gt;
&lt;div class="sourceCode" id="cb12"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb12-1" title="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; alias &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-2" title="2"&gt;  { board &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Board&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-3" title="3"&gt;  , sizeSlider &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;SingleSlider.Model&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-4" title="4"&gt;  , tickSlider &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;SingleSlider.Model&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-5" title="5"&gt;  }&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-6" title="6"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-7" title="7"&gt;initModel &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Model&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-8" title="8"&gt;initModel &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-9" title="9"&gt;    &lt;span class="kw"&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-10" title="10"&gt;        &lt;span class="fu"&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-11" title="11"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-12" title="12"&gt;        tickSlider &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-13" title="13"&gt;            { defaultSlider&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-14" title="14"&gt;                &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="fu"&gt;min&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="fl"&gt;50.0&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-15" title="15"&gt;                , &lt;span class="fu"&gt;max&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="fl"&gt;1000.0&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-16" title="16"&gt;                , step &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="fl"&gt;10.0&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-17" title="17"&gt;                , value &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="fl"&gt;100.0&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-18" title="18"&gt;                , minFormatter &lt;span class="fu"&gt;=&lt;/span&gt; always &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-19" title="19"&gt;                , maxFormatter &lt;span class="fu"&gt;=&lt;/span&gt; always &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-20" title="20"&gt;                , currentValueFormatter &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-21" title="21"&gt;                    \n _ &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;span class="fu"&gt;.concat&lt;/span&gt; [ &lt;span class="st"&gt;&amp;quot;更新間隔: &amp;quot;&lt;/span&gt;, &lt;span class="dt"&gt;String&lt;/span&gt;&lt;span class="fu"&gt;.&lt;/span&gt;fromFloat n, &lt;span class="st"&gt;&amp;quot;ms&amp;quot;&lt;/span&gt; ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-22" title="22"&gt;            }&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-23" title="23"&gt;    &lt;span class="kw"&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-24" title="24"&gt;    { board &lt;span class="fu"&gt;=&lt;/span&gt; initBoard size&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-25" title="25"&gt;    , sizeSlider &lt;span class="fu"&gt;=&lt;/span&gt; sizeSlider&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-26" title="26"&gt;    , tickSlider &lt;span class="fu"&gt;=&lt;/span&gt; tickSlider&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-27" title="27"&gt;    }&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-28" title="28"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-29" title="29"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-30" title="30"&gt;    &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;SizeSliderMsg&lt;/span&gt; &lt;span class="dt"&gt;SingleSlider.Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-31" title="31"&gt;    &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;TickSliderMsg&lt;/span&gt; &lt;span class="dt"&gt;SingleSlider.Msg&lt;/span&gt; &lt;span class="co"&gt;-- 追加&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-32" title="32"&gt;    &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;BoardMsg&lt;/span&gt; &lt;span class="dt"&gt;BoardMsg&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-33" title="33"&gt;    &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;NextTick&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-34" title="34"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-35" title="35"&gt;update &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; (&lt;span class="dt"&gt;Model&lt;/span&gt;, &lt;span class="dt"&gt;Cmd&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-36" title="36"&gt;update msg model &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-37" title="37"&gt;    &lt;span class="kw"&gt;case&lt;/span&gt; msg &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-38" title="38"&gt;        &lt;span class="dt"&gt;SizeSliderMsg&lt;/span&gt; subMsg &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-39" title="39"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-40" title="40"&gt;        &lt;span class="dt"&gt;TickSliderMsg&lt;/span&gt; subMsg &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-41" title="41"&gt;            &lt;span class="kw"&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-42" title="42"&gt;                ( updatedSlider, cmd, _ ) &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-43" title="43"&gt;                    SingleSlider.update subMsg model&lt;span class="fu"&gt;.&lt;/span&gt;tickSlider&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-44" title="44"&gt;            &lt;span class="kw"&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-45" title="45"&gt;            ( { model &lt;span class="fu"&gt;|&lt;/span&gt; tickSlider &lt;span class="fu"&gt;=&lt;/span&gt; updatedSlider }&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-46" title="46"&gt;            , Cmd.batch [ Cmd.map &lt;span class="dt"&gt;TickSliderMsg&lt;/span&gt; cmd ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-47" title="47"&gt;            )&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-48" title="48"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-49" title="49"&gt;        &lt;span class="dt"&gt;BoardMsg&lt;/span&gt; subMsg &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-50" title="50"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-51" title="51"&gt;        &lt;span class="dt"&gt;NextTick&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-52" title="52"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-53" title="53"&gt;view &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-54" title="54"&gt;view model &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-55" title="55"&gt;    &lt;span class="kw"&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-56" title="56"&gt;        &lt;span class="fu"&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-57" title="57"&gt;    &lt;span class="kw"&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-58" title="58"&gt;      &lt;span class="fu"&gt;div&lt;/span&gt; []&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-59" title="59"&gt;        [ &lt;span class="fu"&gt;div&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-60" title="60"&gt;            [ style &lt;span class="st"&gt;&amp;quot;text-align&amp;quot;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;center&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-61" title="61"&gt;            , style &lt;span class="st"&gt;&amp;quot;display&amp;quot;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;flex&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-62" title="62"&gt;            , style &lt;span class="st"&gt;&amp;quot;justify-content&amp;quot;&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;center&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-63" title="63"&gt;            ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-64" title="64"&gt;            [ &lt;span class="fu"&gt;div&lt;/span&gt; sliderAttrs&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-65" title="65"&gt;                [ Html.map &lt;span class="dt"&gt;SizeSliderMsg&lt;/span&gt; (SingleSlider.view model&lt;span class="fu"&gt;.&lt;/span&gt;sizeSlider) ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-66" title="66"&gt;            , &lt;span class="fu"&gt;div&lt;/span&gt; sliderAttrs&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-67" title="67"&gt;                [ Html.map &lt;span class="dt"&gt;TickSliderMsg&lt;/span&gt; (SingleSlider.view model&lt;span class="fu"&gt;.&lt;/span&gt;tickSlider) ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-68" title="68"&gt;            ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-69" title="69"&gt;        , Html.map &lt;span class="dt"&gt;BoardMsg&lt;/span&gt; (viewBoard model&lt;span class="fu"&gt;.&lt;/span&gt;board)&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-70" title="70"&gt;        ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これでスライダーが増えた． あとは &lt;code&gt;subscriptions&lt;/code&gt; のところを書き換えるだけ:&lt;/p&gt;
&lt;div class="sourceCode" id="cb13"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb13-1" title="1"&gt;subscriptions &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Sub&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-2" title="2"&gt;subscriptions model &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-3" title="3"&gt;    &lt;span class="kw"&gt;if&lt;/span&gt; model&lt;span class="fu"&gt;.&lt;/span&gt;board&lt;span class="fu"&gt;.&lt;/span&gt;planting &lt;span class="kw"&gt;then&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-4" title="4"&gt;        Sub.none&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-5" title="5"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-6" title="6"&gt;    &lt;span class="kw"&gt;else&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb13-7" title="7"&gt;        Time.every model&lt;span class="fu"&gt;.&lt;/span&gt;tickSlider&lt;span class="fu"&gt;.&lt;/span&gt;value (always &lt;span class="dt"&gt;NextTick&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;簡単ですね． &lt;a href="https://ellie-app.com/4c7nNjzjy44a1"&gt;結果こんな感じ&lt;/a&gt;．&lt;/p&gt;
&lt;h3 id="urlパーサー"&gt;URLパーサー&lt;/h3&gt;
&lt;p&gt;生状態や死状態の画像を好きなのに変えたいなと思った． そこで，ちょうど elm/url の勉強をしたので，url のクエリから指定できるようにしようと考えた． まずは状態の画像のリンクを &lt;code&gt;Board&lt;/code&gt; に持たせる:&lt;/p&gt;
&lt;div class="sourceCode" id="cb14"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb14-1" title="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; alias &lt;span class="dt"&gt;Board&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-2" title="2"&gt;    { size &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-3" title="3"&gt;    , cells &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Array&lt;/span&gt; &lt;span class="dt"&gt;Cell&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-4" title="4"&gt;    , planting &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-5" title="5"&gt;    , links &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Links&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-6" title="6"&gt;    }&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-7" title="7"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-8" title="8"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; alias &lt;span class="dt"&gt;Links&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-9" title="9"&gt;    { alive &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-10" title="10"&gt;    , dead &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-11" title="11"&gt;    }&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-12" title="12"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-13" title="13"&gt;initBoard &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Links&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Board&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-14" title="14"&gt;initBoard n links &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-15" title="15"&gt;    { size &lt;span class="fu"&gt;=&lt;/span&gt; n&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-16" title="16"&gt;    , cells &lt;span class="fu"&gt;=&lt;/span&gt; Array.repeat (n &lt;span class="fu"&gt;*&lt;/span&gt; n) &lt;span class="dt"&gt;Dead&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-17" title="17"&gt;    , planting &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;False&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-18" title="18"&gt;    , links &lt;span class="fu"&gt;=&lt;/span&gt; links&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-19" title="19"&gt;    }&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-20" title="20"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-21" title="21"&gt;viewCell &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Board&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Cell&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-22" title="22"&gt;viewCell board idx cell &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-23" title="23"&gt;    &lt;span class="kw"&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-24" title="24"&gt;        &lt;span class="fu"&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-25" title="25"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-26" title="26"&gt;        imageLink &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-27" title="27"&gt;            &lt;span class="kw"&gt;case&lt;/span&gt; cell &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-28" title="28"&gt;                &lt;span class="dt"&gt;Dead&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-29" title="29"&gt;                    [ src board&lt;span class="fu"&gt;.&lt;/span&gt;links&lt;span class="fu"&gt;.&lt;/span&gt;dead ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-30" title="30"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-31" title="31"&gt;                &lt;span class="dt"&gt;Alive&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-32" title="32"&gt;                    [ src board&lt;span class="fu"&gt;.&lt;/span&gt;links&lt;span class="fu"&gt;.&lt;/span&gt;alive ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-33" title="33"&gt;    &lt;span class="kw"&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-34" title="34"&gt;    Html.img (List.concat [ styleAttrs, bornAttr, imageLink ]) []&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;次は URL から値を取得する． URL を取得するには &lt;code&gt;Browser.application&lt;/code&gt; を使う必要がある:&lt;/p&gt;
&lt;div class="sourceCode" id="cb15"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb15-1" title="1"&gt;main &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-2" title="2"&gt;    Browser.application&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-3" title="3"&gt;        { &lt;span class="fu"&gt;init&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;init&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-4" title="4"&gt;        , update &lt;span class="fu"&gt;=&lt;/span&gt; update&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-5" title="5"&gt;        , view &lt;span class="fu"&gt;=&lt;/span&gt; view&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-6" title="6"&gt;        , subscriptions &lt;span class="fu"&gt;=&lt;/span&gt; subscriptions&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-7" title="7"&gt;        , onUrlRequest &lt;span class="fu"&gt;=&lt;/span&gt; always (&lt;span class="dt"&gt;ChangeUrl&lt;/span&gt; defaultLinks)&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-8" title="8"&gt;        , onUrlChange &lt;span class="fu"&gt;=&lt;/span&gt; \url &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;ChangeUrl&lt;/span&gt; (parseUrl url)&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-9" title="9"&gt;        }&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-10" title="10"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-11" title="11"&gt;&lt;span class="fu"&gt;init&lt;/span&gt; &lt;span class="fu"&gt;:&lt;/span&gt; () &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Url&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Key&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; (&lt;span class="dt"&gt;Model&lt;/span&gt;, &lt;span class="dt"&gt;Cmd&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-12" title="12"&gt;&lt;span class="fu"&gt;init&lt;/span&gt; _ url _ &lt;span class="fu"&gt;=&lt;/span&gt; (initModel url, Cmd.none)&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-13" title="13"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-14" title="14"&gt;initModel &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Url&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Model&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-15" title="15"&gt;initModel url &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-16" title="16"&gt;    &lt;span class="kw"&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-17" title="17"&gt;        &lt;span class="fu"&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-18" title="18"&gt;    &lt;span class="kw"&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-19" title="19"&gt;    { board &lt;span class="fu"&gt;=&lt;/span&gt; initBoard size (parseUrl url)&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-20" title="20"&gt;    , sizeSlider &lt;span class="fu"&gt;=&lt;/span&gt; sizeSlider&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-21" title="21"&gt;    , tickSlider &lt;span class="fu"&gt;=&lt;/span&gt; tickSlider&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-22" title="22"&gt;    }&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-23" title="23"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-24" title="24"&gt;defaultLinks &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-25" title="25"&gt;    { alive &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;static/image/alive.png&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-26" title="26"&gt;    , dead &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;static/image/dead.png&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-27" title="27"&gt;    }&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-28" title="28"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-29" title="29"&gt;parseUrl &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Url&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Links&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-30" title="30"&gt;parseUrl url &lt;span class="fu"&gt;=&lt;/span&gt; Debug.todo &lt;span class="st"&gt;&amp;quot;parser&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;.onUrlRequest&lt;/code&gt; や &lt;code&gt;.onUrlChange&lt;/code&gt; は SPA 内で URL を変更して遷移した場合に使う． 今回はおそらく不要だが適当にそれっぽい &lt;code&gt;Msg&lt;/code&gt; を生やした:&lt;/p&gt;
&lt;div class="sourceCode" id="cb16"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb16-1" title="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-2" title="2"&gt;    &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;SizeSliderMsg&lt;/span&gt; &lt;span class="dt"&gt;SingleSlider.Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-3" title="3"&gt;    &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;TickSliderMsg&lt;/span&gt; &lt;span class="dt"&gt;SingleSlider.Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-4" title="4"&gt;    &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;BoardMsg&lt;/span&gt; &lt;span class="dt"&gt;Board.Msg&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-5" title="5"&gt;    &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;NextTick&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-6" title="6"&gt;    &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;ChangeUrl&lt;/span&gt; &lt;span class="dt"&gt;Links&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-7" title="7"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-8" title="8"&gt;update &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Model&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; (&lt;span class="dt"&gt;Model&lt;/span&gt;, &lt;span class="dt"&gt;Cmd&lt;/span&gt; &lt;span class="dt"&gt;Msg&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-9" title="9"&gt;update msg model &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-10" title="10"&gt;    &lt;span class="kw"&gt;case&lt;/span&gt; msg &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-11" title="11"&gt;        &lt;span class="dt"&gt;SizeSliderMsg&lt;/span&gt; subMsg &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-12" title="12"&gt;            &lt;span class="kw"&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-13" title="13"&gt;                ( updatedSlider, cmd, _ ) &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-14" title="14"&gt;                    SingleSlider.update subMsg model&lt;span class="fu"&gt;.&lt;/span&gt;sizeSlider&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-15" title="15"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-16" title="16"&gt;                updatedBoard &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-17" title="17"&gt;                    initBoard (&lt;span class="fu"&gt;truncate&lt;/span&gt; updatedSlider&lt;span class="fu"&gt;.&lt;/span&gt;value) model&lt;span class="fu"&gt;.&lt;/span&gt;board&lt;span class="fu"&gt;.&lt;/span&gt;links &lt;span class="co"&gt;-- 追記&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-18" title="18"&gt;            &lt;span class="kw"&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-19" title="19"&gt;            ( { model &lt;span class="fu"&gt;|&lt;/span&gt; board &lt;span class="fu"&gt;=&lt;/span&gt; updatedBoard, sizeSlider &lt;span class="fu"&gt;=&lt;/span&gt; updatedSlider }&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-20" title="20"&gt;            , Cmd.map &lt;span class="dt"&gt;SizeSliderMsg&lt;/span&gt; cmd&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-21" title="21"&gt;            )&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-22" title="22"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-23" title="23"&gt;        &lt;span class="dt"&gt;TickSliderMsg&lt;/span&gt; subMsg &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-24" title="24"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-25" title="25"&gt;        &lt;span class="dt"&gt;BoardMsg&lt;/span&gt; subMsg &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-26" title="26"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-27" title="27"&gt;        &lt;span class="dt"&gt;NextTick&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-28" title="28"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-29" title="29"&gt;        &lt;span class="dt"&gt;ChangeUrl&lt;/span&gt; links &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-30" title="30"&gt;            &lt;span class="kw"&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-31" title="31"&gt;                board &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-32" title="32"&gt;                    model&lt;span class="fu"&gt;.&lt;/span&gt;board&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-33" title="33"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-34" title="34"&gt;                updatedBoard &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-35" title="35"&gt;                    { board &lt;span class="fu"&gt;|&lt;/span&gt; links &lt;span class="fu"&gt;=&lt;/span&gt; links }&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-36" title="36"&gt;            &lt;span class="kw"&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-37" title="37"&gt;            ( { model &lt;span class="fu"&gt;|&lt;/span&gt; board &lt;span class="fu"&gt;=&lt;/span&gt; updatedBoard }, Cmd.none )&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;さぁいよいよ URL のパーサーだ:&lt;/p&gt;
&lt;div class="sourceCode" id="cb17"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb17-1" title="1"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Url&lt;/span&gt; exposing (&lt;span class="dt"&gt;Url&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-2" title="2"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Url.Parser&lt;/span&gt; &lt;span class="kw"&gt;as&lt;/span&gt; &lt;span class="dt"&gt;Url&lt;/span&gt; exposing ((&amp;lt;/&amp;gt;), (&amp;lt;?&amp;gt;))&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-3" title="3"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Url.Parser.Query&lt;/span&gt; &lt;span class="kw"&gt;as&lt;/span&gt; &lt;span class="dt"&gt;UrlQuery&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-4" title="4"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-5" title="5"&gt;parseUrl &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Url&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Links&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-6" title="6"&gt;parseUrl url &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-7" title="7"&gt;    &lt;span class="kw"&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-8" title="8"&gt;        queryParser &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-9" title="9"&gt;            UrlQuery.map2&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-10" title="10"&gt;                &lt;span class="dt"&gt;Links&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-11" title="11"&gt;                (UrlQuery.string &lt;span class="st"&gt;&amp;quot;alive&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; UrlQuery.map (&lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="fu"&gt;.&lt;/span&gt;withDefault defaultLinks&lt;span class="fu"&gt;.&lt;/span&gt;alive))&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-12" title="12"&gt;                (UrlQuery.string &lt;span class="st"&gt;&amp;quot;dead&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; UrlQuery.map (&lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="fu"&gt;.&lt;/span&gt;withDefault defaultLinks&lt;span class="fu"&gt;.&lt;/span&gt;dead))&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-13" title="13"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-14" title="14"&gt;        parser &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-15" title="15"&gt;            Url.top &lt;span class="fu"&gt;&amp;lt;?&amp;gt;&lt;/span&gt; queryParser&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-16" title="16"&gt;    &lt;span class="kw"&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-17" title="17"&gt;    { url &lt;span class="fu"&gt;|&lt;/span&gt; path &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt; }&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-18" title="18"&gt;        &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; Url.parse parser&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-19" title="19"&gt;        &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="fu"&gt;.&lt;/span&gt;withDefault defaultLinks&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;今回の要件ではクエリしか必要ないので &lt;code&gt;{ url | path = &amp;quot;&amp;quot; }&lt;/code&gt; とパースする前にした． 現状の全体のコードは&lt;a href="https://gist.github.com/matsubara0507/b3c5b33505fbe50f63c1d3242414eece"&gt;こんな感じ&lt;/a&gt;(ellie は application を動かせない)． これで &lt;code&gt;https://matsubara0507.github.io/lifegame?alive=http://4.bp.blogspot.com/-_A6aKYIGbf8/UOJXnVPCmQI/AAAAAAAAKH0/CHFd0OPz0Hk/s180-c/virus_character.png&lt;/code&gt; などで状態の画像が指定できるようになった．&lt;/p&gt;
&lt;h3 id="スマホ対応"&gt;スマホ対応&lt;/h3&gt;
&lt;p&gt;最後にスマホでもできるようにした． 色々試行錯誤してみたが，マウスのような &lt;code&gt;onOver&lt;/code&gt; を使うことはできない． マウスのように一筆書きのみたいに入力するには &lt;code&gt;Touch.onMove&lt;/code&gt; を使うしかなく，このためには &lt;code&gt;Model&lt;/code&gt; に &lt;code&gt;Touch.onMove&lt;/code&gt; イベントで取得した値を保持させる必要があった:&lt;/p&gt;
&lt;div class="sourceCode" id="cb18"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb18-1" title="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; alias &lt;span class="dt"&gt;Board&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-2" title="2"&gt;    { size &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-3" title="3"&gt;    , cells &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Array&lt;/span&gt; &lt;span class="dt"&gt;Cell&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-4" title="4"&gt;    , planting &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Bool&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-5" title="5"&gt;    , links &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Links&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-6" title="6"&gt;    , touchPos &lt;span class="fu"&gt;:&lt;/span&gt; ( &lt;span class="dt"&gt;Float&lt;/span&gt;, &lt;span class="dt"&gt;Float&lt;/span&gt; )&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-7" title="7"&gt;    }&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-8" title="8"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-9" title="9"&gt;initBoard &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Links&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Board&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-10" title="10"&gt;initBoard n links &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-11" title="11"&gt;    { size &lt;span class="fu"&gt;=&lt;/span&gt; n&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-12" title="12"&gt;    , cells &lt;span class="fu"&gt;=&lt;/span&gt; Array.repeat (n &lt;span class="fu"&gt;*&lt;/span&gt; n) &lt;span class="dt"&gt;Dead&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-13" title="13"&gt;    , planting &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;False&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-14" title="14"&gt;    , links &lt;span class="fu"&gt;=&lt;/span&gt; links&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-15" title="15"&gt;    , touchPos &lt;span class="fu"&gt;=&lt;/span&gt; ( &lt;span class="dv"&gt;0&lt;/span&gt;, &lt;span class="dv"&gt;0&lt;/span&gt; )&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-16" title="16"&gt;    }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;.touchPos&lt;/code&gt; を更新するために &lt;code&gt;BoardMsg&lt;/code&gt; と &lt;code&gt;view&lt;/code&gt; を書き換える:&lt;/p&gt;
&lt;div class="sourceCode" id="cb19"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb19-1" title="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;BoardMsg&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-2" title="2"&gt;    &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Born&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-3" title="3"&gt;    &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Planting&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-4" title="4"&gt;    &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;TouchMovePos&lt;/span&gt; ( &lt;span class="dt"&gt;Float&lt;/span&gt;, &lt;span class="dt"&gt;Float&lt;/span&gt; )&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-5" title="5"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-6" title="6"&gt;updateBoard &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;BoardMsg&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Board&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; ( &lt;span class="dt"&gt;Board&lt;/span&gt;, &lt;span class="dt"&gt;Cmd&lt;/span&gt; &lt;span class="dt"&gt;BoardMsg&lt;/span&gt; )&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-7" title="7"&gt;updateBoard msg board &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-8" title="8"&gt;    &lt;span class="kw"&gt;case&lt;/span&gt; msg &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-9" title="9"&gt;        &lt;span class="fu"&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-10" title="10"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-11" title="11"&gt;        &lt;span class="dt"&gt;TouchMovePos&lt;/span&gt; pos &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-12" title="12"&gt;            ( { board &lt;span class="fu"&gt;|&lt;/span&gt; touchPos &lt;span class="fu"&gt;=&lt;/span&gt; pos }&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-13" title="13"&gt;            , Cmd.none&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-14" title="14"&gt;            )&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-15" title="15"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-16" title="16"&gt;view &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Board&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Html&lt;/span&gt; &lt;span class="dt"&gt;BoardMsg&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-17" title="17"&gt;view board &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-18" title="18"&gt;    &lt;span class="kw"&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-19" title="19"&gt;        &lt;span class="fu"&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-20" title="20"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-21" title="21"&gt;        getTouchPos event &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-22" title="22"&gt;            List.head event&lt;span class="fu"&gt;.&lt;/span&gt;targetTouches&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-23" title="23"&gt;                &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="fu"&gt;.map&lt;/span&gt; &lt;span class="fu"&gt;.&lt;/span&gt;clientPos&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-24" title="24"&gt;                &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="fu"&gt;.&lt;/span&gt;withDefault ( &lt;span class="dv"&gt;0&lt;/span&gt;, &lt;span class="dv"&gt;0&lt;/span&gt; )&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-25" title="25"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-26" title="26"&gt;        bornAttr &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-27" title="27"&gt;            [ Touch.onWithOptions&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-28" title="28"&gt;                &lt;span class="st"&gt;&amp;quot;touchmove&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-29" title="29"&gt;                { stopPropagation &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;False&lt;/span&gt;, preventDefault &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;True&lt;/span&gt; }&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-30" title="30"&gt;                (&lt;span class="dt"&gt;TouchMovePos&lt;/span&gt; &lt;span class="fu"&gt;&amp;lt;&amp;lt;&lt;/span&gt; getTouchPos)&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-31" title="31"&gt;            ]    &lt;/a&gt;
&lt;a class="sourceLine" id="cb19-32" title="32"&gt;    &lt;span class="kw"&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-33" title="33"&gt;    concatIndexedMapWith (Html.div (attr &lt;span class="fu"&gt;++&lt;/span&gt; bornAttr)) (viewCell board) board&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;確か &lt;code&gt;.preventDefault&lt;/code&gt; を &lt;code&gt;True&lt;/code&gt; にするとスワイプ(?)で画面が動いてしまうのを止めてくれるらしい． さて問題はここから． &lt;code&gt;cells&lt;/code&gt; を1次元配列にしてしまった弊害パート2で，この &lt;code&gt;.touchPos&lt;/code&gt; からなんとかして配列のインデックスを出さなきゃいけない． 幸いなことにセル一つの大きさは相対サイズにしていたので，盤全体の実際の大きさとセル数がわかれば逆算できる． 盤全体の大きさを得るには &lt;code&gt;Dom.getElement&lt;/code&gt; を使う必要があり，そのためには &lt;code&gt;BoardMsg&lt;/code&gt; を追加する必要があった:&lt;/p&gt;
&lt;div class="sourceCode" id="cb20"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb20-1" title="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;BoardMsg&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-2" title="2"&gt;    &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Born&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-3" title="3"&gt;    &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Planting&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-4" title="4"&gt;    &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;TouchMovePos&lt;/span&gt; ( &lt;span class="dt"&gt;Float&lt;/span&gt;, &lt;span class="dt"&gt;Float&lt;/span&gt; )&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-5" title="5"&gt;    &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;BornWithTouch&lt;/span&gt; (&lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;Element&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-6" title="6"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-7" title="7"&gt;update &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;BoardMsg&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Board&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; ( &lt;span class="dt"&gt;Board&lt;/span&gt;, &lt;span class="dt"&gt;Cmd&lt;/span&gt; &lt;span class="dt"&gt;BoardMsg&lt;/span&gt; )&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-8" title="8"&gt;update msg board &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-9" title="9"&gt;    &lt;span class="kw"&gt;case&lt;/span&gt; msg &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-10" title="10"&gt;        &lt;span class="fu"&gt;...&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-11" title="11"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-12" title="12"&gt;        &lt;span class="dt"&gt;TouchMovePos&lt;/span&gt; pos &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-13" title="13"&gt;            ( { board &lt;span class="fu"&gt;|&lt;/span&gt; touchPos &lt;span class="fu"&gt;=&lt;/span&gt; pos }&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-14" title="14"&gt;            , Dom.getElement &lt;span class="st"&gt;&amp;quot;board&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-15" title="15"&gt;                &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; Task.attempt (&lt;span class="dt"&gt;BornWithTouch&lt;/span&gt; &lt;span class="fu"&gt;&amp;lt;&amp;lt;&lt;/span&gt; Result.toMaybe)&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-16" title="16"&gt;            )&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-17" title="17"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-18" title="18"&gt;        &lt;span class="dt"&gt;BornWithTouch&lt;/span&gt; &lt;span class="dt"&gt;Nothing&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-19" title="19"&gt;            ( board, Cmd.none )&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-20" title="20"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-21" title="21"&gt;        &lt;span class="dt"&gt;BornWithTouch&lt;/span&gt; (&lt;span class="dt"&gt;Just&lt;/span&gt; &lt;span class="fu"&gt;elem&lt;/span&gt;) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-22" title="22"&gt;            &lt;span class="kw"&gt;let&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-23" title="23"&gt;                &lt;span class="co"&gt;-- 1セルの大きさ&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-24" title="24"&gt;                ( px, py ) &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-25" title="25"&gt;                    ( &lt;span class="fu"&gt;elem.&lt;/span&gt;element&lt;span class="fu"&gt;.&lt;/span&gt;width &lt;span class="fu"&gt;/&lt;/span&gt; toFloat board&lt;span class="fu"&gt;.&lt;/span&gt;size&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-26" title="26"&gt;                    , &lt;span class="fu"&gt;elem.&lt;/span&gt;element&lt;span class="fu"&gt;.&lt;/span&gt;height &lt;span class="fu"&gt;/&lt;/span&gt; toFloat board&lt;span class="fu"&gt;.&lt;/span&gt;size&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-27" title="27"&gt;                    )&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-28" title="28"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-29" title="29"&gt;                ( tx, ty ) &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-30" title="30"&gt;                    board&lt;span class="fu"&gt;.&lt;/span&gt;touchPos&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-31" title="31"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-32" title="32"&gt;                &lt;span class="co"&gt;-- タップしたところの2次元座標&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-33" title="33"&gt;                ( x, y ) &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-34" title="34"&gt;                    ( (tx &lt;span class="fu"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;elem.&lt;/span&gt;element&lt;span class="fu"&gt;.&lt;/span&gt;x) &lt;span class="fu"&gt;/&lt;/span&gt; px &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;floor&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-35" title="35"&gt;                    , (ty &lt;span class="fu"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;elem.&lt;/span&gt;element&lt;span class="fu"&gt;.&lt;/span&gt;y) &lt;span class="fu"&gt;/&lt;/span&gt; py &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;floor&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-36" title="36"&gt;                    )&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-37" title="37"&gt;            &lt;span class="kw"&gt;in&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-38" title="38"&gt;            ( born (y &lt;span class="fu"&gt;*&lt;/span&gt; board&lt;span class="fu"&gt;.&lt;/span&gt;size &lt;span class="fu"&gt;+&lt;/span&gt; x) board, Cmd.none )&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで完成． ちなみに，最初は全てのセルの &lt;code&gt;Dom.getElement&lt;/code&gt; して，&lt;code&gt;element.width&lt;/code&gt; を比較する全探索方式でやってみたが，遅すぎて使い物にならなかったので，逆算するようにした． まぁ多少誤差があったってもともと指でなぞってるだけなのでいいでしょう．&lt;/p&gt;
&lt;h2 id="section-1"&gt;&lt;/h2&gt;
&lt;p&gt;ちなみに，&lt;code&gt;.touchPos&lt;/code&gt; みたいな要素を盤面の &lt;code&gt;Model&lt;/code&gt; に入れるべきか？って気がするが，今回はやっつけなので大目にみてください．&lt;/p&gt;
&lt;h1 id="おしまい"&gt;おしまい&lt;/h1&gt;
&lt;p&gt;無駄にコードを貼りまくったせいで長くなってしまった． できたアプリ，意外と気に入ってます．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-12-18-ghc8x.html</id><title type="text">GHC 8.x 勉強会に行ってきた</title><updated>2018-12-18T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-12-18-ghc8x.html"/><summary type="html">&lt;article class="post card" itemscope itemtype="http://schema.org/BlogPosting"&gt;
 &lt;div class="card-content"&gt;
  &lt;header class="post-header"&gt;
    &lt;h1 class="post-title" itemprop="name headline"&gt;GHC 8.x 勉強会に行ってきた&lt;/h1&gt;
    &lt;p class="post-meta"&gt;
      &lt;time datetime="2018-12-18" itemprop="datePublished"&gt;
        Dec 18, 2018
      &lt;/time&gt;
      
      
      &lt;div class="tags"&gt;
          &lt;i class="fa fa-tags"&gt;&lt;/i&gt; &lt;a href="/tags/Haskell.html"&gt;Haskell&lt;/a&gt; &lt;a href="/tags/event.html"&gt;event&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;本記事は &lt;a href="https://qiita.com/advent-calendar/2018/haskell2"&gt;Haskell (その2) Advent Calendar 2018&lt;/a&gt; の18日目の記事です． 空いていたのでついでに埋めました．&lt;/p&gt;
&lt;h2 id="section"&gt;&lt;/h2&gt;
&lt;p&gt;12/7 の10-17時半ぐらいに IIJ-II で GHC8 系のバージョンアップを追う会的なイベントが企画されました． このイベントは IIJ-II の Haskell チームで発案・企画し，Haskell-jp の Slack で募集をかけていました． 定員12人かつ，平日昼間でしたが，面白そうなので有給とって行ってきた(僕は IIJ-II では無いので)． 多少クローズドな会ということもあり，せっかくなので色々と議論したことを記事に起こしておきます． 正確な情報は GHC のドキュメントを呼んでください．&lt;/p&gt;
&lt;h2 id="進め方"&gt;進め方&lt;/h2&gt;
&lt;p&gt;GHCには&lt;a href="https://downloads.haskell.org/~ghc/8.0.2/docs/html/users_guide/8.0.1-notes.html"&gt;こんな感じ&lt;/a&gt;のリリースノートがある． 当日は8系のリリースノートのハイライトを追っていくという感じだった．&lt;/p&gt;
&lt;p&gt;事前に一人一つぐらいは調べてきて発表する感じだったが，担当者がいない内容でも，紹介記事を引っ張ってきたりなんだりしてた．&lt;/p&gt;
&lt;h2 id="section-1"&gt;8.0&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://downloads.haskell.org/~ghc/8.0.2/docs/html/users_guide/8.0.1-notes.html"&gt;リリースノートはこれ&lt;/a&gt;． 8.0だけめっちゃ多い． 当初は 7.12 とかにする予定だったが，あまりにも差分があったので 8 にした的な話があるとかないとか(要出典)．&lt;/p&gt;
&lt;h3 id="typeintype-など"&gt;TypeInType など&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://downloads.haskell.org/~ghc/8.0.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XTypeInType"&gt;&lt;code&gt;TypeInType&lt;/code&gt;&lt;/a&gt; 言語拡張について&lt;/li&gt;
&lt;li&gt;以下3つの言語拡張も包含している
&lt;ul&gt;
&lt;li&gt;PolyKinds&lt;/li&gt;
&lt;li&gt;DataKinds&lt;/li&gt;
&lt;li&gt;KindSignatures&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;PolyKind: 型変数のカインドが多相的になる（本来は &lt;code&gt;*&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;DataKinds: 定義した型をカインドとして利用できる&lt;/li&gt;
&lt;li&gt;KindSignatures: カインドを明示的に指定できる&lt;/li&gt;
&lt;li&gt;TypeInType:
&lt;ul&gt;
&lt;li&gt;上記全部を利用可&lt;/li&gt;
&lt;li&gt;多相カインド&lt;/li&gt;
&lt;li&gt;RankNTypes も追加で高階カインドも可能&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Q: 結局目指すところは？
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ghc.haskell.org/trac/ghc/wiki/DependentHaskell"&gt;Dependent Haskell&lt;/a&gt; のマイルストーンの一部では？&lt;/li&gt;
&lt;li&gt;Merging Types and Kinds&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="patternsynonyms-系"&gt;PatternSynonyms 系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://downloads.haskell.org/~ghc/8.0.2/docs/html/users_guide/glasgow_exts.html#record-patsyn"&gt;Record Pattern Synonyms&lt;/a&gt; をサポート&lt;/li&gt;
&lt;li&gt;レコード型でも PatternSynonyms を利用&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kazu-yamamoto.hatenablog.jp/entry/20170919/1505787393"&gt;PatternSynonymsのススメ - あどけない話&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;そもそも PatternSynonyms って？&lt;/li&gt;
&lt;li&gt;PatternSynonyms それ自体は 7.8.1 から&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;8.0 から export 時に &lt;code&gt;pattern&lt;/code&gt; キーワードがいらなくなった
&lt;ul&gt;
&lt;li&gt;すごい助かるって意見もあれば&lt;/li&gt;
&lt;li&gt;あえて明示的にすべきという意見も&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ネットワーク屋さん的にはこのパターンは本当に便利という話&lt;/li&gt;
&lt;li&gt;BangPattern や ViewPattern の組み合わせ&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="deriveanyclass"&gt;DeriveAnyClass&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://downloads.haskell.org/~ghc/8.0.2/docs/html/users_guide/glasgow_exts.html#derive-any-class"&gt;DeriveAnyClass&lt;/a&gt; 言語拡張について&lt;/li&gt;
&lt;li&gt;名前の通り任意の型クラスに対して &lt;code&gt;deriving&lt;/code&gt; を利用する仕組みを提供&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deriving&lt;/code&gt; 可能な型クラスからデフォルト実装を定義したり&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="injective-type-families"&gt;Injective type families&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://downloads.haskell.org/~ghc/8.0.2/docs/html/users_guide/glasgow_exts.html#injective-ty-fams"&gt;&lt;code&gt;TypeFamilyDependencies&lt;/code&gt;&lt;/a&gt; 言語拡張について&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/lotz/items/6c038698c8f04f57113a"&gt;型族が単射だと嬉しい理由 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(書いた当人は書いてたこと忘れてた笑)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="applicativedo"&gt;ApplicativeDo&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://downloads.haskell.org/~ghc/8.0.2/docs/html/users_guide/glasgow_exts.html#applicative-do"&gt;&lt;code&gt;ApplicativeDo&lt;/code&gt;&lt;/a&gt; 言語拡張について&lt;/li&gt;
&lt;li&gt;do 記法が Applicative でも使える&lt;/li&gt;
&lt;li&gt;だけじゃなく，do 記法が特定の条件を満たすと勝手に Applicative や Functor に脱糖してくれる
&lt;ul&gt;
&lt;li&gt;この条件がなかなか(笑)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;なんか結構盛り上がった(笑)&lt;/p&gt;
&lt;h3 id="wildcards-in-data-and-type-family"&gt;Wildcards in data and type family&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://downloads.haskell.org/~ghc/8.0.2/docs/html/users_guide/glasgow_exts.html#wildcards-on-the-lhs-of-data-and-type-family-instances"&gt;この辺り&lt;/a&gt;？ ちょっと何話したか忘れた．&lt;/p&gt;
&lt;h3 id="strict-系"&gt;Strict 系&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://downloads.haskell.org/~ghc/8.0.2/docs/html/users_guide/glasgow_exts.html#strict-haskell"&gt;&lt;code&gt;Strict&lt;/code&gt;&lt;/a&gt; 言語拡張について&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kazu-yamamoto.hatenablog.jp/entry/20151117/1447726679"&gt;Strict Haskell - あどけない話&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;昔から正格評価にする記法はあったが，この拡張によりデフォルトの評価戦略を切り替えれる．&lt;/li&gt;
&lt;li&gt;実は逆に &lt;code&gt;~x&lt;/code&gt; とすることで &lt;code&gt;x&lt;/code&gt; を遅延評価できる&lt;/li&gt;
&lt;li&gt;Q: パターンマッチの反駁不能パターンはどうなるんだろ？
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~(~x)&lt;/code&gt; のようにチルダをカッコで重ねる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="duplicate-record-fields"&gt;Duplicate record fields&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://kazu-yamamoto.hatenablog.jp/entry/20160114/1452735514"&gt;重複したフィールドラベル - あどけない話&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Q: &lt;code&gt;instance (a ~ Int) =&amp;gt; IsLabel &amp;quot;same&amp;quot; (Foo -&amp;gt; a)&lt;/code&gt; の &lt;code&gt;a ~ Int&lt;/code&gt; はなぜ必要か？
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IsLabel &amp;quot;same&amp;quot; (Foo -&amp;gt; Int)&lt;/code&gt; ではなく&lt;/li&gt;
&lt;li&gt;推論の順番を明示的にする&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Q: ボイラーテンプレートの件は進んだの？？
&lt;ul&gt;
&lt;li&gt;なんか放置されてる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;SystemF + レコード多相は死ぬ
&lt;ul&gt;
&lt;li&gt;OCaml は分けている&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="ユーザ定義-typeerror"&gt;ユーザ定義 TypeError&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;型エラーをユーザーで定義できる？&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ghc.haskell.org/trac/ghc/wiki/Proposal/CustomTypeErrors"&gt;プロポーザル&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;どんな話したか忘れました，すいません&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="ghci-関連"&gt;GHCi 関連&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;本来 GHCi はコードを同一のプロセスと共通のヒープで実行する&lt;/li&gt;
&lt;li&gt;それを &lt;a href="https://downloads.haskell.org/~ghc/8.0.2/docs/html/users_guide/ghci.html#external-interpreter"&gt;&lt;code&gt;fexternal-interpreter&lt;/code&gt;&lt;/a&gt; オプションでコントロールできる&lt;/li&gt;
&lt;li&gt;だっけか（また細かい話は忘れました，すいません）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-2"&gt;8.2&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/8.2.1-notes.html"&gt;リリースノートはこれ&lt;/a&gt;．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Typeable mechanism, Type.Reflection&lt;/li&gt;
&lt;li&gt;そういえばCUIがカラフルになったね&lt;/li&gt;
&lt;li&gt;Heap 系
&lt;ul&gt;
&lt;li&gt;あんまりよく覚えてないごめんなさい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="derivingstrategies"&gt;DerivingStrategies&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DerivingStrategies&lt;/code&gt; 言語拡張について&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ghc.haskell.org/trac/ghc/wiki/Commentary/Compiler/DerivingStrategies"&gt;Commentary/Compiler/DerivingStrategies – GHC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kakkun61/deriving-strategies-playground"&gt;kakkun 氏の資料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deriving&lt;/code&gt; する時に &lt;code&gt;newtype&lt;/code&gt; や &lt;code&gt;stock&lt;/code&gt; などのキーワードを指定することで &lt;code&gt;deriving&lt;/code&gt; の仕方をコントロールできる&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="unboxedsums"&gt;UnboxedSums&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XUnboxedSums"&gt;&lt;code&gt;UnboxedSums&lt;/code&gt;&lt;/a&gt; 言語拡張について&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gist.github.com/maoe/e5888fad16a190a9c7cf58b8bedb1d04"&gt;maoe 氏の資料&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="compact-regions"&gt;Compact Regions&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ezyang/compact"&gt;ezyang/compact - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;処理系によってGCされないデータ領域&lt;/li&gt;
&lt;li&gt;インターフェースは充実してる&lt;/li&gt;
&lt;li&gt;ただしデータの追加しかできない（書き換えは不可）&lt;/li&gt;
&lt;li&gt;Q: 何に使える？
&lt;ul&gt;
&lt;li&gt;強大な辞書とか？&lt;/li&gt;
&lt;li&gt;設定ファイルとか？（巨大なら）&lt;/li&gt;
&lt;li&gt;NGワード集とか？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GHC8.x 勉強会のあとに記事にしてくれた:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/ruicc/items/c955e794c5dc74c4cb58"&gt;Compact Regionsについて軽く - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="backpack"&gt;Backpack&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ghc.haskell.org/trac/ghc/wiki/Backpack"&gt;Backpack – GHC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;雑にいうと: ML系のファンクターのようなより強力なモジュールシステム&lt;/li&gt;
&lt;li&gt;モジュールのインターフェースと実装を分離できる&lt;/li&gt;
&lt;li&gt;&lt;a href="https://matsubara0507.github.io/posts/2017-12-12-backpack-memo.html"&gt;Haskell Backpack 覚え書き - ひげメモ&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;自分の記事だけど1年近く前で覚えてない(笑)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Q: どんな時に有用？
&lt;ul&gt;
&lt;li&gt;本質的には型クラスと同じ用途のはず&lt;/li&gt;
&lt;li&gt;ただし型に依存しない（型クラスは型によって実装をディスパッチ）&lt;/li&gt;
&lt;li&gt;不自然な &lt;code&gt;Proxy a&lt;/code&gt; を渡さなくていい（苦肉の策でそういう実装をしている型クラスがある）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;そういえば最近 &lt;a href="https://github.com/kowainik/containers-backpack"&gt;contains の Backpack 版&lt;/a&gt;がでた&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作者さんが忙しくて Stack への適用を断念したため，なかなか浸透しない． 今「Stack への適用をやりたい」という人が現れたが時間がかかりそう．&lt;/p&gt;
&lt;h3 id="脱線-各位リンカどうしてるの"&gt;脱線: 各位リンカどうしてるの？&lt;/h3&gt;
&lt;p&gt;kazu yamamoto 氏が GHC 8.6 になってから(だっけ？)リンカ周りで動作しなくて困ってるらしい(OS は Mac)． 僕は適当にやってて困ったことないのでよくわからない．&lt;/p&gt;
&lt;p&gt;ちなみに GHC 8.6.3 で無事動いたらしい:&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-lang="ja"&gt;
&lt;p lang="ja" dir="ltr"&gt;
吉報：GHC 8.6.3 は macOS で問題なく使えるようになりました！
&lt;/p&gt;
— 山本和彦 (&lt;span class="citation" data-cites="kazu_yamamoto"&gt;@kazu_yamamoto&lt;/span&gt;) &lt;a href="https://twitter.com/kazu_yamamoto/status/1072030847799255040?ref_src=twsrc%5Etfw"&gt;2018年12月10日&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;h2 id="section-3"&gt;8.4&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://downloads.haskell.org/~ghc/8.4.4/docs/html/users_guide/8.4.1-notes.html"&gt;リリースノートはこれ&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;そういえば，8.4.4 は 8.6 系が出てから出て，ちゃんとバグフィックス出すんだと感心した的な話をした．&lt;/p&gt;
&lt;h3 id="semigroup-monoid-proposal"&gt;Semigroup-Monoid Proposal&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Monoid&lt;/code&gt; にサブクラスとして &lt;code&gt;Semigroup&lt;/code&gt; を持たせる
&lt;ul&gt;
&lt;li&gt;その方が数学的に自然&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://kazu-yamamoto.hatenablog.jp/entry/20180306/1520314185"&gt;あなたの知らないSemigroupの世界 - あどけない話&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;前のバージョンアから &lt;code&gt;-Wnoncanonical-monoid-instances&lt;/code&gt; などの警告を付け足して段階的にやっている
&lt;ul&gt;
&lt;li&gt;しかし &lt;code&gt;-Wall&lt;/code&gt; に含まれてないので気づかず&lt;/li&gt;
&lt;li&gt;なんか 8.4 で急にエラーに&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ちなみに以降は &lt;code&gt;Monoid&lt;/code&gt; をインポートしなくても &lt;code&gt;(&amp;lt;&amp;gt;)&lt;/code&gt; が使える&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="monadfail-と-no-return"&gt;MonadFail と no return&lt;/h3&gt;
&lt;p&gt;ここは脱線．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.haskell.org/MonadFail_Proposal"&gt;MonadFail Proposal - HaskellWiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Monad&lt;/code&gt; には &lt;code&gt;fail&lt;/code&gt; が定義されている
&lt;ul&gt;
&lt;li&gt;が &lt;code&gt;error&lt;/code&gt; などを利用している残念な実装もある&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MonadFail&lt;/code&gt; という型クラスで切り出す&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-Wnoncanonical-monadfail-instances&lt;/code&gt; ができた？&lt;/li&gt;
&lt;li&gt;8.6: &lt;a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-MonadFailDesugaring"&gt;&lt;code&gt;MonadFailDesugaring&lt;/code&gt;&lt;/a&gt; 言語拡張がデフォルトに
&lt;ul&gt;
&lt;li&gt;do 記法の &lt;code&gt;fail&lt;/code&gt; への脱糖が &lt;code&gt;MonadFail&lt;/code&gt; のものになる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="section-4"&gt;8.6&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/8.6.1-notes.html"&gt;リリースノートはこれ&lt;/a&gt;．&lt;/p&gt;
&lt;h3 id="quantifiedconstraints"&gt;QuantifiedConstraints&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-QuantifiedConstraints"&gt;QuantifiedConstraints&lt;/a&gt; 言語拡張を追加&lt;/li&gt;
&lt;li&gt;インスタンスの定義に量化が使える
&lt;ul&gt;
&lt;li&gt;例: &lt;code&gt;instance (Eq a, forall b. (Eq b) =&amp;gt; Eq (f b)) =&amp;gt; Eq (Rose f a)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://the.igreque.info/slides/2018-12-07-ghc8x.html"&gt;igrap 氏の資料&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Q: Constraint のシノニムでも使える？
&lt;ul&gt;
&lt;li&gt;無理だった orz&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="derivingvia"&gt;DerivingVia&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-DerivingVia"&gt;&lt;code&gt;DerivingVia&lt;/code&gt;&lt;/a&gt; 言語拡張について&lt;/li&gt;
&lt;li&gt;&lt;code&gt;via&lt;/code&gt; キーワードを使ってインスタンスを明示的に選択できるようになる&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/kayhide/try-ghc86"&gt;kayhide 氏の資料&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;QuickCheck の例&lt;/li&gt;
&lt;li&gt;テストの実装を Via で定義&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;わかりやすい&lt;a href="https://speakerdeck.com/konn/ben-dang-hasugoi-newtype"&gt;スライド&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;後半の方&lt;/li&gt;
&lt;li&gt;タプルの例&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="plugin-mechanism"&gt;Plugin mechanism&lt;/h3&gt;
&lt;p&gt;(誰も調べてはない) ちょうど記事があった&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/waddlaw/items/65b57517f105fcbbe724"&gt;GHC Source Plugin 作ってみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;終わった後の雑談で，Scala には似たような機能(Scala Compiler Plugins?)が既にあるので，真似するといいとかなんとか．&lt;/p&gt;
&lt;h3 id="valid-hole-fits"&gt;Valid hole fits&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wiki.haskell.org/GHC/Typed_holes"&gt;Type holes&lt;/a&gt; という機能についての拡張
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://haskell.jp/blog/posts/2017/07-TypedHoles.html"&gt;Type Hole については Haskell-jp に記事がある&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#typed-hole-valid-hole-fits"&gt;コンパイルフラグ&lt;/a&gt;で type Holes での推論アルゴリズム(?)のコントロールができるようになった(って感じかな)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="シンタックスの言語拡張"&gt;シンタックスの言語拡張&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;数値リテラルに &lt;code&gt;_&lt;/code&gt; が使える: &lt;code&gt;10_000_000&lt;/code&gt; とか&lt;/li&gt;
&lt;li&gt;&lt;code&gt;do&lt;/code&gt; 記法の前に &lt;code&gt;$&lt;/code&gt; などがいらなくなる: &lt;code&gt;\x -&amp;gt; do ...&lt;/code&gt; とか&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="おしまい"&gt;おしまい&lt;/h1&gt;
&lt;p&gt;時間経ちすぎてめっちゃ適当になってしまった． すいません． ただ，めっちゃ楽しかった．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/01/cygwin-cygwin.html</id><title type="text">[cygwin] cygwinセットアップ・環境構築手順メモ</title><updated>2018-12-16T14:31:09.194+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/01/cygwin-cygwin.html"/><summary type="text">

主に自分向けの防備録です。windows10上で確認。インストーラーはここからDLする。





&lt;&lt;設定&gt;&gt;

ssh-agentの重複起動を防ぐ


ユーザーのアカウント名、ホームディレクトリの変更



/etc/passwdを編集する（最新バージョンでは自動生成されない？）
Cygwinを移動したら/etc/passwdの再生成を
巨大ドメインに参加している PC での /etc/passwd, /etc/group ファイルのつくりかた 

ssh-agentのために秘密鍵セットアップ



~/.ssh/


※group/otherの権限を削除する必要がある

% chmod 700 ~/.ssh 


less, lv, manコマンド終了時に画面をクリアしない

[linux][cygwin] less, manの終了直前の画面をクリアしないで端末上に残す方法 
</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2018/12/15/163609</id><title type="text">MariaDBでPythonのmysqlclientモジュールをビルド</title><updated>2018-12-15T16:36:09+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2018/12/15/163609"/><summary type="html">昔はそうではなかったようだが、最近は MariaDB のパッケージに mysql_config が入っておらず、そのままでは mysqlclient モジュールがビルドできない。 Mac の場合の対処法はここに書いてある。 stackoverflow.com Ubuntu (on WSL) の場合も基本は一緒。 $ sudo apt install libmariadb-client-lgpl-dev $ sudo ln -s /usr/bin/mariadb_config /usr/bin/mysql_config $ pipenv install (ここは、 mysqlclient をイン…</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-12-11-detail-elm-url.html</id><title type="text">詳解 elm/url !!</title><updated>2018-12-11T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-12-11-detail-elm-url.html"/><summary type="html">&lt;article class="post card" itemscope itemtype="http://schema.org/BlogPosting"&gt;
 &lt;div class="card-content"&gt;
  &lt;header class="post-header"&gt;
    &lt;h1 class="post-title" itemprop="name headline"&gt;詳解 elm/url !!&lt;/h1&gt;
    &lt;p class="post-meta"&gt;
      &lt;time datetime="2018-12-11" itemprop="datePublished"&gt;
        Dec 11, 2018
      &lt;/time&gt;
      
      
      &lt;div class="tags"&gt;
          &lt;i class="fa fa-tags"&gt;&lt;/i&gt; &lt;a href="/tags/Elm.html"&gt;Elm&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;本記事は &lt;a href="https://qiita.com/advent-calendar/2018/elm"&gt;Elm Advent Calendar 2018&lt;/a&gt; の11日目の記事です． elm-jp の Discord で突如無茶振りされたので頑張ります．&lt;/p&gt;
&lt;h2 id="elmurl"&gt;elm/url&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://package.elm-lang.org/packages/elm/url/1.0.0/"&gt;elm/url&lt;/a&gt; は Elm 0.19 で刷新されたパッケージ群にしれっと混ざってきた URL に関するパッケージ． &lt;a href="https://package.elm-lang.org/packages/elm/browser/latest/Browser#application"&gt;Browser.application&lt;/a&gt; でも使われているのでみなさんも頑張って使えるようになりましょう．&lt;/p&gt;
&lt;p&gt;ちなみに本記事では ver1.0.0 の elm/url を想定している．&lt;/p&gt;
&lt;h2 id="url-の型"&gt;Url の型&lt;/h2&gt;
&lt;p&gt;こんな風に定義されている:&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb1-1" title="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; alias &lt;span class="dt"&gt;Url&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-2" title="2"&gt;    { protocol &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Protocol&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-3" title="3"&gt;    , host &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-4" title="4"&gt;    , port_ &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-5" title="5"&gt;    , path &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-6" title="6"&gt;    , query &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-7" title="7"&gt;    , fragment &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-8" title="8"&gt;    }&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-9" title="9"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-10" title="10"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Protocol&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Http&lt;/span&gt; &lt;span class="fu"&gt;|&lt;/span&gt; &lt;span class="dt"&gt;Https&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;超絶わかりやすい ASCII アートまでありエヴァン様神って感じ:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  https://example.com:8042/over/there?name=ferret#nose
  \___/   \______________/\_________/ \_________/ \__/
    |            |            |            |        |
  scheme     authority       path        query   fragment&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;host&lt;/code&gt; は &lt;code&gt;example.com&lt;/code&gt; の部分で &lt;code&gt;port_&lt;/code&gt; は &lt;code&gt;8042&lt;/code&gt; の部分． 試しに REPL で &lt;code&gt;Url.fromString&lt;/code&gt; してみよう:&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb3-1" title="1"&gt;&lt;span class="fu"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Url&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-2" title="2"&gt;&lt;span class="fu"&gt;&amp;gt;&lt;/span&gt; Url.fromString &lt;span class="st"&gt;&amp;quot;https://example.com:8042/over/there?name=ferret#nose&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-3" title="3"&gt;&lt;span class="dt"&gt;Just&lt;/span&gt; { fragment &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Just&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;nose&amp;quot;&lt;/span&gt;, host &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;example.com&amp;quot;&lt;/span&gt;, path &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;/over/there&amp;quot;&lt;/span&gt;, port_ &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Just&lt;/span&gt; &lt;span class="dv"&gt;8042&lt;/span&gt;, protocol &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Https&lt;/span&gt;, query &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Just&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;name=ferret&amp;quot;&lt;/span&gt; }&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-4" title="4"&gt;    &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;Url.Url&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="url.parser-の使い方"&gt;Url.Parser の使い方&lt;/h2&gt;
&lt;p&gt;さて，ここからが本番． &lt;code&gt;Url.Parser&lt;/code&gt; モジュールを利用して &lt;code&gt;Browser.application&lt;/code&gt; などから受け取った URL をパースして，任意の型に変換するパーサーを記述する．&lt;/p&gt;
&lt;h3 id="パーサーの例"&gt;パーサーの例&lt;/h3&gt;
&lt;p&gt;次のような型にパースするパーサーを記述する:&lt;/p&gt;
&lt;div class="sourceCode" id="cb4"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb4-1" title="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; alias &lt;span class="dt"&gt;Post&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-2" title="2"&gt;  { &lt;span class="fu"&gt;id&lt;/span&gt; &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-3" title="3"&gt;  , name &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb4-4" title="4"&gt;  }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;入力には &lt;code&gt;http://localhost/hoge/1234?name=fuga&lt;/code&gt; URL というのを想定している．&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb5-1" title="1"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Url.Parser&lt;/span&gt; &lt;span class="kw"&gt;as&lt;/span&gt; &lt;span class="dt"&gt;Url&lt;/span&gt; exposing ((&amp;lt;/&amp;gt;), (&amp;lt;?&amp;gt;))&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-2" title="2"&gt;&lt;span class="kw"&gt;import&lt;/span&gt; &lt;span class="dt"&gt;Url.Parser.Query&lt;/span&gt; &lt;span class="kw"&gt;as&lt;/span&gt; &lt;span class="dt"&gt;Query&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-3" title="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-4" title="4"&gt;parser1 &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Url.Parser&lt;/span&gt; (&lt;span class="dt"&gt;Post&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a) a&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-5" title="5"&gt;parser1 &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-6" title="6"&gt;  Url.map &lt;span class="dt"&gt;Post&lt;/span&gt; (Url.s &lt;span class="st"&gt;&amp;quot;hoge&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;lt;/&amp;gt;&lt;/span&gt; Url.string &lt;span class="fu"&gt;&amp;lt;?&amp;gt;&lt;/span&gt; Query.string &lt;span class="st"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これを使ってみると:&lt;/p&gt;
&lt;div class="sourceCode" id="cb6"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb6-1" title="1"&gt;&lt;span class="fu"&gt;&amp;gt;&lt;/span&gt; Url.fromString &lt;span class="st"&gt;&amp;quot;http://localhost/hoge/1234?name=fuga&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="fu"&gt;.&lt;/span&gt;andThen (Url.parse parser1)&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-2" title="2"&gt;&lt;span class="dt"&gt;Just&lt;/span&gt; { &lt;span class="fu"&gt;id&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dv"&gt;1234&lt;/span&gt;, name &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Just&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;fuga&amp;quot;&lt;/span&gt; }&lt;/a&gt;
&lt;a class="sourceLine" id="cb6-3" title="3"&gt;    &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;Post&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="基本的な関数と型"&gt;基本的な関数と型&lt;/h3&gt;
&lt;p&gt;まずは肝となる &lt;code&gt;Url.parse&lt;/code&gt; 関数の型を見てみる:&lt;/p&gt;
&lt;div class="sourceCode" id="cb7"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb7-1" title="1"&gt;parse &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; (a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a) a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Url&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; a&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Parser a b&lt;/code&gt; というのがパーサーの型だ(&lt;code&gt;a&lt;/code&gt; と &lt;code&gt;b&lt;/code&gt; が何を意味しているかは後述，無論 &lt;code&gt;a&lt;/code&gt; と &lt;code&gt;b&lt;/code&gt; が同じでもいい)． &lt;code&gt;Parser (a -&amp;gt; a) a&lt;/code&gt; という型(この &lt;code&gt;a&lt;/code&gt; は全て同じ型)のパーサーを与えて &lt;code&gt;Url&lt;/code&gt; という入力を食わせることで &lt;code&gt;Maybe a&lt;/code&gt; という結果を受け取れる． 途中でパース失敗した場合は &lt;code&gt;Nothing&lt;/code&gt; が返り，成功すると &lt;code&gt;Just a&lt;/code&gt; の値が返る．&lt;/p&gt;
&lt;h2 id="section"&gt;&lt;/h2&gt;
&lt;p&gt;次のような関数を組み合わせて，パーサーを構築する:&lt;/p&gt;
&lt;div class="sourceCode" id="cb8"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb8-1" title="1"&gt;string &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; (&lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a) a&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-2" title="2"&gt;int    &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; (&lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a) a&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-3" title="3"&gt;s      &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; a a&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-4" title="4"&gt;top    &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; a a&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-5" title="5"&gt;(&lt;span class="fu"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;)  &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; a b &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; b c &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; a c&lt;/a&gt;
&lt;a class="sourceLine" id="cb8-6" title="6"&gt;&lt;span class="fu"&gt;map&lt;/span&gt;    &lt;span class="fu"&gt;:&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; a b &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; (b &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; c) c&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Parser&lt;/code&gt; の型が &lt;code&gt;Parser a b&lt;/code&gt; の場合と &lt;code&gt;Parser (a -&amp;gt; b) b&lt;/code&gt; の場合の2パターンがあることに気づいただろうか？ &lt;code&gt;string&lt;/code&gt; や &lt;code&gt;int&lt;/code&gt; のような &lt;code&gt;(a -&amp;gt; b)&lt;/code&gt; のようなパーサーの場合は， &lt;code&gt;a&lt;/code&gt; の部分がパース結果の型と考えられる． 対して &lt;code&gt;s&lt;/code&gt; や &lt;code&gt;top&lt;/code&gt; のような関数は入力(&lt;code&gt;Url&lt;/code&gt;)を消費するだけでパース結果の型(&lt;code&gt;parse&lt;/code&gt; の &lt;code&gt;Maybe a&lt;/code&gt; の &lt;code&gt;a&lt;/code&gt; の部分)に影響を与えない． そして &lt;code&gt;(&amp;lt;/&amp;gt;)&lt;/code&gt; が URL の区切り文字(&lt;code&gt;/&lt;/code&gt;) である．&lt;/p&gt;
&lt;h2 id="section-1"&gt;&lt;/h2&gt;
&lt;p&gt;試しにいくつか組み合わせてみよう:&lt;/p&gt;
&lt;div class="sourceCode" id="cb9"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb9-1" title="1"&gt;&lt;span class="fu"&gt;&amp;gt;&lt;/span&gt; parser2 &lt;span class="fu"&gt;=&lt;/span&gt; Url.s &lt;span class="st"&gt;&amp;quot;hoge&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;lt;/&amp;gt;&lt;/span&gt; Url.string &lt;span class="fu"&gt;&amp;lt;/&amp;gt;&lt;/span&gt; Url.int&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-2" title="2"&gt;&lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="fu"&gt;&amp;lt;&lt;/span&gt;function&lt;span class="fu"&gt;&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Url.Parser&lt;/span&gt; (&lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; c) c&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-3" title="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-4" title="4"&gt;&lt;span class="fu"&gt;&amp;gt;&lt;/span&gt; parser3 &lt;span class="fu"&gt;=&lt;/span&gt; parser2 &lt;span class="fu"&gt;&amp;lt;/&amp;gt;&lt;/span&gt; Url.int &lt;span class="fu"&gt;&amp;lt;/&amp;gt;&lt;/span&gt; Url.top&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-5" title="5"&gt;&lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="fu"&gt;&amp;lt;&lt;/span&gt;function&lt;span class="fu"&gt;&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Url.Parser&lt;/span&gt; (&lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; c) c&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-6" title="6"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-7" title="7"&gt;&lt;span class="fu"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kw"&gt;type&lt;/span&gt; alias &lt;span class="dt"&gt;Hoge1&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; { hoge1 &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;, hoge2 &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;, hoge3 &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; }&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-8" title="8"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-9" title="9"&gt;&lt;span class="fu"&gt;&amp;gt;&lt;/span&gt; parser4 &lt;span class="fu"&gt;=&lt;/span&gt; Url.map &lt;span class="dt"&gt;Hoge1&lt;/span&gt; parser3&lt;/a&gt;
&lt;a class="sourceLine" id="cb9-10" title="10"&gt;&lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="fu"&gt;&amp;lt;&lt;/span&gt;function&lt;span class="fu"&gt;&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Url.Parser&lt;/span&gt; (&lt;span class="dt"&gt;Hoge1&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; c) c&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このように &lt;code&gt;&amp;lt;/&amp;gt;&lt;/code&gt; でパーサーを連結することで &lt;code&gt;Parser a b&lt;/code&gt; の &lt;code&gt;a&lt;/code&gt; の部分がどんどん伸びてくる． ちなみに，&lt;code&gt;top&lt;/code&gt; はURLの末尾かどうかのチェックするパーサーだ:&lt;/p&gt;
&lt;div class="sourceCode" id="cb10"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb10-1" title="1"&gt;&lt;span class="fu"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Hoge2&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="dt"&gt;Hoge2&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-2" title="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-3" title="3"&gt;&lt;span class="fu"&gt;&amp;gt;&lt;/span&gt; Url.fromString &lt;span class="st"&gt;&amp;quot;http://localhost/&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="fu"&gt;.&lt;/span&gt;andThen (Url.parse (Url.map &lt;span class="dt"&gt;Hoge2&lt;/span&gt; Url.top))&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-4" title="4"&gt;&lt;span class="dt"&gt;Just&lt;/span&gt; &lt;span class="dt"&gt;Hoge2&lt;/span&gt; &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;Hoge2&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-5" title="5"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-6" title="6"&gt;&lt;span class="fu"&gt;&amp;gt;&lt;/span&gt; Url.fromString &lt;span class="st"&gt;&amp;quot;http://localhost/1&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="fu"&gt;.&lt;/span&gt;andThen (Url.parse (Url.map &lt;span class="dt"&gt;Hoge2&lt;/span&gt; Url.top))&lt;/a&gt;
&lt;a class="sourceLine" id="cb10-7" title="7"&gt;&lt;span class="dt"&gt;Nothing&lt;/span&gt; &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;Hoge2&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="url.parser.query-の使い方"&gt;Url.Parser.Query の使い方&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Parser a b&lt;/code&gt; の &lt;code&gt;b&lt;/code&gt; 側が仕事をするのはクエリに関するパーサーがある場合だ． なので次にクエリのパーサーを見てみる． 便宜上以降ではクエリの型や関数には &lt;code&gt;Query&lt;/code&gt; を付けるようにする．&lt;/p&gt;
&lt;div class="sourceCode" id="cb11"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb11-1" title="1"&gt;(&lt;span class="fu"&gt;&amp;lt;?&amp;gt;&lt;/span&gt;)  &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; a (query &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Query.Parser&lt;/span&gt; query &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; a b&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-2" title="2"&gt;string &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Query.Parser&lt;/span&gt; (&lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-3" title="3"&gt;int    &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Query.Parser&lt;/span&gt; (&lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-4" title="4"&gt;&lt;span class="fu"&gt;map&lt;/span&gt;    &lt;span class="fu"&gt;:&lt;/span&gt; (a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Query.Parser&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Query.Parser&lt;/span&gt; b&lt;/a&gt;
&lt;a class="sourceLine" id="cb11-5" title="5"&gt;map2   &lt;span class="fu"&gt;:&lt;/span&gt; (a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; b &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; result) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Query.Parser&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Query.Parser&lt;/span&gt; b &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Query.Parser&lt;/span&gt; result&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;(&amp;lt;?&amp;gt;)&lt;/code&gt; という演算子が Url のパーサーとクエリのパーサーを繋ぐ． クエリのパーサーの型は &lt;code&gt;Parser a&lt;/code&gt; と JSON デコーダーのような型と同じ仕組みだ．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;map&lt;/code&gt; で連結したものを &lt;code&gt;(&amp;lt;?&amp;gt;)&lt;/code&gt; で一気に繋げても良いし，&lt;code&gt;(&amp;lt;?&amp;gt;)&lt;/code&gt; で一つずつ繋げても良い:&lt;/p&gt;
&lt;div class="sourceCode" id="cb12"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb12-1" title="1"&gt;&lt;span class="fu"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kw"&gt;type&lt;/span&gt; alias &lt;span class="dt"&gt;Fuga1&lt;/span&gt; &lt;span class="fu"&gt;=&lt;/span&gt; { fuga1 &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;, fuga2 &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt; }&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-2" title="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-3" title="3"&gt;&lt;span class="fu"&gt;&amp;gt;&lt;/span&gt; parser5 &lt;span class="fu"&gt;=&lt;/span&gt; Url.top &lt;span class="fu"&gt;&amp;lt;?&amp;gt;&lt;/span&gt; Query.map2 &lt;span class="dt"&gt;Fuga1&lt;/span&gt; (Query.string &lt;span class="st"&gt;&amp;quot;fuga1&amp;quot;&lt;/span&gt;) (Query.int &lt;span class="st"&gt;&amp;quot;fuga2&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-4" title="4"&gt;&lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="fu"&gt;&amp;lt;&lt;/span&gt;function&lt;span class="fu"&gt;&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Url.Parser&lt;/span&gt; (&lt;span class="dt"&gt;Fuga1&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; b) b&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-5" title="5"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-6" title="6"&gt;&lt;span class="fu"&gt;&amp;gt;&lt;/span&gt; parser5 &lt;span class="fu"&gt;=&lt;/span&gt; Url.map &lt;span class="dt"&gt;Fuga1&lt;/span&gt; (Url.top &lt;span class="fu"&gt;&amp;lt;?&amp;gt;&lt;/span&gt; Query.string &lt;span class="st"&gt;&amp;quot;fuga1&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;&amp;lt;?&amp;gt;&lt;/span&gt; Query.int &lt;span class="st"&gt;&amp;quot;fuga2&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb12-7" title="7"&gt;&lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="fu"&gt;&amp;lt;&lt;/span&gt;function&lt;span class="fu"&gt;&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Url.Parser&lt;/span&gt; (&lt;span class="dt"&gt;Fuga1&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; c) c&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="fragment"&gt;Fragment&lt;/h2&gt;
&lt;p&gt;フラグメントの部分をパースするには &lt;code&gt;fragment&lt;/code&gt; 関数を使う:&lt;/p&gt;
&lt;div class="sourceCode" id="cb13"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb13-1" title="1"&gt;fragment &lt;span class="fu"&gt;:&lt;/span&gt; (&lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; fragment) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; (fragment &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a) a&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;なんでもよければ &lt;code&gt;identity&lt;/code&gt; を使えば良い:&lt;/p&gt;
&lt;div class="sourceCode" id="cb14"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb14-1" title="1"&gt;&lt;span class="fu"&gt;&amp;gt;&lt;/span&gt; parser6 &lt;span class="fu"&gt;=&lt;/span&gt; Url.top &lt;span class="fu"&gt;&amp;lt;/&amp;gt;&lt;/span&gt; Url.fragment identity&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-2" title="2"&gt;&lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="fu"&gt;&amp;lt;&lt;/span&gt;function&lt;span class="fu"&gt;&amp;gt;&lt;/span&gt; &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Url.Parser&lt;/span&gt; (&lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; c) c&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-3" title="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-4" title="4"&gt;&lt;span class="fu"&gt;&amp;gt;&lt;/span&gt; Url.fromString &lt;span class="st"&gt;&amp;quot;http://localhost#abc&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="fu"&gt;.&lt;/span&gt;andThen (Url.parse parser6)&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-5" title="5"&gt;&lt;span class="dt"&gt;Just&lt;/span&gt; (&lt;span class="dt"&gt;Just&lt;/span&gt; &lt;span class="st"&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;) &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; (&lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-6" title="6"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-7" title="7"&gt;&lt;span class="fu"&gt;&amp;gt;&lt;/span&gt; Url.fromString &lt;span class="st"&gt;&amp;quot;http://localhost&amp;quot;&lt;/span&gt; &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt;&lt;span class="fu"&gt;.&lt;/span&gt;andThen (Url.parse parser6)&lt;/a&gt;
&lt;a class="sourceLine" id="cb14-8" title="8"&gt;&lt;span class="dt"&gt;Just&lt;/span&gt; &lt;span class="dt"&gt;Nothing&lt;/span&gt; &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; (&lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="中身を読んでいく"&gt;中身を読んでいく&lt;/h2&gt;
&lt;p&gt;今までの話でなんとなく使い方はわかっただろう． ここからは elm/url の実装について読み解いていく． なので，使い方が分かればもう十分勢の人は以降を読む必要はない．&lt;/p&gt;
&lt;h3 id="余談-参考にしたもの"&gt;余談: 参考にしたもの&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/elm/url#related-work"&gt;README曰く&lt;/a&gt;，&lt;code&gt;Url.Parser&lt;/code&gt; の実装の着想は下記の記事によって得たようだ．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://chrisdone.com/posts/formatting"&gt;Formatting in Haskell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rgrinberg.com/posts/primitive-type-safe-routing/"&gt;Type Safe Routing - Baby Steps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前者は Haskell の &lt;code&gt;printf&lt;/code&gt; のようなフォーマット出力ライブラリで，後者は OCaml のルーティングのライブラリに関する記事．&lt;/p&gt;
&lt;h3 id="パーサーの型"&gt;パーサーの型&lt;/h3&gt;
&lt;p&gt;まずは型の中身を見てみる:&lt;/p&gt;
&lt;div class="sourceCode" id="cb15"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb15-1" title="1"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; a b &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-2" title="2"&gt;  &lt;span class="dt"&gt;Parser&lt;/span&gt; (&lt;span class="dt"&gt;State&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt; (&lt;span class="dt"&gt;State&lt;/span&gt; b))&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-3" title="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-4" title="4"&gt;&lt;span class="kw"&gt;type&lt;/span&gt; alias &lt;span class="dt"&gt;State&lt;/span&gt; value &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-5" title="5"&gt;  { visited &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-6" title="6"&gt;  , unvisited &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-7" title="7"&gt;  , params &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Dict&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; (&lt;span class="dt"&gt;List&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-8" title="8"&gt;  , frag &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-9" title="9"&gt;  , value &lt;span class="fu"&gt;:&lt;/span&gt; value&lt;/a&gt;
&lt;a class="sourceLine" id="cb15-10" title="10"&gt;  }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;State a -&amp;gt; List (State b)&lt;/code&gt; というのは関数型パーサー(パーサーコンビネーター)でよくある型だ(&lt;code&gt;Functional Parser&lt;/code&gt; や &lt;code&gt;Parser Combinator&lt;/code&gt; などで調べると良い)． 入力の状態が &lt;code&gt;State a&lt;/code&gt; で出力の状態が &lt;code&gt;State b&lt;/code&gt;，出力がリストになっているが &lt;code&gt;Maybe&lt;/code&gt; と考えて問題ないはずだ．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Url.parse&lt;/code&gt; や簡単なパーサーの中身を見てみればそれぞれのフィールドの意味がわかるはずだ:&lt;/p&gt;
&lt;div class="sourceCode" id="cb16"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb16-1" title="1"&gt;parse &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; (a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a) a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Url&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; a&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-2" title="2"&gt;parse (&lt;span class="dt"&gt;Parser&lt;/span&gt; parser) url &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-3" title="3"&gt;  getFirstMatch &lt;span class="fu"&gt;&amp;lt;|&lt;/span&gt; parser &lt;span class="fu"&gt;&amp;lt;|&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-4" title="4"&gt;    &lt;span class="dt"&gt;State&lt;/span&gt; [] (preparePath url&lt;span class="fu"&gt;.&lt;/span&gt;path) (prepareQuery url&lt;span class="fu"&gt;.&lt;/span&gt;query) url&lt;span class="fu"&gt;.&lt;/span&gt;fragment identity&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-5" title="5"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-6" title="6"&gt;getFirstMatch &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;List&lt;/span&gt; (&lt;span class="dt"&gt;State&lt;/span&gt; a) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; a&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-7" title="7"&gt;getFirstMatch states &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-8" title="8"&gt;  &lt;span class="kw"&gt;case&lt;/span&gt; states &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-9" title="9"&gt;    [] &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-10" title="10"&gt;      &lt;span class="dt"&gt;Nothing&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-11" title="11"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-12" title="12"&gt;&lt;span class="ot"&gt;    state ::&lt;/span&gt; rest &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-13" title="13"&gt;      &lt;span class="kw"&gt;case&lt;/span&gt; state&lt;span class="fu"&gt;.&lt;/span&gt;unvisited &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-14" title="14"&gt;        [] &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-15" title="15"&gt;          &lt;span class="dt"&gt;Just&lt;/span&gt; state&lt;span class="fu"&gt;.&lt;/span&gt;value&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-16" title="16"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-17" title="17"&gt;        [&lt;span class="st"&gt;&amp;quot;&amp;quot;&lt;/span&gt;] &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-18" title="18"&gt;          &lt;span class="dt"&gt;Just&lt;/span&gt; state&lt;span class="fu"&gt;.&lt;/span&gt;value&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-19" title="19"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-20" title="20"&gt;        _ &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb16-21" title="21"&gt;          getFirstMatch rest&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;parse&lt;/code&gt; の定義より，&lt;code&gt;unvisited&lt;/code&gt; と &lt;code&gt;params&lt;/code&gt; と &lt;code&gt;frag&lt;/code&gt; はそれぞれパスとクエリとフラグメントを与えているのがわかる． &lt;code&gt;getFirstMatch&lt;/code&gt; の定義を見ると，最後に &lt;code&gt;Just state.value&lt;/code&gt; をしているので，&lt;code&gt;value&lt;/code&gt; フィールドが最終的な結果となる． では &lt;code&gt;visited&lt;/code&gt; はなんだろうか？ パーサーの実装を見てみる．&lt;/p&gt;
&lt;h3 id="組み込みのパーサー"&gt;組み込みのパーサー&lt;/h3&gt;
&lt;p&gt;例えば &lt;code&gt;Url.string&lt;/code&gt; を見てみる:&lt;/p&gt;
&lt;div class="sourceCode" id="cb17"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb17-1" title="1"&gt;string &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; (&lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a) a&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-2" title="2"&gt;string &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-3" title="3"&gt;  custom &lt;span class="st"&gt;&amp;quot;STRING&amp;quot;&lt;/span&gt; &lt;span class="dt"&gt;Just&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-4" title="4"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-5" title="5"&gt;custom &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; (&lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Maybe&lt;/span&gt; a) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; (a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; b) b&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-6" title="6"&gt;custom tipe stringToSomething &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-7" title="7"&gt;  &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="fu"&gt;&amp;lt;|&lt;/span&gt; \{ visited, unvisited, params, frag, value } &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-8" title="8"&gt;    &lt;span class="kw"&gt;case&lt;/span&gt; unvisited &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-9" title="9"&gt;      [] &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-10" title="10"&gt;        []&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-11" title="11"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-12" title="12"&gt;&lt;span class="ot"&gt;      next ::&lt;/span&gt; rest &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-13" title="13"&gt;        &lt;span class="kw"&gt;case&lt;/span&gt; stringToSomething next &lt;span class="kw"&gt;of&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-14" title="14"&gt;          &lt;span class="dt"&gt;Just&lt;/span&gt; nextValue &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-15" title="15"&gt;            [ &lt;span class="dt"&gt;State&lt;/span&gt; (&lt;span class="ot"&gt;next ::&lt;/span&gt; visited) rest params frag (value nextValue) ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-16" title="16"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-17" title="17"&gt;          &lt;span class="dt"&gt;Nothing&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb17-18" title="18"&gt;            []&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;custom&lt;/code&gt; 関数の定義からわかるように，&lt;code&gt;unvisited&lt;/code&gt; を入力にして &lt;code&gt;stringToSomething&lt;/code&gt; というパーサーを咬ませて，その結果を &lt;code&gt;value&lt;/code&gt; に追加し，元の文字列を &lt;code&gt;visited&lt;/code&gt; に追加している． すなわち，&lt;code&gt;visited&lt;/code&gt; はパースできたパスをためている． しかし，elm/url のコードを探しても &lt;code&gt;visited&lt;/code&gt; が使われているところはないので，今の実装では無くても良いフィールドのはずだ(パースエラーをわかりやすくするときに使えそう)．&lt;/p&gt;
&lt;h2 id="section-2"&gt;&lt;/h2&gt;
&lt;p&gt;ちなみに，クエリやフラグメントのパーサーは入力が違う(&lt;code&gt;unvisited&lt;/code&gt; を使うのではない)だけだ:&lt;/p&gt;
&lt;div class="sourceCode" id="cb18"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb18-1" title="1"&gt;query &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Query.Parser&lt;/span&gt; query &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; (query &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a) a&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-2" title="2"&gt;query (&lt;span class="dt"&gt;Q.Parser&lt;/span&gt; queryParser) &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-3" title="3"&gt;  &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="fu"&gt;&amp;lt;|&lt;/span&gt; \{ visited, unvisited, params, frag, value } &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-4" title="4"&gt;    [ &lt;span class="dt"&gt;State&lt;/span&gt; visited unvisited params frag (value (queryParser params))&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-5" title="5"&gt;    ]&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-6" title="6"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-7" title="7"&gt;fragment &lt;span class="fu"&gt;:&lt;/span&gt; (&lt;span class="dt"&gt;Maybe&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; fragment) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; (fragment &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a) a&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-8" title="8"&gt;fragment toFrag &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-9" title="9"&gt;  &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="fu"&gt;&amp;lt;|&lt;/span&gt; \{ visited, unvisited, params, frag, value } &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-10" title="10"&gt;    [ &lt;span class="dt"&gt;State&lt;/span&gt; visited unvisited params frag (value (toFrag frag))&lt;/a&gt;
&lt;a class="sourceLine" id="cb18-11" title="11"&gt;    ]&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="コンビネーター"&gt;コンビネーター&lt;/h3&gt;
&lt;p&gt;ちなみに，コンビネーター(&lt;code&gt;(&amp;lt;/&amp;gt;)&lt;/code&gt;)の定義も見てみる:&lt;/p&gt;
&lt;div class="sourceCode" id="cb19"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb19-1" title="1"&gt;slash &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; a b &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; b c &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; a c&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-2" title="2"&gt;slash (&lt;span class="dt"&gt;Parser&lt;/span&gt; parseBefore) (&lt;span class="dt"&gt;Parser&lt;/span&gt; parseAfter) &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-3" title="3"&gt;  &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="fu"&gt;&amp;lt;|&lt;/span&gt; \state &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb19-4" title="4"&gt;    List.concatMap parseAfter (parseBefore state)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;(&amp;lt;/&amp;gt;)&lt;/code&gt; は &lt;code&gt;slash&lt;/code&gt; のエイリアスになっている． &lt;code&gt;Parser&lt;/code&gt; の型は &lt;code&gt;State a -&amp;gt; [State b]&lt;/code&gt; のラップなので，パーサーの連結は &lt;code&gt;concatMap&lt;/code&gt; をするだけになっている．&lt;/p&gt;
&lt;p&gt;また，&lt;code&gt;Url.map&lt;/code&gt; も見てみる:&lt;/p&gt;
&lt;div class="sourceCode" id="cb20"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb20-1" title="1"&gt;&lt;span class="fu"&gt;map&lt;/span&gt; &lt;span class="fu"&gt;:&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; a b &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; (b &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; c) c&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-2" title="2"&gt;&lt;span class="fu"&gt;map&lt;/span&gt; subValue (&lt;span class="dt"&gt;Parser&lt;/span&gt; parseArg) &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-3" title="3"&gt;  &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="fu"&gt;&amp;lt;|&lt;/span&gt; \{ visited, unvisited, params, frag, value } &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-4" title="4"&gt;    List.map (mapState value) &lt;span class="fu"&gt;&amp;lt;|&lt;/span&gt; parseArg &lt;span class="fu"&gt;&amp;lt;|&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-5" title="5"&gt;      &lt;span class="dt"&gt;State&lt;/span&gt; visited unvisited params frag subValue&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-6" title="6"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-7" title="7"&gt;mapState &lt;span class="fu"&gt;:&lt;/span&gt; (a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;State&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;State&lt;/span&gt; b&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-8" title="8"&gt;mapState func { visited, unvisited, params, frag, value } &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb20-9" title="9"&gt;  &lt;span class="dt"&gt;State&lt;/span&gt; visited unvisited params frag (func value)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;map&lt;/code&gt; を利用する場合，各型変数は次のようになっていることが多いだろう:&lt;/p&gt;
&lt;div class="sourceCode" id="cb21"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb21-1" title="1"&gt;&lt;span class="co"&gt;-- parseArg : State (x -&amp;gt; y) -&amp;gt; List (State y)&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb21-2" title="2"&gt;&lt;span class="co"&gt;-- value を identity と考えれば良い&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb21-3" title="3"&gt;&lt;span class="fu"&gt;map&lt;/span&gt; &lt;span class="fu"&gt;:&lt;/span&gt; (x &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; y) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; (x &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; y) y &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; (y &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; z) z&lt;/a&gt;
&lt;a class="sourceLine" id="cb21-4" title="4"&gt;&lt;span class="fu"&gt;map&lt;/span&gt; subValue (&lt;span class="dt"&gt;Parser&lt;/span&gt; parseArg) &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb21-5" title="5"&gt;  &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="fu"&gt;&amp;lt;|&lt;/span&gt; \{ visited, unvisited, params, frag, value } &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb21-6" title="6"&gt;    List.map (mapState value) &lt;span class="fu"&gt;&amp;lt;|&lt;/span&gt; parseArg &lt;span class="fu"&gt;&amp;lt;|&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb21-7" title="7"&gt;      &lt;span class="dt"&gt;State&lt;/span&gt; visited unvisited params frag subValue&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;こう考えれば &lt;code&gt;map&lt;/code&gt; 関数の定義も読めるはずだ．&lt;/p&gt;
&lt;h2 id="結局"&gt;結局&lt;/h2&gt;
&lt;p&gt;最後に &lt;code&gt;Parser a b&lt;/code&gt; の各型変数は何を意味して，従来の &lt;code&gt;Parser a&lt;/code&gt; 方式のパーサーではなぜダメなのかについて議論する(まぁあくまでも，実際に実装などを読んでの個人的な肌感なんですけど)．&lt;/p&gt;
&lt;h3 id="型変数の意味"&gt;型変数の意味&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Parser a b&lt;/code&gt; の意味は &lt;code&gt;State a -&amp;gt; List (State b)&lt;/code&gt; からわかるように，パーサーの入力の状態に使われる型 &lt;code&gt;a&lt;/code&gt; と出力の状態に使われる型 &lt;code&gt;b&lt;/code&gt; である． ここで，「使われる」というのが肝で，&lt;code&gt;a&lt;/code&gt; それ自体は入力ではない． 入力にせよ，出力にせよ，パーサーが行うのは状態 &lt;code&gt;State r1&lt;/code&gt; から &lt;code&gt;State r2&lt;/code&gt; への変換だ(ただしそれは失敗するかもしれないので &lt;code&gt;List&lt;/code&gt; でラップされている)． &lt;code&gt;State r&lt;/code&gt; にとって &lt;code&gt;r&lt;/code&gt; は &lt;strong&gt;パースの最終結果&lt;/strong&gt; を意味している(変化する状態の最終結果)．&lt;/p&gt;
&lt;p&gt;なので &lt;code&gt;Parser a b&lt;/code&gt; のパーサーがあった場合，このパーサーの最終結果は &lt;code&gt;b&lt;/code&gt; であり，&lt;code&gt;a&lt;/code&gt; は入力の状態が想定している最終結果である． ただし，&lt;code&gt;Parser (String -&amp;gt; b) b&lt;/code&gt; というパーサーの場合，&lt;code&gt;b&lt;/code&gt; は &lt;code&gt;String&lt;/code&gt; でも良く，このパーサーを &lt;code&gt;Url.parse&lt;/code&gt; で実行する場合は &lt;code&gt;b = String&lt;/code&gt; と推論される．&lt;/p&gt;
&lt;h3 id="parser-a-との違い"&gt;&lt;code&gt;Parser a&lt;/code&gt; との違い&lt;/h3&gt;
&lt;p&gt;大きな違いは &lt;code&gt;map&lt;/code&gt; の振る舞いだ． &lt;code&gt;Parser a&lt;/code&gt; の場合，レコード型 &lt;code&gt;Hoge = { hoge1 : Int, hoge2 : String }&lt;/code&gt; のパーサーを記述するのには次のように書く:&lt;/p&gt;
&lt;div class="sourceCode" id="cb22"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb22-1" title="1"&gt;intParser &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="dt"&gt;Int&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb22-2" title="2"&gt;stringParser &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb22-3" title="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb22-4" title="4"&gt;parser1 &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="dt"&gt;Hoge&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb22-5" title="5"&gt;parser1 &lt;span class="fu"&gt;=&lt;/span&gt; map2 &lt;span class="dt"&gt;Hoge&lt;/span&gt; intParser stringParser&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;フィールドの個数が3つ4つと増えるたびに，&lt;code&gt;map3&lt;/code&gt; &lt;code&gt;map4&lt;/code&gt; と作る必要がある． また，parser1 を再利用して &lt;code&gt;Fuga = { hoge1 : Int, hoge2 : String, hoge3 : Int }&lt;/code&gt; 型のパーサーを記述することはできない．&lt;/p&gt;
&lt;h2 id="section-3"&gt;&lt;/h2&gt;
&lt;p&gt;対して &lt;code&gt;Parser a b&lt;/code&gt; の場合は &lt;code&gt;(&amp;lt;/&amp;gt;)&lt;/code&gt; を用いて &lt;code&gt;intParser&lt;/code&gt; や &lt;code&gt;stringParser&lt;/code&gt; をどんどん連結していき，最終的に &lt;code&gt;map&lt;/code&gt; をする．&lt;/p&gt;
&lt;div class="sourceCode" id="cb23"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb23-1" title="1"&gt;parser0 &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; (&lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt;  &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a) a&lt;/a&gt;
&lt;a class="sourceLine" id="cb23-2" title="2"&gt;parser0 &lt;span class="fu"&gt;=&lt;/span&gt; intParser &lt;span class="fu"&gt;&amp;lt;/&amp;gt;&lt;/span&gt; stringParser&lt;/a&gt;
&lt;a class="sourceLine" id="cb23-3" title="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb23-4" title="4"&gt;parser1 &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; (&lt;span class="dt"&gt;Hoge&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a) a&lt;/a&gt;
&lt;a class="sourceLine" id="cb23-5" title="5"&gt;parser1 &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;map&lt;/span&gt; &lt;span class="dt"&gt;Hoge&lt;/span&gt; parser0&lt;/a&gt;
&lt;a class="sourceLine" id="cb23-6" title="6"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb23-7" title="7"&gt;parser2 &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; (&lt;span class="dt"&gt;Fuga&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a) a&lt;/a&gt;
&lt;a class="sourceLine" id="cb23-8" title="8"&gt;parser2 &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;map&lt;/span&gt; &lt;span class="dt"&gt;Fuga&lt;/span&gt; (parser0 &lt;span class="fu"&gt;&amp;lt;/&amp;gt;&lt;/span&gt; intParser)&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;すなわち利点は:&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;引数ごとの &lt;code&gt;map&lt;/code&gt; がいらない&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(&amp;lt;/&amp;gt;)&lt;/code&gt; で繋いだパーサーの再利用性が高い&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="applicative-スタイル"&gt;Applicative スタイル&lt;/h3&gt;
&lt;p&gt;Elm で一般的かどうかはわからないが，Haskell では一般的な Applicative スタイルというのがある． ちなみに elm/url を Applicative スタイルにしたパッケージは GitHub に揚げてある．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matsubara0507/elm-url-applicative"&gt;matsubara0507/elm-url-applicative - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Applicative スタイルとは，次のようなコンビネーターを使って関数を構築する:&lt;/p&gt;
&lt;div class="sourceCode" id="cb24"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb24-1" title="1"&gt;&lt;span class="fu"&gt;map&lt;/span&gt;   &lt;span class="fu"&gt;:&lt;/span&gt; (a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; b&lt;/a&gt;
&lt;a class="sourceLine" id="cb24-2" title="2"&gt;apply &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; (a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; b&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ちなみに，今回の話の流れ上 &lt;code&gt;Parser&lt;/code&gt; を用いたが，ここが &lt;code&gt;Maybe&lt;/code&gt; だろうと &lt;code&gt;List&lt;/code&gt; だろうと同じに扱える． この場合，パーサーの構築は次のようになる:&lt;/p&gt;
&lt;div class="sourceCode" id="cb25"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb25-1" title="1"&gt;parser2 &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="dt"&gt;Fuga&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb25-2" title="2"&gt;parser2 &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb25-3" title="3"&gt;  apply (apply (&lt;span class="fu"&gt;map&lt;/span&gt; &lt;span class="dt"&gt;Fuga&lt;/span&gt; intParser) stringParser) intParser&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Elm 的にはパイプで連結できるので &lt;code&gt;app&lt;/code&gt; の引数の順番を変えた方がいいかもしれない．&lt;/p&gt;
&lt;div class="sourceCode" id="cb26"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb26-1" title="1"&gt;andApply &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; (a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; b) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; b&lt;/a&gt;
&lt;a class="sourceLine" id="cb26-2" title="2"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb26-3" title="3"&gt;parser2 &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="dt"&gt;Fuga&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb26-4" title="4"&gt;parser2 &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb26-5" title="5"&gt;  &lt;span class="fu"&gt;map&lt;/span&gt; &lt;span class="dt"&gt;Fuga&lt;/span&gt; intParser&lt;/a&gt;
&lt;a class="sourceLine" id="cb26-6" title="6"&gt;    &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; andApply stringParser&lt;/a&gt;
&lt;a class="sourceLine" id="cb26-7" title="7"&gt;    &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; andApply intParser&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一見問題なさそうだ． しかし，今回でいう &lt;code&gt;Url.s : String -&amp;gt; Parser a a&lt;/code&gt; のような入力を消費するだけで結果に反映しないパーサーがあるとうまく行かない． &lt;code&gt;ignore&lt;/code&gt; のようなコンビネーターが必要になる(ちなみに Haskell の Applicative にはもちろんある):&lt;/p&gt;
&lt;div class="sourceCode" id="cb27"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb27-1" title="1"&gt;s &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; ()&lt;/a&gt;
&lt;a class="sourceLine" id="cb27-2" title="2"&gt;ignore &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; b &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; a &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; a&lt;/a&gt;
&lt;a class="sourceLine" id="cb27-3" title="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb27-4" title="4"&gt;parser3 &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="dt"&gt;Fuga&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb27-5" title="5"&gt;parser3 &lt;span class="fu"&gt;=&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb27-6" title="6"&gt;  &lt;span class="fu"&gt;map&lt;/span&gt; &lt;span class="dt"&gt;Fuga&lt;/span&gt; intParser&lt;/a&gt;
&lt;a class="sourceLine" id="cb27-7" title="7"&gt;    &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; andApply stringParser&lt;/a&gt;
&lt;a class="sourceLine" id="cb27-8" title="8"&gt;    &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; ignore (s &lt;span class="st"&gt;&amp;quot;fuga&amp;quot;&lt;/span&gt;)&lt;/a&gt;
&lt;a class="sourceLine" id="cb27-9" title="9"&gt;    &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; andApply intParser&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;ちなみに，再利用の方もうまくいく:&lt;/p&gt;
&lt;div class="sourceCode" id="cb28"&gt;&lt;pre class="sourceCode haskell"&gt;&lt;code class="sourceCode haskell"&gt;&lt;a class="sourceLine" id="cb28-1" title="1"&gt;parser0 &lt;span class="fu"&gt;:&lt;/span&gt; (&lt;span class="dt"&gt;Int&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;String&lt;/span&gt; &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; a) &lt;span class="ot"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; a&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-2" title="2"&gt;parser0 f &lt;span class="fu"&gt;=&lt;/span&gt; &lt;span class="fu"&gt;map&lt;/span&gt; f intParser &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; andApply stringParser&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-3" title="3"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-4" title="4"&gt;parser1 &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="dt"&gt;Hoge&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-5" title="5"&gt;parser1 &lt;span class="fu"&gt;=&lt;/span&gt; parser0 &lt;span class="dt"&gt;Hoge&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-6" title="6"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-7" title="7"&gt;parser2 &lt;span class="fu"&gt;:&lt;/span&gt; &lt;span class="dt"&gt;Parser&lt;/span&gt; &lt;span class="dt"&gt;Fuga&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb28-8" title="8"&gt;parser2 &lt;span class="fu"&gt;=&lt;/span&gt; parser0 &lt;span class="dt"&gt;Fuga&lt;/span&gt; &lt;span class="fu"&gt;|&amp;gt;&lt;/span&gt; andApply intParser&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;これで &lt;code&gt;Parser a b&lt;/code&gt; の場合と同等の能力を持つはずだ． すなわち，&lt;code&gt;Parser a b&lt;/code&gt; と Applicative スタイルは見た目以上の差異はない（はず）．&lt;/p&gt;
&lt;h1 id="おしまい"&gt;おしまい&lt;/h1&gt;
&lt;p&gt;Elm には珍しく型がテクニカルなパッケージということで，細かく中を読んでみました． 色々試した結果，Haskell の Applicative スタイルの見た目を変えてるだけのようでした． まだ，エヴァンさんが参考にしたという記事をちゃんと読んでないので，もしかしたら間違っているかも． 時間ができたら読んでみます．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/12/06/195433</id><title type="text">Kubernetes 1.13: SIG Scheduling の変更内容</title><updated>2018-12-06T19:54:33+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/12/06/195433"/><summary type="html">はじめに 本記事では、Kubernetes 1.13 の CHANGELOG からスケジューリングに関する内容をまとめました。 主な変更点 https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.13.md#sig-scheduling 1.13 における SIG Scheduling の取り組みは主に安定性に焦点を当てており、いくつかの大きな機能の導入は次のバージョンまで延期することになりました。特記すべき変更として次に挙げる 2 点があります。 #69824: Taint based Eviction の有効化 Ta…</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-12-05-create-dhall-ex.html</id><title type="text">Dhall を試して物足りない部分を補うツールを自作した</title><updated>2018-12-05T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-12-05-create-dhall-ex.html"/><summary type="html">&lt;article class="post card" itemscope itemtype="http://schema.org/BlogPosting"&gt;
 &lt;div class="card-content"&gt;
  &lt;header class="post-header"&gt;
    &lt;h1 class="post-title" itemprop="name headline"&gt;Dhall を試して物足りない部分を補うツールを自作した&lt;/h1&gt;
    &lt;p class="post-meta"&gt;
      &lt;time datetime="2018-12-05" itemprop="datePublished"&gt;
        Dec 5, 2018
      &lt;/time&gt;
      
      
      &lt;div class="tags"&gt;
          &lt;i class="fa fa-tags"&gt;&lt;/i&gt; &lt;a href="/tags/Haskell.html"&gt;Haskell&lt;/a&gt; &lt;a href="/tags/Dhall.html"&gt;Dhall&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;本稿は &lt;a href="https://qiita.com/advent-calendar/2018/haskell"&gt;Haskell Advent Calendar 2018&lt;/a&gt; 5日目の記事です．&lt;/p&gt;
&lt;p&gt;Haskell Day 2018 の発表をきっかけに，兼ねてから気になっていた Dhall を試した． いくつかツールが欲しくなったので作りましたっていう話です．&lt;/p&gt;
&lt;p&gt;作ったものはこれ:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matsubara0507/yaml-to-dhall"&gt;matsubara0507/yaml-to-dhall - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matsubara0507/dhall-ex"&gt;matsubara0507/dhall-ex - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ちなみに，今回作ったツールは現状の stack の stable resolver にある v1.5.1 を利用している．&lt;/p&gt;
&lt;h2 id="dhall"&gt;Dhall&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/dhall-lang/dhall-lang"&gt;Dhall&lt;/a&gt; は静的型付けされた設定記述言語である． 多くの場合，プログラミング言語やアプリケーションに使われる設定ファイルには JSON や YAML が利用されている． プログラミング言語のビルドシステムのような設定ファイル一つ程度なら問題ないが，Kubernetes や Ansible のような膨大な設定ファイルが依存しあう場合，静的型付けプログラミング言語のようにコンパイルによる型検査を導入したくなるだろう． Dhall はそのための言語であり，また便利な関数が用意されているため，非常に再利用性の高い設定ファイルを記述できる．&lt;/p&gt;
&lt;h3 id="例"&gt;例:&lt;/h3&gt;
&lt;p&gt;Dhall は静的片付け言語なので，まずは型を定義しよう:&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode ocaml"&gt;&lt;code class="sourceCode ocaml"&gt;&lt;a class="sourceLine" id="cb1-1" title="1"&gt;$ cat ./User.dhall&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-2" title="2"&gt;{ homeDirectory : Text, privateKeyFile : Text, publicKeyFile : Text }&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;このユーザ型の値はユーザ名から一意に生成されることは容易に想像できるだろう:&lt;/p&gt;
&lt;div class="sourceCode" id="cb2"&gt;&lt;pre class="sourceCode ocaml"&gt;&lt;code class="sourceCode ocaml"&gt;&lt;a class="sourceLine" id="cb2-1" title="1"&gt;$ cat ./makeUser.dhall&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-2" title="2"&gt;  \(user_name : Text)&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-3" title="3"&gt;-&amp;gt;    &lt;span class="kw"&gt;let&lt;/span&gt; homeDirectory = &lt;span class="st"&gt;&amp;quot;/home/${user_name}&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-4" title="4"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-5" title="5"&gt;  &lt;span class="kw"&gt;in&lt;/span&gt;  &lt;span class="kw"&gt;let&lt;/span&gt; privateKeyFile = &lt;span class="st"&gt;&amp;quot;${homeDirectory}/id_rsa&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-6" title="6"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-7" title="7"&gt;  &lt;span class="kw"&gt;in&lt;/span&gt;  &lt;span class="kw"&gt;let&lt;/span&gt; publicKeyFile = &lt;span class="st"&gt;&amp;quot;${privateKeyFile}.pub&amp;quot;&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-8" title="8"&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-9" title="9"&gt;  &lt;span class="kw"&gt;in&lt;/span&gt;    { homeDirectory =&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-10" title="10"&gt;            homeDirectory&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-11" title="11"&gt;        , privateKeyFile =&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-12" title="12"&gt;            privateKeyFile&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-13" title="13"&gt;        , publicKeyFile =&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-14" title="14"&gt;            publicKeyFile&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-15" title="15"&gt;        }&lt;/a&gt;
&lt;a class="sourceLine" id="cb2-16" title="16"&gt;      : ./User.dhall&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;この &lt;code&gt;./makeUser.dhall&lt;/code&gt; は任意の文字列を与えると，それをユーザ名として &lt;code&gt;./User.dhall&lt;/code&gt; 型の値を生成してくれる． さらに，高階関数を使って複数のユーザに対し一気に適用してみよう．&lt;/p&gt;
&lt;pre class="dhall"&gt;&lt;code&gt;$ cat ./users.dhall
let User = ./User.dhall

in  let map =
      https://raw.githubusercontent.com/dhall-lang/dhall-lang/0a7f596d03b3ea760a96a8e03935f4baa64274e1/Prelude/List/map

in  map Text User ./makeUser.dhall [ &amp;quot;alice&amp;quot;, &amp;quot;bob&amp;quot;, &amp;quot;curry&amp;quot; ] : List User&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;map&lt;/code&gt; には &lt;a href="https://github.com/dhall-lang/dhall-lang/blob/master/Prelude/List/map"&gt;dhall のリポジトリにある標準パッケージの関数&lt;/a&gt;を直接インポートしている． &lt;code&gt;map&lt;/code&gt; の型は &lt;code&gt;∀(a : Type) → ∀(b : Type) → (a → b) → List a → List b&lt;/code&gt; となっている． 基本的に Dhall で多相な高階関数を利用するときは，引数から直接型を与えてあげる必要がある．&lt;/p&gt;
&lt;p&gt;さて，これを dhall でビルドすると次のような結果を得る:&lt;/p&gt;
&lt;pre class="dhall"&gt;&lt;code&gt;$ dhall &amp;lt;&amp;lt;&amp;lt; ./users.dhall
[ { homeDirectory =
      &amp;quot;/home/alice&amp;quot;
  , privateKeyFile =
      &amp;quot;/home/alice/id_rsa&amp;quot;
  , publicKeyFile =
      &amp;quot;/home/alice/id_rsa.pub&amp;quot;
  }
, { homeDirectory =
      &amp;quot;/home/bob&amp;quot;
  , privateKeyFile =
      &amp;quot;/home/bob/id_rsa&amp;quot;
  , publicKeyFile =
      &amp;quot;/home/bob/id_rsa.pub&amp;quot;
  }
, { homeDirectory =
      &amp;quot;/home/curry&amp;quot;
  , privateKeyFile =
      &amp;quot;/home/curry/id_rsa&amp;quot;
  , publicKeyFile =
      &amp;quot;/home/curry/id_rsa.pub&amp;quot;
  }
]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これは次のようなYAMLに対応し，&lt;code&gt;dhall-to-yaml&lt;/code&gt; などのツールで変換可能だ:&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;a class="sourceLine" id="cb5-1" title="1"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;privateKeyFile:&lt;/span&gt;&lt;span class="at"&gt; /home/alice/id_rsa&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-2" title="2"&gt;  &lt;span class="fu"&gt;publicKeyFile:&lt;/span&gt;&lt;span class="at"&gt; /home/alice/id_rsa.pub&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-3" title="3"&gt;  &lt;span class="fu"&gt;homeDirectory:&lt;/span&gt;&lt;span class="at"&gt; /home/alice&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-4" title="4"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;privateKeyFile:&lt;/span&gt;&lt;span class="at"&gt; /home/bob/id_rsa&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-5" title="5"&gt;  &lt;span class="fu"&gt;publicKeyFile:&lt;/span&gt;&lt;span class="at"&gt; /home/bob/id_rsa.pub&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-6" title="6"&gt;  &lt;span class="fu"&gt;homeDirectory:&lt;/span&gt;&lt;span class="at"&gt; /home/bob&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-7" title="7"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;privateKeyFile:&lt;/span&gt;&lt;span class="at"&gt; /home/curry/id_rsa&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-8" title="8"&gt;  &lt;span class="fu"&gt;publicKeyFile:&lt;/span&gt;&lt;span class="at"&gt; /home/curry/id_rsa.pub&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-9" title="9"&gt;  &lt;span class="fu"&gt;homeDirectory:&lt;/span&gt;&lt;span class="at"&gt; /home/curry&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="section"&gt;&lt;/h2&gt;
&lt;p&gt;また，ざっくりとしたイメージを得るには、先日あった &lt;a href="https://wiki.haskell.jp/Workshop/HaskellDay/2018"&gt;Haskell Day 2018&lt;/a&gt; での&lt;a href="https://speakerdeck.com/syocy/dhall-haskellfalsexin-tanakiraapuri"&gt;発表資料&lt;/a&gt;がわかりやすくてオススメ．&lt;/p&gt;
&lt;h3 id="使ってみて思うところ"&gt;使ってみて思うところ&lt;/h3&gt;
&lt;p&gt;もしかしたら最新のバージョンであれば改善しているものもあるかもしれない．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基本的な高階関数があり便利
&lt;ul&gt;
&lt;li&gt;map,fold,filter など&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;普通のプログラミングのように式を再利用できる&lt;/li&gt;
&lt;li&gt;型推論がザコい
&lt;ul&gt;
&lt;li&gt;パラメトリック多相を挟むとダメみたいですね&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;結構ビルドエラーがエスパー
&lt;ul&gt;
&lt;li&gt;慣れの問題か？&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;YAML のいわゆる連想配列への変換ができない&lt;/li&gt;
&lt;li&gt;日本語が化ける ;;
&lt;ul&gt;
&lt;li&gt;まぁ原因はわかるので最新でも治ってなかったらPRしてみるか&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="何に導入したか"&gt;何に導入したか&lt;/h2&gt;
&lt;p&gt;弊社が企画してる学生向けの競技型イベントに関するシステムの設定ファイルを Dhall に置き換えてみた． そのシステムは，インフラ・スコアボード・デプロイツールの3つのリポジトリに別れており，ところどころ重複した設定が3つのリポジトリに存在する． そこで，設定用のリポジトリを作って，そこに Dhall で記述した設定を置き，そこから各リポジトリに設定を撒くような仕組みを考えることにした．&lt;/p&gt;
&lt;p&gt;&lt;img src="/assets/create-dhall-ex/system-with-dhall.png" /&gt;&lt;/p&gt;
&lt;p&gt;別に Dhall にしたからといって劇的に何かがよくなるわけでは無いのだが，ちょうど良いサンドボックスがあったのでイロイロと試してみる，というのが本音です（笑）&lt;/p&gt;
&lt;h2 id="yaml-to-dhall"&gt;yaml-to-dhall&lt;/h2&gt;
&lt;p&gt;最初の方はせっせと手作業で変換していたが，何個かやって変換の仕方の勘所がわかって来た． そうなると後は作業でしか無いので，なんとかして大量にある設定ファイルを一括変換したい．&lt;/p&gt;
&lt;p&gt;調べた限り，YAML から Dhall に変換するプログラムは無さそう(逆はもちろんあるけど)． なのですっごい雑なものを作った．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matsubara0507/yaml-to-dhall"&gt;matsubara0507/yaml-to-dhall - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これは極めて単純なことしかできない． 数値は全て Float に変換されるし，Optional や空リストの書き方が間違っている． とりあえず変換して，手元のエディタで置換すればいいかなと思ったので雑なままである．&lt;/p&gt;
&lt;p&gt;時間ができたらそのうち直すかも．&lt;/p&gt;
&lt;h2 id="dhall-ex"&gt;dhall-ex&lt;/h2&gt;
&lt;p&gt;前述した通り，一組の設定ファイル群から複数のリポジトリの設定ファイルを生成したかったのでその仕組みを作った． dhall-ex は次のような設定ファイルを記述する:&lt;/p&gt;
&lt;pre class="dhall"&gt;&lt;code&gt;{ GH_TOKEN =
      [ &amp;quot;matsubara0507:XXXX&amp;quot; ] : Optional Text
  , root =
      &amp;quot;configs&amp;quot;
  , exports =
      [ { name =
            &amp;quot;deploy-tool&amp;quot;
        , repo =
            [ &amp;quot;git-challenge/deploy-tool&amp;quot; ] : Optional Text
        , paths =
            [ &amp;quot;settings/orgs/orgs.yml&amp;quot;
            , &amp;quot;settings/orgs/review.yml&amp;quot;
            ...
            ]
        }
      ...
      ]
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;別にどっちでもよかったのだが，せっかくなので dhall-ex の設定ファイルも Dhall で記述するようにした． なので，具体例より&lt;a href="https://github.com/matsubara0507/dhall-ex/blob/master/dhall/dhall-ex-type.dhall"&gt;型&lt;/a&gt;を見た方が早いだろう．&lt;/p&gt;
&lt;pre class="dhall"&gt;&lt;code&gt;let Export = { name : Text, repo : Optional Text, paths : List Text }
in  { GH_TOKEN : Optional Text, root : Text, exports : List Export }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;root&lt;/code&gt; は設定ファイル群を置くパスで，&lt;code&gt;exports&lt;/code&gt; が設定ファイル群の更新先のリポジトリなどの情報だ． &lt;code&gt;repo&lt;/code&gt; で GitHub リポジトリを指定し，&lt;code&gt;paths&lt;/code&gt; で関連する設定ファイルを列挙する． 例の場合 &lt;code&gt;./config/settings/orgs/orgs.yml.dhall&lt;/code&gt; を &lt;code&gt;./.dhall-ex/git-challenge/deploy-tool/settings/orgs/orgs.yml&lt;/code&gt; に dhall でビルドする．&lt;/p&gt;
&lt;p&gt;ちなみに Dhall のバージョンが古いので &lt;code&gt;Optional&lt;/code&gt; がリストのリテラルを利用しているが，最新の Dhall には &lt;code&gt;Some&lt;/code&gt; と &lt;code&gt;None&lt;/code&gt; があるはず．&lt;/p&gt;
&lt;h3 id="機能"&gt;機能&lt;/h3&gt;
&lt;p&gt;現状はこんな感じ:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ dhall-ex --help
dhall-ex - cli tool to support dhall

Usage: dhall-ex [-v|--verbose] [-c|--config PATH] [--only NAME] COMMAND
                [--version]

Available options:
  -v,--verbose             Enable verbose mode: verbosity level &amp;quot;debug&amp;quot;
  -c,--config PATH         Configuration file
  --only NAME              Exec subcommand only NAME in config
  --version                Show version
  -h,--help                Show this help text

Available commands:
  sort                     Sort record keys in dhall file
  echo                     Echo TEXT
  init                     Init dhall-ex work directory
  build                    Build Dhall file to YAML or JSON
  deploy                   Deploy builded config file to remote repository
  checkout                 Checkout repository in dhall workspace
  pull                     Pull repository in dhall workspace&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;echo&lt;/code&gt; は設定が正しく読み取れるかどうかにだけ使う雑機能． &lt;code&gt;sort&lt;/code&gt; レコードのフィールドの順番を型に合わせて並び替えてくれるコマンドだ． 前述した &lt;code&gt;yaml-to-dhall&lt;/code&gt; などを使った後に使った(並び変える必要はないんだけど，なんか読みやすいように)．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;init&lt;/code&gt; でリポジトリなどの初期化をし，&lt;code&gt;build&lt;/code&gt; で設定ファイルを変換し，&lt;code&gt;deploy&lt;/code&gt; でコミットとプッシュを行ってくれる． &lt;code&gt;checkout&lt;/code&gt; や &lt;code&gt;pull&lt;/code&gt; はただの git コマンドのラッパーだ．&lt;/p&gt;
&lt;p&gt;また，&lt;code&gt;--only deploy-tool&lt;/code&gt; などとすることでコマンドの実行を特定のリポジトリに限定できる．&lt;/p&gt;
&lt;h3 id="実装"&gt;実装&lt;/h3&gt;
&lt;p&gt;実は内部実装はそこまで難しいことをしていない． Dhall のファイルを読み込み，ビルドし，それを dhall-ex の設定ファイルに則って出力するだけだ． &lt;code&gt;build&lt;/code&gt; 以外のコマンドは &lt;a href="http://hackage.haskell.org/package/shelly"&gt;&lt;code&gt;shelly&lt;/code&gt;&lt;/a&gt; を使ってシェルスクリプトもどきを実行している．&lt;/p&gt;
&lt;h3 id="todo"&gt;ToDo&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;例外処理が雑なのを直す
&lt;ul&gt;
&lt;li&gt;だいたいこの部分が残る（笑）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;任意のコマンドを各リポジトリのワークスペースで実行できるようにする
&lt;ul&gt;
&lt;li&gt;なんか &lt;code&gt;git status&lt;/code&gt; とか &lt;code&gt;git branch&lt;/code&gt; とかしたい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;並行処理&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="おしまい"&gt;おしまい&lt;/h1&gt;
&lt;p&gt;随分雑な記事になってしまった．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-12-02-stack-docker-travici.html</id><title type="text">Stack の Docker Integration とイメージの自動更新</title><updated>2018-12-02T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-12-02-stack-docker-travici.html"/><summary type="html">&lt;article class="post card" itemscope itemtype="http://schema.org/BlogPosting"&gt;
 &lt;div class="card-content"&gt;
  &lt;header class="post-header"&gt;
    &lt;h1 class="post-title" itemprop="name headline"&gt;Stack の Docker Integration とイメージの自動更新&lt;/h1&gt;
    &lt;p class="post-meta"&gt;
      &lt;time datetime="2018-12-02" itemprop="datePublished"&gt;
        Dec 2, 2018
      &lt;/time&gt;
      
      
      &lt;div class="tags"&gt;
          &lt;i class="fa fa-tags"&gt;&lt;/i&gt; &lt;a href="/tags/Haskell.html"&gt;Haskell&lt;/a&gt; &lt;a href="/tags/Docker.html"&gt;Docker&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;本稿は &lt;a href="https://qiita.com/advent-calendar/2018/haskell2"&gt;Haskell (その2) Advent Calendar 2018&lt;/a&gt; 2日目の記事です．&lt;/p&gt;
&lt;p&gt;最近よく CLI ツールを作るんですが，Haskell Stack を持ってなくても CLI ツールが使えるように，ツールを Docker イメージ化するようにしています． その流れを書き留めておこうというの本稿の趣旨です．&lt;/p&gt;
&lt;p&gt;ちなみに，以下のリポジトリで実際に試しています．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matsubara0507/mdium"&gt;matsubara0507/mdium - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matsubara0507/dhall-ex"&gt;matsubara0507/dhall-ex - GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="docker-integration"&gt;Docker Integration&lt;/h2&gt;
&lt;p&gt;Haskell のビルドツール Stack には Dcoker Integration という機能がある（現在最新の安定版である v1.9.1 を想定しています）．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.haskellstack.org/en/v1.9.1/docker_integration/"&gt;Docker integration - The Haskell Tool Stack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.haskellstack.org/en/v1.9.1/yaml_configuration/#image"&gt;Image - Yaml configuration - The Haskell Tool Stack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker Integration として，ざっくりと次のような機能がある．&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;指定したイメージのコンテナでビルド・実行をする&lt;/li&gt;
&lt;li&gt;ビルドした実行ファイルを含めた Docker イメージの作成&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(2 は正確には Docker Integration とは呼ばない)&lt;/p&gt;
&lt;p&gt;ちなみに，Stack はワークスペース内の &lt;code&gt;.stack-work&lt;/code&gt; の中に中間結果などを含むビルド結果をバージョンやビルド環境ごとに保存する． そして，&lt;code&gt;--docker&lt;/code&gt; オプションでビルドすることで，ローカルではなく Docker のコンテナ内でビルドをしたり，生成したプログラムを実行したりできる． しかも，コンテナ内でビルドした場合でもビルド結果をローカルの &lt;code&gt;.stack-work&lt;/code&gt; に保存するのだ．&lt;/p&gt;
&lt;h2 id="docker-イメージ内でビルド"&gt;Docker イメージ内でビルド&lt;/h2&gt;
&lt;p&gt;まず stack.yaml に次のような設定を追加する．&lt;/p&gt;
&lt;div class="sourceCode" id="cb1"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;a class="sourceLine" id="cb1-1" title="1"&gt;&lt;span class="fu"&gt;docker:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-2" title="2"&gt;  &lt;span class="fu"&gt;enable:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="ch"&gt;false&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb1-3" title="3"&gt;  &lt;span class="fu"&gt;repo:&lt;/span&gt;&lt;span class="at"&gt; &lt;/span&gt;&lt;span class="st"&gt;&amp;quot;fpco/stack-build&amp;quot;&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;enable: true&lt;/code&gt; にすると，以降の &lt;code&gt;--docker&lt;/code&gt; オプションを省けるが，逆に普通にローカルでビルドしたい場合は &lt;code&gt;--no-docker&lt;/code&gt; オプションが必要になる． &lt;code&gt;repo&lt;/code&gt; でビルドするイメージを指定する． [&lt;code&gt;fpco/stack-build&lt;/code&gt; はこれだ]（https://hub.docker.com/r/fpco/stack-build/）． stack.yaml の &lt;code&gt;resolver&lt;/code&gt; からイメージタグを自動的に選んでくれるはずだ．&lt;/p&gt;
&lt;p&gt;あとは次のコマンドでビルドできる．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# repo で指定した docker image の pull
$ stack docker pull

# docker コンテナ内でビルド
$ stack build --docker&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;他にも細かい設定がかけるが割愛（上述したドキュメントを参照してください）．&lt;/p&gt;
&lt;h2 id="docker-イメージを作る"&gt;Docker イメージを作る&lt;/h2&gt;
&lt;p&gt;stack.yaml に次の設定を追加する．&lt;/p&gt;
&lt;div class="sourceCode" id="cb3"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;a class="sourceLine" id="cb3-1" title="1"&gt;&lt;span class="fu"&gt;image:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-2" title="2"&gt;  &lt;span class="fu"&gt;container:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-3" title="3"&gt;    &lt;span class="fu"&gt;name:&lt;/span&gt;&lt;span class="at"&gt; hoge&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb3-4" title="4"&gt;    &lt;span class="fu"&gt;base:&lt;/span&gt;&lt;span class="at"&gt; fpco/ubuntu-with-libgmp&lt;/span&gt;&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;image.container.name&lt;/code&gt; は生成する Docker イメージの名前で，&lt;code&gt;image.container.base&lt;/code&gt; は生成する Docker イメージに使うベースイメージだ． ベースイメージは &lt;code&gt;docker.repo&lt;/code&gt; などで指定したイメージのOSとあってさえいれば良い（ちなみに &lt;code&gt;fpco/stack-build&lt;/code&gt; は &lt;code&gt;ubuntu:16.04&lt;/code&gt;）． やってくれることは簡単で， &lt;code&gt;stack build --docker&lt;/code&gt; で作成した実行ファイルをベースイメージの &lt;code&gt;local/bin&lt;/code&gt; などにコピーするだけだ． なので，もし静的リンクしていない場合はリンクが含まれるベースイメージを指定すると良い(&lt;a href="https://hub.docker.com/r/fpco/ubuntu-with-libgmp/"&gt;&lt;code&gt;fpco/ubuntu-with-libgmp&lt;/code&gt;&lt;/a&gt; はそのために使っている)．&lt;/p&gt;
&lt;p&gt;あとは次のコマンドでイメージの作成ができる．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# repo で指定した docker image の pull
$ stack --docker image container&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;--docker&lt;/code&gt; を指定しないとローカルでビルドした実行ファイルをコピーして，生成したイメージのコンテナで実行できなくなるので注意してください（もちろんローカルが ubuntu なら問題ないけど）． あと， stack によるイメージ作成方法では他に Dockerfile の &lt;code&gt;add&lt;/code&gt; っぽいことと &lt;code&gt;entrypoints&lt;/code&gt; っぽいことができるが，それ以上のことはできない． もっと複雑な設定をしたい場合は，生成したイメージをベースイメージにした Dockerfile を書いたり， Docker のマルチステージビルドを使って設定を上書きしたりするとと良いだろう．&lt;/p&gt;
&lt;h2 id="travisci-docker-hub"&gt;TravisCI + Docker Hub&lt;/h2&gt;
&lt;p&gt;Docker Integration の欠点は Docker Hub の Automated build が使えない点だ． そこで，TravisCI を使って自動ビルドし，Docker Hub にプッシュするようにした． 次のような設定を travis.yml に書くと良いだろう．&lt;/p&gt;
&lt;div class="sourceCode" id="cb5"&gt;&lt;pre class="sourceCode yaml"&gt;&lt;code class="sourceCode yaml"&gt;&lt;a class="sourceLine" id="cb5-1" title="1"&gt;&lt;span class="kw"&gt;-&lt;/span&gt; &lt;span class="fu"&gt;stage:&lt;/span&gt;&lt;span class="at"&gt; push docker image&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-2" title="2"&gt;  &lt;span class="fu"&gt;if:&lt;/span&gt;&lt;span class="at"&gt; branch = master&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-3" title="3"&gt;  &lt;span class="fu"&gt;script:&lt;/span&gt;&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-4" title="4"&gt;   &lt;span class="kw"&gt;-&lt;/span&gt; stack docker pull&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-5" title="5"&gt;   &lt;span class="kw"&gt;-&lt;/span&gt; stack --docker image container&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-6" title="6"&gt;   &lt;span class="kw"&gt;-&lt;/span&gt; echo &lt;span class="st"&gt;&amp;quot;$DOCKER_PASSWORD&amp;quot;&lt;/span&gt; | docker login -u &lt;span class="st"&gt;&amp;quot;$DOCKER_USERNAME&amp;quot;&lt;/span&gt; --password-stdin&lt;/a&gt;
&lt;a class="sourceLine" id="cb5-7" title="7"&gt;   &lt;span class="kw"&gt;-&lt;/span&gt; docker push $TRAVIS_REPO_SLUG&lt;/a&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;実は &lt;code&gt;stack --docker image container&lt;/code&gt; でビルドまでしてくれる． Docker Hub には Token のようなものはないので &lt;code&gt;--password-stdin&lt;/code&gt; とパイプを使って普通のパスワードでログインする． あとは &lt;code&gt;image.container.name&lt;/code&gt; で指定する名前を &lt;code&gt;hoge&lt;/code&gt; ではなく &lt;code&gt;user_name/repo_name&lt;/code&gt; としておけば良い． もちろんこれは GitHub と Docker Hub のユーザ名が同じ場合にしか使えない． 違う場合は直接書いてね．&lt;/p&gt;
&lt;h1 id="おしまい"&gt;おしまい&lt;/h1&gt;
&lt;p&gt;この方法なら実行ファイルしか入ってないイメージが出来上がるので軽いし， stack のビルド遅すぎて利用者側は厳しい問題も緩和するので最近のマイブームです．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2018/11/26/191201</id><title type="text">今日は "GO GLOBAL" meetup #1 の日です</title><updated>2018-11-26T21:20:41+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2018/11/26/191201"/><summary type="html">"GO GLOBAL" meetup #1 に参加していますので、自分用のメモを残しておきます。 コーディング試験Codility運用の実態と実績 / @k0000i さん コーディング試験とは : コンピュータサイエンスの理解度を見る amazon, Intel, EA など 多数の言語に対応。VBとか 応募すると、コーディング試験を受けるようメールが来る 2時間で2問を回答する IDEは使用可能 デモテストや練習問題がある 受けておくとスコアを上げられるでしょう 正確性とパフォーマンスのスコアの平均 正確性 : バグがないか パフォーマンススコア : 大きいデータを突っ込んだ場合 コードテ…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/11/24/232705</id><title type="text">We Are JavaScripters! @26th で Elm と Firebase の連携について話してきました</title><updated>2018-11-24T23:27:05+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/11/24/232705"/><summary type="html">先日行われた We Are JavaScripters! @19th で Elm と JavaScript ライブラリの連携について発表してきました。 Elm の初心者向けの解説としてよく Msg, Model, update からなるアーキテクチャが挙げられていますが、今回の発表ではもう一歩だけ進んで、Cmd と Sub を使って Elm から JavaScript のライブラリを呼ぶ方法について解説しました。 サーバとしての JS ライブラリ 他の AltJS では JavaScript を呼び出す際、ソースコードの内部に埋め込む形になるのが普通です。 例えば Haskell を Java…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/11/19/Windows_%E3%81%A7_Haskell_iconv_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B</id><title type="text">Windows で Haskell iconv をビルドする</title><updated>2018-11-19T19:13:49+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/11/19/Windows_%E3%81%A7_Haskell_iconv_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B"/><summary type="html">GHC 8.0 以前についてはこちらを参考に。 teratail.com GHC 8.2 以降で stack を使う場合をここではとりあげる。 確信はないのだが、GHC 8.2 から GHC 自体が iconv に依存しなくなったのか、$(stack path --programs)\ghc-8.0.2\mingw\lib から libiconv.a と libiconv.dll.a がなくなっているため GHC 8.0 以前のようにビルドができなくなっている。 なので、まず libiconv を取得する。 stack exec -- pacman -S libiconv-devel インスト…</summary></entry><entry><id>https://matsubara0507.github.io/posts/2018-11-17-join-haskell-day-2018.html</id><title type="text">Haskell Day 2018 に参加してきた</title><updated>2018-11-17T00:00:00Z</updated><author><name>matsubara0507</name></author><link href="https://matsubara0507.github.io/posts/2018-11-17-join-haskell-day-2018.html"/><summary type="html">&lt;article class="post card" itemscope itemtype="http://schema.org/BlogPosting"&gt;
 &lt;div class="card-content"&gt;
  &lt;header class="post-header"&gt;
    &lt;h1 class="post-title" itemprop="name headline"&gt;Haskell Day 2018 に参加してきた&lt;/h1&gt;
    &lt;p class="post-meta"&gt;
      &lt;time datetime="2018-11-17" itemprop="datePublished"&gt;
        Nov 17, 2018
      &lt;/time&gt;
      
      
      &lt;div class="tags"&gt;
          &lt;i class="fa fa-tags"&gt;&lt;/i&gt; &lt;a href="/tags/Haskell.html"&gt;Haskell&lt;/a&gt; &lt;a href="/tags/event.html"&gt;event&lt;/a&gt;
      &lt;/div&gt;
      
    &lt;/p&gt;
  &lt;/header&gt;

  &lt;div class="post-content" itemprop="articleBody"&gt;
    &lt;p&gt;11月10日にあった「&lt;a href="https://haskell-jp.connpass.com/event/92617/"&gt;Haskell Day 2018&lt;/a&gt;」に参加してきたのでメモ書きです．&lt;/p&gt;
&lt;h2 id="午前中-ハンズオン"&gt;午前中 : ハンズオン&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/igrep"&gt;igrep&lt;/a&gt; 氏が中心になって作成した &lt;a href="https://github.com/haskell-jp/makeMistakesToLearnHaskell"&gt;&lt;code&gt;makeMistakesToLearnHaskell&lt;/code&gt;&lt;/a&gt; を使ったハンズオン． ぼくも少しだけコミットした．&lt;/p&gt;
&lt;p&gt;当日の様子は，みなさんかなり黙々と作業してて静かだったが，Twitter 上で質問している人がチラチラいた． それらの Twitter の様子などをみてリアルタイムに修正を行なっていたのはすごい．&lt;/p&gt;
&lt;h2 id="午後"&gt;午後&lt;/h2&gt;
&lt;p&gt;そのうちログミーが公開されるそうなので，概要と感想だけ．&lt;/p&gt;
&lt;h3 id="haskellを導入した話hrrの話"&gt;Haskellを導入した話/HRRの話&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://htmlpreview.github.io/?https://github.com/khibino/haskell-day-2018/blob/master/presentation.html"&gt;発表資料はこちら&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;10年近く職業 Haskeller をやっていた &lt;a href="https://github.com/khibino"&gt;khibino&lt;/a&gt; 氏が，当時 Haskell を導入するに至った話と，彼が作った &lt;a href="https://hackage.haskell.org/package/relational-record"&gt;HRR&lt;/a&gt; というライブラリの紹介 Perl に変わるグルー言語を求めて Haskell に行き着いたそうだ． 「GHC6.8 ですよ，GHC8.6 じゃなく，すごく無いですか？」すごい． HRRは面白そうだけど，使うタイミングがないや．&lt;/p&gt;
&lt;h3 id="servantで実現する高速かつ安全なapi"&gt;Servantで実現する高速かつ安全なAPI&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://speakerdeck.com/daishi/servantdexing-uan-quan-katugao-su-naapikai-fa"&gt;発表資料はこちら&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;同様に職業 Haskeller の &lt;a href="https://github.com/nakaji-dayo"&gt;nakaji&lt;/a&gt; 氏の発表． &lt;a href="https://haskell-servant.github.io/"&gt;Servant&lt;/a&gt; という型レベルに RSETful API を定義できるパッケージを実際にどのように使っているかという話． Servant は僕もよく使う． 「実際に依存してるパッケージの紹介」や「実運用する上で困ったこと」などもあって興味深い．&lt;/p&gt;
&lt;h3 id="並列並行言語haskell"&gt;並列並行言語Haskell&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://speakerdeck.com/syocy/bing-lie-bing-xing-yan-yu-haskell"&gt;発表資料はこちら&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;次のも含めて2本連続で &lt;a href="https://github.com/syocy"&gt;syocy&lt;/a&gt; 氏の発表． Haskell における並行・並列プログラミングについての紹介． 並行・並列プログラミングとして最近は Go・Elixir/Erlang・Rust などが注目されているが，Haskell は20年近く前から並行・並列に対して意識してる． おまけとして，ツールの話や並行並列系パッケージの話があって勉強になる． 余談として「&lt;a href="https://a-tour-of-go-in-haskell.syocy.net/ja_JP/index.html"&gt;A Tour of Go in Haskell&lt;/a&gt;」というのを作ったが，英語版も作ったところめっさ PR が来たという話をしてくれた． やっぱ分母の大きい自然言語は強い．&lt;/p&gt;
&lt;h3 id="dhall-haskellの新たなキラーアプリ"&gt;Dhall: Haskellの新たなキラーアプリ&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://speakerdeck.com/syocy/dhall-haskellfalsexin-tanakiraapuri"&gt;発表資料はこちら&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;個人的に今回一番面白かった． &lt;a href="https://github.com/dhall-lang/dhall-lang"&gt;Dhall&lt;/a&gt; というアプリケーションの紹介． Dhall は設定ファイルを記述するための DSL である． 設定ファイルの多くは YAML や JSON などで書かれるが，複数の YAML が複雑な依存関係を持っている場合(k8sとか)は静的解析したいよね？ しかし逆に「設定ファイルとしての領分」を守って欲しいという要求もある(汎用プログラミング言語としての役割はいらない)． そこで Dhall です！って感じの発表だった． 最後の導入事例として，自社の設定ファイル群を書き換えた話も面白かった．&lt;/p&gt;
&lt;h3 id="semigroupとはmonoidとは環とは"&gt;Semigroupとは？Monoidとは？環とは？&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://aiya000.github.io/Maid/haskell-day-2018-algebra/"&gt;発表資料はこちら&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/aiya000"&gt;aiya&lt;/a&gt; 氏の発表． 群や環などの代数的構造についての話． ステップバイステップに要件が増えていくのでわかりやすい説明だった．&lt;/p&gt;
&lt;p&gt;ちなみに個人的な肌感として，このような数学的な素養がないと Haskell プログラミングができないかというと，そうでもないと思う． 僕自身は教養としてそのあたりを知ってはいるので微妙なところだが，普段 Haskell プログラミングしてる時に意識してはいないはず． ただ，いくつかの言語機能やライブラリは数学や論理学など学術的なバックグランドを持ってることがある． そのような場合は「なぜこのような仕様なのか」「どうしてこのような仕組みでうまくいくかのか」などは，学術論文にしか書いてないことが多い． そのため，そういう機能やライブラリの仕組みを &lt;strong&gt;ちゃんと&lt;/strong&gt; 追おうとする場合は数学的素養がないと厳しいかもしれない．&lt;/p&gt;
&lt;h3 id="haskellで作るcli"&gt;Haskellで作るCLI&lt;/h3&gt;
&lt;p&gt;僕の発表．後述します．&lt;/p&gt;
&lt;h3 id="gloss-動かして遊んで学ぶhaskell"&gt;gloss: 動かして遊んで学ぶHaskell&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://qiita.com/lotz/items/bdb04c771efc8919b79c"&gt;発表資料はこちら&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/lotz84"&gt;lotz&lt;/a&gt; 氏の発表． Haskell を勉強したあと何するかシリーズ，GUI 編． 作りたいものがはっきりないときは &lt;a href="http://hackage.haskell.org/package/gloss"&gt;gloss&lt;/a&gt; で振り子やライフゲームを作って遊んでみよう，という感じ． 僕自身はあんまり GUI に関心がないけど，実際に作りたいものがない場合はこういうので色々出力して手をうごしてみるのは正しい． 時間あるときになんか変なことできないか調べてみようかな．&lt;/p&gt;
&lt;h3 id="liszt-あるいは永続データ構造を真に永続させる方法"&gt;Liszt あるいは永続データ構造を真に永続させる方法&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://shared-assets.adobe.com/link/353213c2-281a-4a53-6cff-a52bff1314c1"&gt;発表資料はこちら&lt;/a&gt;．&lt;/p&gt;
&lt;p&gt;僕が愛用している extensible というライブラリの作者，&lt;a href="https://github.com/fumieval"&gt;fumieval&lt;/a&gt; 氏の発表． &lt;a href="https://github.com/fumieval/liszt"&gt;liszt&lt;/a&gt; を作り始めていたことは知っていたので気になっていた． Liszt は Kafka のような大量のデータを収集・配信するためのプログラムだそうだ(名前も &lt;a href="https://ja.wikipedia.org/wiki/フランツ・カフカ"&gt;Franz Kafka&lt;/a&gt; に対抗して &lt;a href="https://ja.wikipedia.org/wiki/フランツ・リスト"&gt;Franz Liszt&lt;/a&gt; らしい)． 内部のデータ構造として Skew binary random access list を要素としてもつ 2-3 木 を用いている． このあたりの詳しい話は「&lt;a href="https://asciidwango.jp/post/160831986220/純粋関数型データ構造"&gt;純粋関数型データ構造&lt;/a&gt;」を読むと良いとのこと(本の名前が上がった瞬間「ですよね〜」となってたw)．&lt;/p&gt;
&lt;h2 id="自分の話"&gt;自分の話&lt;/h2&gt;
&lt;p&gt;Haskell で CLI を作るうえでの小話をした。 スライドはこれ． &lt;iframe src="//www.slideshare.net/slideshow/embed_code/key/FQE1QxbCST8kYi" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen&gt; &lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;実はどれも，既に記事におこしたことのあるネタだった．&lt;/p&gt;
&lt;ol type="1"&gt;
&lt;li&gt;コマンドライン引数
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getArgs&lt;/code&gt;・&lt;code&gt;GetOpt&lt;/code&gt;・&lt;code&gt;optparse-applicative&lt;/code&gt; について紹介&lt;/li&gt;
&lt;li&gt;&lt;code&gt;optparse-applicative&lt;/code&gt; + &lt;code&gt;extensible&lt;/code&gt; でサブコマンドも網羅性をチェック&lt;/li&gt;
&lt;li&gt;「&lt;a href="2018-05-10-make-cli-with-haskell-in-2018"&gt;オレ的 Haskell で CLI を作る方法 2018&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Alt. Prelude
&lt;ul&gt;
&lt;li&gt;Prelude 微妙だなって思ったら Alt. Prelude なパッケージを使ってみようという話&lt;/li&gt;
&lt;li&gt;具体的には愛用している RIO を紹介した&lt;/li&gt;
&lt;li&gt;「&lt;a href="2018-04-13-try-rio-1"&gt;rio ライブラリを試す その１&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Stack Template
&lt;ul&gt;
&lt;li&gt;よく使う依存パッケージやアプリのインターフェースの書き方がパターン化してきたら Stack Template 化しようという話&lt;/li&gt;
&lt;li&gt;Stack 1.9 から GitHub にあるテンプレートを参照できるようになった&lt;/li&gt;
&lt;li&gt;GitHub にあるテンプレートを出力する stack-tpls コマンドの紹介&lt;/li&gt;
&lt;li&gt;「&lt;a href="2018-10-14-collect-stack-templates"&gt;stack-templates を集める with GraphQL&lt;/a&gt;」&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Haskell を知ってる人にとってはあんまり面白くない話題だったかもしれないが，まぁまぁ(発言が)ウケていたのでよかった(?)．&lt;/p&gt;
&lt;h2 id="おしまい"&gt;おしまい&lt;/h2&gt;
&lt;p&gt;初心者がわかりやすく，玄人にもウケるネタってなんだろうね． 来年もやるかもしれないから考えておこう．&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/article&gt;
</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/09/30/Leica_M3</id><title type="text">Leica M3</title><updated>2018-11-15T10:47:47+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/09/30/Leica_M3"/><summary type="html">Lomography Konstruktor F・Diana Mini から始まったフィルムカメラ熱ですが一瞬で行くところまで行ってしまった感じです。 Leica M3。 現在まで続く M 型 Leica の始祖を買ってしまいました。1962年製の56歳です。 （この写真を撮ったレンズも Asahi Super Takumar 55mm F1.8 なので60年代のレンズです。） Leica 意識前 初めはフィルムカメラの入門機としていくつかの記事に紹介されていた Asahi Pentax SP か Olympus OM-1（M-1）かと考えて中古カメラ屋めぐりをしていました。 このころはひたす…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/06/12/090000</id><title type="text">コマンドラインがさらに便利になるfillinコマンドを作りました！</title><updated>2018-11-14T22:12:48+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/06/12/090000"/><summary type="html">fillinというコマンドラインツールを作成しました。 コマンドの一部を変数化して、別の履歴に保存しておけるツールです。 ステージング環境と本番環境のように、同じコマンドで複数の環境を切り替えるのに便利です。 zshの本 (エッセンシャルソフトウェアガイドブック)作者: 広瀬雄二,A5出版社/メーカー: 技術評論社発売日: 2009/06/17メディア: 単行本（ソフトカバー）購入: 11人 クリック: 126回この商品を含むブログ (37件) を見る どうして作ったの コマンド履歴って便利ですよね。 私はよくコマンド履歴からコマンドを選んで実行しています。 シェルに付属しているデフォルトの履…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2018/11/10/101541</id><title type="text">今日は Haskell Day 2018 の日です</title><updated>2018-11-10T18:01:57+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2018/11/10/101541"/><summary type="html">Haskell Day 2018 に来ましたので、自分用のメモを残しておきます。タグは #HaskellDay です。 作りながら学ぶHaskell入門 / @igrep さん 会場、懇親会のスポンサーは IIJ 様 (ありがとうございます！) mmlh コマンドで各自進める 課題の自動添削、たまにヒントを出してくれる わからなかったらメンターへ聞く Haskellを導入した話とHRRの紹介 / @khibinoさん 2008年 PerlからJavaを呼び出していた メンテナがいない、型検査がない Java, UNIXとの親和性があまりない 検討 =&gt; Common Lisp, OCaml, …</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/10/31/150056</id><title type="text">「名前の束縛」という名の束縛</title><updated>2018-10-31T18:20:45+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/10/31/150056"/><summary type="html">実用的なプログラミングにおいて、名前と概念を結びつける「束縛」はほぼ必須の概念である。しかし、その言葉には大きな誤解と混乱が根付いていた。 事の発端となったのは「Haskellにおいては、変数は値を代入するものではなく、値に束縛するものである」という議論である*1 *2。しかし、これは大きな誤解を孕んでいる。言葉の定義に立ち返ってその誤解を解いていこう。 束縛とバインディング 実は「束縛」には二つの意味がある。一つは、数学的な意味での変数の束縛*3、もう一つは、識別子と実体の結合という意味での束縛*4だ。 前者は変数の導入と言い換えることもできる。ラムダ計算におけるラムダ抽象と変数の関係もこれ…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/05/17/180426</id><title type="text">Kubernetes Meetup Tokyo #10 で Pod の Preemption について話してきました</title><updated>2018-10-23T16:31:12+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/05/17/180426"/><summary type="html">だいぶ日が空いてしまって今更ですが、先日行われた Kubernetes Meetup Tokyo #10 で、v1.8*1 から導入された新機能 Preemption について発表してきました。 Preemption は、Kubernetes クラスタのリソースが不足した際に、優先度が低い Pod を追い出して優先度が高い Pod の稼働を保証する仕組みです。 当日は時間が不足気味だったので、説明不十分だったかなと思われる点についていくつか補足しておきます。 Priority の指定について スライド中では詳しく説明しませんでしたが、ユーザは直接 Pod（や Deployment 中の Pod…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2018/10/15/100000</id><title type="text">Mackerelのグラフを端末で描画するコマンドmkrgを作りました</title><updated>2018-10-17T23:52:07+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2018/10/15/100000"/><summary type="html">Mackerelのグラフを端末で見れたらいいなと思ったので作ってみました。 github.com 使い方 $ go get -u github.com/itchyny/mkrg/cmd/mkrg $ mkrg コマンドを叩くと、そのホストのメトリックを取ってきてグラフを表示します。 何も考えずにコマンドを叩けば、システムメトリックのグラフを表示してくれます。 私はiTerm2を使っているので、とりあえずiTerm2では画像を表示できるようにしています。それ以外の端末では点字を使って頑張って表示します。 Mackerel サーバ監視[実践]入門作者: 井上大輔,粕谷大輔,杉山広通,田中慎司,坪内…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/10/02/203205</id><title type="text">猫でもわかる Vertical Pod Autoscaler</title><updated>2018-10-02T20:32:05+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/10/02/203205"/><summary type="html">先日行われた Kubernetes Meetup Tokyo #13 で、Vertical Pod Autoscaler (VPA) について発表してきました。 VPA は、各コンテナの Resource Request の値を自動的に調整してくれるコンポーネント群です。必要とするリソース（CPU、メモリ）量があらかじめ推測しにくいアプリケーションに対して、実績に基づいてそれらしい値を決めたい場合に効果を発揮します。 本記事ではスライドの補足として、VPA が動作する流れをクラスタ上での実際の挙動を通じて確認し、また内部実装についても踏み込んで解説します。 なお、本記事中で引用している仕様やソ…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/09/26/191231</id><title type="text">elm/time の使い方</title><updated>2018-09-26T19:12:31+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/09/26/191231"/><summary type="html">はじめに 先日、Elm v0.19 がリリースされました。公式ライブラリのリポジトリが elm-lang から elm に変更され、その中身も大きく再構成されています。 本記事では、これらの変更のうち特に時刻や日付の扱いに関する部分について、新しい API の使い方を含めて簡単に解説します。 v0.18 における時刻の扱い v0.18 では、時刻を扱う機能は標準パッケージ elm-lang/core の中で提供されていました。時刻を扱う Time モジュールと日付を扱う Date モジュールで、それぞれデータ型や関数が定義されているのが特徴です。 なお、旧バージョンのライブラリは現在 Elm …</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2018/09/15/113101</id><title type="text">inline-java パッケージを WSL へインストール</title><updated>2018-09-15T11:31:01+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2018/09/15/113101"/><summary type="html">ハマってガチャガチャしたので間違いあるかもしれないけどメモ。 まずjavaをインストール。入れるのは default-jdk のほうがいい気もする。 $ sudo apt install openjdk-9-jre-headless $ sudo apt install openjdk-9-jdk-headless jvm パッケージを入れるのに必要と思われる環境変数。 $ export JAVA_HOME=/usr/lib/jvm/java-9-openjdk-amd64 $ export LD_LIBRARY_PATH=/usr/lib/jvm/java-9-openjdk-amd64/l…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2018/09/14/195301</id><title type="text">今日は Roppongi.pm #1 の日です</title><updated>2018-09-14T21:20:56+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2018/09/14/195301"/><summary type="html">六本木.pm に来ていますので、適当にメモします。 オープニング 吉祥寺.pm + Okinawa.pm = 六本木.pm 六本木で Okinawa.pm やればいいや 飲食自由、フリードリンク ハッシュタグは #roppongipm ラクダがピンクだった頃の思い出 / @yoshiyuki_kondo さん Cプログラマのためのアルゴリズムとデータ構造、 Javaプログラマのためのアルゴリズムとデータ構造、yaccによるCコンパイラプログラミング なども書いてます Perl4の時代はラクダ本もリャマ本もピンク 訳本には Larry Wall のサインが入っている 1994年の 5.0 で青い…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/konstruktor-f</id><title type="text">プラモデルカメラ Lomography Konstruktor F</title><updated>2018-09-13T16:25:09+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/konstruktor-f"/><summary type="html">本来はフジヤカメラに行くことが目的だった。 「カメラバカにつける薬 in デジカメ Watch」でも取り上げられてて、その前から気になってたのもあって中野に行った。 特に買うつもりもなかったので雰囲気だけ知れればいいやというようにそそくさと出たのだが、ジャンク館が中野ブロードウェイにあるということで行ってみた。 そういえば中野ブロードウェイも気になってたんだし一石二鳥だった。 するとコイデカメラがあった。Lomography Konstruktor F があった。 動くしくみを理解しながら自分で組み立てるのが好きでカメラも好きな自分が惹かれるのは当然という感じだった。 そのときは散財する予定は…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/04/27/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_4_%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%9F</id><title type="text">技術書典 4 にサークル参加した</title><updated>2018-09-12T13:03:31+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/04/27/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_4_%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%9F"/><summary type="html">4月22日に開催された『技術書典 4』にサークル参加してきました。 techbookfest.org 技術書典は1と2に個人で参加して3は会社として参加して今回の4は会社と個人と2サークルにかかわっていました。 超技術書典を抜くと皆勤です。 個人サークル 既刊として『遠回りして学ぶ Yesod 入門』を増刷し、新刊は『手続き Haskell』を持っていきました。 doujin.kakkun61.com doujin.kakkun61.com 数字 売り上げ部数は、どんぶり勘定ですが（特に Yesod 本のダウンロードカードが完全に記憶による）下記の通りとなりました。 Yesod 本 紙 + P…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2018/09/12/102822</id><title type="text">"アルゴリズムクイックリファレンス" のノート (2)</title><updated>2018-09-12T10:28:22+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2018/09/12/102822"/><summary type="html">p.4 の貪欲法。素朴なアルゴリズムよりこちらの実装のほうが楽に思える。 github.com 前回の遅いアルゴリズムとの速度比較。 variance introduced by outliers が大きくていいのかは気になる。貪欲法の方が 2,000 倍以上速いので、むしろ前回の slow の実装に問題がありそう。 $ stack exec bench-convexhulls -- --output=convexhull.html points generated fromList [Point 2.1377835882015472e-2 0.37675969687894406,Point …</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2018/09/08/163549</id><title type="text">"アルゴリズムクイックリファレンス" のノート</title><updated>2018-09-08T16:38:48+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2018/09/08/163549"/><summary type="html">p.3 の convex hull の素朴解。 https://github.com/hiratara/hs-nutshell-algorithm-examples/blob/master/src/Main.hs 正しいかわからないので、plotしておく(案の定バグってたので修正してある)。 道具は datahaskell に従った。具体的には、乱数に mwc-probability 、 plot に Chart-diagrams を利用。作ったsvgファイルをブラウザで見るために、 stack install wai-app-static して warp によってweb serverを立ち上…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/09/01/%E3%80%8EYesod_%E5%85%A5%E9%96%80%E3%80%8F%E5%95%86%E6%A5%AD%E8%AA%8C%E5%8C%96</id><title type="text">『Yesod 入門』商業誌化</title><updated>2018-09-01T08:26:27+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/09/01/%E3%80%8EYesod_%E5%85%A5%E9%96%80%E3%80%8F%E5%95%86%E6%A5%AD%E8%AA%8C%E5%8C%96"/><summary type="html">同人誌で発売していた『遠回りして学ぶ Yesod 入門』がこのたびインプレス R&amp;D より『Haskell で作る Web アプリケーション 遠回りして学ぶ Yesod 入門』として商業誌化されることになりました。 www.impressrd.jp 同人誌版からの変更点は主に、 日本語が読みやすくなった 対応バージョンが上がった 点です。章が増えたり減ったりはしていません。あと、表紙がかわいくなりました。かわいい。 商業誌では Amazon と honto にてオンデマンド印刷の紙の書籍も購入できるようになっています。紙はこれまで即売会でしか販売していなかったので初めて通信販売で買えるようにな…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/09/01/%E5%88%9D%E3%83%95%E3%82%A3%E3%83%AB%E3%83%A0</id><title type="text">初フィルム</title><updated>2018-09-01T07:50:07+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/09/01/%E5%88%9D%E3%83%95%E3%82%A3%E3%83%AB%E3%83%A0"/><summary type="html">厳密にいうと小学校の旅行などで「写ルンです」を使ったりしたことがあるので、初フィルムじゃないんだけど自分で装填するものとしては初ということで。 中野のコイデカメラで自分でプラモデルのように組み立てるカメラを見つけて「なんだこれは！？」と調べていたら Lomography にあてられてどうしても自分でも撮りたくなって中古の Lomography Diana Mini を買った。 それで2本撮ったので現像・スキャンしてもらってきた。（本当はもう1本もあったんだけどダメにした。） 70枚撮った中で奇跡的に手ぶれもなくピントも合っている1枚。 鏡筒の向かって左のレバーがシャッターボタンなんだけどこれが…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2018/08/30/085503</id><title type="text">"The Elements of Statistical Learning" のノート</title><updated>2018-08-30T08:55:03+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2018/08/30/085503"/><summary type="html">The Elements of Statistical Learning . chap. 2 supervised learning と unsupervised learning inputs predictors, independent variables, features とも言う outputs responses, dependent variables, targets とも言う quantitative qualitative : 有限集合で表現される classes, categorical, discrete, factors とも言う regression : quan…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/08/23/211858</id><title type="text">詳解！ Elm における Fuzzing</title><updated>2018-08-23T21:18:58+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/08/23/211858"/><summary type="html">先日行われた We Are JavaScripters! @23rd で、Elm のテストフレームワーク elm-test に搭載されている Fuzzing 機能について発表してきました。 Fuzzing を利用するとテストデータを自動で生成することができるため、例えば「encode と decode を行うと元に戻る」といった、入力に依存しない 関数の性質に関するテスト をより簡単かつ効率的に実装することができます。 さらに、後で詳しく解説する通り、elm-test の Fuzzer にはバグが起こりやすいエッジケースを集中的に生成してくれるというメリットもあります。 elm-test の使…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/08/16/Windows_%E3%81%A7_haskell-ide-engine_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B</id><title type="text">Windows で haskell-ide-engine をビルドする</title><updated>2018-08-16T17:34:50+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/08/16/Windows_%E3%81%A7_haskell-ide-engine_%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B"/><summary type="html">手順 1. ソースコード取得。 git clone git@github.com:haskell/haskell-ide-engine.git 2. Unicode を扱う ICU の古いバージョンが要るので取得。 自分の使うバージョンの text-icu の changelog を見て、必要な ICU のバージョンを探す。執筆時点では 53 だった。 http://site.icu-project.org/download/53#TOC-ICU4C-Download 任意の場所に展開する。以降、展開先の箇所を $icu と表記する。 $icu\bin64 にある dll の名前を変える。（要…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/08/01/055608</id><title type="text">July Tech Festa 2018 で分散システムの検証について話してきました / #JTF2018</title><updated>2018-08-01T13:56:39+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/08/01/055608"/><summary type="html">先日行われた July Tech Festa 2018 で、モデル検査を使った分散アルゴリズムの検証について発表してきました。 前半はオートマトンによるシステムの記述と検査の基礎について、後半は三種類のツール SPIN、TLA+、P による記述方法の紹介、といった内容です。 後半のソースコード紹介が散文的な感じになってしまって、いまいちメリットが伝わらない感じだったので、次回があればもっとエモいスライドにしようと思います。 分散アルゴリズムの形式化 定理証明による検証 今回の話の流れとして「分散システムにはモデル検査が有効」と述べていますが、必ずしも定理証明が分散システムの検証に向かないという…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/08/01/%E5%85%A5%E7%A4%BE</id><title type="text">入社</title><updated>2018-08-01T00:00:56+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/08/01/%E5%85%A5%E7%A4%BE"/><summary type="html">本日付けで IIJ に入社します。 職業 Haskeller になる……はず。</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/07/31/%E9%80%80%E8%81%B7</id><title type="text">退職</title><updated>2018-07-31T22:30:05+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/07/31/%E9%80%80%E8%81%B7"/><summary type="html">2013年に新卒で入社した KLab を今日付けで退職しました。</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2018/07/21/114826</id><title type="text">LTS-12.1でhpack-convertコンパイルできないんすよねー</title><updated>2018-07-21T11:48:26+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2018/07/21/114826"/><summary type="html">そんなこともあろうかと、forkして lts-12.1 ブランチ用意しておきましたので。 github.com まあ、ただの変換ツールなので、古いLTSでビルドしても構わない気はするけど、新しいマシンだと ghc インストールさせたりするのだるかったので。 ということで、手元のリポジトリももろもろ hpack に乗り換えようとしてるのだった。 https://github.com/hiratara/hs-server-starter/pull/4 https://github.com/hiratara/hs-reqcatcher/pull/2 https://github.com/hirata…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2018/07/14/195255</id><title type="text">Dhallによるリッチな設定ファイル体験</title><updated>2018-07-14T19:52:55+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2018/07/14/195255"/><summary type="html">(この記事のレギュレーション: lts-11.9) Dhall という設定記述用言語があり、使ってみたところ良い感じだったので紹介します。 なお、この記事は先日某所で発表したものの拡大版になります。 speakerdeck.com Dhallとは何か Dhallについて短かく表現するなら公式サイトの以下の説明が分かりやすいです。 You can think of Dhall as: JSON + functions + types + imports データ表現にプログラマブルさと静的な検査とファイルのインポートを加えたものというわけです。 まだ開発中のためかあまりアピールされていませんがツー…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2018/07/14/175016</id><title type="text">Haskell入門のサンプルコードのLTS-12.0対応 </title><updated>2018-07-14T17:50:16+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2018/07/14/175016"/><summary type="html">つい半年前に最新のLTSへ対応したばかりなのに、気がつくと LTS-12.0 が出て、 ghc-8.4 を Stack から使えるようになった。コミュニティが活発で、非常にありがたいことである。 ということで、 Haskell入門 のサンプルもLTS-12.0に対応させたブランチを用意した。と言っても、いくつか Stackge の管理下から外れてしまったパッケージが出てきたのを調整したくらいで、コードは何も変更していない。 github.com さらに素晴らしいことに、これらのコードはすべてWindows 10の最新の WSL 上で動くことを確認できた。macOS上で試すのと同様に、 Wind…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/11/17/090000</id><title type="text">zshの標準エラー出力の色を赤くする</title><updated>2018-06-29T14:22:55+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/11/17/090000"/><summary type="html">[追記]以下の方法は良くないようです。必ず、このエントリー最後の「stderredを使う」を参照してください[/追記] 最近stderrを赤くするように設定したら、コマンドの出力がかなり見やすくなりました。 設定はこんな感じに書いてます。 zmodload zsh/terminfo zsh/system color_stderr() { while sysread std_err_color; do syswrite -o 2 "${fg_bold[red]}${std_err_color}${terminfo[sgr0]}" done } exec 2&gt; &gt;(color_stderr) fg…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2016/12/04/120000</id><title type="text">珍しいSHA1ハッシュを追い求めて</title><updated>2018-06-29T08:55:02+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2016/12/04/120000"/><summary type="html">「SHA1ハッシュってあるだろう？」 放課後、いつものように情報処理室に行くと、高山先輩が嬉しそうな顔でそう言った。 「ええ、SHA1、ありますね」 「SHA1って何桁か覚えているかい？」 「えっと…」 一年下の後輩、岡村が口を開いた。 「50桁くらいはありましたっけ…？」 先輩はパソコンに向かって何かを打ちはじめた。 現在、情報部の部員は三人しかいない。部長の高山先輩と、二年の自分と、後輩の岡村だ。いや、正確に言うと、先輩の学年にはもう少しいたのだが、もうほとんど部室に来ることはなくなってしまった。無理もない、この季節になると先輩たちは受験勉強で忙しくなる。 「例えば、こういうふうに… 適当…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2018/06/25/130000</id><title type="text">はてな・ペパボ技術大会 #4 〜DevOps〜 @京都 で登壇しました</title><updated>2018-06-25T13:40:55+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2018/06/25/130000"/><summary type="html">先日 6/23 に技術イベント「はてな・ペパボ技術大会 #4 〜DevOps〜 @京都」で登壇・トークセッションに参加しました。 hatena.connpass.com 普段の業務でDevOpsという言葉を使うことはありません。 しかし、DevOpsのあり方を見直した結果が現状の体制や仕事のフローであったり、あるいはこれからやろうとしていることにつながっているのだと思います。 技術の進歩によりDockerやGraphQLといった、レイヤー間の共通言語が発達する中で、ソフトウェア間あるいはチーム間が疎結合になっていくことはよいです。 一方でそういう技術で解決できない場面も残っていくのだろうなと思…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/06/linuxcygwin-unzip-error-invalid.html</id><title type="text">[linux][cygwin] unzipコマンドで "error:  invalid compressed data to inflate" というエラーメッセージがでたら？</title><updated>2018-06-06T01:11:48.468+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/06/linuxcygwin-unzip-error-invalid.html"/><summary type="text">zipアーカイブの中に長さが0のファイルが含まれていると、unzipコマンドでは以下のようなエラーメッセージが表示されて、解凍することができません。アーカイブが壊れていなくてもエラーになります。
% unzip hoge.zip
  error:  invalid compressed data to inflate

このような場合には、-tzipオプションを指定して7zコマンドを実行することで、エラーを回避して解凍できます。パスワード保護されているzipアーカイブも問題なく解凍できました。

% 7z x -tzip hoge.zip


manページによると、以下のフォーマットがサポートされていて、デフォルトは7zとのこと。

The program supports 7z (that implements  LZMA  compression  algorithm),  
ZIP</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/06/03/195024</id><title type="text">日持ちする直列化のためのライブラリ「winery」</title><updated>2018-06-04T00:57:20+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/06/03/195024"/><summary type="html">人類は、酒と共に発展してきたと言っても過言ではない。穀物や果実などを酒に変換することにより、糖を除く栄養を保ったまま、高い保存性を持たせることができる。酒は人々の喉を潤し、時に薬として使われた。 プログラミングにおいても、終了したら消えてしまうデータを、保存性の高いバイト列に変えたい場面がよくある。そのような操作を直列化(シリアライズ)と呼び、いくつかのアプローチが存在する。 コード生成タイプ Protocol Buffers、cap'n'protoなど データの構造を記述する言語(スキーマ)から、データ構造およびシリアライザ・デシリアライザをコードごと生成する。幅広い言語で使える一方、作れる…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2018/06/02/181649</id><title type="text">今日は第15回 Cloud Application Platformアーキテクチャの日です</title><updated>2018-06-02T18:16:49+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2018/06/02/181649"/><summary type="html">今日は第15回 Cloud Application Platformアーキテクチャの日です 第15回 Cloud Application Platformアーキテクチャ にお邪魔しています。 Cloud Application Platformアーキテクチャ / asami224 さん ディスカッション用のスライドです Cloud Application Platformのコンセプト Web DSL DSLという言葉は聞かなくなったが、また戻ってくる アプリバブルは終わった。WEBに戻ってきた WEB開発はGUI開発の歴史を繰り返しそう JSは型がないのでバグがとれない。 lint は限界があ…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2018/05/26/144115</id><title type="text">Dist::Milla で cpanfile に書かれた依存モジュールの解決</title><updated>2018-05-26T15:42:39+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2018/05/26/144115"/><summary type="html">チュートリアル にも書いてないし、やった記憶もない。昔からこうだっけ？ $ milla listdeps | cpanm 依存モジュールが入ったら、 milla build とか milla test とか。 Test::Pod とか必要だったら、 listdeps に --author とかつければ良い。</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/05/24/213324</id><title type="text">We Are JavaScripters! @19th で Haskell 製フレームワーク Miso について話してきました</title><updated>2018-05-24T21:33:24+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/05/24/213324"/><summary type="html">先日行われた We Are JavaScripters! @19th で Haskell によるフロントエンド開発について発表してきました。 Elm の代わりにフレームワーク Miso を使うことで、クライアントサイドとサーバサイドの両方を Haskell で実装することができる、という内容です。 github.com なお今回のプレゼンでは、参加者のほとんどは Haskell に馴染みがないだろう*1ということもあって、実装上の詳細にはほとんど触れませんでした。 Elm と Miso の詳しい比較、さらに Servant と組み合わせた Isomorphic なアプリの作り方については、記事…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2018/05/20/183734</id><title type="text">windowでGCPのcloud shellを使う</title><updated>2018-05-20T18:37:34+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2018/05/20/183734"/><summary type="html">windows の chrome で GCP の cloud shell を使おうとすると、 Ctrl-t, Ctrl-n, Ctrl-w あたりをブラウザのショートカットに食われて発狂しそうになって困ってたんだけど、 SSH for Google Cloud Platform で解決できることを知った。 ちなむと gcloud alpha cloud-shell も試したんだけど、puttyが Server refused our key とか言い出して何もできなかった。実にアルファ版らしい。 cloud shell は tmux をデフォルトで有効にしてくれるのだけど、デフォルトではステー…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2018/05/18/205101</id><title type="text">JAWS DAYS 2018 で形式手法による IAM の検証について話してきました</title><updated>2018-05-18T20:51:01+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2018/05/18/205101"/><summary type="html">だいぶ日が空いてしまって今更ですが、先日行われた JAWS DAYS 2018 で登壇してきました*1。モデル検査器 Alloy を使って AWS の IAM を検証してみるという内容です。 形式手法 × AWS というテーマではこれまでにもいくつかのイベントで発表していますが、題材はネットワーク関連の検証がメインでした。 ccvanishing.hateblo.jp ccvanishing.hateblo.jp ccvanishing.hateblo.jp さすがに同じことばかり話していても芸がないので、今回は新ネタとして IAM を投入してみました。CFP も Security Slot …</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/07/31/090000</id><title type="text">ptraceシステムコール入門 ― プロセスの出力を覗き見してみよう！</title><updated>2018-05-14T18:45:57+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/07/31/090000"/><summary type="html">他のプロセスを中断せずに、その出力をミラーリングして新しくパイプで繋ぐ、そんなことはできるのでしょうか。 straceやgdbといったコマンドは一体どういう仕組みで動いているのでしょうか。 ptraceシステムコールを使い、プロセスが呼ぶシステムコールを調べて出力を覗き見するコマンドを実装してみたいと思います。 ptraceシステムコール Linuxを触っていると、いかにプロセスを組み合わせるか、組み合わせる方法をどれだけ知っているかが重要になってきます。 パイプやリダイレクトを使ってプロセスの出力結果を制御したり、コードの中からコマンドを実行して、終了ステータスを取得したりします。 プロセス…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2018/05/11/131846</id><title type="text">WSLのubuntuにDist::Millaを入れる</title><updated>2018-05-11T13:18:46+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2018/05/11/131846"/><summary type="html">WSL のubuntuにDist::Millaを入れたときのメモ。plenv、perl5.26.1、cpanmくらいまではすんなり入った。 割と試行錯誤して入れたから、他にも必要かも。 $ perl -v This is perl 5, version 26, subversion 1 (v5.26.1) built for x86_64-linux ..略.. # Dist::Zilla::Plugin::LicenseFromModule からの依存が漏れてそう $ cpanm JSON # SSL関連 $ sudo apt install libssl-dev $ sudo apt in…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2018/04/10/100000</id><title type="text">バイナリエディタを作りました！</title><updated>2018-04-15T17:59:13+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2018/04/10/100000"/><summary type="html">バイナリエディタを作りました。 インストールは go get -u github.com/itchyny/bed/cmd/bed でできると思います。 なぜ作ったのか 私は昔からファイルフォーマットに興味があり、画像ファイルやPDFファイルのフォーマットを調べるのが好きでした。 最近も圧縮ファイルのフォーマットを趣味で調べたりしています。 コンパイラ技術にも興味があり、ゆくゆくは実行ファイルを生成したりしたいなという思いもあります。 バイナリファイルをエディットするにはバイナリエディタが必要となるわけですが、自分の手に馴染むUIを持つエディタがありませんでした。 私は実はVimというエディタが…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2018/03/31/145715</id><title type="text">.NETがむずかしい</title><updated>2018-03-31T14:57:15+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2018/03/31/145715"/><summary type="html">MSのエコシステムがよくわからなくていろいろ調べている。調べたのはこんなところ。 .NET のランタイム環境は複数ある Windows では、.NET Framework と .NET core macOS では、mono と .NET core mono はCLIで扱える ( mono コマンド) .NET core はCLIで扱える( dotnet コマンド) というか、それぞれにコンパイラとかツールセットが付いてるんだろうけど、環境によってコマンド名などは一緒なんだろうか？ Visual Studio では .NET Framework のアプリを作れる そして .NET core も作…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2016/12/31/210000</id><title type="text">2016年を振り返って</title><updated>2018-03-28T10:48:21+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2016/12/31/210000"/><summary type="html">会社は二年目に入り業務にも慣れ、ある程度まとまった仕事を任せられるようになりました。 携わっているサービスのコードに詳しくなり、リファクタリングの方向性を示して改善を進めてきました。 難しい障害も乗り越えながら、引き継いだ手綱を何とか制御できるようになってきたという所感です。 今年は18記事書きました。特に反響の大きかったエントリーは次の3つの記事でした。 内容の方向性もバラバラであまり何したいかよく分からなくなっていますね。どういう技術を学んでいくか悩んでいた一年だったと思います。ブログには書いていませんが、Vimのソースコードをいじったりmrubyのコードを読み込んだりしていた時期もありま…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2016/08/23/110000</id><title type="text">JavaScriptのsetTimeoutをログに出す</title><updated>2018-03-28T10:48:09+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2016/08/23/110000"/><summary type="html">setTimeoutは難しい。いつ呼ばれるかよく分からないし、ライブラリーを使うとそのライブラリーがsetTimeoutを使いすぎてしまう。よく分からなかったけどsetTimeoutすると動くからそうしていた、んだけど実はタイミングの関係で偶然うまく動いているように見えているだけだった、なんてこともよくある。 ウェブアプリケーションの描画が遅い。「なぜか遅い」が、処理を丁寧に追っていっても手がかりがつかめないということがある。色々な方法を駆使した後に、なぜかsetTimeoutの発火が遅いということにたどり着いた。どれくらい遅いか。 window.setTimeout = (function(…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/03/06/100000</id><title type="text">LLVM APIを使ってみよう！ 〜 Brainf**kコンパイラをIRBuilderで書き直してみた 〜</title><updated>2018-03-28T10:44:28+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/03/06/100000"/><summary type="html">先日LLVMの入門記事を書きました。 clangが吐くLLVM IR (Intermediate representation, 中間表現) を頼りに、Brainf**kのコンパイラを書いてみました。 itchyny.hatenablog.com この記事で書いたコードでは、直接printfでLLVM IRの命令を出力していました。 このステップを踏むことで、LLVM IRの命令をどう調べればいいかについて身についたと思います。 しかし、この「コンパイラ」は次のような問題がありました。 bf2llvmコマンドが出力するのがLLVM IRのために、lliやllcといったLLVM IRのランタイム…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/02/27/100000</id><title type="text">LLVMを始めよう！ 〜 LLVM IRの基礎はclangが教えてくれた・Brainf**kコンパイラを作ってみよう 〜</title><updated>2018-03-28T10:33:19+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/02/27/100000"/><summary type="html">コンパイラを作ってみたいと思っていても、アセンブリ言語はよくわからない。 パーサーみたいなコードは書いたことがあるけれど、コード生成の処理はさっぱりだ。 実行ファイルをバイナリエディターで見るとかなにそれ怖い。 そんな私なのですが、LLVMに興味を持ち始めています。 SwiftやRust、あるいはEmscriptenなど、近年注目されている言語やコンパイラ技術の中枢にはLLVMがあります。 アセンブリはよく分からなくてもLLVMを使いこなせるようになれば、マルチプラットフォームで実行ファイルを生成できる言語処理系を作るのではないか。 コンパイラ作ってみたいな、LLVMを使ってみようかなと思って…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/03/14/159265</id><title type="text">円周率の16進数表現100億桁目を求めてみた！ ― 円周率の世界記録をどのように検証するか ―</title><updated>2018-03-28T10:31:51+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/03/14/159265"/><summary type="html">あなたは円周率を何桁言えますか。3.14159…という、あの数字です。 円周率の小数部分は無限に続き、循環することもありません。 古来より、数学者は円周率の値を様々な幾何学的な近似や公式を用いて計算してきました。 その桁数は計算機の発明により飛躍的に伸び、収束の速い公式の発見や効率の良いアルゴリズムの発明などによって加速してきました *1。 5年前、私がまだ学生だった頃、円周率1億桁の計算に挑んだことがありました。 私にとって高精度計算の初めての挑戦で、様々な試行錯誤で苦労したのをよく覚えています。 itchyny.hatenablog.com 2017年現在、円周率計算の世界記録は22兆桁で…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/04/21/200000</id><title type="text">VimプラグインのTravis CIテストを複数のVimのバージョンで動かそう</title><updated>2018-03-28T10:30:13+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/04/21/200000"/><summary type="html">Vimプラグインにテストがあるのはあたりまえ。 そういう空気になってきたのはここ3年くらいのことでしょうか。 私自身、昔はあまりテスト文化に慣れておらず、「Vimプラグインみたいな小さなスクリプトにテストなんているのか？自分のプラグインは普段から使う、バグっていたらすぐ気がつくからテストなんていらないでしょ」と思っていました。 しかし、そういうテストのない自作プラグインがどんどん増えていき、3年4年と経ってしまうと自分のプラグインのコードを触りにくくなってきました。 昔はあまりVimプラグインの書き方に慣れていなかったので、酷いコードが絡み合っているのだけど、普段使う分には普通に便利なプラグイ…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/05/30/223000</id><title type="text">lightline.vimのREADME.mdを書き直しました</title><updated>2018-03-28T10:29:32+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/05/30/223000"/><summary type="html">lightline.vimはVimのステータスラインをいい感じにしてくれるプラグインです。 作って四年弱経つんですね。 おかげさまで多くのユーザーさまに使っていただいています。 itchyny.hatenablog.com github.com このREADME.mdを最近書き換えました。 ……… それだけかいな！って感じなのですが、いろいろと大変でした… 主に精神的に… つらい… プラグインを作った勢いと使って欲しいという強い思いで、プラグインを作ってすぐにREADME.mdをかなり詳しく書いていた そのために当初の設計や実装時の思いが強く出ていたが、初めてプラグインを触る人にとっては読みに…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/12/31/170000</id><title type="text">2017年を振り返って</title><updated>2018-03-28T10:27:47+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/12/31/170000"/><summary type="html">今年は仕事で関わっているプロダクトが大きな転換期を迎えて、様々な経験ができました。 ミドルウェアを自ら作り上げ、データをオンラインで移行し、運用を始めるというのはなかなか経験できないことだと思います。 サービスは以前より安定し、穏やかな年末を過ごしています。 今年は初めてカンファレンスで登壇しました。 慣れないことばかりで色々と戸惑いましたが、沢山の方に発表を聞きに来ていただいて嬉しかったです。 マネージドサービスを組み合わせて1つのソフトウェアを作り、それをサーバーレスミドルウェアとして抽象度を上げて捉えることができるようになったもの、このカンファレンスに参加してよかったことでした。 今年は…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2018/02/11/185306</id><title type="text">HaskellでDiscordのBotを作る</title><updated>2018-03-09T13:45:13+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2018/02/11/185306"/><summary type="html">Discordはゲーミング向けのテキストチャットと音声通話を兼ねるプラットフォームであり、「テキストチャンネル」と「ボイスチャンネル」の二種を好きなだけ作ることができる。もちろん音声を全チャンネルに常時垂れ流すわけには行かないので、通話するにはボイスチャンネルに参加するという手順を踏む必要がある。しかし、例えば誰かがやっているゲームに混ざろうとしてボイスチャンネルに参加しても、チャンネル外のユーザーにはいかなる通知も発生しないため、気づかれないままのことがよくある。 そこで、ボイスチャンネルに参加したとき、テキストチャンネルにその旨を投稿するボットを用意すれば、気軽に通話の合図を送れる。全員に…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2018/03/07/084537</id><title type="text">F#とUnityを学んでいる</title><updated>2018-03-07T08:45:37+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2018/03/07/084537"/><summary type="html">せっかくWindowsマシンを使っているのだからMSの開発環境のエコシステムにどっぷり浸かってみたいと常々思っていたのだが、ようやく最近触り始めた。 まず、F#については Beginning F# 4.0 を読んでいる。F#はOCamlをベースにしていると聞いていてずっと興味があった言語。改めて学んでみると、あー、Haskellって後発の強みでsyntax改善されている部分も多いんだなあという印象は受ける。が、まだまだ序盤の面白くない部分なので、もっと読み進めるとがらっと印象が変わりそう。 www.apress.com UnityはWindowsで触る必要はないんだろうけど、C#つながりで興味…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/03/haskell-http-clienthaskellhttp.html</id><title type="text">[haskell] http-clientライブラリを利用してHaskellでHTTPクライアント機能を実装する</title><updated>2018-03-05T09:34:57.715+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/03/haskell-http-clienthaskellhttp.html"/><summary type="text">Haskellでは、http-clientライブラリを用いることで、HTTPクライアント機能を簡単に実装できます。http-client以外にも何種類かライブラリがありますが、今回はhttp-client, http-client-tlsの機能と使い方をまとめておきます。

本エントリで紹介するhttp-client, http-client-tlsライブラリの機能：

単純なHTTP GETリクエスト

主要な型の説明 

Managerのカスタマイズ 

https
proxy設定 
タイムアウト値の設定

Requestのカスタマイズ

ベーシック認証 
リクエストヘッダ 

Responseの操作

ストリーミング受信 
レスポンスヘッダの参照 

エラーハンドリング 






単純なHTTP GETリクエスト
{-# LANGUAGE OverloadedStrings #</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2018/03/03/095904</id><title type="text">今日はYAPC::Okinawa 2018 ONNASONの日です</title><updated>2018-03-03T19:16:58+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2018/03/03/095904"/><summary type="html">YAPC::Okinawa 2018 ONNASON に参加していますので、自分用のメモを残しておきます。 オープニング / @codehex さん めんそーれ！ A会場は飲食禁止 モバイルルータは電源切ってね 赤いリストバンドの人を撮影しないで JPAの行動規範を守ってね #yapcjapan にて案内あるよ #yapcjapanA, #yapcjapanB 懇親会受付は12:00からです ベストトーク章に投票してね リゾートYAPCをお楽しみください 万国之津梁 / @chasbar さん London Perl Workshop 2017 へ参加した YAPCより少し小さいイベント。国単…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2018/03/03/174252</id><title type="text">スライド公開: YAPC::Okinawa 2018 事業を支えるPerl</title><updated>2018-03-03T17:42:52+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2018/03/03/174252"/><summary type="html">スペシャルセッションで、弊社のプロダクト開発の現場について話してきました。</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/12/13/170000</id><title type="text">Go言語のsyscall.Sysctlは最後のNULを落とす</title><updated>2018-03-02T17:07:49+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/12/13/170000"/><summary type="html">カーネルのパラメータを引いたり設定したりする時に便利なのが sysctl コマンドです。 $ sysctl kern.ostype kern.ostype: Darwin このコマンドのシステムコールをGo言語から叩いて、OSの種類を引いてみましょう。 func main() { ret, _ := syscall.Sysctl("kern.ostype") fmt.Printf("%s\n", ret) } Darwin 問題ないですね。 数字を返すものを叩いてみましょう。 $ sysctl machdep.cpu.feature_bits machdep.cpu.feature_bits:…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/12/23/082635</id><title type="text">猫でもわかる rkt + Kubernetes</title><updated>2018-02-28T00:36:58+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/12/23/082635"/><summary type="html">このエントリは Kubernetes Advent Calendar 2017 の 23 日目の記事です。ちなみに昨日は takezaki さんの「GCBを利用したContinuous Delivery環境」でした。 LT で使用したスライド 先日、市ヶ谷Geek★Night #16 の 10 分 LT 枠で、CoreOS 社によるコンテナ実装 rkt とその Kubernetes 連携について発表してきました。今回のエントリはこの LT の内容を補足しつつ、実際に手を動かして rkt を試せるような構成にしてあります。 Hello, rkt! rkt は、Docker の対抗馬として Cor…</summary></entry><entry><id>https://kurokawh.blogspot.com/2018/02/haskell-stack-install-cryptoniteno-such.html</id><title type="text">[haskell] stack install cryptoniteがno such instruction: `rdrand %r8'エラーで失敗する問題の対処方法</title><updated>2018-02-25T15:34:07.378+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2018/02/haskell-stack-install-cryptoniteno-such.html"/><summary type="text">手許の環境（mac）で、cryptoniteライブラリのビルドがエラーになる問題が発生したが、ネットの情報を元に解決できたので、その症状と手順をblogに残しておく。



エラーの症状：
stack install cryptoniteで以下のようなエラーが発生。
% stack install cryptonite
--  While building custom Setup.hs for package cryptonite-0.24 using:
      /Users/xxx/.stack/setup-exe-cache/x86_64-osx/Cabal-simple_mPHDZzAJ_2.0.1.0_ghc-8.2.2 --builddir=.stack-work/dist/x86_64-osx/Cabal-2.0.1.0 build --ghc-options " </summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/12/25/%E3%81%AA%E3%81%9C_Haskell_%E3%81%8C%E5%A5%BD%E3%81%8D%E3%81%AA%E3%81%AE%E3%81%8B</id><title type="text">なぜ Haskell が好きなのか</title><updated>2018-02-25T14:53:18+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/12/25/%E3%81%AA%E3%81%9C_Haskell_%E3%81%8C%E5%A5%BD%E3%81%8D%E3%81%AA%E3%81%AE%E3%81%8B"/><summary type="html">自分は Haskell が好きで休日は Haskell を書いています。そういうことを言うと関数型が好きなんですねと言われるのですが、Haskell のよさはそこじゃないと感じているので書き起こそうかと、筆を執りました。 というわけで、この記事は技術的文書というよりもお話です。Haskell を知らない人向けです。 この記事は Haskell Advent Calendar 2017 その3の6日めの記事です。6日が過ぎても担当のいない日だったため担当します。 関数型プログラミングだから Haskell が好きというわけではない まず、「Haskell というと手続き型とは全然違う関数型なんで…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2018/02/21/141816</id><title type="text">Haskell入門のサンプルコードの最新LTS対応</title><updated>2018-02-21T14:21:16+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2018/02/21/141816"/><summary type="html">拙著 Haskell入門 のサンプルコードは lts-8.24 にしか対応していなかったので、現時点の最新である lts-10.6 に対応させた。変更したのはすべてライブラリがアップデートされたのを追随したもの。 master ではなく lts-10 というブランチにしてあるので、注意。 github.com LTSのアップデートによって ghc-8.2 が使えるようになったのが嬉しい。引き続きHaskellでの開発をお楽しみくださいませ。</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2018/02/14/160833</id><title type="text">Haskellの実行バイナリにファイルを埋め込む</title><updated>2018-02-14T16:12:25+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2018/02/14/160833"/><summary type="html">コンパイルしてできる実行バイナリにファイルを埋め込みたいことがある。
アプリのGUIで使うアイコンとか機械学習の学習済みモデルとか。
Go では (現在では非推奨らしいが) go-bindata を使う場面だろうか。

Haskell ではそういうときには [file-embed](https://hackage.haskell.org/package/file-embed) パッケージが使える。
たとえば `[project root]/resources/lorem.txt` に置かれた [lorem ipsum](https://ja.wikipedia.org/wiki/Lorem_ipsum) テキストを埋め込む場合:</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2018/02/05/135542</id><title type="text">Re: 凸頂点の数 横へな2016.4.2 問題</title><updated>2018-02-05T13:55:42+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2018/02/05/135542"/><summary type="html">凸頂点の数 。30分。 今回は共通化したいところをグッとこらえてコピペ。前回まで初めから抽象化にこだわって問題を解いていたが、具象例が集まってからのほうが良い抽象化ができることから、60分という時間を考えると抽象化はし過ぎないほうが良い選択だということだろう。 この問題の場合、各頂点に2つの図形が隣接するが、そのうちいずれかと隣接してしまうと凸頂点ではなくなる。 00 でも同じ性質を満たしており、ほぼ同じ関数が使いまわせたのは面白いと感じた。 package Nofconv; use strict; use warnings; use Exporter qw(import); use List…</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2018/02/04/154506</id><title type="text">Re: ぴったり含む長方形 横へな2016.3.5 問題</title><updated>2018-02-04T15:45:06+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2018/02/04/154506"/><summary type="html">ぴったり含む長方形 。点1個から帰納的に最小の長方形を出そうと方針を誤り、敗北。 方針変換後は45分。これはさらに15分かけて足切りを入れたもの。そもそも点を累積して数えるようにすればもっと速い。 package Pire; use strict; use warnings; use Exporter qw(import); our @EXPORT_OK = qw(solve); my @chars = ('0' .. '9', 'A' .. 'Z', 'a' .. 'z'); my %chars = do { my $i = 0; map { $_ =&gt; $i++ } @chars; }; …</summary></entry><entry><id>http://hiratara.hatenadiary.jp/entry/2018/02/03/142044</id><title type="text">Re: まわせ! Bouwkamp!! 横へな2016.2.6 問題</title><updated>2018-02-03T14:20:44+09:00</updated><author><name>hiratara</name></author><link href="http://hiratara.hatenadiary.jp/entry/2018/02/03/142044"/><summary type="html">まわせ! Bouwkamp!! に挑戦したが、惜敗。90分かかった。 正攻法で挑むと楽しい良問ではあったが、意外に手数が多い。 package Bouwkamp; use strict; use warnings; use Exporter qw(import); our @EXPORT_OK = qw(solve); sub decode_bouwkamp ($) { my @result; while ($_[0] =~ /\((\d+(?:,\d+)*)\)/g) { push @result, [split /,/, $1, -1]; } \@result; } sub sort_po…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2018/01/27/%E5%BC%8A%E5%90%8C%E4%BA%BA%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E3%81%AE%E3%82%A6%E3%82%A7%E3%83%96%E3%82%B5%E3%82%A4%E3%83%88%E3%82%92%E4%BD%9C%E3%82%8A%E3%81%BE%E3%81%97%E3%81%9F</id><title type="text">弊同人サークルのウェブサイトを作りました</title><updated>2018-01-28T12:39:56+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2018/01/27/%E5%BC%8A%E5%90%8C%E4%BA%BA%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E3%81%AE%E3%82%A6%E3%82%A7%E3%83%96%E3%82%B5%E3%82%A4%E3%83%88%E3%82%92%E4%BD%9C%E3%82%8A%E3%81%BE%E3%81%97%E3%81%9F"/><summary type="html">がんばった。 doujin.kakkun61.com GitHub Pages だからと Jekyll にしたけど、生成したものを置けばいいんだから Hakyll でもよかったな。変えようかなというところ。 後はレスポンシブ対応したい。</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/12/24/202404</id><title type="text">ガバガバAltJSを作った(言語実装 Advent Calendar 2017)</title><updated>2017-12-24T20:27:10+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/12/24/202404"/><summary type="html">qiita.com JavaScriptを書いていると、頻出する継続渡しのリフレインにうんざりさせられる。 foo.bar(function(result){ qux.baz(function(data){ hoge(function(r){ ... }); }); }); そこで、腕試しに継続モナドをベースにしたAltJS、jatkoを作った。フィンランド語で「継続」という意味だ(継続戦争から知った人も多いだろう)。しかし、なんの考えもなしに653行Haskellを書いた結果ガバガバな言語になってしまった。 Hello, world Haskellにだいぶ近いのでなんとなく読めるはず。 in…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/12/19/203500</id><title type="text">HaskellのABC(Haskell Advent Calendar 6th)</title><updated>2017-12-19T20:35:00+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/12/19/203500"/><summary type="html">Haskellといえば一文字変数名、一文字変数名といえばHaskellという{{要出典}}ほどにHaskellでは一文字の変数名がよく使われている。これは名前を考えるのをサボっているとは限らない。多相性によって変数が具体的な性質を持たないがゆえに、具体的な名前がつけられないというのが主な理由だ。あるいは、適切な名前があっても、既存の名前と被っているという場合もある。かといって完全なランダムというわけでもないので、一文字変数名はどのように選べばいいか考察していこう。 a よくある種: * アルファベットの最初であるaは汎用性が高い。型変数に使うのが王道だ。値レベルの変数として単体で使うことは意外…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/12/12/170000</id><title type="text">Go言語のHTTPリクエストのレスポンスボディーとEOF</title><updated>2017-12-12T18:16:42+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/12/12/170000"/><summary type="html">Reader interface の Read 関数は、どのタイミングで io.EOF を返すのでしょうか。 まずは strings.Reader で見てみましょう。 package main import ( "fmt" "strings" ) func main() { r := strings.NewReader("example\n") for { var b [1]byte n, err := r.Read(b[:]) fmt.Printf("%d %q %v\n", n, b, err) if err != nil { break } } } 結果 1 "e" &lt;nil&gt; 1 "x…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2016/07/02/174426</id><title type="text">Haskellの最近の例外ハンドリング</title><updated>2017-12-06T17:19:02+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2016/07/02/174426"/><summary type="html">どうもHaskellには標準のControl.Exceptionモジュールだけでなくmtlやexceptionsやexceptionalといった例外を扱うためのパッケージがあるらしいのだが、そのあたりのパッケージの選び方や使い方についてまとまった情報を見つけられなかった。 HaskellWiki例外のページも少々古いようで、deprecatedなものや統合される前のパッケージを書いていたりする。 調べた限り、mtlとexceptionsが今の主流っぽい。 その2つの使い方をまとめる。 なおバージョンはlts-6.1を基準としている。 mtl mtlパッケージのControl.Monad.Exc…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2016/08/28/175500</id><title type="text">続・Haskellの最近の例外ハンドリング</title><updated>2017-12-06T17:18:53+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2016/08/28/175500"/><summary type="html">前回 の記事ではHaskellの例外ハンドリングには exceptions パッケージを使えばいいのではないかと書いた。 ところが今年の6月に safe-exceptions という exceptions を拡張したようなパッケージがさる FPComplete から 発表 された。 そこでこの記事では safe-exceptions について調べてみる。 おそらくほぼ FPComplete の発表の受け売りになってしまうので英語を読める人は原文を読む方がいいかもしれない。 さすが FPComplete だけあってこれは既に LTS Haskell に入っている。 この記事では lts-6.14…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/haskell-library-2016</id><title type="text">Haskellライブラリ所感2016</title><updated>2017-12-06T17:18:40+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/haskell-library-2016"/><summary type="html">(これは Haskell Advent Calendar 2016 の7日目の記事です) 今年使ったり調べたりした Haskell ライブラリを広く紹介していく企画です。 あくまで今年使ったものなので新しいものばかりではないです。 また記事の性質上、紹介するものが偏っていてもご容赦ください。 Hackage にはすごい数のライブラリが登録されていて、 頼もしいことですが目が回りそうにもなってしまいます。 この記事が Haskell のライブラリを調べる上での指針になったら幸いです。 なおこの企画と方向性が似ているものとして State of the Haskell ecosystem ( 20…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2017/04/26/005415</id><title type="text">超技術書典でGHCJSの本を出します</title><updated>2017-12-06T17:18:31+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2017/04/26/005415"/><summary type="html">【告知】ニコニコ超会議2017と併催される超技術書典Day1(4/29)にて、GHCJSの入門的な本を出します。@y_taka_23 さんのスペースに委託する形になります。Haskell×JavaScriptに興味のある方はぜひA-04まで。 #技術書典 #超技術書典 pic.twitter.com/zUhiVc3CyX — しょしー 超技術書典A-04 (@syocy) 2017年4月25日 出します。 GHCJSの仕組みの話はほとんどなくて、あくまで使い方とか周辺事情の話になります。 GHCJSって昔は導入すること自体が難しくて、他のHaskell系AltJSに水をあけられている感があった…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2017/05/20/025021</id><title type="text">Haskellは真面目なアプリケーション開発に向いている</title><updated>2017-12-06T17:18:19+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2017/05/20/025021"/><summary type="html">qiita.com ↑の記事で（主題ではないと思うものの）Haskellの批判に結構な分量が割かれていて、その批判のなかに「ちょっと違うんじゃないかな」という点がいくつかあったので反論ぽいことを書きます。 "Haskell は真面目なアプリケーション開発には向いてない"について これには多分いくつか事例を挙げればよくて、 Facebook ではスパム等の攻撃と戦うためのシステムを Haskell で作っています。 Fighting spam with Haskell | Engineering Blog | Facebook Code | Facebook (この記事を書いている Simon …</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2017/08/14/235830</id><title type="text">HaskellとJSON、そしてレコード型</title><updated>2017-12-06T17:18:07+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2017/08/14/235830"/><summary type="html">HaskellのJSON周りについて、こうやるのがいいんじゃないかという私の現在のやり方を書きます。 題材としては、 Swagger Petstore に記されている REST API にリクエストを投げてレスポンスを取り出すというのをやります。 (Swagger ですが scaffold は使わず自分で HTTP クライアントライブラリを使います)。 基本方針は「出力は厳密に入力には寛容に」(出典失念) です。 もくじ JSONの前に: レコードのフィールドへのアクセス JSONの前に: レコードのデフォルト値 Haskellのデータ型→JSON JSONデータを含むHTTPリクエスト レス…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2017/08/27/003035</id><title type="text">GoのTickerみたいなやつをHaskellで作った</title><updated>2017-12-06T17:17:55+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2017/08/27/003035"/><summary type="html">github.com 作った。 GoのTickerはとてもシンプルな関数で、 指定した周期でチャネルに値を送るスレッドを生成する。 一定間隔で何かの処理を行いたいときに利用する。 今回作ったHaskell版もだいたい同じようなものを提供する。 実際のところパッケージにするには小さすぎる気もするけど、 Haskellパッケージ製作の練習をしたかったのでHackageのアカウントを取ってHackageに上げた。 練習のため、HaddockによるAPIドキュメントおよびhspecとdoctestによるテストも書いてある。 あとは何かCIを導入してGithubのページにCIのステータスを表示するような…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/a-tour-of-go-in-haskell</id><title type="text">A Tour of Go in Haskellを作ったのと、GoとHaskellの比較</title><updated>2017-12-06T17:17:38+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/a-tour-of-go-in-haskell"/><summary type="html">A Tour of Go in Haskell (日本語版/英語版) というサイトを作ったので、それの紹介をします。 https://a-tour-of-go-in-haskell.syocy.net/ja_JP/index.html Haskell は Go と同じく軽量スレッドやチャネルの機能があり、並行並列が得意な言語です。このサイトは A Tour of Go という Go のチュートリアルの並行性の章を題材として２つの言語を比較しています。</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/12/04/044908</id><title type="text">NGK2017B で Liquid Haskell について話してきました</title><updated>2017-12-04T04:49:08+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/12/04/044908"/><summary type="html">先日、毎年恒例のなごや LT 大会 NGK2017B / 名古屋合同懇親会 2017 忘年会 で発表してきました。 Liquid Haskell で普通の型システムの上を行け #NGK2017B from y_taka_23 www.slideshare.net 当日の動画は NGK2017B 第2部 - YouTube から見ることができます。 ちなみに NGK での発表は 5 年連続 5 回目です。前回まではモデル検査をテーマにしていましたが、今回はちょっと目先を変えて（とはいえ同じ形式手法の枠内ですが）もう少しプログラム寄りの題材として Liquid Haskell を選びました。 N…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/11/27/070558</id><title type="text">現在時刻をモックする Haskell ライブラリ time-machine を作ってみました</title><updated>2017-11-27T07:05:58+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/11/27/070558"/><summary type="html">主としてテスト時のために、現在時刻を操作する Haskell ライブラリを作成しました。Hackage にも登録済みです。 github.com 試しに次のコードを実行してみましょう。getCurrentTime しているはずなのに、返ってくる値が 1985 年 10 月 26 日になっているはずです。 module Main where import Control.Monad.TimeMachine import Control.Monad.Trans ( liftIO ) main :: IO () main = backTo (the future) $ do t &lt;- getCurr…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/11/06/090000</id><title type="text">Serverlessconf Tokyo 2017で『サーバレスアーキテクチャによる時系列データベースの構築と監視』という発表してきました</title><updated>2017-11-06T14:01:24+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/11/06/090000"/><summary type="html">先日開催されたServerlessconf Tokyo 2017にスピーカーとして参加しました。 2017.serverlessconf.tokyo Mackerelの今の時系列データベースは、マネージドサービスを組み合わせて作っています。 検証・実装・投入フェーズを終えて、運用・新機能開発フェーズに入っています。そんな中で、監視サービスを提供する私たちが、サーバーレスアーキテクチャで作ったミドルウェアをどのように監視しているかについてお話しました。 何かしら役に立つことや発想の元となるようなことをお伝えできていたらいいなと思います。 私も他の発表から様々なことを学びました。特に面白かった発表…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/10/25/033444</id><title type="text">技術書典 3 で新刊落としました</title><updated>2017-10-25T03:34:44+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/10/25/033444"/><summary type="html">先日、秋葉原で開催された技術系同人誌のオンリーイベント 技術書典 3 にサークル参加しました。 本当は新刊として Scala 用の静的解析ツール Stainless の入門書を頒布する予定で、サークルカットも完全にその線で準備していたのですが、残念ながら諸事情につき完成しませんでした。 事前にサークルチェックしてくださっていた 36 名の方々には大変申し訳ありませんでした。チェシャ猫先生の次回作にご期待ください。 何も並べるものがないのはちょっとどうかと思ったので、当日は 前回の技術書典 2 で頒布 した既刊『入門 LiquidHaskell』の PDF 版（ダウンロードカード）を持ち込みまし…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/10/18/202148</id><title type="text">Serverless Meetup Tokyo #6 で Kubernetes について話してきました</title><updated>2017-10-21T02:14:23+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/10/18/202148"/><summary type="html">先日行われた Serverless Meetup Tokyo #6 で、Kubernetes 上で動作する Serverless フレームワーク Fission について発表してきました。 Fission で 始める Containerless Kubernetes #serverlesstokyo from y_taka_23 www.slideshare.net 先週も 似たようなブログ を書いたような気がしなくもないですが、Kubeless と Fission を比較した前回の発表に対し、今回は話題を Fission に限定しています。一方で追加要素として、複数の Function を組…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/10/17/172322</id><title type="text">ステートマシン猛レース</title><updated>2017-10-19T18:19:14+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/10/17/172322"/><summary type="html">ストリーム処理ライブラリはHaskellにおいて競争の激しい分野の一つだ。ストリーム処理ライブラリとは大雑把に言うと、IOなどの作用を絡めながら値の列(ストリーム)を生成したり、処理したりする構造を提供するライブラリである。多くのライブラリは、以下の3種の構造を定義している。 生産者(プロデューサー): IOなどのアクションを伴いつつ値を生成する。 消費者(コンシューマー): 多くの場合モナド変換子になっており、await :: Consumer s m sのようなアクションを組み合わせ、値の列を処理するプログラムを書ける。 変換者(トランスデューサー): 入力を受け取りながら、出力もできる。…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/10/14/092409</id><title type="text">Kubernetes Meetup Tokyo #7 で Serverless について話してきました</title><updated>2017-10-14T09:24:09+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/10/14/092409"/><summary type="html">先日行われた Kubernetes Meetup Tokyo #7 で、Kubernetes 上で動作する Serverless フレームワークについて発表してきました。 Kubernetes でも Serverless したい！ #k8sjp from y_taka_23 www.slideshare.net Serverless on Kubernetes を謳うツールはいくつかありますが、今回はそのうち Kubeless と Fission に焦点を当て、それぞれのアーキテクチャの違いを比較してみました。 当日の補足 Twitter 上で反応をもらった点についていくつか補足します。 Fu…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/10/11/230117</id><title type="text">WindowsでのHaskell開発環境構築(2017年秋版)</title><updated>2017-10-13T23:20:39+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/10/11/230117"/><summary type="html">身の丈に合わないと形容されても仕方ないようなハイスペックなPCを買った。開発環境は当然作り直すことになるので、その軌跡を残しておく。 MSYS2 まずはMSYS2を入れる。これでツールチェーンが揃い、minttyというターミナルエミュレータもついてくる。 $ pacman -Syuu $ pacman -Sy git stack Haskellのビルドツールであるstackのインストーラを入手する。処理系から依存パッケージまで無難かつ自動的に用意してくれるので便利だ。 Home - The Haskell Tool Stack ただしstackはMSYS2上ではうまく動作しない。設定ファイル(…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/10/10/100000</id><title type="text">負荷を均すための『時間軸シャーディング』という考え方</title><updated>2017-10-10T10:46:10+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/10/10/100000"/><summary type="html">ウェブアプリケーションを作っていると、負荷を分散させるために「タイミングをばらけさせる」場面に時々遭遇します。 データの更新、キャッシュのフラッシュ、バッチ処理など様々な問題で、同じ構造が見られます。 例えば、スマホアプリからバックグラウンドで1時間ごとに何らかの情報をサーバーに送りたいとします。 愚直に毎時0分に更新処理を行うようにすると、すべてのユーザーから同じタイミングでリクエストが来てしまいます。 ですから、リクエストのタイミングをユーザーごとにばらして負荷を均す必要があります。 他のケースを考えます。 5分ごとにジョブを投入して何らかの更新を行うタスクがあるとします。 本来ならデータ…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/10/05/090000</id><title type="text">Mackerelのプラグインを書く楽しみ ― Rustでプラグインを書くためのライブラリを作りました！</title><updated>2017-10-07T14:43:39+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/10/05/090000"/><summary type="html">Mackerelは「エンジニアをワクワクさせる」ツールであることをサービスの大事な考え方の一つとして捉えています。 一体どういう場面でエンジニアはワクワクするのでしょうか。 簡単にインストールできるmackerel-agentや、直感的で触りやすい画面、チャットツールとの連携は大事な機能です。 しかし、監視ツールとしてもっと重要なのは、ミドルウェアのメトリックをどのように可視化し、何を監視するかということです。 Mackerelは公式のプラグインリポジトリに各種プラグインを揃えています (contributorの皆様ありがとうございます)。 これらはすべてGo言語で書かれています。 しかし、M…</summary></entry><entry><id>http://lotz84.github.io/posts/an-introduction-to-haskell-for-engineers.html</id><title type="text">エンジニアのための『Haskell入門』</title><updated>2017-10-03T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/an-introduction-to-haskell-for-engineers.html"/><summary type="html"></summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/08/15/C%23_%E3%81%A7%E3%83%A9%E3%83%B3%E3%82%AF_N_%E5%A4%9A%E7%9B%B8</id><title type="text">C# でランク N 多相</title><updated>2017-09-25T06:24:00+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/08/15/C%23_%E3%81%A7%E3%83%A9%E3%83%B3%E3%82%AF_N_%E5%A4%9A%E7%9B%B8"/><summary type="html">追記：これだと解決できていない。 C# に Sprache というパーサーコンビネーターがあるのだが、最近そいつを継続渡しスタイル（continuation passing style; CPS）にしてやろうと、Haskell のパーサーコンビネーター attoparsec を参考にいじっていた。 そこでこういう型があった。 newtype Parser i a = Parser { runParser :: forall r. State i -&gt; Pos -&gt; More -&gt; Failure i (State i) r -&gt; Success i (State i) a r -&gt; IResu…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/09/14/150435</id><title type="text">Haskell ライブラリにスターを送るツール thank-you-stars を作ってみました</title><updated>2017-09-14T15:04:35+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/09/14/150435"/><summary type="html">Haskell の GitHub レポジトリを眺めてみると、有名ライブラリであってもスター数が意外と少ないことがあります。かの Yesod ですら本記事執筆時点で 1,794 個であり、Rails の 36,933 個や Django の 28,165 個と比較すると文字通り桁違いです。 スター数は必ずしも OSS としての評価や価値を反映しませんし、そもそも Haskell ユーザの絶対数が少ないからと言ってしまえばそれまでなのですが、若干寂しい感じがしません？ 一方、先日 id:teppeis さんが 依存しているライブラリにスターを送る npm ツール を公開されていました。そこで真似し…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/08/06/154901</id><title type="text">FRPクライシス</title><updated>2017-08-06T18:18:29+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/08/06/154901"/><summary type="html">FRP(Functional Reactive Programming)は、リアクティブプログラミングと関数型プログラミングの性質を持つプログラミングパラダイムである。FRPは古典的FRPと矢矧のFRPに大別される。 古典的FRP 古典的(Classical)FRPは、非連続的な値の列Eventと、常に何らかの値を取るBehaviourの二種類の構造を導入したものである。 代表的な実装としてreactive-banana、euphoria、reflexなどが挙げられる。 Haskellにおいては、EventはIOを通じて非同期的に生成できる設計が多い。Eventはマップやフィルタリングができ、…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/08/02/230422</id><title type="text">快速のExtensible effects</title><updated>2017-08-03T08:52:52+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/08/02/230422"/><summary type="html">extensibleは拡張可能レコードだけでなく拡張可能作用(extensible effects)も用意している。拡張可能作用は一時期Haskell界隈で話題になったものの、今では人気も下火になってしまった。新しいバージョンをリリースした今、拡張可能作用の動機と使い方について改めて紹介しよう。 難行の一次関数 Haskellでモナドをカスタマイズする方法としては、transformersのモナド変換子がよく使われている。モナド変換子は、モナドをパラメータとして取り、新たな能力を付与したモナドにする構造だ。例えば、StateT sはモナド変換子の一つである。任意のアクションm aはliftを使…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/01/30/%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%E3%80%8F%E6%AD%A3%E8%AA%A4%E8%A1%A8</id><title type="text">『遠回りして学ぶ Yesod 入門』正誤表</title><updated>2017-07-25T03:40:10+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/01/30/%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%E3%80%8F%E6%AD%A3%E8%AA%A4%E8%A1%A8"/><summary type="html">kakkun61.booth.pm C91 版 電子版では修正済みです。 ページ 章節 誤 正 補足 3 はじめに Yesod の初歩的な解説が書かれた本の上巻です。 Yesod の初歩的な解説が書かれた本の上巻です。 7 1 リンク切れの検出や リンク切れの検出や 17 3.2 これは quasi quote（準引用）と呼ばれる これは quasi quotes（準引用）と呼ばれる 表記の統一 20 4.1 メモリーに文字のデータが メモリーに文字列のデータが 23 5.1 GHC Users Guidehttp://wiki.haskell.org/GHC GHC Users Guide …</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/07/08/%E2%80%9Cmeaningless_REX_prefix_used%E2%80%9D_%E2%80%9Cuse_of_REX.w_is_meaningless%E2%80%9D</id><title type="text">“meaningless REX prefix used” “use of REX.w is meaningless”</title><updated>2017-07-09T00:20:11+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/07/08/%E2%80%9Cmeaningless_REX_prefix_used%E2%80%9D_%E2%80%9Cuse_of_REX.w_is_meaningless%E2%80%9D"/><summary type="html">コマンドプロンプトや PowerShell でプログラムを実行したときに次のようなエラーが出て困っていた。 [0x7FFE822C2B00] ANOMALY : meaningless REX prefix used [0x7FFE85B3DDA0] ANOMALY : use of REX.w is meaningless (default operand size is 64) REX プレフィックスとは何ぞや。 ロングモードでは、64ビット化するにあたり、16ビット時代から存在した1バイトのinc/dec命令であるinc reg16/dec reg16命令(op 0x40〜0x4f)を廃…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/06/19/090000</id><title type="text">音量を調節できるCLIツールをGo言語で作りました！</title><updated>2017-06-19T09:01:35+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/06/19/090000"/><summary type="html">volumeコマンドを作りました。 音量の調整ってコマンドからどうやるんだろう、ポータブルな形でコマンドラインツールがあれば便利なのでは… と思ったので作りました。 macOSとUbuntuで動作確認をしています。 インストール go get -u github.com/itchyny/volume-go/cmd/volume getは今の音量を返します。set (0-100) で音量を設定できます。 $ volume get 25 $ volume set 20 $ volume get 20 up, down, mute, unmuteなど、直感的に使えるサブコマンドを揃えています。 $ …</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/06/07/210000</id><title type="text">Vimに自分の書いたパッチが取り込まれた！</title><updated>2017-06-08T15:33:13+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/06/07/210000"/><summary type="html">Vim 8.0.0623に私の書いたパッチが取り込まれました。 わーい ∩(＞◡＜*)∩ わーい！ もともとのきっかけは、自分のプラグインを開発している中で、[\u3000-\u4000]という正規表現に対する挙動がset re=1とset re=2で違うことに気がついたのです。 Vimは正規表現エンジンを2つ積んでいる恐ろしいエディターなのですが、この2つの正規表現エンジンの挙動に微妙な違いがあることに気がつきました。 新しいNFAエンジンではエラーは出ませんが、古いエンジンではエラーが出ます。 古い正規表現エンジンでは、[a-z] みたいなパターンで、[\u3000-\u4000]のように…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/05/22/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84</id><title type="text">関係と代数的データ型との相互変換についての妄想 その3</title><updated>2017-05-22T10:11:04+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/05/22/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84"/><summary type="html">思い付き その2 class QueryUser ? where queryUser :: (?) =&gt; Key -&gt; MonadDB User instance QueryUser ? where -- queryUser :: (HasFriends ?) =&gt; Key -&gt; MonadDB User query = … instance QueryUser ? where -- queryUser :: (HasName ?) =&gt; Key -&gt; MonadDB User query = … userFriends :: (HasFriends ?) =&gt; User -&gt; [User] …</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/05/21/120000</id><title type="text">Haskellで10を作るプログラムを書いてみたので動画で公開してみた</title><updated>2017-05-21T23:25:27+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/05/21/120000"/><summary type="html">最近Rui Ueyamaさんがコーディング動画をアップされているのを見て、私も動画を撮りたくなりました。題材をしばらく考えていたんですが、10を作るプログラムを書いてみることにしました。 www.youtube.com 後から見直すと色々ミスっていて、わりと焦っていることがわかります。なにかの癖で適当に bc -l とかやったのだけど、音声をあてる時は関係ないオプションだと勘違いしてしまいました。確かにglobされていたのはよくなかったけど、 echo '5 / (5 / (5 + 5))' | bc -l とかで考えてみると -l も必要なんですよね。2つの問題が起きていて混乱してしまった……</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/05/21/150903</id><title type="text">JJUG CCC 2017 Spring で Haskell on JVM について話してきました</title><updated>2017-05-21T15:14:00+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/05/21/150903"/><summary type="html">先日行われた JJUG CCC 2017 Spring で、JVM 上で動作する Haskell について発表してきました。 思ったほど怖くない！ Haskell on JVM 超入門 #jjug_ccc #ccc_l8 from y_taka_23 www.slideshare.net メインになるコンテンツはふたつの JVM 言語、Frege と Eta です。 今回はあくまでも Java のイベントなので、発表前半では Haskell の基本概念、特にモナドについてそれなりの時間を割いて説明してみました。さらにそれを踏まえて後半ではモナドを利用した Java ライブラリの呼び出しに焦点を…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/05/17/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84</id><title type="text">関係と代数的データ型との相互変換についての妄想 その2</title><updated>2017-05-17T15:13:55+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/05/17/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84"/><summary type="html">思い付き その1 型レベルのリストをクエリー函数に与えてやる。（DataKinds が有効） data Attr = Id | Name | Friends data User = User { id :: Int, name :: String, friends :: [User] } query :: Proxy '[??] -&gt; Key -&gt; MonadDB User userFriends :: Proxy '[Friends] -&gt; User -&gt; [User] リストだとダメだなーって気付いた。勝手に型の和が取られるわけじゃないからね。 それはそれとして、分からないところが2点。 …</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/05/16/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84</id><title type="text">関係と代数的データ型との相互変換についての妄想 その1</title><updated>2017-05-16T10:53:24+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/05/16/%E9%96%A2%E4%BF%82%E3%81%A8%E4%BB%A3%E6%95%B0%E7%9A%84%E3%83%87%E3%83%BC%E3%82%BF%E5%9E%8B%E3%81%A8%E3%81%AE%E7%9B%B8%E4%BA%92%E5%A4%89%E6%8F%9B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E5%A6%84"/><summary type="html">OR マッパーみたいな、関係*1とデータ型との相互変換が機械的にできたら嬉しいなという話。 シンプルなのは簡単だしすでにできる。例えば次のような関係がある場合*2、 var user base relation { id integer, name string, } key { id }; var friends base relation { user1 integer, user2 integer }; これを単に次のようなデータ型に変換するのはいくらかのライブラリーで実現できる。 data User = User { id: Int, name: String } data Frien…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/05/07/100000</id><title type="text">gitのファイル変更日時をファイルのアクセス日時に設定</title><updated>2017-05-07T10:00:11+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/05/07/100000"/><summary type="html">普段使っているファイラーはファイルのアクセス日時でソートされるように設定しています。大きめのリポジトリをcloneしてコードを読む時に、意外とファイルの最終変更日時が参考になったりします。仕事で使うリポジトリや、定期的にpullしているなら、徐々に変更のないファイルはファイラーの下の方に移動していく (上の方からアクセス日時の降順として) のですが、cloneしたばかりだとこうは行きません。 要はgitリポジトリ内の各ファイルのアクセス日時を、そのファイルのgit履歴上での最終変更日時に戻したいという気持ちになるわけです。そうするとファイラー上でもいい感じにファイルがソートされるのです。 #!…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/05/06/060400</id><title type="text">超技術書典で同人誌『入門 LiquidHaskell』を頒布できませんでした</title><updated>2017-05-06T06:04:00+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/05/06/060400"/><summary type="html">先日、ニコニコ超会議内で行われた「超技術書典」にて、LiquidHaskell の同人誌でサークル参加してきました。 lh101.dodgsonlabs.com 技術書典 2 ではそこそこの部数が出た ので Haskell 同人誌の需要はゼロではないと踏んでいたのですが、びっくりするぐらい売れません でした。とりあえず後に続く人が同じ轍を踏まないように、今回の様子について記録しておきます。 頒布物 頒布した同人誌は以下の 2 種類です。前者は技術書典 2 で頒布したものの増刷、後者は id:kazeula さんから委託を受けた新刊です。 入門 LiquidHaskell −篩型による静的コード…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/02/28/Yesod_%E3%81%A8_HDBC-mysql_%E3%81%A8_haskell-relational-record_%E3%81%A7_%E2%80%9CCommands_out_of_sync%E2%80%9D</id><title type="text">Yesod と HDBC-mysql と haskell-relational-record で “Commands out of sync”</title><updated>2017-04-27T10:05:11+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/02/28/Yesod_%E3%81%A8_HDBC-mysql_%E3%81%A8_haskell-relational-record_%E3%81%A7_%E2%80%9CCommands_out_of_sync%E2%80%9D"/><summary type="html">Yesod と HDBC-mysql と haskell-relational-record を一緒に使っているのだが、MySQL サーバーに「Commands out of sync; you can’t run this command now」って言われてぐぬぬってなって、最近デバッグをがんばっている。とりあえず途中経過をメモしておく。 そもそも MySQL プロトコルの呼び出し順とか知らないので苦戦していた。 この辺でエラーが出ている。結合をしなければエラーは出ない。 import Import hiding (on) import Database.Relational.Query …</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2017/04/11/044041</id><title type="text">技術書典 2 で同人誌『入門 LiquidHaskell』を頒布しました</title><updated>2017-04-11T04:40:41+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2017/04/11/044041"/><summary type="html">先日、秋葉原で行われた技術書のオンリーイベント「技術書典 2」にて、LiquidHaskell の同人誌を頒布してきました。 lh101.dodgsonlabs.com LiquidHaskell は、SMT ソルバをバックエンドとして利用することで、Haskell の持つ型の表現力をより強化する仕組みです。通常の Haskell では型情報としてエンコードできない値レベルの制約を記述できるため、例えば「0 でない Int 型」を定義すればゼロ除算をコンパイル時に検知できます。以前の記事 にちょっとした解説があります。 当日は冊子版を 30 冊と PDF 版ダウンロードカードを 50 シリアル…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/03/30/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B82%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%BE%E3%81%99</id><title type="text">技術書典2にサークル参加します 「Haskell Yesod 本」</title><updated>2017-04-06T19:35:40+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/03/30/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B82%E3%81%AB%E3%82%B5%E3%83%BC%E3%82%AF%E3%83%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%BE%E3%81%99"/><summary type="html">4月9日日曜日にアキバ・スクエアにて開催される技術書オンリー同人誌即売会「技術書典2」にサークル「趣味はデバッグ……」として参加します。 冬コミで頒布した『遠回りして学ぶ Yesod 入門』の誤字脱字等を修正して組版を改善したものを持っていきます。 新作はちょっと間に合うか…… 内容 内容は、下記となります。 ビルドツール Stack 効率のよい文字列の扱い Haskell の言語拡張 コンパイル時計算 Template Haskell Web Application Interface とは 簡単な Yesod の解説 ロガー用 Middleware を作る 詳しい内容は見本誌で確認ください…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2016/12/24/%E3%82%B3%E3%83%9F%E3%83%83%E3%82%AF%E3%83%9E%E3%83%BC%E3%82%B1%E3%83%83%E3%83%8891_%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%E3%80%8F</id><title type="text">コミックマーケット91 『遠回りして学ぶ Yesod 入門』</title><updated>2017-03-30T10:45:09+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2016/12/24/%E3%82%B3%E3%83%9F%E3%83%83%E3%82%AF%E3%83%9E%E3%83%BC%E3%82%B1%E3%83%83%E3%83%8891_%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%E3%80%8F"/><summary type="html">サークル「趣味はデバッグ……」の2冊目の頒布をコミックマーケット91にて行います！ 『遠回りして学ぶ Yesod 入門』 前回、技術書典で頒布した『遠回りして学ぶ Yesod 入門（上）』の増補改訂版という形になります。 対象読者 対象読者は前回通り、下記ような方になります。 Haskell の入門書は読み終わったよ Yesod のサンプルコード見たら知らない文法とかあって読めないよ 内容 内容は、下記となります。 ビルドツール Stack 効率のよい文字列の扱い Haskell の言語拡張 コンパイル時計算 Template Haskell Web Application Interface…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/03/28/Yesod_%E3%81%A71%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AB%E8%A4%87%E6%95%B0%E5%80%8B%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%81%8C%E3%81%82%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AF_identifyForm_%E3%82%92%E4%BD%BF</id><title type="text">Yesod で1ページに複数個フォームがある場合は identifyForm を使う</title><updated>2017-03-28T10:49:23+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/03/28/Yesod_%E3%81%A71%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AB%E8%A4%87%E6%95%B0%E5%80%8B%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%81%8C%E3%81%82%E3%82%8B%E5%A0%B4%E5%90%88%E3%81%AF_identifyForm_%E3%82%92%E4%BD%BF"/><summary type="html">resolver lts-5.4 で確認。 問題 1ページに複数個フォームがある場合、runFormPost はそれぞれのフォームの区別をしてくれません。どういうことかというと、例えば下記のような2つのフォームを利用するとします。 data AFormData = AFormData Text aForm :: Html -&gt; MForm Handler (FormResult AFormData, Widget) aForm = renderDivs $ AFormData &lt;$&gt; areq textField "A Text" Nothing data BFormData = BFormD…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2017/03/11/232319</id><title type="text">generateの罠</title><updated>2017-03-11T23:24:28+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2017/03/11/232319"/><summary type="html">vectorパッケージのData.Vectorにはgenerateという関数がある。 generate :: Int -&gt; (Int -&gt; a) -&gt; Vector a 型から全てを知ることはできないが、だいたい想像通りgenerate n fは[f 0, f 1, f 2, ...f (n - 1)]からなるVectorを生成する。しかし、これは要素を評価はしない。生成されるのはあくまでサンクのVectorだ。 Prelude &gt; import Data.Vector as V Prelude V&gt; V.length $ V.generate 5 (const undefined) 5 ve…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2017/02/12/%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%E3%80%8F%E8%AA%A4%E5%AD%97%E8%84%B1%E5%AD%97%E7%AD%89%E3%82%92%E4%BF%AE%E6%AD%A3%E3%81%97%E3%81%9F</id><title type="text">『遠回りして学ぶ Yesod 入門』誤字脱字等を修正した電子版を公開しました</title><updated>2017-02-12T01:49:25+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2017/02/12/%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%E3%80%8F%E8%AA%A4%E5%AD%97%E8%84%B1%E5%AD%97%E7%AD%89%E3%82%92%E4%BF%AE%E6%AD%A3%E3%81%97%E3%81%9F"/><summary type="html">先日の投稿で公開した正誤表の内容を反映した電子版を公開しました。 kakkun61.hatenablog.com コミックマーケット 91 で購入した方は対面電書で、オンラインで購入した方は BOOTH で更新後のファイルを入手することができます。</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2016/12/31/%E3%82%B3%E3%83%9F%E3%83%83%E3%82%AF%E3%83%9E%E3%83%BC%E3%82%B1%E3%83%83%E3%83%88_91_%E3%81%B5%E3%82%8A%E3%81%8B%E3%81%88%E3%82%8A</id><title type="text">コミックマーケット 91 ふりかえり</title><updated>2017-02-11T02:26:37+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2016/12/31/%E3%82%B3%E3%83%9F%E3%83%83%E3%82%AF%E3%83%9E%E3%83%BC%E3%82%B1%E3%83%83%E3%83%88_91_%E3%81%B5%E3%82%8A%E3%81%8B%E3%81%88%E3%82%8A"/><summary type="html">コミックマーケットお疲れさまでしたー。 Yesod 本 紙面版 完売！後は電子版のみ。電子版はいっぱいあります！ #C91 #Haskell #Yesod— kakkun61@技術書典2 う-04 (@kakkun61) 2016年12月29日 印刷分完売しました。ありがとうございますー。技術書典のときよりも早く売り切れたのはまさかという感じでした。技術書典が特別技術系が売れるのかと思っていたんですが、そうでもないんですね。もっと刷ればよかった。 スケジュール 8月 冬コミの申込セット、明日24時オンライン申込締切で、宅配が明日21時になったマン 不安しかない— kakkun61@技術書典2 …</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2017/01/23/100000</id><title type="text">二週間で簡単なインタープリタ言語を実装してみた (日記)</title><updated>2017-01-26T15:49:35+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2017/01/23/100000"/><summary type="html">私は昔から言語処理系に興味があり、自分で言語を作ることを夢見てきました。 しかし、いざ言語を実装しようと思って言語処理系に関する本を読んでも何から手を付けていいか分からず、アセンブラもまともに読めないまま、数年が経ってしまいました。 大学時代は情報系ではなかったため、コンパイラの実験がある情報系の学科のカリキュラムを羨ましく思い、情報系の授業の教科書を手にとって見ても読む気が起きず、自分に作れるのは所詮、構文木をちょこっといじって変換するレベルのもの (例えばsjspなど) にとどまっていました。 そんな中、去年のRebuild.fmで、とても感銘を受けた回がありました。 LLVMのlinke…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2016/12/31/Adobe_Typekit_%E3%81%AE%E3%83%95%E3%82%A9%E3%83%B3%E3%83%88%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E5%A0%B4%E6%89%80%EF%BC%88Windows%EF%BC%89</id><title type="text">Adobe Typekit のフォントファイルの場所（Windows）</title><updated>2016-12-31T18:00:02+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2016/12/31/Adobe_Typekit_%E3%81%AE%E3%83%95%E3%82%A9%E3%83%B3%E3%83%88%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E5%A0%B4%E6%89%80%EF%BC%88Windows%EF%BC%89"/><summary type="html">アプリがフォントをうまく認識しない場合にフォントファイルを直接インストールして対処したりできる。同一マシンならライセンス的にも大丈夫なはず。保証はしません。 環境 Adobe Photoshop CC 2017 Windows 10 場所 %appdata%\Adobe\Adobe Photoshop CC 2017\CT Font Cache にメタファイルがある。↓ のような項目が並んでいる。 %BeginFont Handler:DirectoryHandler FontType:Type1 FontName:AdobeDevanagari-Bold FamilyName:Adobe D…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2016/06/27/%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%EF%BC%88%E4%B8%8A%EF%BC%89%E3%80%8F%E3%81%AE%E9%9B%BB%E5%AD%90%E7%89%88%EF%BC%88PDF%EF%BC%89%E3%81%AE</id><title type="text">『遠回りして学ぶ Yesod 入門（上）』の電子版（PDF）のインターネット販売を開始しました</title><updated>2016-12-27T23:42:20+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2016/06/27/%E3%80%8E%E9%81%A0%E5%9B%9E%E3%82%8A%E3%81%97%E3%81%A6%E5%AD%A6%E3%81%B6_Yesod_%E5%85%A5%E9%96%80%EF%BC%88%E4%B8%8A%EF%BC%89%E3%80%8F%E3%81%AE%E9%9B%BB%E5%AD%90%E7%89%88%EF%BC%88PDF%EF%BC%89%E3%81%AE"/><summary type="html">BOOTH にて『遠回りして学ぶ Yesod 入門（上）』の電子版（PDF）のインターネット販売を開始しました！ 1000円となります。 kakkun61.booth.pm 結構さっくり開設できてびっくりしてる。 店舗候補 どこでダウンロード販売すべきなんかなと思ってちょっと調べたんでまとめときます。 候補としては、メロンブックス・BOOTH・DLsite がありました。それぞれの店舗での販売価格に対する受取価格はざっくり次の通りでした。 店舗 受取価格 メロンブックス*1 販売価格 × 0.7 -（振込手数料） BOOTH*2 販売価格 × 0.966 - 10 -（振込手数料 300 or…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2016/12/24/193038</id><title type="text">LiquidHaskell コトハジメ</title><updated>2016-12-25T15:06:06+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2016/12/24/193038"/><summary type="html">このエントリは Haskell Advent Calendar 2016 および Formal Method Advent Calendar 2016 の 23 日目の投稿です。のはずでしたがすでに日付が変わりました。謹んでお詫び申し上げます。 ちなみに 22 日目の担当者はそれぞれ Haskell Advent Calendar 2016 : heredocsの紹介 - Qiita Formal Method Advent Calendar 2016 : 農夫 山羊 キャベツ 狼 - Qiita です。偶然ですが同じ方が執筆担当ですね。 さて、本エントリでは Haskell の型の表現力をよ…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2016/12/19/060147</id><title type="text">NGK2016B で Kubernetes + Alloy について話してきました</title><updated>2016-12-19T06:01:47+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2016/12/19/060147"/><summary type="html">先日、毎年恒例のなごや LT 大会 NGK2016B / 名古屋合同懇親会 2016 忘年会 で発表してきました。 机上の Kubernetes - 形式手法で見るコンテナオーケストレーション #NGK2016B from y_taka_23 www.slideshare.net 当日の動画は NGK 2016B LT #2 - YouTube から見ることができます。 ちなみに NGK での発表は 4 年連続 4 回目です。今回も含めてすべてモデル検査が題材になっています。 NGK2013B : Alloy ではじめる簡単モデル検査 NGK2014B : 猫でもわかる！ モデル検査器 SPI…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/12/18/181540</id><title type="text">波打たせるものの正体(エクステンシブル・タングル)</title><updated>2016-12-18T18:15:40+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/12/18/181540"/><summary type="html">Haskell Advent Calendar 11日目 リアルワールドなHaskellerは、幾十ものフィールドを持つ大きなレコードをしばしば扱う羽目になる。モナディックにレコードを構築したい場合、RecordWildCards拡張を用いて以下のようにするのが定番だ。 import System.Random data Rec = Rec { foo :: String, bar :: Int, baz :: Double, qux :: Bool } makeRec = do foo &lt;- getLine bar &lt;- length &lt;$&gt; getLine baz &lt;- readLn qu…</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/12/haskellyesod-typedcontent.html</id><title type="text">[haskell][yesod] TypedContentを利用してクライアントが要求するフォーマットでレスポンスを返す</title><updated>2016-12-17T15:16:26.835+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/12/haskellyesod-typedcontent.html"/><summary type="text">Yesod Advent Calendar 2016の6日目の記事です。

RESTfulなAPIを提供する場合、クライアントの都合にあわせて、フォーマットを変えてレスポンスを返したいケースがあります。サーバー上で管理しているDBから、表現だけをHTML, JSON, XML, CSVなどに変更して返すイメージです。例えば、人物情報（名前、年齢、性別など）の一覧を返す際には以下のようなデータが返されることになります。

HTML
&lt;table border&gt;
  &lt;tr&gt;
    &lt;th&gt;name&lt;/th&gt;    &lt;th&gt;sex&lt;/th&gt;    &lt;th&gt;age&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Taro Yamada&lt;/td&gt;    &lt;td&gt;Male&lt;/td&gt;    &lt;td&gt;18&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Hanako Yamada&lt;/</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2016/12/11/%E5%B0%91%E5%A5%B3%E3%82%BB%E3%82%AF%E3%83%88</id><title type="text">少女セクト</title><updated>2016-12-11T00:01:06+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2016/12/11/%E5%B0%91%E5%A5%B3%E3%82%BB%E3%82%AF%E3%83%88"/><summary type="html">この記事は Krile Advent Calendar 11日目の記事です。 Krile いいですね。Wassr 民だったので Krile 2 のころから使ってました。 さて本題。 少女セクト 少女セクト (メガストアコミックス)作者: 玄鉄絢出版社/メーカー: コアマガジン発売日: 2005/08/19メディア: コミック購入: 24人 クリック: 440回この商品を含むブログ (177件) を見る なぜこれを買ったのかは正確には覚えてないのですが（おそらくなんらかの書評を読んだのだと思う）いわゆる「控えめに言って最高」というやつですね。 8日目の『星川銀座四丁目』と同じ作者の玄鉄絢さんです…</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/07/yesodhaskell-stack-new-xxx-project.html</id><title type="text">[haskell][yesod] stackのnewコマンドで指定できるyesod関連templateの説明</title><updated>2016-12-03T23:37:28.283+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/07/yesodhaskell-stack-new-xxx-project.html"/><summary type="text">現状、stackで指定できるyesod関連のtemplatesには以下のものがあります。どのtemplateに何が用意されているのか、知りたかったのですがどこにも説明されていないようなので、調べてまとめてみました。
% stack templates | grep yesod
yesod-hello-world （←現時点では削除されています）
yesod-minimal
yesod-mongo
yesod-mysql
yesod-postgres
yesod-postgres-fay
yesod-simple
yesod-sqlite


以下、各テンプレートの説明です。後に出てくるテンプレートほど内容が複雑になっています。テンプレートを指定して新しいプロジェクトを生成する場合は以下のコマンドを実行します。
% stack new プロジェクト名 yesod-???




</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/11/emacs-emacsgrep.html</id><title type="text">[emacs] emacs上のgrep関連機能、複数ファイルの一括置換手順のまとめ</title><updated>2016-11-30T10:03:25.873+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/11/emacs-emacsgrep.html"/><summary type="text">emacs上でgrep関連の機能を利用する際のTIPSをまとめておきます（よく忘れて調べ直すので…）。


grepコマンドのオプション

指定ディレクトリ以下のファイルを再帰的に検索

-R DIR    シンボリックリンクを辿る
-r  DIR    シンボリックリンクは辿らない

検索対象をファイル名でフィルタする

--include=GLOB    GLOBにファイル名を指定する。"*.cpp"のようにワイルドカード（*,?,[...]）を指定可能

検索対象から指定ファイル・ディレクトリを除外する

--exclude=GLOB   GLOBに除外するファイルのファイル名を指定する（ワイルドカード指定可能）。
--exclude-dir=DIR DIRに指定されたディレクトリをスキップ


使用例：

docディレクトリ以下の.txtを拡張子に持つ全てのファイルを対象に"</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/09/cygwin-cygwin64.html</id><title type="text">[cygwin] cygwin64セットアップメモ</title><updated>2016-11-28T00:47:36.358+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/09/cygwin-cygwin64.html"/><summary type="text">自分向け備忘録。cygwin64環境をセットアップする際の手順をまとめておきます。


設定


ssh-agent関連

ssh-agentの重複起動を防ぐ
ssh-agentのために秘密鍵セットアップ

~/.ssh/

※group/otherのrw権限は削除


ssh-agentがパスワードを覚えてくれなくなった問題への対処

pingのエラー回避
ユーザーのアカウント名、ホームディレクトリの変更

/etc/passwdを編集する

GNU screen でlessやvimの終了後に画面クリアをしない方法
改行コードにCR+LFが用いられているbashスクリプトを実行するための設定
tcshのデフォルト補完設定のイマイチな部分を修正




環境変数

HOME

ホームディレクトリを設定



SHELL

"/bin/tcsh"とすることでデフォルトのシェルが切り替わる
</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2016/11/20/163839</id><title type="text">Frege のチュートリアル集「Frege Goodness」を翻訳しました</title><updated>2016-11-20T16:38:39+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2016/11/20/163839"/><summary type="html">Frege のチュートリアル集を日本語に翻訳しました。原著は Dierk Koenig 氏による Frege Goodness · GitBook です。 www.gitbook.com 対象読者 まえがきでも述べられている通り、Frege の (すなわち Haskell の) 基本的な文法については既知のものとして扱われます。より具体的には「すごい Haskell」の前半部分を読んだ、ぐらいでしょうか。例えば型クラス自体は知っている必要がありますが、モナドに対する理解は要求しません。 ちなみに、目を通していただけるとすぐにわかりますが、実は Frege に特有な内容はさほど登場しません。どち…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2016/11/10/200000</id><title type="text">git grepで仕事してる</title><updated>2016-11-10T20:43:06+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2016/11/10/200000"/><summary type="html">私はコードを書く時に頻繁にgit grepを使っていて、一日に何回くらいgit grepを使っているのか気になったのでログを取ってみました。 2016 10/24 月: 61 2016 10/25 火: 36 2016 10/26 水: 19 2016 10/27 木: 80 2016 10/28 金: 51 2016 10/31 月: 96 2016 11/ 1 火: 47 2016 11/ 2 水: 53 2016 11/ 4 金: 84 2016 11/ 7 月: 56 2016 11/ 8 火: 33 2016 11/ 9 水: 19 2016 11/10 木: 71 これは私が会社の…</summary></entry><entry><id>http://syocy.hatenablog.com/entry/2016/10/31/025512</id><title type="text">HaskellのロガーKatipを試す</title><updated>2016-10-31T02:55:12+09:00</updated><author><name>syocy</name></author><link href="http://syocy.hatenablog.com/entry/2016/10/31/025512"/><summary type="html">モチベ Haskell の実行時ログ出力を行うライブラリは monad-logger が一番有名っぽい。 これは Yesod 陣営が開発しているから安心感があるし、バックエンドが fast-logger なので速度も信頼できる。 ただ (自分の調べ方が悪いのかもしれないが) ちょっと自分の用途には機能が足りなかった。 具体的には以下の機能: ログにタイムスタンプを付記したい。 ロガーに名前をつけたい。 ファイルサイズか日付でログローテーションしたい。 Katip という別のロガーライブラリは機能が豊富のようなので今回はそれを試してみる。 (この記事のHaskell環境: lts-6.23) K…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2016/10/30/155758</id><title type="text">Frege からメールが送信できるようになりました</title><updated>2016-10-30T17:31:40+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2016/10/30/155758"/><summary type="html">ちょっとした Web アプリを作成しようと思うと、メール送信機能がないと困ります。例えば、ログイン機能を持っていれば必然的にパスワードリセットとかも必要になりますからね。 Haskell 風の JVM 言語 Frege でもフレームワーク Chinook を使用して Web アプリが作れますが、メールを送信するライブラリが見当たらなかったので自作しました。 github.com なお、すでに Bintray に公開済みなので、各種ビルドツール経由で呼び出すことができます。現状、Frege のビルドは Gradle がデファクトスタンダードなので、以下でも Gradle で説明しましょう。 bi…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2016/10/23/201420</id><title type="text">JAWS FESTA 東海道 2016 で形式手法によるネットワーク設計について話してきました</title><updated>2016-10-23T20:14:20+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2016/10/23/201420"/><summary type="html">先日行われた JAWS FESTA 東海道 2016 で登壇してきました。 形式手法と AWS のおいしい関係。- モデル検査器 Alloy によるインフラ設計技法 #jawsfesta from y_taka_23 www.slideshare.net テーマは以前 AWS Summit で発表したものと同じですが、前回が 5 分の LT だったのに比べて今回は 25 分の枠を頂きました。そこで、形式手法を用いる動機を中心に据えた前回と比較して、以下のような実践的なトピックを充実させてあります。 Alloy を使うためにの最低限必要な言語機能を知る シンプルな Web サーバ周りのネットワー…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2016/10/08/220000</id><title type="text">スマホが割れた日</title><updated>2016-10-12T10:16:41+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2016/10/08/220000"/><summary type="html">その瞬間は、前触れもなくやってきた。 いつものように、仕事帰りに烏丸御池の交差点で信号待ちをしていた。ちょうど赤に変わったタイミングで時間があったので、スマホでニュースを眺めていた。信号が切り替わり、そろそろ渡ろうとしてスマホをポケットにしまおうとした瞬間だった。左手と右手がいきなりぶつかり、右手の力が緩み、スマホは宙に舞った。 何が起きたのか自分でもわからなかった。はっと我に返ったら、スマホは硬いコンクリートに打ち付けられていた。 一体左手で何をしようとしたのだろうか、今となってはもう思い出せない。右手に痒みを感じて掻こうとしたのか、スマホを左手に持ち替えようとしたのか、あるいはゴミが入った…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/10/10/000011</id><title type="text">割とすぐに始められるextensibleチュートリアル(レコード編)</title><updated>2016-10-10T00:50:06+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/10/10/000011"/><summary type="html">ごきげんよう諸君。今回はextensibleについて説明しよう。 extensibleはその名の通り、拡張可能なデータ構造を提供するライブラリである。具体的には、型レベルのリストによって特徴づけられる積と和を提供する。非常に残念なことに、GHC 8.0.1ではコンパイラのバグのせいでそもそもライブラリがビルドできない*1。来たる8.0.2では修正されているので、それを待つほかない。 とにかく、ここでは積の応用技である拡張可能レコードについて紹介する。使い方は簡単だ。まず使いたいフィールド名をスペースで区切ってmkFieldに渡す。 {-# LANGUAGE TemplateHaskell, D…</summary></entry><entry><id>https://itchyny.hatenablog.com/entry/2016/09/13/000000</id><title type="text">Vim 8.0 リリース！</title><updated>2016-09-30T16:16:02+09:00</updated><author><name>itchyny</name></author><link href="https://itchyny.hatenablog.com/entry/2016/09/13/000000"/><summary type="html">Vim 8.0 released! Vim 8.0が先ほどリリースされました。10年ぶりのVimのメジャーバージョンアップです。 Vimのバージョンをcronで毎日上げ続け、最新のパッチを確認し続ける日々を送ってきました。そして、今日も夜11時のcronでバージョンが上がりました。新しいメジャーバージョン、8.0でした。 ここ一年はVimにとって様々な重要な機能が入りました。JSONエンコーダーとパーサー、パッケージ機構、channelとjob、タイマー、ラムダ式など、プラグイン製作者にとって大事な機能ばかりです。今後、より高度なプラグインがでてくることでしょう。これらの機能に対する日本人の貢…</summary></entry><entry><id>https://kakkun61.hatenablog.com/entry/2016/06/26/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_%E3%81%B5%E3%82%8A%E3%81%8B%E3%81%88%E3%82%8A</id><title type="text">技術書典 ふりかえり</title><updated>2016-09-11T19:14:03+09:00</updated><author><name>岡本和樹</name></author><link href="https://kakkun61.hatenablog.com/entry/2016/06/26/%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8_%E3%81%B5%E3%82%8A%E3%81%8B%E3%81%88%E3%82%8A"/><summary type="html">技術書典お疲れさまでしたー。 閉場30分前まで整理券制で、だいたいの方が1時間半待ちだったそうですね。びっくりするような盛況で何よりです。運営さんの手際もよく大変ありがとうございました。 #技術書典 会場のキャパに余裕が出てきたため、只今から整理券なしでも入場可能にします！残り三十分強ですがお楽しみいただければと思います。— TechBooster@3日目西a05a (@TechBooster) June 25, 2016 最終的に1200人は超えたそうですね。 #技術書典 最終集計できてないですが速報(すぐ数えられるもので)来場数は1200名を超えました！至らないところもありましたがサークル…</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/08/haskellyesod-yesodrestfuljson-api.html</id><title type="text">[haskell][yesod] YesodにおけるRESTfulなJSON API実装チュートリアル</title><updated>2016-08-28T17:53:43.356+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/08/haskellyesod-yesodrestfuljson-api.html"/><summary type="text">HaskellのwebフレームワークであるYesodにおいて、RESTful APIを実装する手順を紹介します。Haskell上のデータ構造をJSONテキストに変換する、逆に、JSONテキストをパースしてHaskell上のデータ構造を生成する、といった処理が非常に簡単に実現できます。加えて、コードを書かなくてもバックエンドのDBとのORマッピングが可能になっており、効率的に開発することができます。
ここで紹介しているコードはgithubにコミットしています。


準備：

json-sampleというプロジェクト名でYesodのscaffolding siteをセットアップする

空のプロジェクト生成

% stack new json-sample yesod-sqlite --system-ghc

"--system-ghc"は省略可能。インストール済みのghcを使うことを指示し</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/07/haskellyesod-stackyesod-tutorial.html</id><title type="text">[haskell][yesod] stack対応版Yesod tutorial</title><updated>2016-07-17T18:06:36.108+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/07/haskellyesod-stackyesod-tutorial.html"/><summary type="text">HaskellのwebサービスフレームワークにYesodというフレームワークがあります。Yesodに触れたことのない開発者向けに書かれたチュートリアルの一つにYesod tutorialがあり、手順に沿っていくだけで簡単なwebサービスを動作させることができ、Yesodで何ができるかを簡単に理解できるようになっています。
ただ残念なことに、このYesod tutorialの記載は内容が古く、stackを利用した現行の手順とマッチしなくなっています。stackに対応している最新環境（Yesod 1.4.x）における順があると役に立つと思い、書き起こしてみました。


Before the real start（はじめに）

Install（インストール手順）
stackをインストールする。以下のサイトが参考になります。

installation instructions for </summary></entry><entry><id>https://kurokawh.blogspot.com/2016/07/haskellyesod-stack-exec-yesod-devel.html</id><title type="text">[haskell][yesod] stack exec -- yesod devel で devel.hs: getAddrInfo: does not existというエラーになる問題の対処方法</title><updated>2016-07-17T17:39:43.279+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/07/haskellyesod-stack-exec-yesod-devel.html"/><summary type="text">
Widnwos環境での現象：
windows上でyesodのscafolding siteをセットアップし、さあ起動！ブラウザから接続確認してOKとなるはずが、なぜか「The application isn't built」という表示が出てしまいました。



このときターミナルには以下のようなログが出力されていました。
% stack exec -- yesod devel
Yesod devel server. Type 'quit' to quit
Application can be accessed at:

http://localhost:3000
https://localhost:3443
If you wish to test https capabilities, you should set the following variable:
  export </summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/05/03/211430</id><title type="text">写真の撮り方</title><updated>2016-06-14T23:59:05+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/05/03/211430"/><summary type="html">物体の発する光や反射した光を結像し、何らかの媒体に記録したものを写真と呼ぶ。カメラと呼ばれる道具には「撮影」という動作が必ず定義されており、撮影によって内部状態に画像を記録できる。内部状態を取り出して処理する(現像)ことで写真が得られる。大抵のカメラには以下のようなパラメータがあり、それらを最適化するのが撮影者の仕事になる。 焦点(Focus) はっきりとした像を得るには、光学系の焦点をそれに合わせる必要がある。最近のカメラは対象物の距離を測定し、自動で焦点を合わせる(オートフォーカス)機能を持っているものもある。 焦点距離(Focal length) 焦点距離が長いほど像は拡大されて見えるよ…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2016/06/06/051120</id><title type="text">AWS Summit Tokyo 2016 で形式手法について話してきました</title><updated>2016-06-06T05:11:20+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2016/06/06/051120"/><summary type="html">先日行われた AWS Summit Tokyo 2016 で、形式手法のインフラ設計への応用について発表してきました。 形式手法で捗る！インフラ構成の設計と検証 from y_taka_23 www.slideshare.net モデル検査器 Alloy を利用して AWS の設定を検査する、という内容の LT で、昨年 12 月の NGK2015B でも同じテーマについて話しています。よければ以下の記事も合わせてお読みください。 ccvanishing.hateblo.jp NGK2015B の発表ではサンプルコードの紹介に比較的時間を割いているのに対して、今回の発表では「動機」の部分により…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2016/04/17/201842</id><title type="text">NL 名古屋で Frege の評価戦略について話してきました</title><updated>2016-04-17T20:18:42+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2016/04/17/201842"/><summary type="html">先日の 歌舞伎座.tech に引き続き、NL名古屋 - connpass で Haskell 風 JVM 言語 Frege について発表してきました。 今回の発表では、Frege の持つ Haskell 的特徴である非正格評価に焦点を当て、正格評価を行うはずの Java 上でなぜ評価を遅延させられるのか、その内幕を解説しています。 Frege, What a Non-strict Language from y_taka_23 www.slideshare.net なお当日の様子は NL名古屋 -NLとはなんだったのか- #nlnagoya - Togetterまとめ にまとめられています。長…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/04/08/215045</id><title type="text">今のところ比較的簡単なモナドの作り方</title><updated>2016-04-08T21:51:50+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/04/08/215045"/><summary type="html">準備 モナドを作るには、どんなモナドを作りたいか考える。モナドは一般に、どのようなアクションが使えるかによって特徴付けられる。その点ではオブジェクト指向におけるインターフェイスとよく似ている。 では、foo :: String -&gt; M Boolとbar :: M Intという二種類のアクションを持つモナドを作るとしよう。まず、どんなアクションが使えるかを表すデータ型を定義する。 {-# LANGUAGE GADTs #-} data MBase x where Foo :: String -&gt; MBase Bool Bar :: MBase Int GADT(一般化代数的データ型)の各データ…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2016/03/22/020302</id><title type="text">歌舞伎座.tech #9 で Frege について話してきました</title><updated>2016-03-22T02:03:02+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2016/03/22/020302"/><summary type="html">先日行われた 歌舞伎座.tech#9「異種プログラミング言語格闘勉強会」 - connpass で Haskell 風 JVM 言語である Frege について発表してきました。 今回の勉強会のテーマは「様々な言語に触れて視野を広げる」ということだったので、細かな言語仕様にはあえて触れていません。Frege 自体の紹介と、あとは JVM 言語として一番キャッチーな機能である Java 呼び出しについて解説しました。 すごい Frege たのしく学ぼう！ from y_taka_23 www.slideshare.net 勉強会自体も、マイナ言語の話を一度にこれだけ聞けるというのは珍しくなかなか…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/02/29/191740</id><title type="text">GHC 8.0.1/base-4.9.0.0の新機能まとめ</title><updated>2016-02-29T19:17:40+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/02/29/191740"/><summary type="html">GHC 8.0.1は、最上位の桁が変わるだけあって、かなり新しい機能が追加されている。 base-4.9.0.0 めっちゃインスタンスが増えた ghc/changelog.md at ghc-8.0 · ghc/ghc · GitHubを参照。あるべきインスタンスが存在することにより、孤児インスタンスを定義する必要がなくなるため、ぐっとストレスが減る。Monoid a =&gt; Monad ((,) a)、Traversable ZipListなど、いくつかは私がやった。 Semigroup ついにData.Semigroupが追加された。将来的にはこれはモノイドのスーパークラスになる。この変更に…</summary></entry><entry><id>https://ccvanishing.hateblo.jp/entry/2016/02/13/175220</id><title type="text">すごい JVM 言語 Frege をたのしく学ぼう！</title><updated>2016-02-13T17:52:20+09:00</updated><author><name>チェシャ猫</name></author><link href="https://ccvanishing.hateblo.jp/entry/2016/02/13/175220"/><summary type="html">言わずと知れた Haskell の定番教科書『すごい Haskell たのしく学ぼう！』に登場するサンプルコードを、プログラミング言語 Frege に翻訳してみました。 github.com Frege について Frege は、JVM 上で動く純粋関数型プログラミング言語です。 github.com 最近、JVM 用 Lisp である Clojure の存在感を増してきている気がしますが、Frege はいわばその Haskell 版ですね。 文法的には Haskell + Java のメソッドを呼び出すための追加構文、といった感じ。細かな違いはありますが、Haskell が読める人間であれば…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/04/haskell-cmdargs.html</id><title type="text">[haskell] cmdargsパッケージで楽々コマンドライン引数パース</title><updated>2016-02-11T01:10:46.307+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/04/haskell-cmdargs.html"/><summary type="text">コマンドラインツール実装時、オプション指定とか引数の並びとか考え始めると大変です。HaskellではSystem.EnvironmentモジュールからgetArgsという関数が提供されていますが、本エントリで紹介するcmdargsパッケージを利用すると以下のようなことが簡単にできます。

cmdargsパッケージの特徴：

データ構造を定義するだけで起動引数・オプションのパースができる
パース結果を型付きで参照することができる
パース失敗時には、原因がわかるエラーメッセージが表示される
--help, --versionオプションで表示される情報を自動で生成してくれる

Haskell版GNU getoptライブラリと比べて以下の2点が優れている、とHPには書かれています。

HLintコマンドラインのハンドリングが1/3の短さ
Cabal, darcsなどのmultiple mode</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2016/02/04/214714</id><title type="text">比を最適化する</title><updated>2016-02-04T21:47:14+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2016/02/04/214714"/><summary type="html">二つの負でない実数、を考える。比をある値に近づけたいといった条件が複数あり、それらを最適化したいとき、どうするのがよいだろうか。 序: 近道の階段 簡単な方法の一つとして考えられるのは、単純に比の差をとり、それらの平方の和を最適化の対象とするというものだ。 しかし、これは最適化の結果、しばしば、のどちらかが0にぶつかってしまう。これは目的関数として非常にいびつであり、直感的とも言いがたい。 破: バリアフリー化 0や1に近い比率は極端であり、望まれていない。境界に近づくほど目的関数が無限大に発散するようにできないだろうか。 そんなときに使えるのがロジットだ。ロジットは0より大きい1未満の実数を…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/11/haskellyesodsqlite-persistent.html</id><title type="text">[haskell][persistent][sqlite] Persistentパッケージ利用時にテーブルにインデックスを生成する方法</title><updated>2016-01-30T17:12:12.076+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/11/haskellyesodsqlite-persistent.html"/><summary type="text">PersistentパッケージにはMigration機能が備わっており、自動的にテーブルを生成してくれます。スキーマ変更を行った際にも、変換が可能な限りテーブル内のレコードを保持したまま新しいスキーマに変換してくれます（Migration機能については過去のエントリでまとめています）。

自分が利用する上で、インデックスやトリガーを生成する手順が紹介されておらず困っていたのですが、rawExecuteという関数を用いることで自由にDDLを発行できることがわかりました。以下その手順とサンプルを紹介しておきます。


サンプルコード：
以下は、personテーブルのnameカラムにインデックスをs生成するサンプルです。runMigration実行直後に、runExecuteを実行することでインデックスを生成しています。このサンプルではインデックスを生成しているだけですが、同じ手順でトリガーの</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/08/haskellyesodsqlite-persistentmigration.html</id><title type="text">[haskell][persistent][sqlite] Persistentパッケージのmigration機能のまとめ</title><updated>2016-01-30T17:11:40.032+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/08/haskellyesodsqlite-persistentmigration.html"/><summary type="text">HaskellでDB操作ができるPersistentパッケージの紹介をしましたが、このエントリではPersistentパッケージが提供しているmigration機能をまとめておきます。
DBを作って運用していると、機能追加や仕様変更に伴いスキーマ変更が必要になるケースが多々あります。このようなケースにおいてPersistentのmigration機能がどれくらい使えるのかを調べた結果です。


基本：
Persistetのmigration機構は（保守的なルールに沿って）スキーマ変更をある程度まで自動で処理してくれます。
ロードしたDB内のテーブル情報と、コードで定義されたEntity Definition（テーブル定義）を比較し、以下のケースにおいてスキーマの変更を行います。

カラムの型を変更した場合：

ただし、値の変換ができない場合には、DBによって拒否されることになります。

</summary></entry><entry><id>https://kurokawh.blogspot.com/2016/01/haskellgccwin-windowshaskell.html</id><title type="text">[haskell][gcc][win] Windows版Haskell Platform付属のgccでC++11のコードをコンパイルする方法</title><updated>2016-01-15T00:45:37.692+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2016/01/haskellgccwin-windowshaskell.html"/><summary type="text">Windows版のHaskell Platformにはmingwが同梱されておりgccが含まれています。現在自分のPCにはHaskell Platform 2014.2.0.0をインストールしているのですが、これに付属されているgccでC++11のコードをコンパイルしようとすると、以下のようなエラーになってしまいました。
% gcc -std=c++11 cpp11.cpp
cc1plus.exe: error: unrecognized command line option '-std=c++11'


-stdオプションで"c++11"を指定しても、認識してくれません。
本家のサイトによると、'-std=c++11'オプションはgcc 4.7でサポートされたようです。これに対し、Haskell Platform 2014.2.0.0に付属されているgccのバージョンを確認したところ</summary></entry><entry><id>https://kurokawh.blogspot.com/2013/11/sqlite-sqlite.html</id><title type="text">[sqlite] SQLiteのロック・トランザクション関連仕様の整理</title><updated>2016-01-06T12:11:40.986+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2013/11/sqlite-sqlite.html"/><summary type="text">SQLiteは共有ロック・排他ロックの仕組みを備えており、プロセス内の複数スレッド、だけでなく、プロセスをまたぐ状態でSQLが同時に発行されても適切に処理されます。
トランザクションに複数のモードが存在し、指定するモードに依って取得されるロックが変わります。さらにSQLの内容に依存してロック状態が遷移するため、複数プロセスがアクセスしたときの挙動を正確に把握できるよう、仕様を整理してみました。
（文中の「プロセス」は、正確には「プロセス、もしくはスレッド」を意味します。）


DBのロック状態の種類：

UNLOCKED

ロックされていない状態。誰も読み書きしていない。DBの初期状態。

SHARED

read可、write不可な状態。複数プロセスが同時にSHAREDロックを取得可能。複数プロセスが同時にreadできることを意味する。DBがこの状態にあるとき、他のプロセスからの</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/12/30/220159</id><title type="text">デシリアライザとスキーマ</title><updated>2015-12-30T22:16:49+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/12/30/220159"/><summary type="html">盛大に遅れました… qiita.com 最近思いついたネタで実用性の高そうなものを紹介。 binaryやcerealのようなライブラリはデータを密にシリアライズするが、その際にフィールド名や型などの情報は失われてしまう。かといってそれらを一つ一つすべて含めるとひどく効率の悪いフォーマットになってしまう。そこで、スキーマを分離できるような仕組みを作れないかと考えて作ったのがこのクラスだ。 {-# LANGUAGE TypeFamilies, ScopedTypeVariables, FlexibleContexts, UndecidableInstances #-} import Data.Bi…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/07/cygwinhaskellemacs-mingwcygwincygdrivec.html</id><title type="text">[cygwin][haskell][emacs] MinGWでcygwinの"/cygdrive"パスにアクセスする裏技（cygwin環境のemacsでflycheckを動作させる方法）</title><updated>2015-12-27T23:55:24.842+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/07/cygwinhaskellemacs-mingwcygwincygdrivec.html"/><summary type="text">haskell関連のコマンドはMinGW上でビルドされているため、cygwin環境の"/cygdrive"から始まるパスには対応していません。haskell-hlintから呼び出されるhlintも当然この問題の影響を受けておりemacs関連の設定が適切にされていたとしても、以下のようなエラーが表示されてしまいます。



ミニバッファに表示されるエラー詳細：
Suspicious state from syntax checker haskell-hlint: Checker haskell-hlint returned non-zero exit code 1, but no errors from output: hlint.exe: Couldn't find file: /cygdrive/c/Users/Hiroyuki/tmp/flycheck_hello.hs



</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/12/10/200630</id><title type="text">正格フラグ、バンパターン、正格版関数・データ構造</title><updated>2015-12-10T20:06:30+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/12/10/200630"/><summary type="html">Haskellスペースリーク Advent Calendar 2015 9日目 Haskellerとて、時には厳しくならなければいけないこともある―― @fumieval, 2015 Haskellは遅延評価を基本としているため、場合によっては未評価の式が積もり非効率な状況に陥ることがある。これを防ぐため、部分的に正格評価にするための仕組みが用意されている。もちろんこれらは闇雲に使えばよいというものではない。使うべきポイントを把握し、これらを見逃さないようにしよう。 この記事では、それらの機能の正しい使い方、間違った使い方を紹介していこう。 カウンター・カウンターズ・サンクス 条件を満たす要素…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/11/haskellstack-stack-exec-ghcicouldnt.html</id><title type="text">[haskell][stack] stack exec ghciで”Couldn't match expected type"エラーが発生する問題の対処</title><updated>2015-11-08T15:09:21.187+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/11/haskellstack-stack-exec-ghcicouldnt.html"/><summary type="text">先日、haskellのパッケージ管理をcabalからstackに移行して「便利〜！」と感動していたところなのですが、stach exec ghciでソースをロードしようとすると"Couldn't match expected type: xxxxx"とエラーが発生する問題に遭遇しました。
ネットの情報を参考に解決することができたのでその手順をまとめておきます。


問題：
stack buildは成功するにもかかわらず、stack exec ghci xxx.hs（xxx.hsはbuild対象のファイル）がエラーになる。
stack exec ghci実行時のエラーログ：
% stack exec ghci FileToVec.hs
GHCi, version 7.10.2: http://www.haskell.org/ghc/  :? for help
[1 of 1] </summary></entry><entry><id>https://kurokawh.blogspot.com/2015/11/cygwin-cygwinpathusrbinusrlocalbin.html</id><title type="text">[cygwin] cygwinのシェル起動時にPATHの先頭に/usr/binと/usr/local/binが勝手に追加されないようにする</title><updated>2015-11-04T22:29:43.126+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/11/cygwin-cygwinpathusrbinusrlocalbin.html"/><summary type="text">cygwinのデフォルトの設定では、シェル起動時に以下の2つのディレクトリが自動的にPATHの先頭に追加されます。

/usr/local/bin
/usr/bin


cygwinでインストールされているコマンドと同名の別コマンドを優先して起動したい場合には、この設定が邪魔になります。
これを無効にするには以下の方法があります。お好みでどちらかを選択してください。

/etc/profileもしくは/etc/csh.loginの該当処理をコメントアウトする（bash / tcsh）

cygwinがPATHを上書きしているのは、/etc/profile（bashの場合）と/etc/csh.login（tcshの場合）です。これらのスクリプトを編集することで、/usr/binと/usr/local/binが勝手に追加されないようにできます。

ORIGINAL_PATHでPATHを上書き</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/10/27/234832</id><title type="text">動物、とくにヒトと性について</title><updated>2015-10-27T23:52:44+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/10/27/234832"/><summary type="html">我々脊椎動物は有性生殖をする。したがって、繁殖に寄与する性質が必然的に残り、そうでないものは消えてゆく。オスは精子、メスは卵を作り出すという非対称性があり、体つきや行動もそれに合わせるように決まるのは自然だ。一夫多妻制の種においては、オスはメスを取り合うためにより強靭で攻撃的な性質が要求される。日本では法律上一夫一妻制を取るが、その影響は強く残っているだろう。実際、オスとして生を受けた私も、コミュニティの中でそれを体感している。 生まれつきの体質か、育った環境のせいかは知らないが、幼いころは体が弱かった(3才のころ、両足飛びができなかったそうだ)。そのため、幼いころの私の趣味は読書、ままごとや…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/10/08/183215</id><title type="text">就職しました</title><updated>2015-10-08T18:32:15+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/10/08/183215"/><summary type="html">本日、Tsuru Capitalのポジションを得ました。 Tsuru Capitalはデリバティブの取引を行っている企業で、自動株取引の会社ではありません。取引に関わっている10人のメンバーのうち、創始者であるSimonを除く全員がHaskellerで、取引状況の分析や一部の取引の自動化など、あらゆるところにHaskellを使っているのが大きな特徴です。日本では数少ない、Haskellをメインに使っている企業の一つでもあります。 東京、シンガポール、バンクーバーにオフィスがあり、東京には私を含む5人の開発者と事務担当、Simonと愛犬テトがいます。 オフィスはオランダヒルズ森タワーRoPにあり…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/09/ssh-opensshssh-agent.html</id><title type="text">[ssh] OpenSSHのアップデートでssh-agentがパスワードを覚えてくれなくなった問題への対処</title><updated>2015-09-06T00:44:24.703+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/09/ssh-opensshssh-agent.html"/><summary type="text">ssh-agent/ssh-addを利用してsshを用いたサーバーへのログイン時のパスワード入力を省略している方、OpenSSHのアップデートにより、毎回パスワード入力を求められるようになった場合は以下の設定を疑ってみてください。


問題の症状：
OpenSSHパッケージを最新版にアップデートすると発生するようになった問題です。ssh-agentを起動してssh-addで鍵を正しく登録しているにも関わらず、sshコマンドを実行する度に"password:"というプロンプトが表示されてパスワードの入力を求められてしまいます。


環境：
問題に遭遇＆解決した私のcygwin環境では以下のバージョンで問題が発生することを確認しました。

OpenSSH_7.0p1, OpenSSL 1.0.2d 9 Jul 2015
OpenSSH_7.1p1, OpenSSL 1.0.2d 9 Jul </summary></entry><entry><id>https://kurokawh.blogspot.com/2015/09/cygwin-cygwinx-serverxwin.html</id><title type="text">[cygwin] cygwin版X server（XWin）にリモートクライアントから接続できない問題の対処方法</title><updated>2015-09-02T23:09:07.989+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/09/cygwin-cygwinx-serverxwin.html"/><summary type="text">cygwinを最新バージョンにアップデートしたところ、リモートのX clientからwindows上のcygwin版X serverに接続できなくなってしまいました。
対処方法は簡単でXWin起動時に"-listen tcp"オプションを付けてあげればよいだけです。cygwinバージョンアップ前にはオプション指定なしで接続できていたため、デフォルトの設定が変わったのだと思われます。


cygwin環境：
uname -aで表示されるcygwinバージョン情報です。

% uname -a
CYGWIN_NT-6.1 xxx 2.2.1(0.289/5/3) 2015-08-20 11:42 x86_64 Cygwin



問題発生時の症状：
クライアント側で起動したxtermをサーバー側で表示しようとすると、以下のようなエラーになっていました。
% xterm
xterm Xt </summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/08/30/210019</id><title type="text">カリー化</title><updated>2015-08-30T21:00:19+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/08/30/210019"/><summary type="html">鍋にオリーブオイルを入れる。 にんにくを細切りにし、入れる。しょうがを少しすりおろす。いつもの流れである。 玉ねぎの半分をみじん切りにし、鍋に入れ、しばらく炒める。 キャベツ、にんじん、ヒラタケ、残りの玉ねぎ、じゃがいも(皮ごと)を大き目に切り、蓋をしつつ少し間隔を置いて順に入れる。 しばらくしたあと、鶏肉を入れる。少量のクレイジーソルトとバターも入れた。 水は少しだけ加え、他は素材の水分に頼る。Vita Craftの性能に期待を寄せる。 ビタクラフトオフィシャルサイト｜全面多層鍋の無水調理で実証www.vitacraft.co.jp 市販のカレールウをある程度分割し、まぶすように入れる。6分…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/08/23/145932</id><title type="text">最近作った料理(簡単さ順)</title><updated>2015-08-23T14:59:32+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/08/23/145932"/><summary type="html">面倒なので写真はなし。 ミニマリスティック卵スープ 鍋で水を沸かす。 創味シャンタンを1人あたり小さじ半分ほど入れる。塩で味を補う。 溶き卵を乱暴に投入する。 賞味期限の近い具材を消費するためのチャーハン ごま油とサラダ油を強火で熱したフライパンに入れる。 溶き卵を乱暴に投入する。 数秒後にご飯を投入する。 ねぎと薄く切ったにんにくを入れる。 創味シャンタンを小さじ半分入れる。 適当な具材を入れる。賞味期限が切れそうだったソーセージとキムチを入れた。 醤油と黒胡椒で味を調える。 牛丼 ごま油とサラダ油をフライパンに入れる。 みじん切りにしたにんにく、少量のおろししょうがを加える。 ここで七味唐…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/08/cygwinemacs-cygwinemacsgtags.html</id><title type="text">[cygwin][emacs] cygwin版emacsでgtagsを使えるようにする方法</title><updated>2015-08-17T00:49:02.649+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/08/cygwinemacs-cygwinemacsgtags.html"/><summary type="text">これまでタグジャンプにはctagsを用いていたのですが、gtagsの「呼び出し元も一覧できる」という機能に惹かれてセットアップしてみました。いくつかはまりポイントがあったのでその対応方法も含め、手順を残しておきます。
cgwin提供のパッケージにはgtagsは含まれていなかったため、自前でビルドすることにしました。


目次：

gatgsの特徴
gtagsのインストール手順
emacsの設定
gtagsの使い方




gtagsの特徴：

良い点！

関数の呼び出し元を一覧表示しジャンプできる（gtags-find-rtag）
関数だけでなく、ローカル変数を含む任意のシンボルをタグジャンプできる（gtags-find-symbol）

正規表現で一覧絞り込み可能（gtags-find-pattern）
開いているファイルで絞り込み可能（gtags-parsefiile）

特定文字列</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/07/14/223329</id><title type="text">lensパッケージのオプティクス(弱い順)</title><updated>2015-07-14T22:33:29+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/07/14/223329"/><summary type="html">lensではオプティクスと呼ばれる様々な構造が定義されている。これらの関係を把握していれば、ドキュメントから欲しいものを見つけるのが楽になる。この記事では弱い順にオプティックの数々を紹介していく。 Fold type Fold s a = forall f. (Applicative f, Contravariant f) =&gt; (a -&gt; f a) -&gt; s -&gt; f s Contravariantがついているのでわかりにくいが、これは本質的に以下の型と等価だ。mappendは*&gt;、memptyはfmap absurd $ contramap absurd $ pure ()に相当する。 t…</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/06/subversion.html</id><title type="text">[subversion] 特定ディレクトリ以下をサーバーとの同期対象から除外する方法</title><updated>2015-06-26T13:55:24.651+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/06/subversion.html"/><summary type="text">subversionでチェックアウトした作業コピー内の特定ディレクトリ以下をサーバーとの同期対象から除外したい、ということを考えたことはないでしょうか。
例えば、リポジトリの特定ディレクトリ以下に自分にとって不要なファイルやアーカイブが多数コミットされていると、以下のような無駄が生じます。これらの無駄をなくしたい、というのが主なユースケースです。

不要なファイル・アーカイブによってディスクスペースが占有される
サーバー上に更新が発生した際にupdateに余計な時間がかかってしまう



単純に特定ディレクトリ以下の作業ファイルを削除してしまうと、コミット時に差分として検知されてしまう、また、次回以降のupdateコマンドで再ダウンロードされてしまう、という非常に残念な挙動になります。

このようなケースでは以下の方法を使えば、差分が検知されない状態で所定ディレクトリ以下のファイルを削除</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/06/22/162833</id><title type="text">Haskellの型クラスを活用する</title><updated>2015-06-22T16:30:14+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/06/22/162833"/><summary type="html">Haskellの型クラスは、うまく使えば高いパフォーマンスと抽象度を両立できる、優れた仕組みである。その使い方のコツは、決して理解の難しいものではない。 小さな性質、大きな恩恵 プログラマは大きなものを小さく見せがちだ。オブジェクト指向プログラミングに慣れている人がやりがちなアンチパターンとして、欲しい機能と、それを分割する基準が現実に寄りすぎていて、一つ一つが巨大というものがある。 普通のプログラミングではありえない例かもしれないが、たとえば家を作りたいことを考える。「ベッド」「箪笥」「台所」「冷蔵庫」「トイレ」「風呂」のように設備ごとに分けた抽象化をしたいと考えるだろう。確かにこれは理に適…</summary></entry><entry><id>http://lotz84.github.io/posts/published_haskell_by_example.html</id><title type="text">Haskell by Exampleを公開しました</title><updated>2015-05-06T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/published_haskell_by_example.html"/><summary type="html"></summary></entry><entry><id>http://lotz84.github.io/posts/build-chat-server-on-haskell.html</id><title type="text">Haskellでチャットサーバーを建ててみた</title><updated>2015-04-27T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/build-chat-server-on-haskell.html"/><summary type="html"></summary></entry><entry><id>http://lotz84.github.io/posts/unity-hands-on-session-at-camphor.html</id><title type="text">Unityハンズオン勉強会に参加しました@CAMPHOR-</title><updated>2015-04-25T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/unity-hands-on-session-at-camphor.html"/><summary type="html"></summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/04/17/125213</id><title type="text">最近やったこと</title><updated>2015-04-20T18:52:24+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/04/17/125213"/><summary type="html">最近やったことのまとめ。 CPSのモナド変換子 モナド変換子の速さを測ってみる - モナドとわたしとコモナドfumieval.hatenablog.com で作ったmtl-cの塵を払い、Hackageにリリースした。 StateTやWriterTは中でタプルを作ったり壊したりしているが、CPS変換するとそれがなくなり、しかも(&gt;&gt;=)も最適化されるためそれなりのパフォーマンスの向上が期待できる。モナドガチユーザにおすすめだ。 補足 GHC 7.10.1現在、StateTに関しては最適化がうまく効くらしく、Lazy、Strict、CPS版のパフォーマンスはほぼ同じだった。一方、CPS版Write…</summary></entry><entry><id>http://fumieval.hatenablog.com/entry/2015/04/06/173848</id><title type="text">Haskellでいかに多態を表すか</title><updated>2015-04-06T17:46:12+09:00</updated><author><name>Fumiaki Kinoshita</name></author><link href="http://fumieval.hatenablog.com/entry/2015/04/06/173848"/><summary type="html">オブジェクト指向を行使する心 ではオブジェクト指向の必要性と仕組みについて議論した。 インスタンスは言語によって様々な実装方法があるが、大きく分けて「クラス(処理)のインデックス」か「処理そのもの」のどちらかがインスタンスの内部に隠れている。 と述べたが、Haskellの場合、クラスのインデックスに基づいた表現では、インターフェイスは型クラス、クラスはインスタンス、インスタンスは存在量化された型の値に対応する。…といってもややこしいことこの上ないので、実装例を考えてみよう。 まず、問題となっている愚直な実装は、Haskellではこんな感じだ。 data World = World { … } …</summary></entry><entry><id>https://kurokawh.blogspot.com/2015/04/windowshaskell-widnwoshaskell-platform.html</id><title type="text">[windows][haskell] Widnwos環境でHaskell Platformを完全削除する方法</title><updated>2015-04-05T01:53:40.022+09:00</updated><author><name>Hiroyuki Kurokawa (hrkr)</name></author><link href="https://kurokawh.blogspot.com/2015/04/windowshaskell-widnwoshaskell-platform.html"/><summary type="text">Windows上でHaskell Platformを完全削除する方法です。
LinuxやMac環境についてはネット上に多数情報がありますが、Windows環境についてはそれが見当たらなかったため、本エントリにまとめておきます。確認した環境はWindows 8.1＋Haslell Platform 2014.2.0.0です。


削除手順：
Windows環境では以下の手順でHaskell Platformを完全に削除できます。

Haskell Platformのアンインストール

[コントロールパネル] - [プログラム] - [プログラムと機能]を開く
"Haslell Platform 2014.2.0.0"を選択して[アンインストール]を実行

ユーザー領域に作成されたパッケージ関連ファイルの削除

手動（エクスプローラ、rmコマンドなど）で次の２つのディレクトリ以下を完全に削除</summary></entry><entry><id>http://lotz84.github.io/posts/the-way-of-separate-compilation-in-swift.html</id><title type="text">Swift で分割コンパイルする方法</title><updated>2015-02-07T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/the-way-of-separate-compilation-in-swift.html"/><summary type="html"></summary></entry><entry><id>http://lotz84.github.io/posts/use-selenium-by-haskell.html</id><title type="text">HaskellでSeleniumを使ってみる＠勉強会</title><updated>2014-12-14T00:00:00Z</updated><author><name>lotz</name></author><link href="http://lotz84.github.io/posts/use-selenium-by-haskell.html"/><summary type="html"></summary></entry></feed>